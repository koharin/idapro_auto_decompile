{
    "decompileResult": [
        {
            "decompiledFuncCode": "void __noreturn sub_4180()\n{\n  __assert_fail(\"str\", \"./include/xalloc.h\", 0x4Au, \"xstrdup\");\n}\n", 
            "funcStartAddr": "0x4180L", 
            "funcEndAddr": "0x41a3L", 
            "funcName": "sub_4180"
        }, 
        {
            "decompiledFuncCode": "void __fastcall __noreturn sub_41A3(unsigned int a1)\n{\n  err(1, \"%s: %u: cannot allocate memory\", \"sys-utils/lsipc.c\", a1);\n}\n", 
            "funcStartAddr": "0x41a3L", 
            "funcEndAddr": "0x41c3L", 
            "funcName": "sub_41A3"
        }, 
        {
            "decompiledFuncCode": "void __noreturn sub_41C3()\n{\n  char *v0; // rax\n\n  v0 = dcgettext(0LL, \"too many columns specified, the limit is %zu columns\", 5);\n  errx(1, v0, 67LL);\n}\n", 
            "funcStartAddr": "0x41c3L", 
            "funcEndAddr": "0x41eeL", 
            "funcName": "sub_41C3"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall main(int a1, char **a2, char **a3)\n{\n  char **v3; // r13\n  int v4; // er12\n  _BYTE *v5; // rax\n  _BYTE *v6; // r15\n  signed __int64 v7; // rcx\n  char *v8; // rdi\n  unsigned __int64 v9; // rsi\n  int v10; // eax\n  void **v11; // r8\n  char *v12; // rcx\n  signed int v13; // edx\n  int *v14; // rsi\n  int v15; // edx\n  char *v16; // rax\n  __int64 v17; // rax\n  unsigned __int64 v18; // rcx\n  bool v19; // cf\n  bool v20; // zf\n  unsigned __int64 v21; // rdx\n  unsigned __int64 v22; // rcx\n  unsigned __int64 v23; // rdx\n  __int64 v24; // rax\n  unsigned __int64 v25; // rdx\n  unsigned __int64 v26; // rcx\n  unsigned __int64 v27; // rdx\n  unsigned __int64 v28; // rcx\n  unsigned __int64 v29; // rdx\n  unsigned __int64 v30; // rcx\n  unsigned __int64 v31; // rdx\n  __int64 v32; // rax\n  unsigned __int64 v33; // rcx\n  unsigned __int64 v34; // rdx\n  unsigned __int64 v35; // rcx\n  unsigned __int64 v36; // rdx\n  unsigned __int64 v37; // rcx\n  unsigned __int64 v38; // rdx\n  unsigned __int64 v39; // rcx\n  unsigned __int64 v40; // rdx\n  unsigned __int64 v41; // rcx\n  unsigned __int64 v42; // rdx\n  char *v43; // rax\n  __int64 v44; // rbx\n  char *v45; // rax\n  __int64 v46; // r8\n  __int64 v47; // r9\n  __int64 v48; // rbx\n  char *v49; // rax\n  __int64 v50; // rcx\n  __int64 v51; // rbx\n  __int64 v52; // rcx\n  char *v53; // rdx\n  struct option *v54; // rax\n  int v55; // edx\n  char v56; // al\n  char v57; // al\n  __int64 v58; // rax\n  unsigned __int64 v59; // rcx\n  unsigned __int64 v60; // rcx\n  __int64 v61; // rax\n  unsigned __int64 v62; // rcx\n  unsigned __int64 v63; // rdx\n  unsigned __int64 v64; // rdi\n  unsigned __int64 v65; // rcx\n  __int64 v66; // rax\n  unsigned __int64 v67; // rdx\n  unsigned __int64 v68; // rbx\n  __int64 v69; // rdx\n  __int64 v70; // r14\n  __int64 v71; // rax\n  unsigned __int64 v72; // rdx\n  char **v73; // rax\n  __int128 v74; // xmm0\n  __int64 v75; // r12\n  signed __int64 result; // rax\n  __int64 v77; // rdx\n  unsigned __int64 v78; // rsi\n  unsigned __int64 v79; // rcx\n  unsigned __int64 v80; // rcx\n  signed __int64 v81; // rax\n  __int64 v82; // rdx\n  char *v83; // rax\n  int v84; // er12\n  int v85; // ebx\n  _QWORD *v86; // rax\n  __int64 v87; // r12\n  __int64 v88; // r14\n  __int64 v89; // r13\n  _QWORD *j; // rax\n  __int64 v91; // r12\n  int v92; // ebp\n  int v93; // ebx\n  _QWORD *v94; // rax\n  char *v95; // rax\n  __int64 v96; // rbp\n  __int64 v97; // r14\n  __int64 v98; // r13\n  __int64 v99; // ST20_8\n  __int64 v100; // r9\n  signed __int64 v101; // rcx\n  char *v102; // rdi\n  __int64 v103; // rbx\n  char *v104; // rax\n  __int64 v105; // rdx\n  __int64 v106; // rcx\n  __int64 v107; // r8\n  __int64 v108; // r9\n  unsigned int *i; // r12\n  __int64 v110; // r13\n  __uid_t v111; // edi\n  __gid_t v112; // edi\n  unsigned __int64 v113; // rbx\n  __int64 v114; // rdx\n  int v115; // eax\n  __int64 v116; // rdx\n  __int64 v117; // rax\n  __int64 v118; // rdx\n  __int64 v119; // rdx\n  __int64 v120; // rdx\n  __int64 v121; // rdx\n  __int64 v122; // rdx\n  __int64 v123; // rdx\n  __int64 v124; // rdx\n  void *v125; // rax\n  unsigned int v126; // edi\n  _BYTE *v127; // r13\n  unsigned int *v128; // r14\n  __int64 v129; // r15\n  unsigned __int64 v130; // rbx\n  __int64 v131; // rdx\n  char v132; // di\n  int v133; // eax\n  __int64 v134; // rdx\n  __int64 v135; // rdx\n  void *v136; // rax\n  __int64 v137; // rdx\n  __int64 v138; // rdx\n  __int64 v139; // rdx\n  __int64 v140; // rax\n  unsigned __int64 v141; // kr08_8\n  unsigned __int64 v142; // kr10_8\n  unsigned __int64 v143; // kr18_8\n  char *v144; // rax\n  signed __int64 v145; // rcx\n  char *v146; // rdi\n  size_t v147; // r12\n  void *v148; // rax\n  __int64 v149; // rdx\n  __int64 v150; // rdx\n  __int64 v151; // rdx\n  unsigned int v152; // eax\n  signed __int64 v153; // rcx\n  signed __int64 v154; // ST48_8\n  char *v155; // rax\n  void *v156; // rax\n  unsigned int v157; // edi\n  signed int v158; // er12\n  signed __int64 v159; // ST48_8\n  char *v160; // rax\n  char *v161; // rax\n  unsigned int v162; // eax\n  char *v163; // rax\n  unsigned int v164; // eax\n  signed __int64 v165; // r12\n  char *v166; // rax\n  __int64 v167; // rcx\n  FILE *v168; // rbx\n  char *v169; // rax\n  __int64 v170; // rbp\n  char *v171; // rax\n  char *v172; // rax\n  char *v173; // rax\n  char *v174; // rax\n  char *v175; // rax\n  char *v176; // rax\n  char *v177; // rax\n  char *v178; // rax\n  char *v179; // rax\n  char *v180; // rax\n  char *v181; // rax\n  char *v182; // rax\n  char *v183; // rax\n  char *v184; // rax\n  char *v185; // rax\n  char *v186; // rax\n  char *v187; // rax\n  char *v188; // rax\n  char *v189; // rax\n  char *v190; // rax\n  char *v191; // rax\n  char *v192; // rax\n  char *v193; // rax\n  char *v194; // rbp\n  char *v195; // rax\n  char *v196; // r9\n  __int64 v197; // rbp\n  char *v198; // rax\n  __int64 v199; // rcx\n  char *v200; // rcx\n  __int64 v201; // rbp\n  char *v202; // rax\n  __int64 v203; // rcx\n  char *v204; // rcx\n  __int64 v205; // rbp\n  char *v206; // rax\n  __int64 v207; // rcx\n  char *v208; // rcx\n  __int64 v209; // rbp\n  char *v210; // rax\n  __int64 v211; // rcx\n  char *v212; // rax\n  __int64 v213; // rcx\n  char *v214; // rcx\n  char *v215; // rax\n  __int64 v216; // rcx\n  __int64 v217; // r8\n  __int64 v218; // r9\n  __int64 v219; // rbx\n  char *v220; // rax\n  char *v221; // rax\n  const char *v222; // rsi\n  char *v223; // rax\n  __int64 msqid; // [rsp+0h] [rbp-138h]\n  void **msqida; // [rsp+0h] [rbp-138h]\n  signed int v226; // [rsp+8h] [rbp-130h]\n  char *v227; // [rsp+8h] [rbp-130h]\n  signed int v228; // [rsp+14h] [rbp-124h]\n  signed int v229; // [rsp+18h] [rbp-120h]\n  __int64 v230; // [rsp+18h] [rbp-120h]\n  signed int v231; // [rsp+20h] [rbp-118h]\n  signed int v232; // [rsp+28h] [rbp-110h]\n  signed int v233; // [rsp+30h] [rbp-108h]\n  char *v234; // [rsp+38h] [rbp-100h]\n  char *s2; // [rsp+40h] [rbp-F8h]\n  bool s2a; // [rsp+40h] [rbp-F8h]\n  struct passwd *v237; // [rsp+58h] [rbp-E0h]\n  struct group *v238; // [rsp+60h] [rbp-D8h]\n  unsigned int *v239; // [rsp+68h] [rbp-D0h]\n  __int64 v240; // [rsp+70h] [rbp-C8h]\n  __int64 v241; // [rsp+78h] [rbp-C0h]\n  __int64 v242; // [rsp+80h] [rbp-B8h]\n  void *v243; // [rsp+88h] [rbp-B0h]\n  void *ptr; // [rsp+90h] [rbp-A8h]\n  char v245; // [rsp+E0h] [rbp-58h]\n  unsigned __int64 v246; // [rsp+F8h] [rbp-40h]\n\n  v3 = a2;\n  v4 = a1;\n  v246 = __readfsqword(0x28u);\n  v5 = calloc(1uLL, 8uLL);\n  if ( !v5 )\n    err(1, \"cannot allocate %zu bytes\", 8LL);\n  v6 = v5;\n  v7 = 5LL;\n  v8 = &v245;\n  while ( v7 )\n  {\n    *(_DWORD *)v8 = 0;\n    v8 += 4;\n    --v7;\n  }\n  setlocale(6, \"\");\n  bindtextdomain(\"util-linux\", \"/usr/share/locale\");\n  textdomain(\"util-linux\");\n  sub_10E60(sub_73E0, \"/usr/share/locale\");\n  v6[4] &= 0x9Fu;\n  scols_init_debug(0LL);\n  v234 = 0LL;\n  v232 = 0;\n  v233 = 0;\n  v229 = 0;\n  LODWORD(msqid) = -1;\n  v228 = 0;\n  v226 = 0;\n  v231 = 0;\n  while ( 1 )\n  {\n    v9 = (unsigned __int64)v3;\n    v10 = getopt_long(v4, v3, \"bceghi:Jlmno:PqrstVy\", &longopts, 0LL);\n    if ( v10 == -1 )\n      break;\n    if ( v10 > 73 )\n    {\n      v11 = &off_12100;\n      v12 = &v245;\n      v13 = 74;\n      do\n      {\n        if ( v10 >= v13 )\n        {\n          if ( v10 == v13 )\n          {\nLABEL_16:\n            if ( *(_DWORD *)v12 )\n            {\n              if ( v10 != *(_DWORD *)v12 )\n              {\n                v48 = program_invocation_short_name;\n                msqida = v11;\n                v49 = dcgettext(0LL, \"%s: mutually exclusive arguments:\", 5);\n                v50 = v48;\n                v51 = 0LL;\n                __fprintf_chk(stderr, 1LL, v49, v50);\n                do\n                {\n                  v52 = *(unsigned int *)((char *)msqida + v51);\n                  if ( !(_DWORD)v52 )\n                    break;\n                  v53 = \"bytes\";\n                  v54 = &longopts;\n                  do\n                  {\n                    if ( (_DWORD)v52 == v54->val )\n                    {\n                      __fprintf_chk(stderr, 1LL, \" --%s\", v53);\n                      goto LABEL_76;\n                    }\n                    ++v54;\n                    v53 = (char *)v54->name;\n                  }\n                  while ( v54->name );\n                  if ( (unsigned int)(v52 - 33) <= 0x5D )\n                    __fprintf_chk(stderr, 1LL, \" -%c\", v52);\nLABEL_76:\n                  v51 += 4LL;\n                }\n                while ( v51 != 60 );\n                fputc(10, stderr);\n                exit(1);\n              }\n            }\n            else\n            {\n              *(_DWORD *)v12 = v10;\n            }\n          }\n          else\n          {\n            v14 = (int *)v11;\n            while ( 1 )\n            {\n              ++v14;\n              v15 = *v14;\n              if ( v10 < *v14 || !v15 )\n                break;\n              if ( v10 == v15 )\n                goto LABEL_16;\n            }\n          }\n        }\n        v11 += 8;\n        v13 = *(_DWORD *)v11;\n        v12 += 4;\n      }\n      while ( v10 >= *(_DWORD *)v11 && v13 );\n    }\n    switch ( v10 )\n    {\n      case 74:\n        *(_DWORD *)v6 = 4;\n        continue;\n      case 80:\n        v6[4] |= 0x10u;\n        continue;\n      case 86:\n        v44 = program_invocation_short_name;\n        v45 = dcgettext(0LL, \"%s from %s\\n\", 5);\n        __printf_chk(1LL, v45, v44, \"util-linux 2.38.84-ef7d\", v46, v47);\n        exit(0);\n        return result;\n      case 98:\n        v6[4] |= 8u;\n        continue;\n      case 99:\n        v233 = 1;\n        continue;\n      case 101:\n        *(_DWORD *)v6 = 1;\n        continue;\n      case 103:\n        v232 = 1;\n        continue;\n      case 104:\n        v168 = stdout;\n        v169 = dcgettext(0LL, \"\\nUsage:\\n\", 5);\n        fputs(v169, v168);\n        v170 = program_invocation_short_name;\n        v171 = dcgettext(0LL, \" %s [options]\\n\", 5);\n        __fprintf_chk(v168, 1LL, v171, v170);\n        fputc(10, v168);\n        v172 = dcgettext(0LL, \"Show information on IPC facilities.\\n\", 5);\n        fputs(v172, v168);\n        fputc(10, v168);\n        v173 = dcgettext(0LL, \"Resource options:\\n\", 5);\n        fputs(v173, v168);\n        v174 = dcgettext(0LL, \" -m, --shmems      shared memory segments\\n\", 5);\n        fputs(v174, v168);\n        v175 = dcgettext(0LL, \" -q, --queues      message queues\\n\", 5);\n        fputs(v175, v168);\n        v176 = dcgettext(0LL, \" -s, --semaphores  semaphores\\n\", 5);\n        fputs(v176, v168);\n        v177 = dcgettext(0LL, \" -g, --global      info about system-wide usage (may be used with -m, -q and -s)\\n\", 5);\n        fputs(v177, v168);\n        v178 = dcgettext(0LL, \" -i, --id <id>     print details on resource identified by <id>\\n\", 5);\n        fputs(v178, v168);\n        v179 = dcgettext(0LL, \"\\nOptions:\\n\", 5);\n        fputs(v179, v168);\n        v180 = dcgettext(0LL, \"     --noheadings         don't print headings\\n\", 5);\n        fputs(v180, v168);\n        v181 = dcgettext(0LL, \"     --notruncate         don't truncate output\\n\", 5);\n        fputs(v181, v168);\n        v182 = dcgettext(0LL, \"     --time-format=<type> display dates in short, full or iso format\\n\", 5);\n        fputs(v182, v168);\n        v183 = dcgettext(0LL, \" -b, --bytes              print SIZE in bytes rather than in human readable format\\n\", 5);\n        fputs(v183, v168);\n        v184 = dcgettext(0LL, \" -c, --creator            show creator and owner\\n\", 5);\n        fputs(v184, v168);\n        v185 = dcgettext(0LL, \" -e, --export             display in an export-able output format\\n\", 5);\n        fputs(v185, v168);\n        v186 = dcgettext(0LL, \" -J, --json               use the JSON output format\\n\", 5);\n        fputs(v186, v168);\n        v187 = dcgettext(0LL, \" -n, --newline            display each piece of information on a new line\\n\", 5);\n        fputs(v187, v168);\n        v188 = dcgettext(0LL, \" -l, --list               force list output format (for example with --id)\\n\", 5);\n        fputs(v188, v168);\n        v189 = dcgettext(0LL, \" -o, --output[=<list>]    define the columns to output\\n\", 5);\n        fputs(v189, v168);\n        v190 = dcgettext(0LL, \" -P, --numeric-perms      print numeric permissions (PERMS column)\\n\", 5);\n        fputs(v190, v168);\n        v191 = dcgettext(0LL, \" -r, --raw                display in raw mode\\n\", 5);\n        fputs(v191, v168);\n        v192 = dcgettext(0LL, \" -t, --time               show attach, detach and change times\\n\", 5);\n        fputs(v192, v168);\n        v193 = dcgettext(\n                 0LL,\n                 \" -y, --shell              use column names to be usable as shell variable identifiers\\n\",\n                 5);\n        fputs(v193, v168);\n        fputc(10, v168);\n        v194 = dcgettext(0LL, \"display version\", 5);\n        v195 = dcgettext(0LL, \"display this help\", 5);\n        v196 = v194;\n        v197 = 0LL;\n        __printf_chk(1LL, \"%-26s%s\\n%-26s%s\\n\", \" -h, --help\", v195, \" -V, --version\", v196);\n        v198 = dcgettext(0LL, \"\\nGeneric columns:\\n\", 5);\n        __fprintf_chk(v168, 1LL, v198, v199);\n        do\n        {\n          dcgettext(0LL, off_216148[v197], 5);\n          v200 = off_216148[v197 - 1];\n          v197 += 5LL;\n          __fprintf_chk(v168, 1LL, \" %14s  %s\\n\", v200);\n        }\n        while ( v197 != 65 );\n        v201 = 0LL;\n        v202 = dcgettext(0LL, \"\\nShared-memory columns (--shmems):\\n\", 5);\n        __fprintf_chk(v168, 1LL, v202, v203);\n        do\n        {\n          dcgettext(0LL, off_216440[v201], 5);\n          v204 = off_216440[v201 - 1];\n          v201 += 5LL;\n          __fprintf_chk(v168, 1LL, \" %14s  %s\\n\", v204);\n        }\n        while ( v201 != 40 );\n        v205 = 0LL;\n        v206 = dcgettext(0LL, \"\\nMessage-queue columns (--queues):\\n\", 5);\n        __fprintf_chk(v168, 1LL, v206, v207);\n        do\n        {\n          dcgettext(0LL, off_216350[v205], 5);\n          v208 = off_216350[v205 - 1];\n          v205 += 5LL;\n          __fprintf_chk(v168, 1LL, \" %14s  %s\\n\", v208);\n        }\n        while ( v205 != 30 );\n        v209 = 0LL;\n        v210 = dcgettext(0LL, \"\\nSemaphore columns (--semaphores):\\n\", 5);\n        __fprintf_chk(v168, 1LL, v210, v211);\n        dcgettext(0LL, aNumberOf, 5);\n        __fprintf_chk(v168, 1LL, \" %14s  %s\\n\", \"NSEMS\");\n        dcgettext(0LL, \"Time of the last operation\", 5);\n        __fprintf_chk(v168, 1LL, \" %14s  %s\\n\", \"OTIME\");\n        v212 = dcgettext(0LL, \"\\nSummary columns (--global):\\n\", 5);\n        __fprintf_chk(v168, 1LL, v212, v213);\n        do\n        {\n          dcgettext(0LL, off_2165D0[v209], 5);\n          v214 = off_2165D0[v209 - 1];\n          v209 += 5LL;\n          __fprintf_chk(v168, 1LL, \" %14s  %s\\n\", v214);\n        }\n        while ( v209 != 25 );\n        v215 = dcgettext(0LL, \"\\nFor more details see %s.\\n\", 5);\n        __printf_chk(1LL, v215, \"lsipc(1)\", v216, v217, v218);\n        exit(0);\n        return result;\n      case 105:\n        v43 = dcgettext(0LL, \"failed to parse IPC identifier\", 5);\n        LODWORD(msqid) = sub_9230(optarg, 10LL, v43, -2147483648LL, 0x7FFFFFFFLL);\n        continue;\n      case 108:\n        *(_DWORD *)v6 = 6;\n        continue;\n      case 109:\n        v32 = qword_217080;\n        v33 = qword_217080 + 1;\n        v19 = (unsigned __int64)qword_217080 < 0x43;\n        v20 = qword_217080++ == 67;\n        if ( !v19 && !v20 )\n          goto LABEL_338;\n        v34 = v32 + 2;\n        dword_2170A0[v32] = 0;\n        qword_217080 = v32 + 2;\n        if ( v33 > 0x43 )\n          goto LABEL_338;\n        dword_2170A0[v33] = 1;\n        v35 = v32 + 3;\n        qword_217080 = v32 + 3;\n        if ( v34 > 0x43 )\n          goto LABEL_338;\n        dword_2170A0[v34] = 3;\n        v36 = v32 + 4;\n        qword_217080 = v32 + 4;\n        if ( v35 > 0x43 )\n          goto LABEL_338;\n        dword_2170A0[v35] = 2;\n        v37 = v32 + 5;\n        qword_217080 = v32 + 5;\n        if ( v36 > 0x43 )\n          goto LABEL_338;\n        dword_2170A0[v36] = 19;\n        v38 = v32 + 6;\n        qword_217080 = v32 + 6;\n        if ( v37 > 0x43 )\n          goto LABEL_338;\n        dword_2170A0[v37] = 20;\n        v39 = v32 + 7;\n        qword_217080 = v32 + 7;\n        if ( v38 > 0x43 )\n          goto LABEL_338;\n        dword_2170A0[v38] = 21;\n        v40 = v32 + 8;\n        qword_217080 = v32 + 8;\n        if ( v39 > 0x43 )\n          goto LABEL_338;\n        dword_2170A0[v39] = 12;\n        v41 = v32 + 9;\n        qword_217080 = v32 + 9;\n        if ( v40 > 0x43 )\n          goto LABEL_338;\n        dword_2170A0[v40] = 25;\n        v42 = v32 + 10;\n        qword_217080 = v32 + 10;\n        if ( v41 > 0x43 )\n          goto LABEL_338;\n        dword_2170A0[v41] = 26;\n        qword_217080 = v32 + 11;\n        if ( v42 > 0x43 )\n          goto LABEL_338;\n        dword_2170A0[v42] = 24;\n        qword_2171B8 = 19LL;\n        qword_2171B0 = 26LL;\n        v228 = 1;\n        continue;\n      case 110:\n        *(_DWORD *)v6 = 2;\n        continue;\n      case 111:\n        v234 = optarg;\n        continue;\n      case 113:\n        v24 = qword_217080;\n        v25 = qword_217080 + 1;\n        v19 = (unsigned __int64)qword_217080 < 0x43;\n        v20 = qword_217080++ == 67;\n        if ( !v19 && !v20 )\n          goto LABEL_338;\n        v26 = v24 + 2;\n        dword_2170A0[v24] = 0;\n        qword_217080 = v24 + 2;\n        if ( v25 > 0x43 )\n          goto LABEL_338;\n        dword_2170A0[v25] = 1;\n        v27 = v24 + 3;\n        qword_217080 = v24 + 3;\n        if ( v26 > 0x43 )\n          goto LABEL_338;\n        dword_2170A0[v26] = 3;\n        v28 = v24 + 4;\n        qword_217080 = v24 + 4;\n        if ( v27 > 0x43 )\n          goto LABEL_338;\n        dword_2170A0[v27] = 2;\n        v29 = v24 + 5;\n        qword_217080 = v24 + 5;\n        if ( v28 > 0x43 )\n          goto LABEL_338;\n        dword_2170A0[v28] = 13;\n        v30 = v24 + 6;\n        qword_217080 = v24 + 6;\n        if ( v29 > 0x43 )\n          goto LABEL_338;\n        dword_2170A0[v29] = 14;\n        v31 = v24 + 7;\n        qword_217080 = v24 + 7;\n        if ( v30 > 0x43 )\n          goto LABEL_338;\n        dword_2170A0[v30] = 17;\n        qword_217080 = v24 + 8;\n        if ( v31 > 0x43 )\n          goto LABEL_338;\n        dword_2170A0[v31] = 18;\n        qword_2171B8 = 13LL;\n        qword_2171B0 = 18LL;\n        v231 = 1;\n        continue;\n      case 114:\n        *(_DWORD *)v6 = 3;\n        continue;\n      case 115:\n        v17 = qword_217080;\n        v18 = qword_217080 + 1;\n        v19 = (unsigned __int64)qword_217080 < 0x43;\n        v20 = qword_217080++ == 67;\n        if ( !v19 && !v20 )\n          goto LABEL_338;\n        v21 = v17 + 2;\n        dword_2170A0[v17] = 0;\n        qword_217080 = v17 + 2;\n        if ( v18 > 0x43 )\n          goto LABEL_338;\n        dword_2170A0[v18] = 1;\n        v22 = v17 + 3;\n        qword_217080 = v17 + 3;\n        if ( v21 > 0x43 )\n          goto LABEL_338;\n        dword_2170A0[v21] = 3;\n        v23 = v17 + 4;\n        qword_217080 = v17 + 4;\n        if ( v22 > 0x43 )\n          goto LABEL_338;\n        dword_2170A0[v22] = 2;\n        qword_217080 = v17 + 5;\n        if ( v23 > 0x43 )\n          goto LABEL_338;\n        dword_2170A0[v23] = 27;\n        qword_2171B8 = 27LL;\n        qword_2171B0 = 28LL;\n        v226 = 1;\n        break;\n      case 116:\n        v229 = 1;\n        break;\n      case 121:\n        v6[4] |= 4u;\n        break;\n      case 128:\n        v6[4] |= 2u;\n        break;\n      case 129:\n        v6[4] |= 1u;\n        break;\n      case 130:\n        s2 = optarg;\n        if ( !strcmp(\"iso\", optarg) )\n        {\n          v81 = 0LL;\n        }\n        else if ( !strcmp(\"full\", s2) )\n        {\n          v81 = 1LL;\n        }\n        else\n        {\n          if ( strcmp(\"short\", s2) )\n          {\n            v16 = dcgettext(0LL, \"unknown time format: %s\", 5);\n            errx(1, v16, s2, msqid);\n          }\n          v81 = 2LL;\n        }\n        v6[4] = 32 * (off_215E40[16 * v81 + 8] & 3) | v6[4] & 0x9F;\n        break;\n      default:\n        v219 = program_invocation_short_name;\n        v220 = dcgettext(0LL, \"Try '%s --help' for more information.\\n\", 5);\n        __fprintf_chk(stderr, 1LL, v220, v219);\n        exit(1);\n        return result;\n    }\n  }\n  if ( v226 + v228 + v231 )\n  {\n    if ( !v232 )\n      goto LABEL_81;\n  }\n  else\n  {\n    if ( (unsigned __int8)v233 | (unsigned __int8)v229 || (_DWORD)msqid != -1 )\n    {\n      v221 = dcgettext(0LL, \"--global is mutually exclusive with --creator, --id and --time\", 5);\n      errx(1, v221, msqid);\n    }\n    v228 = 1;\n    v226 = 1;\n    v231 = 1;\n  }\n  v77 = qword_217080;\n  v78 = qword_217080 + 1;\n  v19 = (unsigned __int64)qword_217080 < 0x43;\n  v20 = qword_217080++ == 67;\n  if ( !v19 && !v20 )\n    goto LABEL_338;\n  v79 = v77 + 2;\n  dword_2170A0[v77] = 29;\n  qword_217080 = v77 + 2;\n  if ( v78 > 0x43 )\n    goto LABEL_338;\n  dword_2170A0[v78] = 30;\n  v9 = v77 + 3;\n  qword_217080 = v77 + 3;\n  if ( v79 > 0x43 )\n    goto LABEL_338;\n  dword_2170A0[v79] = 31;\n  v80 = v77 + 4;\n  qword_217080 = v77 + 4;\n  if ( v9 > 0x43 )\n    goto LABEL_338;\n  dword_2170A0[v9] = 32;\n  qword_217080 = v77 + 5;\n  if ( v80 > 0x43 )\n    goto LABEL_338;\n  dword_2170A0[v80] = 33;\n  qword_2171B8 = 29LL;\n  qword_2171B0 = 33LL;\n  v232 = 1;\nLABEL_81:\n  v55 = *(_DWORD *)v6;\n  v56 = v6[4] & 0x60;\n  if ( (_DWORD)msqid == -1 || v55 )\n  {\n    if ( v56 )\n    {\nLABEL_86:\n      if ( *(_DWORD *)v6 != 5 )\n        goto LABEL_87;\n      goto LABEL_143;\n    }\n    if ( v55 != 5 )\n    {\n      v57 = 1;\n      goto LABEL_85;\n    }\nLABEL_84:\n    v57 = 2;\nLABEL_85:\n    v6[4] = 32 * v57 | v6[4] & 0x9F;\n    goto LABEL_86;\n  }\n  *(_DWORD *)v6 = 5;\n  if ( !v56 )\n    goto LABEL_84;\nLABEL_143:\n  if ( !optarg && !(v233 | v229) )\n  {\n    v82 = 0LL;\n    do\n    {\n      dword_2170A0[v82] = v82;\n      ++v82;\n    }\n    while ( v82 != 34 );\n    qword_217080 = 34LL;\n    goto LABEL_108;\n  }\nLABEL_87:\n  if ( v233 )\n  {\n    v58 = qword_217080;\n    v59 = qword_217080 + 1;\n    v19 = (unsigned __int64)qword_217080 < 0x43;\n    v20 = qword_217080++ == 67;\n    if ( !v19 && !v20 )\n      goto LABEL_338;\n    v9 = v58 + 2;\n    dword_2170A0[v58] = 4;\n    qword_217080 = v58 + 2;\n    if ( v59 > 0x43 )\n      goto LABEL_338;\n    dword_2170A0[v59] = 6;\n    v60 = v58 + 3;\n    qword_217080 = v58 + 3;\n    if ( v9 > 0x43 )\n      goto LABEL_338;\n    dword_2170A0[v9] = 8;\n    qword_217080 = v58 + 4;\n    if ( v60 > 0x43 )\n      goto LABEL_338;\n    dword_2170A0[v60] = 10;\n  }\n  if ( v231 & v229 )\n  {\n    v61 = qword_217080;\n    v9 = qword_217080 + 1;\n    v19 = (unsigned __int64)qword_217080 < 0x43;\n    v20 = qword_217080++ == 67;\n    if ( !v19 && !v20 )\n      goto LABEL_338;\n    v62 = v61 + 2;\n    dword_2170A0[v61] = 15;\n    qword_217080 = v61 + 2;\n    if ( v9 > 0x43 )\n      goto LABEL_338;\n    dword_2170A0[v9] = 16;\n    qword_217080 = v61 + 3;\n    if ( v62 > 0x43 )\n      goto LABEL_338;\n    dword_2170A0[v62] = 12;\n  }\n  if ( v228 & v229 )\n  {\n    v63 = qword_217080;\n    v9 = dword_2170A0[qword_217080 - 1];\n    if ( (_DWORD)v9 == 24 )\n      v63 = qword_217080 - 1;\n    v64 = v63 + 1;\n    qword_217080 = v63 + 1;\n    if ( v63 > 0x43 )\n      goto LABEL_338;\n    v65 = v63 + 2;\n    dword_2170A0[v63] = 22;\n    qword_217080 = v63 + 2;\n    if ( v64 > 0x43 )\n      goto LABEL_338;\n    dword_2170A0[v64] = 23;\n    if ( (_DWORD)v9 == 24 )\n    {\n      qword_217080 = v63 + 3;\n      if ( v65 > 0x43 )\n        goto LABEL_338;\n      dword_2170A0[v65] = 24;\n    }\n  }\n  if ( v226 & v229 )\n  {\n    v66 = qword_217080;\n    v67 = qword_217080 + 1;\n    v19 = (unsigned __int64)qword_217080 < 0x43;\n    v20 = qword_217080++ == 67;\n    if ( v19 || v20 )\n    {\n      dword_2170A0[v66] = 28;\n      qword_217080 = v66 + 2;\n      if ( v67 <= 0x43 )\n      {\n        dword_2170A0[v67] = 12;\n        goto LABEL_108;\n      }\n    }\nLABEL_338:\n    sub_41C3();\n  }\nLABEL_108:\n  if ( v234 )\n  {\n    v9 = (unsigned __int64)dword_2170A0;\n    if ( (signed int)sub_9DB0(v234, dword_2170A0, 68LL, &qword_217080, sub_66D0) < 0 )\n    {\nLABEL_142:\n      result = 1LL;\n      goto LABEL_125;\n    }\n  }\n  v68 = 0LL;\n  v70 = sub_6520(v6, v9);\n  while ( v68 < qword_217080 )\n  {\n    v71 = (signed int)sub_6780((unsigned int)v68);\n    v72 = (unsigned int)off_216140[5 * (signed int)v71 + 4];\n    if ( v6[4] & 2 )\n      v72 = (unsigned __int64)off_216140[5 * (signed int)v71 + 4] & 0xFFFFFFFE;\n    v73 = &off_216140[5 * v71];\n    v9 = (unsigned __int64)*v73;\n    v74 = (unsigned __int64)v73[3];\n    if ( !scols_table_new_column(v70, *v73, v72) )\n    {\n      scols_unref_table(v70);\n      qword_217060 = 0LL;\n      goto LABEL_142;\n    }\n    ++v68;\n  }\n  qword_217060 = v70;\n  if ( !v70 )\n    goto LABEL_142;\n  if ( !v232 )\n  {\n    if ( v231 )\n    {\n      v9 = (unsigned __int64)&v239;\n      v237 = 0LL;\n      v238 = 0LL;\n      v240 = 0LL;\n      if ( (signed int)sub_8000(msqid) > 0 )\n      {\n        v9 = (unsigned __int64)\"messages\";\n        scols_table_set_name(v70, \"messages\");\n        for ( i = v239; *((_QWORD *)i + 11) || (signed int)msqid >= 0; i = (unsigned int *)*((_QWORD *)i + 11) )\n        {\n          v9 = 0LL;\n          v110 = scols_table_new_line(v70, 0LL);\n          if ( !v110 )\n          {\nLABEL_337:\n            v222 = \"failed to allocate output line\";\nLABEL_336:\n            v223 = dcgettext(0LL, v222, 5);\n            err(1, v223, msqid);\n          }\n          v111 = i[2];\n          if ( !v237 || v237->pw_uid != v111 )\n            v237 = getpwuid(v111);\n          v112 = i[3];\n          if ( !v238 || v238->gr_gid != v112 )\n            v238 = getgrgid(v112);\n          if ( qword_217080 )\n          {\n            v113 = 0LL;\n            while ( 1 )\n            {\n              switch ( (unsigned int)sub_6780((unsigned int)v113) )\n              {\n                case 0u:\n                  v121 = i[1];\n                  goto LABEL_207;\n                case 1u:\n                  v120 = *i;\n                  goto LABEL_207;\n                case 2u:\n                  v240 = sub_6C30(&v237, i[2]);\n                  if ( !v240 )\n                  {\n                    v119 = i[2];\n                    sub_6600((unsigned __int64)&v240);\n                  }\n                  goto LABEL_208;\n                case 3u:\n                  if ( v6[4] & 0x10 )\n                  {\n                    v9 = (unsigned __int64)\"%#o\";\n                    v20 = (i[6] & 0x1FF) == 0;\n                    sub_6600((unsigned __int64)&v240);\n                  }\n                  else\n                  {\n                    v125 = malloc(0xBuLL);\n                    if ( !v125 )\n                      goto LABEL_334;\n                    v126 = i[6];\n                    v240 = (__int64)v125;\n                    sub_96A0(v126 & 0x1FF, v125);\n                    v9 = v113;\n                    v115 = scols_line_refer_data(v110, v113, v240);\nLABEL_209:\n                    if ( v115 )\n                    {\nLABEL_335:\n                      v222 = \"failed to set data\";\n                      goto LABEL_336;\n                    }\n                  }\nLABEL_210:\n                  ++v113;\n                  v240 = 0LL;\n                  if ( v113 >= qword_217080 )\n                    goto LABEL_211;\n                  break;\n                case 4u:\n                case 6u:\n                  v114 = i[4];\n                  goto LABEL_207;\n                case 5u:\n                  v9 = i[4];\n                  goto LABEL_215;\n                case 7u:\n                  v9 = i[5];\n                  goto LABEL_234;\n                case 8u:\n                  v124 = i[2];\n                  goto LABEL_207;\n                case 9u:\n                  v9 = i[2];\nLABEL_215:\n                  v117 = sub_6C30(&v237, v9);\n                  v240 = v117;\n                  if ( v117 )\n                    goto LABEL_216;\n                  goto LABEL_210;\n                case 0xAu:\n                  v123 = i[3];\n                  goto LABEL_207;\n                case 0xBu:\n                  v9 = i[3];\nLABEL_234:\n                  v117 = sub_6C90(&v238, v9);\n                  v240 = v117;\n                  if ( !v117 )\n                    goto LABEL_210;\n                  goto LABEL_216;\n                case 0xCu:\n                  v9 = *((_QWORD *)i + 6);\n                  if ( v9 )\n                    goto LABEL_225;\n                  goto LABEL_210;\n                case 0xDu:\n                  if ( v6[4] & 8 )\n                    sub_6600((unsigned __int64)&v240);\n                  else\n                    v240 = sub_98D0(0LL, *((_QWORD *)i + 7));\n                  goto LABEL_208;\n                case 0xEu:\n                  v122 = *((_QWORD *)i + 8);\n                  sub_6600((unsigned __int64)&v240);\n                  v9 = v113;\n                  v115 = scols_line_refer_data(v110, v113, v240);\n                  goto LABEL_209;\n                case 0xFu:\n                  v9 = *((_QWORD *)i + 4);\n                  if ( v9 )\n                    goto LABEL_225;\n                  goto LABEL_210;\n                case 0x10u:\n                  v9 = *((_QWORD *)i + 5);\n                  if ( !v9 )\n                    goto LABEL_210;\nLABEL_225:\n                  v117 = sub_6AB0((v6[4] >> 5) & 3);\nLABEL_216:\n                  v9 = v113;\n                  v115 = scols_line_refer_data(v110, v113, v117);\n                  goto LABEL_209;\n                case 0x11u:\n                  v116 = i[20];\n                  goto LABEL_207;\n                case 0x12u:\n                  v118 = i[21];\nLABEL_207:\n                  sub_6600((unsigned __int64)&v240);\nLABEL_208:\n                  v9 = v113;\n                  v115 = scols_line_refer_data(v110, v113, v240);\n                  goto LABEL_209;\n                default:\n                  goto LABEL_210;\n              }\n            }\n          }\nLABEL_211:\n          if ( (signed int)msqid >= 0 )\n            break;\n        }\n        sub_8320(v239, v9);\n      }\n      else if ( (signed int)msqid >= 0 )\n      {\n        v83 = dcgettext(0LL, \"id %d not found\", 5);\n        v9 = (unsigned int)msqid;\n        warnx(v83, (unsigned int)msqid, msqid);\n      }\n    }\n    if ( v228 )\n    {\n      v9 = (unsigned __int64)&v243;\n      v241 = 0LL;\n      v242 = 0LL;\n      ptr = 0LL;\n      v230 = qword_217060;\n      if ( (signed int)sub_79B0((unsigned int)msqid, &v243) > 0 )\n      {\n        v9 = (unsigned __int64)\"sharedmemory\";\n        v127 = v6;\n        scols_table_set_name(v230, \"sharedmemory\");\n        v128 = (unsigned int *)v243;\n        s2a = (signed int)msqid >= 0;\n        while ( *((_QWORD *)v128 + 12) || s2a )\n        {\n          v9 = 0LL;\n          v129 = scols_table_new_line(v230, 0LL);\n          if ( !v129 )\n            goto LABEL_337;\n          v130 = 0LL;\n          while ( v130 < qword_217080 )\n          {\n            switch ( (unsigned int)sub_6780((unsigned int)v130) )\n            {\n              case 0u:\n                v135 = v128[1];\n                goto LABEL_253;\n              case 1u:\n                v134 = *v128;\n                goto LABEL_253;\n              case 2u:\n                ptr = (void *)sub_6C30(&v241, v128[2]);\n                if ( ptr )\n                  goto LABEL_255;\n                v138 = v128[2];\n                v132 = (unsigned __int64)&ptr;\n                goto LABEL_254;\n              case 3u:\n                if ( v127[4] & 0x10 )\n                {\n                  v20 = (v128[6] & 0x1FF) == 0;\n                  sub_6600((unsigned __int64)&ptr);\n                }\n                else\n                {\n                  v156 = malloc(0xBuLL);\n                  if ( !v156 )\n                    goto LABEL_334;\n                  v157 = v128[6];\n                  ptr = v156;\n                  sub_96A0(v157 & 0x1FF, v156);\n                }\n                goto LABEL_255;\n              case 4u:\n              case 6u:\n                v131 = v128[4];\n                goto LABEL_253;\n              case 5u:\n                v9 = v128[4];\n                goto LABEL_261;\n              case 7u:\n                v9 = v128[5];\n                goto LABEL_285;\n              case 8u:\n                v151 = v128[2];\n                goto LABEL_253;\n              case 9u:\n                v9 = v128[2];\nLABEL_261:\n                v136 = (void *)sub_6C30(&v241, v9);\n                ptr = v136;\n                if ( v136 )\n                  goto LABEL_262;\n                goto LABEL_257;\n              case 0xAu:\n                v150 = v128[3];\n                goto LABEL_253;\n              case 0xBu:\n                v9 = v128[3];\nLABEL_285:\n                v136 = (void *)sub_6C90(&v242, v9);\n                ptr = v136;\n                if ( !v136 )\n                  goto LABEL_257;\n                goto LABEL_262;\n              case 0xCu:\n                v9 = *((_QWORD *)v128 + 8);\n                if ( v9 )\n                  goto LABEL_271;\n                goto LABEL_257;\n              case 0x13u:\n                if ( v127[4] & 8 )\n                  sub_6600((unsigned __int64)&ptr);\n                else\n                  ptr = (void *)sub_98D0(0LL, *((_QWORD *)v128 + 5));\n                goto LABEL_255;\n              case 0x14u:\n                v149 = *((_QWORD *)v128 + 4);\n                sub_6600((unsigned __int64)&ptr);\n                v9 = v130;\n                v133 = scols_line_refer_data(v129, v130, ptr);\n                goto LABEL_256;\n              case 0x15u:\n                free(ptr);\n                v141 = strlen(dcgettext(0LL, \"dest\", 5)) + 1;\n                v142 = strlen(dcgettext(0LL, \"locked\", 5)) + 1;\n                v143 = strlen(dcgettext(0LL, \"hugetlb\", 5)) + 1;\n                v144 = dcgettext(0LL, \"noreserve\", 5);\n                v145 = -1LL;\n                v146 = v144;\n                do\n                {\n                  if ( !v145 )\n                    break;\n                  v20 = *v146++ == 0;\n                  --v145;\n                }\n                while ( !v20 );\n                v147 = v143 - 1 - v145 + v141 - 1 + v142 - 1 + 4 - 2;\n                v148 = calloc(1uLL, v147);\n                if ( !v148 && v147 )\n                  err(1, \"cannot allocate %zu bytes\", v147, msqid);\n                ptr = v148;\n                v152 = v128[6];\n                if ( v152 & 0x200 )\n                {\n                  v163 = dcgettext(0LL, \"dest\", 5);\n                  v153 = sprintf((char *)ptr, \"%s\", v163, msqid);\n                  v164 = v128[6];\n                  if ( v164 & 0x400 )\n                  {\n                    v165 = v153 + 1;\n                    *((_BYTE *)ptr + v153) = 44;\n                    v166 = dcgettext(0LL, \"locked\", 5);\n                    v167 = sprintf((char *)ptr + v165, \"%s\", v166);\n                    v164 = v128[6];\n                    v153 = v165 + v167;\n                  }\n                  if ( !(v164 & 0x800) )\n                  {\n                    if ( v164 & 0x1000 )\n                      goto LABEL_310;\n                    goto LABEL_255;\n                  }\n                  v158 = v228;\n                  *((_BYTE *)ptr + v153++) = 44;\n                }\n                else if ( v152 & 0x400 )\n                {\n                  v161 = dcgettext(0LL, \"locked\", 5);\n                  v153 = sprintf((char *)ptr, \"%s\", v161, msqid);\n                  v162 = v128[6];\n                  if ( !(v162 & 0x800) )\n                  {\n                    if ( v162 & 0x1000 )\n                      goto LABEL_299;\n                    goto LABEL_255;\n                  }\n                  v158 = 0;\n                }\n                else\n                {\n                  if ( !(v152 & 0x800) )\n                  {\n                    if ( !(v152 & 0x1000) )\n                      goto LABEL_255;\n                    v153 = 0LL;\n                    goto LABEL_299;\n                  }\n                  v158 = 0;\n                  v153 = 0LL;\n                }\n                v159 = v153;\n                v160 = dcgettext(0LL, \"hugetlb\", 5);\n                v153 = sprintf((char *)ptr + v159, \"%s\", v160, msqid) + v159;\n                if ( *((_BYTE *)v128 + 25) & 0x10 )\n                {\n                  if ( v158 )\nLABEL_310:\n                    *((_BYTE *)ptr + v153++) = 44;\nLABEL_299:\n                  v154 = v153;\n                  v155 = dcgettext(0LL, \"noreserve\", 5);\n                  strcpy((char *)ptr + v154, v155);\n                }\nLABEL_255:\n                v9 = v130;\n                v133 = scols_line_refer_data(v129, v130, ptr);\nLABEL_256:\n                if ( v133 )\n                  goto LABEL_335;\nLABEL_257:\n                ptr = 0LL;\n                ++v130;\n                break;\n              case 0x16u:\n                v9 = *((_QWORD *)v128 + 6);\n                if ( v9 )\n                  goto LABEL_271;\n                goto LABEL_257;\n              case 0x17u:\n                v9 = *((_QWORD *)v128 + 7);\n                if ( !v9 )\n                  goto LABEL_257;\nLABEL_271:\n                v140 = sub_6AB0((v127[4] >> 5) & 3);\n                v9 = v130;\n                v133 = scols_line_refer_data(v129, v130, v140);\n                goto LABEL_256;\n              case 0x18u:\n                v136 = (void *)sub_FB90(v128[18]);\n                ptr = v136;\nLABEL_262:\n                v9 = v130;\n                v133 = scols_line_refer_data(v129, v130, v136);\n                goto LABEL_256;\n              case 0x19u:\n                v139 = v128[18];\n                goto LABEL_253;\n              case 0x1Au:\n                v137 = v128[19];\nLABEL_253:\n                v132 = (unsigned __int64)&ptr;\nLABEL_254:\n                sub_6600(v132);\n                goto LABEL_255;\n              default:\n                goto LABEL_257;\n            }\n          }\n          if ( (signed int)msqid >= 0 )\n            break;\n          v128 = (unsigned int *)*((_QWORD *)v128 + 12);\n        }\n        v6 = v127;\n        sub_7CE0(v243);\n      }\n      else if ( (signed int)msqid >= 0 )\n      {\n        v95 = dcgettext(0LL, \"id %d not found\", 5);\n        v9 = (unsigned int)msqid;\n        warnx(v95, (unsigned int)msqid, msqid);\n      }\n    }\n    if ( v226 )\n    {\n      v9 = (unsigned __int64)v6;\n      sub_6CF0((unsigned int)msqid, v6, qword_217060);\n    }\n    goto LABEL_122;\n  }\n  v9 = (unsigned __int64)\"ipclimits\";\n  scols_table_set_name(v70, \"ipclimits\");\n  if ( v231 )\n  {\n    v84 = qword_217060;\n    sub_76E0(&ptr);\n    if ( (signed int)sub_8000(-1) > 0 )\n    {\n      v85 = 0;\n      v86 = v243;\n      while ( 1 )\n      {\n        v86 = (_QWORD *)v86[11];\n        if ( !v86 )\n          break;\n        ++v85;\n      }\n      sub_8320(v243, &v243);\n    }\n    dcgettext(0LL, \"Number of message queues\", 5);\n    sub_6810((_DWORD)v6, v84, (unsigned __int64)\"MSGMNI\");\n    dcgettext(0LL, \"Max size of message (bytes)\", 5);\n    sub_6810((_DWORD)v6, v84, (unsigned __int64)\"MSGMAX\");\n    dcgettext(0LL, \"Default max size of queue (bytes)\", 5);\n    sub_6810((_DWORD)v6, v84, (unsigned __int64)\"MSGMNB\");\n    v9 = 1LL;\n  }\n  if ( v228 )\n  {\n    v87 = qword_217060;\n    sub_78C0(&ptr, v9);\n    if ( (signed int)sub_79B0(0xFFFFFFFFLL, &v243) > 0 )\n    {\n      v88 = 0LL;\n      v89 = 0LL;\n      for ( j = v243; j[12]; j = (_QWORD *)j[12] )\n      {\n        v88 += j[5];\n        ++v89;\n      }\n      ((void (*)(void))sub_7CE0)();\n    }\n    dcgettext(0LL, \"Shared memory segments\", 5);\n    sub_6810((_DWORD)v6, v87, (unsigned __int64)\"SHMMNI\");\n    getpagesize();\n    dcgettext(0LL, \"Shared memory pages\", 5);\n    sub_6810((_DWORD)v6, v87, (unsigned __int64)\"SHMALL\");\n    dcgettext(0LL, \"Max size of shared memory segment (bytes)\", 5);\n    sub_6810((_DWORD)v6, v87, (unsigned __int64)\"SHMMAX\");\n    dcgettext(0LL, \"Min size of shared memory segment (bytes)\", 5);\n    v9 = v87;\n    sub_6810((_DWORD)v6, v87, (unsigned __int64)\"SHMMIN\");\n    if ( !v226 )\n      goto LABEL_122;\n    goto LABEL_167;\n  }\n  if ( v226 )\n  {\nLABEL_167:\n    v91 = qword_217060;\n    sub_77E0(&ptr, v9);\n    if ( (signed int)sub_7D10(0xFFFFFFFFLL, &v243) > 0 )\n    {\n      v92 = 0;\n      v93 = 0;\n      v94 = v243;\n      while ( 1 )\n      {\n        v94 = (_QWORD *)v94[8];\n        if ( !v94 )\n          break;\n        v93 += *((_DWORD *)v243 + 12);\n        ++v92;\n      }\n      sub_7FC0(v243);\n    }\n    dcgettext(0LL, \"Number of semaphore identifiers\", 5);\n    sub_6810((_DWORD)v6, v91, (unsigned __int64)\"SEMMNI\");\n    dcgettext(0LL, \"Total number of semaphores\", 5);\n    sub_6810((_DWORD)v6, v91, (unsigned __int64)\"SEMMNS\");\n    dcgettext(0LL, \"Max semaphores per semaphore set.\", 5);\n    sub_6810((_DWORD)v6, v91, (unsigned __int64)\"SEMMSL\");\n    dcgettext(0LL, \"Max number of operations per semop(2)\", 5);\n    sub_6810((_DWORD)v6, v91, (unsigned __int64)\"SEMOPM\");\n    dcgettext(0LL, \"Semaphore max value\", 5);\n    v9 = v91;\n    sub_6810((_DWORD)v6, v91, (unsigned __int64)\"SEMVMX\");\n    v69 = 0LL;\n  }\nLABEL_122:\n  v75 = qword_217060;\n  if ( *(_DWORD *)v6 == 5 )\n  {\n    v96 = 0LL;\n    v97 = scols_new_iter(0LL, v9, v69);\n    v98 = scols_table_get_line(v75, 0LL);\n    while ( !(unsigned int)scols_table_next_column(v75, v97, &ptr) )\n    {\n      v99 = scols_line_get_cell(v98, v96);\n      v227 = off_216140[5 * (signed int)sub_6780((unsigned int)v96) + 2];\n      v100 = scols_cell_get_data(v99);\n      if ( v100 )\n      {\n        v101 = -1LL;\n        v102 = v227;\n        do\n        {\n          if ( !v101 )\n            break;\n          v20 = *v102++ == 0;\n          --v101;\n        }\n        while ( !v20 );\n        __printf_chk(1LL, \"%s:%*c%-36s\\n\", v227, (unsigned int)(v101 + 37), 32LL, v100);\n      }\n      ++v96;\n    }\n    if ( v98 )\n    {\n      v103 = scols_line_get_userdata(v98);\n      if ( v103 )\n      {\n        v104 = dcgettext(0LL, \"Elements:\\n\\n\", 5);\n        __printf_chk(1LL, v104, v105, v106, v107, v108);\n        scols_print_table(v103);\n      }\n    }\n    scols_free_iter(v97);\n  }\n  else\n  {\n    scols_print_table(qword_217060);\n  }\n  scols_unref_table(qword_217060);\n  free(v6);\n  result = 0LL;\nLABEL_125:\n  if ( __readfsqword(0x28u) != v246 )\nLABEL_334:\n    err(1, \"cannot allocate %zu bytes\", 11LL);\n  return result;\n}\n", 
            "funcStartAddr": "0x41f0L", 
            "funcEndAddr": "0x640eL", 
            "funcName": "main"
        }, 
        {
            "decompiledFuncCode": "__int64 (**sub_6440())(void)\n{\n  __int64 (**result)(void); // rax\n\n  result = (__int64 (**)(void))&unk_217018;\n  if ( &unk_217018 != &unk_217018 )\n  {\n    result = &ITM_deregisterTMCloneTable;\n    if ( &ITM_deregisterTMCloneTable )\n      result = (__int64 (**)(void))ITM_deregisterTMCloneTable();\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x6440L", 
            "funcEndAddr": "0x6472L", 
            "funcName": "sub_6440"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_6480()\n{\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x6480L", 
            "funcEndAddr": "0x64c2L", 
            "funcName": "sub_6480"
        }, 
        {
            "decompiledFuncCode": "__int64 (**sub_64D0())(void)\n{\n  __int64 (**result)(void); // rax\n\n  if ( !byte_217048 )\n  {\n    if ( &__cxa_finalize )\n      _cxa_finalize(off_217008);\n    result = sub_6440();\n    byte_217048 = 1;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x64d0L", 
            "funcEndAddr": "0x650aL", 
            "funcName": "sub_64D0"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_6510()\n{\n  return sub_6480();\n}\n", 
            "funcStartAddr": "0x6510L", 
            "funcEndAddr": "0x651aL", 
            "funcName": "sub_6510"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_6520(__int64 a1)\n{\n  __int64 v1; // rax\n  __int64 v2; // rbx\n  char v3; // al\n  char *v5; // rax\n\n  v1 = scols_new_table();\n  if ( !v1 )\n  {\n    v5 = dcgettext(0LL, \"failed to allocate output table\", 5);\n    err(1, v5);\n  }\n  v2 = v1;\n  v3 = *(_BYTE *)(a1 + 4);\n  if ( v3 & 1 )\n  {\n    scols_table_enable_noheadings(v2, 1LL);\n    v3 = *(_BYTE *)(a1 + 4);\n  }\n  if ( v3 & 4 )\n    scols_table_enable_shellvar(v2, 1LL);\n  switch ( *(_DWORD *)a1 )\n  {\n    case 1:\n      goto LABEL_10;\n    case 2:\n      scols_table_set_column_separator(v2, \"\\n\");\nLABEL_10:\n      scols_table_enable_export(v2, 1LL);\n      break;\n    case 3:\n      scols_table_enable_raw(v2, 1LL);\n      break;\n    case 4:\n      scols_table_enable_json(v2, 1LL);\n      break;\n    case 5:\n      scols_table_enable_noheadings(v2, 1LL);\n      break;\n    default:\n      return v2;\n  }\n  return v2;\n}\n", 
            "funcStartAddr": "0x6520L", 
            "funcEndAddr": "0x65f6L", 
            "funcName": "sub_6520"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_6600(__int64 a1, __int64 a2, ...)\n{\n  __int64 result; // rax\n  gcc_va_list va; // [rsp+0h] [rbp-D8h]\n  unsigned __int64 v4; // [rsp+18h] [rbp-C0h]\n\n  va_start(va, a2);\n  v4 = __readfsqword(0x28u);\n  result = __vasprintf_chk(a1, 1LL, a2, va);\n  if ( (signed int)result < 0 )\n    err(1, \"cannot allocate string\");\n  return result;\n}\n", 
            "funcStartAddr": "0x6600L", 
            "funcEndAddr": "0x66d0L", 
            "funcName": "sub_6600"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_66D0(char *s1, size_t n)\n{\n  const char *v2; // r12\n  const char **v3; // rbp\n  unsigned __int64 v4; // rbx\n  __int64 result; // rax\n  const char *v6; // rsi\n  char *v7; // rax\n\n  v2 = \"KEY\";\n  v3 = (const char **)&off_216168;\n  v4 = 0LL;\n  while ( strncasecmp(s1, v2, n) || v2[n] )\n  {\n    if ( ++v4 == 34 )\n    {\n      v6 = \"unknown column: %s\";\nLABEL_11:\n      v7 = dcgettext(0LL, v6, 5);\n      warnx(v7, s1);\n      return 0xFFFFFFFFLL;\n    }\n    v2 = *v3;\n    v3 += 5;\n  }\n  result = (unsigned int)v4;\n  if ( v4 > 0xC && (qword_2171B8 > v4 || qword_2171B0 < v4) )\n  {\n    v6 = \"column %s does not apply to the specified IPC\";\n    goto LABEL_11;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x66d0L", 
            "funcEndAddr": "0x677cL", 
            "funcName": "sub_66D0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_6780(__int64 a1)\n{\n  __int64 result; // rax\n\n  if ( (signed int)a1 < 0 )\n    __assert_fail(\"num >= 0\", \"sys-utils/lsipc.c\", 0xEFu, \"get_column_id\");\n  a1 = (signed int)a1;\n  if ( (signed int)a1 >= (unsigned __int64)qword_217080 )\n    __assert_fail(\"(size_t) num < ncolumns\", \"sys-utils/lsipc.c\", 0xF0u, \"get_column_id\");\n  result = dword_2170A0[a1];\n  if ( (unsigned int)result > 0x21 )\n    __assert_fail(\"(size_t) columns[num] < ARRAY_SIZE(coldescs)\", \"sys-utils/lsipc.c\", 0xF1u, \"get_column_id\");\n  return result;\n}\n", 
            "funcStartAddr": "0x6780L", 
            "funcEndAddr": "0x6805L", 
            "funcName": "sub_6780"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_6810(__int64 a1, __int64 a2, __int64 a3, __int64 a4, unsigned __int64 a5, unsigned __int64 a6, int a7, int a8)\n{\n  unsigned __int64 v8; // r14\n  unsigned __int64 v9; // r13\n  __int64 v10; // rax\n  __int64 v11; // rbx\n  __int64 v12; // r12\n  int v13; // eax\n  double v15; // xmm0_8\n  double v16; // xmm1_8\n  const char *v17; // rsi\n  char *v18; // rax\n  __int64 v19; // [rsp+0h] [rbp-68h]\n  __int64 v20; // [rsp+8h] [rbp-60h]\n  __int64 v21; // [rsp+10h] [rbp-58h]\n  __int64 v22; // [rsp+20h] [rbp-48h]\n  unsigned __int64 v23; // [rsp+28h] [rbp-40h]\n\n  v8 = a5;\n  v9 = a6;\n  v19 = a1;\n  v23 = __readfsqword(0x28u);\n  v20 = a3;\n  v21 = a4;\n  v10 = scols_table_new_line(a2, 0LL);\n  if ( !v10 )\n  {\n    v17 = \"failed to allocate output line\";\nLABEL_30:\n    v18 = dcgettext(0LL, v17, 5);\n    err(1, v18, v19);\n  }\n  v11 = 0LL;\n  if ( qword_217080 )\n  {\n    v12 = v10;\n    while ( 1 )\n    {\n      v22 = 0LL;\n      switch ( (unsigned int)sub_6780((unsigned int)v11) )\n      {\n        case 0x1Du:\n          v13 = scols_line_set_data(v12, v11, v20);\n          goto LABEL_10;\n        case 0x1Eu:\n          v13 = scols_line_set_data(v12, v11, v21);\n          goto LABEL_10;\n        case 0x1Fu:\n          if ( a8 && !(*(_BYTE *)(v19 + 4) & 8) )\n            v22 = sub_98D0(0LL, v9);\n          else\n            sub_6600((__int64)&v22, (__int64)\"%ju\", v9, v19);\n          goto LABEL_9;\n        case 0x20u:\n          if ( !a7 )\n            goto LABEL_24;\n          if ( a8 && !(*(_BYTE *)(v19 + 4) & 8) )\n            v22 = sub_98D0(0LL, v8);\n          else\n            sub_6600((__int64)&v22, (__int64)\"%ju\", v8, v19);\nLABEL_9:\n          v13 = scols_line_refer_data(v12, v11, v22);\n          goto LABEL_10;\n        case 0x21u:\n          if ( a7 )\n          {\n            if ( (v8 & 0x8000000000000000LL) != 0LL )\n              v15 = (double)(signed int)(v8 & 1 | (v8 >> 1)) + (double)(signed int)(v8 & 1 | (v8 >> 1));\n            else\n              v15 = (double)(signed int)v8;\n            if ( (v9 & 0x8000000000000000LL) != 0LL )\n              v16 = (double)(signed int)(v9 & 1 | (v9 >> 1)) + (double)(signed int)(v9 & 1 | (v9 >> 1));\n            else\n              v16 = (double)(signed int)v9;\n            sub_6600((__int64)&v22, (__int64)\"%2.2f%%\", v15 / v16 * 100.0, v19);\n            v13 = scols_line_refer_data(v12, v11, v22);\n          }\n          else\n          {\nLABEL_24:\n            v13 = scols_line_set_data(v12, v11, \"-\");\n          }\nLABEL_10:\n          if ( !v13 )\n            goto LABEL_11;\n          v17 = \"failed to add output data\";\n          goto LABEL_30;\n        default:\nLABEL_11:\n          if ( qword_217080 <= (unsigned __int64)++v11 )\n            return __readfsqword(0x28u) ^ v23;\n          break;\n      }\n    }\n  }\n  return __readfsqword(0x28u) ^ v23;\n}\n", 
            "funcStartAddr": "0x6810L", 
            "funcEndAddr": "0x6aaaL", 
            "funcName": "sub_6810"
        }, 
        {
            "decompiledFuncCode": "char *__fastcall sub_6AB0(int a1, time_t a2)\n{\n  char *v2; // rax\n  char *result; // rax\n  char *v4; // rdx\n  time_t timer; // [rsp+0h] [rbp-B0h]\n  struct tm tp; // [rsp+8h] [rbp-A8h]\n  char s[16]; // [rsp+48h] [rbp-68h]\n  __int128 v8; // [rsp+58h] [rbp-58h]\n  __int128 v9; // [rsp+68h] [rbp-48h]\n  __int128 v10; // [rsp+78h] [rbp-38h]\n  unsigned __int64 v11; // [rsp+90h] [rbp-20h]\n\n  v11 = __readfsqword(0x28u);\n  timer = a2;\n  *(_OWORD *)s = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  if ( a1 == 2 )\n  {\n    localtime_r(&timer, &tp);\n    asctime_r(&tp, s);\n    v4 = &s[strlen(s)];\n    if ( *(v4 - 1) == 10 )\n      *(v4 - 1) = 0;\n  }\n  else if ( a1 == 3 )\n  {\n    sub_B6C0(&timer, 39LL, s, 64LL);\n  }\n  else\n  {\n    if ( a1 != 1 )\n    {\n      v2 = dcgettext(0LL, \"unsupported time type\", 5);\n      errx(1, v2);\n    }\n    sub_B770(&timer, &tv);\n  }\n  result = strdup(s);\n  if ( !result )\n    err(1, \"cannot duplicate string\");\n  return result;\n}\n", 
            "funcStartAddr": "0x6ab0L", 
            "funcEndAddr": "0x6c2bL", 
            "funcName": "sub_6AB0"
        }, 
        {
            "decompiledFuncCode": "char *__fastcall sub_6C30(struct passwd **a1, __uid_t a2)\n{\n  struct passwd *v2; // rax\n  char *result; // rax\n\n  v2 = *a1;\n  if ( !*a1 || v2->pw_uid != a2 )\n  {\n    v2 = getpwuid(a2);\n    *a1 = v2;\n    if ( !v2 )\n      return 0LL;\n  }\n  if ( !v2->pw_name )\n    sub_4180();\n  result = strdup(v2->pw_name);\n  if ( !result )\n    err(1, \"cannot duplicate string\");\n  return result;\n}\n", 
            "funcStartAddr": "0x6c30L", 
            "funcEndAddr": "0x6c82L", 
            "funcName": "sub_6C30"
        }, 
        {
            "decompiledFuncCode": "char *__fastcall sub_6C90(struct group **a1, __gid_t a2)\n{\n  struct group *v2; // rax\n  char *result; // rax\n\n  v2 = *a1;\n  if ( !*a1 || v2->gr_gid != a2 )\n  {\n    v2 = getgrgid(a2);\n    *a1 = v2;\n    if ( !v2 )\n      return 0LL;\n  }\n  if ( !v2->gr_name )\n    sub_4180();\n  result = strdup(v2->gr_name);\n  if ( !result )\n    err(1, \"cannot duplicate string\");\n  return result;\n}\n", 
            "funcStartAddr": "0x6c90L", 
            "funcEndAddr": "0x6ce2L", 
            "funcName": "sub_6C90"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_6CF0(unsigned int a1, __int64 a2, __int64 a3)\n{\n  void *v3; // rdi\n  unsigned int *v4; // r12\n  __int64 v5; // r13\n  unsigned __int64 v6; // rbx\n  time_t v7; // rsi\n  int v8; // eax\n  const char *v9; // rsi\n  char *v10; // rax\n  __int64 v11; // rdx\n  char *v12; // rsi\n  char *v13; // rax\n  unsigned int v14; // edi\n  __int64 result; // rax\n  unsigned __int64 v16; // rt1\n  char *v17; // rax\n  __int64 v18; // r15\n  _QWORD *v19; // rax\n  __int64 v20; // r14\n  unsigned int *v21; // rbp\n  __int64 v22; // rbx\n  char *v23; // rax\n  __int64 v24; // [rsp+0h] [rbp-98h]\n  __int64 v25; // [rsp+8h] [rbp-90h]\n  int v26; // [rsp+18h] [rbp-80h]\n  __int64 v27; // [rsp+28h] [rbp-70h]\n  __int64 v28; // [rsp+30h] [rbp-68h]\n  __int64 v29; // [rsp+38h] [rbp-60h]\n  __int64 v30; // [rsp+40h] [rbp-58h]\n  void *ptr; // [rsp+48h] [rbp-50h]\n  char *v32; // [rsp+50h] [rbp-48h]\n  unsigned __int64 v33; // [rsp+58h] [rbp-40h]\n\n  v24 = a2;\n  v26 = a1;\n  v25 = a3;\n  v27 = 0LL;\n  v33 = __readfsqword(0x28u);\n  v28 = 0LL;\n  v29 = 0LL;\n  v30 = 0LL;\n  v32 = 0LL;\n  scols_table_set_name(a3, \"semaphores\");\n  if ( (signed int)sub_7D10(a1, &ptr) <= 0 )\n  {\n    if ( (a1 & 0x80000000) == 0 )\n    {\n      v17 = dcgettext(0LL, \"id %d not found\", 5);\n      warnx(v17, a1, a2, v25);\n    }\n  }\n  else\n  {\n    v3 = ptr;\n    v4 = (unsigned int *)ptr;\n    if ( *((_QWORD *)ptr + 8) || v26 >= 0 )\n    {\n      while ( 1 )\n      {\n        while ( 1 )\n        {\n          v5 = scols_table_new_line(v25, 0LL);\n          if ( !v5 )\n          {\nLABEL_72:\n            v9 = \"failed to allocate output line\";\n            goto LABEL_63;\n          }\n          v6 = 0LL;\n          if ( qword_217080 )\n          {\n            while ( 1 )\n            {\n              switch ( (unsigned int)sub_6780((unsigned int)v6) )\n              {\n                case 0u:\n                  v11 = v4[1];\n                  v12 = \"0x%08x\";\n                  goto LABEL_19;\n                case 1u:\n                  v11 = *v4;\n                  v12 = \"%d\";\n                  goto LABEL_19;\n                case 2u:\n                  v10 = sub_6C30((struct passwd **)&v27, v4[2]);\n                  v32 = v10;\n                  if ( !v10 )\n                  {\n                    sub_6600((__int64)&v32, (__int64)\"%u\", v4[2], v24);\n                    v10 = v32;\n                  }\n                  goto LABEL_17;\n                case 3u:\n                  if ( *(_BYTE *)(v24 + 4) & 0x10 )\n                  {\n                    sub_6600((__int64)&v32, (__int64)\"%#o\", v4[6] & 0x1FF, v24);\n                  }\n                  else\n                  {\n                    v13 = (char *)malloc(0xBuLL);\n                    if ( !v13 )\n                      err(1, \"cannot allocate %zu bytes\", 11LL, v24);\n                    v14 = v4[6];\n                    v32 = v13;\n                    sub_96A0(v14 & 0x1FF, v13);\n                  }\n                  goto LABEL_13;\n                case 4u:\n                  v11 = v4[4];\n                  v12 = \"%u\";\n                  goto LABEL_19;\n                case 5u:\n                  v10 = sub_6C30((struct passwd **)&v28, v4[4]);\n                  v32 = v10;\n                  if ( v10 )\n                    goto LABEL_17;\n                  goto LABEL_8;\n                case 6u:\n                  v11 = v4[5];\n                  v12 = \"%u\";\n                  goto LABEL_19;\n                case 7u:\n                  v10 = sub_6C90((struct group **)&v30, v4[5]);\n                  v32 = v10;\n                  if ( !v10 )\n                    goto LABEL_8;\n                  goto LABEL_17;\n                case 8u:\n                  v11 = v4[2];\n                  v12 = \"%u\";\n                  goto LABEL_19;\n                case 9u:\n                  v10 = sub_6C30((struct passwd **)&v27, v4[2]);\n                  v32 = v10;\n                  if ( !v10 )\n                    goto LABEL_8;\n                  goto LABEL_17;\n                case 0xAu:\n                  v11 = v4[3];\n                  v12 = \"%u\";\nLABEL_19:\n                  sub_6600((__int64)&v32, (__int64)v12, v11, v24);\n                  v8 = scols_line_refer_data(v5, v6, v32);\n                  goto LABEL_14;\n                case 0xBu:\n                  v10 = sub_6C90((struct group **)&v29, v4[3]);\n                  v32 = v10;\n                  if ( !v10 )\n                    goto LABEL_8;\n                  goto LABEL_17;\n                case 0xCu:\n                  v7 = *((_QWORD *)v4 + 4);\n                  if ( v7 )\n                    goto LABEL_32;\n                  goto LABEL_8;\n                case 0x1Bu:\n                  sub_6600((__int64)&v32, (__int64)\"%ju\", *((_QWORD *)v4 + 6), v24);\nLABEL_13:\n                  v8 = scols_line_refer_data(v5, v6, v32);\n                  goto LABEL_14;\n                case 0x1Cu:\n                  v7 = *((_QWORD *)v4 + 5);\n                  if ( !v7 )\n                    goto LABEL_8;\nLABEL_32:\n                  v10 = sub_6AB0((*(_BYTE *)(v24 + 4) >> 5) & 3, v7);\nLABEL_17:\n                  v8 = scols_line_refer_data(v5, v6, v10);\nLABEL_14:\n                  if ( !v8 )\n                    goto LABEL_8;\n                  v9 = \"failed to add output data\";\n                  goto LABEL_63;\n                default:\nLABEL_8:\n                  ++v6;\n                  v32 = 0LL;\n                  if ( qword_217080 <= v6 )\n                    goto LABEL_9;\n                  break;\n              }\n            }\n          }\nLABEL_9:\n          if ( v26 >= 0 )\n            break;\n          v4 = (unsigned int *)*((_QWORD *)v4 + 8);\n          if ( !*((_QWORD *)v4 + 8) )\n          {\n            v3 = ptr;\n            goto LABEL_41;\n          }\n        }\n        if ( *((_QWORD *)ptr + 6) )\n          break;\n        v4 = (unsigned int *)*((_QWORD *)v4 + 8);\n      }\n      v18 = sub_6520(v24);\n      scols_table_enable_noheadings(v18, 0LL);\n      scols_table_set_name(v18, \"elements\");\n      if ( scols_table_new_column(v18, \"SEMNUM\", 4LL) )\n      {\n        if ( !scols_table_new_column(v18, \"VALUE\", 4LL) )\n          sub_41A3(0x218u);\n        if ( !scols_table_new_column(v18, \"NCOUNT\", 4LL) )\n          sub_41A3(0x21Au);\n        if ( !scols_table_new_column(v18, \"ZCOUNT\", 4LL) )\n          sub_41A3(0x21Cu);\n        if ( !scols_table_new_column(v18, \"PID\", 4LL) )\n          sub_41A3(0x21Eu);\n        if ( !scols_table_new_column(v18, \"COMMAND\", 4LL) )\n          sub_41A3(0x220u);\n        v19 = ptr;\n        v20 = 0LL;\n        if ( !*((_QWORD *)ptr + 6) )\n        {\nLABEL_64:\n          scols_line_set_userdata(v5, v18);\n          v3 = ptr;\n          goto LABEL_41;\n        }\n        while ( 1 )\n        {\n          v21 = (unsigned int *)(v19[7] + 16 * v20);\n          v22 = scols_table_new_line(v18, 0LL);\n          if ( !v22 )\n            goto LABEL_72;\n          sub_6600((__int64)&v32, (__int64)\"%zu\", v20, 0.0, v24);\n          if ( (unsigned int)scols_line_refer_data(v22, 0LL, v32) )\n            break;\n          sub_6600((__int64)&v32, (__int64)\"%d\", *v21);\n          if ( (unsigned int)scols_line_refer_data(v22, 1LL, v32) )\n            break;\n          sub_6600((__int64)&v32, (__int64)\"%d\", v21[1]);\n          if ( (unsigned int)scols_line_refer_data(v22, 2LL, v32) )\n            break;\n          sub_6600((__int64)&v32, (__int64)\"%d\", v21[2]);\n          if ( (unsigned int)scols_line_refer_data(v22, 3LL, v32) )\n            break;\n          sub_6600((__int64)&v32, (__int64)\"%d\", v21[3]);\n          if ( (unsigned int)scols_line_refer_data(v22, 4LL, v32) )\n            break;\n          v32 = (char *)sub_FB90(v21[3]);\n          if ( (unsigned int)scols_line_refer_data(v22, 5LL, v32) )\n            break;\n          v19 = ptr;\n          if ( *((_QWORD *)ptr + 6) <= (unsigned __int64)++v20 )\n            goto LABEL_64;\n        }\n        v9 = \"failed to set data\";\nLABEL_63:\n        v23 = dcgettext(0LL, v9, 5);\n        err(1, v23, v24);\n      }\nLABEL_65:\n      sub_41A3(0x216u);\n    }\nLABEL_41:\n    sub_7FC0(v3);\n  }\n  v16 = __readfsqword(0x28u);\n  result = v16 ^ v33;\n  if ( v16 != v33 )\n    goto LABEL_65;\n  return result;\n}\n", 
            "funcStartAddr": "0x6cf0L", 
            "funcEndAddr": "0x73d7L", 
            "funcName": "sub_6CF0"
        }, 
        {
            "decompiledFuncCode": "int sub_73E0()\n{\n  FILE *v0; // rbp\n  int *v1; // rax\n  int *v2; // rbx\n  int v3; // eax\n  FILE *v4; // rbp\n  int result; // eax\n  char *v6; // rax\n  int v7; // eax\n  int v8; // eax\n  char *v9; // rax\n\n  v0 = stdout;\n  v1 = __errno_location();\n  *v1 = 0;\n  v2 = v1;\n  if ( ferror(v0) || fflush(v0) || (v7 = fileno(v0), v7 < 0) || (v8 = dup(v7), v8 < 0) || close(v8) )\n  {\n    v3 = *v2;\n    if ( *v2 != 9 && v3 != 32 )\n    {\n      if ( v3 )\n      {\n        v6 = dcgettext(0LL, \"write error\", 5);\n        warn(v6);\n      }\n      else\n      {\n        v9 = dcgettext(0LL, \"write error\", 5);\n        warnx(v9);\n      }\n      goto LABEL_9;\n    }\n  }\n  v4 = stderr;\n  *v2 = 0;\n  result = ferror(v4);\n  if ( result\n    || (result = fflush(v4)) != 0\n    || (result = fileno(v4), result < 0)\n    || (result = dup(result), result < 0)\n    || (result = close(result)) != 0 )\n  {\n    if ( *v2 != 9 )\nLABEL_9:\n      _exit(1);\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x73e0L", 
            "funcEndAddr": "0x751fL", 
            "funcName": "sub_73E0"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_7520(__int64 a1)\n{\n  size_t v1; // rax\n  int v2; // er13\n  char *v3; // rax\n  char *v4; // rbp\n  __int64 v5; // rbx\n  int *v6; // rbp\n  int v7; // eax\n  int v8; // eax\n  int v9; // eax\n  char *v10; // rax\n  char *v11; // rax\n  char *v12; // rax\n  char *v13; // rax\n\n  v1 = *(_QWORD *)(a1 + 48);\n  if ( v1 )\n  {\n    v2 = *(_DWORD *)a1;\n    if ( *(_DWORD *)a1 >= 0 )\n    {\n      v3 = (char *)calloc(v1, 0x10uLL);\n      v4 = v3;\n      if ( !v3 )\n        err(1, \"cannot allocate %zu bytes\", 16LL);\n      *(_QWORD *)(a1 + 56) = v3;\n      v5 = 0LL;\n      while ( 1 )\n      {\n        v6 = (int *)&v4[16 * v5];\n        v7 = semctl(v2, v5, 12, 0LL);\n        *v6 = v7;\n        if ( v7 < 0 )\n        {\n          v10 = dcgettext(0LL, \"%s failed\", 5);\n          err(1, v10, \"semctl(GETVAL)\");\n        }\n        v8 = semctl(*(_DWORD *)a1, v5, 14, 0LL);\n        v6[1] = v8;\n        if ( v8 < 0 )\n        {\n          v11 = dcgettext(0LL, \"%s failed\", 5);\n          err(1, v11, \"semctl(GETNCNT)\");\n        }\n        v9 = semctl(*(_DWORD *)a1, v5, 15, 0LL);\n        v6[2] = v9;\n        if ( v9 < 0 )\n        {\n          v12 = dcgettext(0LL, \"%s failed\", 5);\n          err(1, v12, \"semctl(GETZCNT)\");\n        }\n        LODWORD(v1) = semctl(*(_DWORD *)a1, v5, 11, 0LL);\n        v6[3] = v1;\n        if ( (v1 & 0x80000000) != 0LL )\n        {\n          v13 = dcgettext(0LL, \"%s failed\", 5);\n          err(1, v13, \"semctl(GETPID)\");\n        }\n        if ( (unsigned __int64)++v5 >= *(_QWORD *)(a1 + 48) )\n          break;\n        v4 = *(char **)(a1 + 56);\n        v2 = *(_DWORD *)a1;\n      }\n    }\n  }\n  return v1;\n}\n", 
            "funcStartAddr": "0x7520L", 
            "funcEndAddr": "0x76d6L", 
            "funcName": "sub_7520"
        }, 
        {
            "decompiledFuncCode": "_BOOL8 __fastcall sub_76E0(__int64 a1)\n{\n  __int64 v2; // [rsp+0h] [rbp-38h]\n  int v3; // [rsp+8h] [rbp-30h]\n  int v4; // [rsp+Ch] [rbp-2Ch]\n  int v5; // [rsp+10h] [rbp-28h]\n  unsigned __int64 v6; // [rsp+28h] [rbp-10h]\n\n  v6 = __readfsqword(0x28u);\n  if ( access(\"/proc/sys/kernel/msgmni\", 0)\n    || access(\"/proc/sys/kernel/msgmnb\", 0)\n    || access(\"/proc/sys/kernel/msgmax\", 0) )\n  {\n    if ( msgctl(0, 3, (struct msqid_ds *)&v2) >= 0 )\n    {\n      *(_DWORD *)(a1 + 52) = v5;\n      *(_DWORD *)(a1 + 64) = v4;\n      *(_QWORD *)(a1 + 56) = v3;\n      return 0LL;\n    }\n    return 1LL;\n  }\n  if ( (unsigned int)sub_DE40(0LL, a1 + 52, \"/proc/sys/kernel/msgmni\")\n    || (unsigned int)sub_DE40(0LL, a1 + 64, \"/proc/sys/kernel/msgmnb\") )\n  {\n    return 1LL;\n  }\n  return (unsigned int)sub_DCF0(0LL, a1 + 56, \"/proc/sys/kernel/msgmax\") != 0;\n}\n", 
            "funcStartAddr": "0x76e0L", 
            "funcEndAddr": "0x77daL", 
            "funcName": "sub_76E0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_77E0(_DWORD *a1)\n{\n  FILE *v1; // rax\n  FILE *v2; // rbp\n  int v3; // er12\n  int v4; // eax\n  unsigned int v5; // edx\n  __int128 v7; // [rsp+0h] [rbp-48h]\n  __int128 v8; // [rsp+10h] [rbp-38h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  unsigned __int64 v10; // [rsp+28h] [rbp-20h]\n\n  a1[12] = 0x7FFF;\n  v10 = __readfsqword(0x28u);\n  v1 = fopen(\"/proc/sys/kernel/sem\", \"r\");\n  if ( v1 )\n  {\n    v2 = v1;\n    v3 = fscanf(v1, \"%d\\t%d\\t%d\\t%d\", a1 + 9, a1 + 10, a1 + 11, a1 + 8);\n    fclose(v2);\n    if ( v3 == 4 )\n      goto LABEL_5;\n  }\n  v9 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v4 = semctl(0, 0, 3, &v7, 0LL);\n  v5 = 1;\n  if ( v4 >= 0 )\n  {\n    a1[8] = DWORD1(v7);\n    a1[9] = v8;\n    a1[10] = DWORD2(v7);\n    a1[11] = DWORD1(v8);\nLABEL_5:\n    v5 = 0;\n  }\n  return v5;\n}\n", 
            "funcStartAddr": "0x77e0L", 
            "funcEndAddr": "0x78bfL", 
            "funcName": "sub_77E0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_78C0(_QWORD *a1)\n{\n  unsigned int v1; // ebp\n  __int64 v3; // [rsp+0h] [rbp-98h]\n  __int64 v4; // [rsp+10h] [rbp-88h]\n  __int64 v5; // [rsp+20h] [rbp-78h]\n  unsigned __int64 v6; // [rsp+78h] [rbp-20h]\n\n  a1[3] = 1LL;\n  v6 = __readfsqword(0x28u);\n  if ( access(\"/proc/sys/kernel/shmall\", 0)\n    || access(\"/proc/sys/kernel/shmmax\", 0)\n    || (v1 = access(\"/proc/sys/kernel/shmmni\", 0)) != 0 )\n  {\n    v1 = 1;\n    if ( shmctl(0, 3, (struct shmid_ds *)&v3) >= 0 )\n    {\n      v1 = 0;\n      *a1 = v4;\n      a1[2] = v5;\n      a1[1] = v3;\n    }\n  }\n  else\n  {\n    sub_DCF0(0LL, a1 + 2, \"/proc/sys/kernel/shmall\");\n    sub_DCF0(0LL, a1 + 1, \"/proc/sys/kernel/shmmax\");\n    sub_DCF0(0LL, a1, \"/proc/sys/kernel/shmmni\");\n  }\n  return v1;\n}\n", 
            "funcStartAddr": "0x78c0L", 
            "funcEndAddr": "0x79b0L", 
            "funcName": "sub_78C0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_79B0(int a1, void **a2)\n{\n  void *v2; // rax\n  _QWORD *v3; // r15\n  FILE *v4; // r13\n  unsigned int v5; // ebp\n  _QWORD *v7; // rax\n  int v8; // er14\n  int v9; // er13\n  int v10; // eax\n  int v11; // eax\n  int v12; // edx\n  __int64 v13; // rax\n  _QWORD *v14; // rax\n  struct shmid_ds *v15; // [rsp+0h] [rbp-2138h]\n  struct shmid_ds buf; // [rsp+10h] [rbp-2128h]\n  int v17; // [rsp+80h] [rbp-20B8h]\n  int v18; // [rsp+84h] [rbp-20B4h]\n  int v19; // [rsp+88h] [rbp-20B0h]\n  int v20; // [rsp+8Ch] [rbp-20ACh]\n  unsigned __int16 v21; // [rsp+94h] [rbp-20A4h]\n  __int64 v22; // [rsp+B0h] [rbp-2088h]\n  __int64 v23; // [rsp+B8h] [rbp-2080h]\n  __int64 v24; // [rsp+C0h] [rbp-2078h]\n  __int64 v25; // [rsp+C8h] [rbp-2070h]\n  int v26; // [rsp+D0h] [rbp-2068h]\n  int v27; // [rsp+D4h] [rbp-2064h]\n  __int64 v28; // [rsp+D8h] [rbp-2060h]\n  char s; // [rsp+F0h] [rbp-2048h]\n  unsigned __int64 v30; // [rsp+20F8h] [rbp-40h]\n\n  v30 = __readfsqword(0x28u);\n  v2 = calloc(1uLL, 0x68uLL);\n  if ( !v2 )\nLABEL_2:\n    err(1, \"cannot allocate %zu bytes\", 104LL, v15);\n  *a2 = v2;\n  *((_QWORD *)v2 + 12) = 0LL;\n  v3 = v2;\n  v4 = fopen(\"/proc/sysvipc/shm\", \"r\");\n  if ( v4 )\n  {\n    while ( fgetc(v4) != 10 )\n      ;\n    v5 = 0;\n    while ( fgets(&s, 0x2000, v4) )\n    {\n      v3[10] = 57005LL;\n      v3[11] = 57005LL;\n      if ( sscanf(\n             &s,\n             \"%d %d  %o %lu %u %u  %lu %u %u %u %u %li %li %li %lu %lu\\n\",\n             (char *)v3 + 4,\n             v3,\n             v3 + 3,\n             v3 + 5,\n             v3 + 9,\n             (char *)v3 + 76,\n             v3 + 4,\n             v3 + 1,\n             (char *)v3 + 12,\n             v3 + 2,\n             (char *)v3 + 20,\n             v3 + 6,\n             v3 + 7,\n             v3 + 8,\n             v3 + 10,\n             v3 + 11) > 13 )\n      {\n        if ( a1 < 0 )\n        {\n          v7 = calloc(1uLL, 0x68uLL);\n          if ( !v7 )\n            goto LABEL_2;\n          v3[12] = v7;\n          ++v5;\n          v7[12] = 0LL;\n          v3 = v7;\n        }\n        else if ( *(_DWORD *)v3 == a1 )\n        {\n          v5 = 1;\n          goto LABEL_11;\n        }\n      }\n    }\n    if ( !v5 )\n      free(*a2);\nLABEL_11:\n    fclose(v4);\n  }\n  else\n  {\n    v8 = shmctl(0, 14, &buf);\n    if ( v8 < 0 )\n      goto LABEL_30;\n    v9 = 0;\n    v5 = 0;\n    v15 = (struct shmid_ds *)&v17;\n    do\n    {\n      v10 = shmctl(v9, 13, (struct shmid_ds *)&v17);\n      if ( v10 >= 0 && (~a1 >= 0 || a1 == v10) )\n      {\n        *(_DWORD *)v3 = v10;\n        v11 = v21;\n        ++v5;\n        v12 = v17;\n        v3[10] = 57005LL;\n        v3[11] = 57005LL;\n        *((_DWORD *)v3 + 6) = v11;\n        v13 = v22;\n        *((_DWORD *)v3 + 1) = v12;\n        v3[5] = v13;\n        *((_DWORD *)v3 + 18) = v26;\n        *((_DWORD *)v3 + 19) = v27;\n        v3[4] = v28;\n        *((_DWORD *)v3 + 2) = v18;\n        *((_DWORD *)v3 + 3) = v19;\n        LODWORD(v13) = v20;\n        *((_DWORD *)v3 + 4) = v20;\n        *((_DWORD *)v3 + 5) = v13;\n        v3[6] = v23;\n        v3[7] = v24;\n        v3[8] = v25;\n        if ( a1 >= 0 )\n          return v5;\n        v14 = calloc(1uLL, 0x68uLL);\n        if ( !v14 )\n          goto LABEL_2;\n        v3[12] = v14;\n        v14[12] = 0LL;\n        v3 = v14;\n      }\n      ++v9;\n    }\n    while ( v8 >= v9 );\n    if ( !v5 )\n    {\nLABEL_30:\n      v5 = 0;\n      free(*a2);\n    }\n  }\n  return v5;\n}\n", 
            "funcStartAddr": "0x79b0L", 
            "funcEndAddr": "0x7cdbL", 
            "funcName": "sub_79B0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_7CE0(_QWORD *a1)\n{\n  _QWORD *v1; // rbx\n\n  if ( a1 )\n  {\n    do\n    {\n      v1 = (_QWORD *)a1[12];\n      free(a1);\n      a1 = v1;\n    }\n    while ( v1 );\n  }\n}\n", 
            "funcStartAddr": "0x7ce0L", 
            "funcEndAddr": "0x7d0aL", 
            "funcName": "sub_7CE0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_7D10(int a1, void **a2)\n{\n  void *v2; // rax\n  __int64 v3; // r15\n  FILE *v4; // r13\n  unsigned int v5; // ebp\n  _QWORD *v7; // rax\n  int v8; // er14\n  int v9; // er13\n  int v10; // eax\n  int v11; // edx\n  __int64 v12; // rax\n  _QWORD *v13; // rax\n  int *v14; // [rsp+0h] [rbp-E8h]\n  char v15; // [rsp+10h] [rbp-D8h]\n  int v16; // [rsp+40h] [rbp-A8h]\n  int v17; // [rsp+44h] [rbp-A4h]\n  int v18; // [rsp+48h] [rbp-A0h]\n  int v19; // [rsp+4Ch] [rbp-9Ch]\n  unsigned __int16 v20; // [rsp+54h] [rbp-94h]\n  __int64 v21; // [rsp+70h] [rbp-78h]\n  __int64 v22; // [rsp+80h] [rbp-68h]\n  __int64 v23; // [rsp+90h] [rbp-58h]\n  unsigned __int64 v24; // [rsp+A8h] [rbp-40h]\n\n  v24 = __readfsqword(0x28u);\n  v2 = calloc(1uLL, 0x48uLL);\n  if ( !v2 )\nLABEL_2:\n    err(1, \"cannot allocate %zu bytes\", 72LL);\n  *a2 = v2;\n  *((_QWORD *)v2 + 8) = 0LL;\n  v3 = (__int64)v2;\n  v4 = fopen(\"/proc/sysvipc/sem\", \"r\");\n  if ( v4 )\n  {\n    while ( fgetc(v4) != 10 )\n      ;\n    v5 = 0;\n    while ( !feof(v4) )\n    {\n      if ( fscanf(\n             v4,\n             \"%d %d  %o %lu %u %u %u %u %li %li\\n\",\n             v3 + 4,\n             v3,\n             v3 + 24,\n             v3 + 48,\n             v3 + 8,\n             v3 + 12,\n             v3 + 16,\n             v3 + 20,\n             v3 + 40,\n             v3 + 32) == 10 )\n      {\n        if ( a1 < 0 )\n        {\n          v7 = calloc(1uLL, 0x48uLL);\n          if ( !v7 )\n            goto LABEL_2;\n          *(_QWORD *)(v3 + 64) = v7;\n          ++v5;\n          v7[8] = 0LL;\n          v3 = (__int64)v7;\n        }\n        else if ( *(_DWORD *)v3 == a1 )\n        {\n          v5 = 1;\n          sub_7520(v3);\n          goto LABEL_11;\n        }\n      }\n    }\n    if ( !v5 )\n      free(*a2);\nLABEL_11:\n    fclose(v4);\n  }\n  else\n  {\n    v8 = semctl(0, 0, 19, &v15);\n    if ( v8 >= 0 )\n    {\n      v9 = 0;\n      v5 = 0;\n      v14 = &v16;\n      do\n      {\n        v10 = semctl(v9, 0, 18, v14, v14);\n        if ( v10 >= 0 && (~a1 >= 0 || a1 == v10) )\n        {\n          *(_DWORD *)v3 = v10;\n          v11 = v16;\n          *(_DWORD *)(v3 + 24) = v20;\n          v12 = v23;\n          *(_DWORD *)(v3 + 4) = v11;\n          *(_QWORD *)(v3 + 48) = v12;\n          *(_DWORD *)(v3 + 8) = v17;\n          *(_DWORD *)(v3 + 12) = v18;\n          LODWORD(v12) = v19;\n          *(_DWORD *)(v3 + 16) = v19;\n          *(_DWORD *)(v3 + 20) = v12;\n          *(_QWORD *)(v3 + 40) = v21;\n          *(_QWORD *)(v3 + 32) = v22;\n          if ( a1 >= 0 )\n          {\n            ++v5;\n            sub_7520(v3);\n            return v5;\n          }\n          v13 = calloc(1uLL, 0x48uLL);\n          if ( !v13 )\n            goto LABEL_2;\n          *(_QWORD *)(v3 + 64) = v13;\n          v5 += 2;\n          v13[8] = 0LL;\n          v3 = (__int64)v13;\n        }\n        ++v9;\n      }\n      while ( v8 >= v9 );\n      if ( v5 )\n        return v5;\n    }\n    v5 = 0;\n    free(*a2);\n  }\n  return v5;\n}\n", 
            "funcStartAddr": "0x7d10L", 
            "funcEndAddr": "0x7fb8L", 
            "funcName": "sub_7D10"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_7FC0(void *ptr)\n{\n  void *v1; // rbx\n  void *v2; // rbp\n  void *v3; // rdi\n\n  if ( ptr )\n  {\n    v1 = ptr;\n    do\n    {\n      v2 = (void *)*((_QWORD *)v1 + 8);\n      free(*((void **)v1 + 7));\n      v3 = v1;\n      v1 = v2;\n      free(v3);\n    }\n    while ( v2 );\n  }\n}\n", 
            "funcStartAddr": "0x7fc0L", 
            "funcEndAddr": "0x7ffaL", 
            "funcName": "sub_7FC0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_8000(int msqid, void **a2)\n{\n  void *v2; // rax\n  _QWORD *v3; // r15\n  FILE *v4; // r13\n  unsigned int v5; // ebp\n  _QWORD *v7; // rax\n  int v8; // er14\n  int v9; // er13\n  int v10; // eax\n  __key_t v11; // edx\n  __syscall_ulong_t v12; // rax\n  _QWORD *v13; // rax\n  struct msqid_ds *v14; // [rsp+0h] [rbp-148h]\n  struct msqid_ds v15; // [rsp+10h] [rbp-138h]\n  struct msqid_ds buf; // [rsp+90h] [rbp-B8h]\n  unsigned __int64 v17; // [rsp+108h] [rbp-40h]\n\n  v17 = __readfsqword(0x28u);\n  v2 = calloc(1uLL, 0x60uLL);\n  if ( !v2 )\nLABEL_2:\n    err(1, \"cannot allocate %zu bytes\", 96LL, v14);\n  *a2 = v2;\n  *((_QWORD *)v2 + 11) = 0LL;\n  v3 = v2;\n  v4 = fopen(\"/proc/sysvipc/msg\", \"r\");\n  if ( v4 )\n  {\n    while ( fgetc(v4) != 10 )\n      ;\n    v5 = 0;\n    while ( !feof(v4) )\n    {\n      if ( fscanf(\n             v4,\n             \"%d %d  %o  %lu %lu %u %u %u %u %u %u %li %li %li\\n\",\n             (char *)v3 + 4,\n             v3,\n             v3 + 3,\n             v3 + 7,\n             v3 + 8,\n             v3 + 10,\n             (char *)v3 + 84,\n             v3 + 1,\n             (char *)v3 + 12,\n             v3 + 2,\n             (char *)v3 + 20,\n             v3 + 4,\n             v3 + 5,\n             v3 + 6) == 14 )\n      {\n        if ( msqid < 0 )\n        {\n          v7 = calloc(1uLL, 0x60uLL);\n          if ( !v7 )\n            goto LABEL_2;\n          v3[11] = v7;\n          ++v5;\n          v7[11] = 0LL;\n          v3 = v7;\n        }\n        else if ( *(_DWORD *)v3 == msqid )\n        {\n          v5 = 1;\n          if ( msgctl(msqid, 2, &buf) != -1 )\n            v3[9] = buf.msg_qbytes;\n          goto LABEL_12;\n        }\n      }\n    }\n    if ( !v5 )\n      free(*a2);\nLABEL_12:\n    fclose(v4);\n  }\n  else\n  {\n    v8 = msgctl(0, 12, &v15);\n    if ( v8 < 0 )\n      goto LABEL_31;\n    v9 = 0;\n    v5 = 0;\n    v14 = &buf;\n    do\n    {\n      v10 = msgctl(v9, 11, &buf);\n      if ( v10 >= 0 && (~msqid >= 0 || msqid == v10) )\n      {\n        *(_DWORD *)v3 = v10;\n        ++v5;\n        v11 = buf.msg_perm.__key;\n        *((_DWORD *)v3 + 6) = buf.msg_perm.mode;\n        v12 = buf.__msg_cbytes;\n        *((_DWORD *)v3 + 1) = v11;\n        v3[7] = v12;\n        v3[8] = buf.msg_qnum;\n        *((_DWORD *)v3 + 20) = buf.msg_lspid;\n        *((_DWORD *)v3 + 21) = buf.msg_lrpid;\n        *((_DWORD *)v3 + 2) = buf.msg_perm.uid;\n        *((_DWORD *)v3 + 3) = buf.msg_perm.gid;\n        *((_DWORD *)v3 + 4) = buf.msg_perm.cuid;\n        *((_DWORD *)v3 + 5) = buf.msg_perm.cgid;\n        v3[4] = buf.msg_stime;\n        v3[5] = buf.msg_rtime;\n        v3[6] = buf.msg_ctime;\n        v3[9] = buf.msg_qbytes;\n        if ( msqid >= 0 )\n          return v5;\n        v13 = calloc(1uLL, 0x60uLL);\n        if ( !v13 )\n          goto LABEL_2;\n        v3[11] = v13;\n        v13[11] = 0LL;\n        v3 = v13;\n      }\n      ++v9;\n    }\n    while ( v8 >= v9 );\n    if ( !v5 )\n    {\nLABEL_31:\n      v5 = 0;\n      free(*a2);\n    }\n  }\n  return v5;\n}\n", 
            "funcStartAddr": "0x8000L", 
            "funcEndAddr": "0x831eL", 
            "funcName": "sub_8000"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_8320(_QWORD *a1)\n{\n  _QWORD *v1; // rbx\n\n  if ( a1 )\n  {\n    do\n    {\n      v1 = (_QWORD *)a1[11];\n      free(a1);\n      a1 = v1;\n    }\n    while ( v1 );\n  }\n}\n", 
            "funcStartAddr": "0x8320L", 
            "funcEndAddr": "0x834aL", 
            "funcName": "sub_8320"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_8350(__int64 a1, __uid_t *a2)\n{\n  __uid_t v2; // er8\n  struct passwd *v3; // rax\n  struct group *v4; // rax\n  struct passwd *v5; // rax\n  struct group *v6; // rax\n  __int64 result; // rax\n\n  v2 = a2[6];\n  __fprintf_chk(a1, 1LL, \"%-10d %-10o\", *a2);\n  v3 = getpwuid(a2[4]);\n  if ( v3 )\n    __fprintf_chk(a1, 1LL, \" %-10s\", v3->pw_name);\n  else\n    __fprintf_chk(a1, 1LL, \" %-10u\", a2[4]);\n  v4 = getgrgid(a2[5]);\n  if ( v4 )\n    __fprintf_chk(a1, 1LL, \" %-10s\", v4->gr_name);\n  else\n    __fprintf_chk(a1, 1LL, \" %-10u\", a2[5]);\n  v5 = getpwuid(a2[2]);\n  if ( v5 )\n    __fprintf_chk(a1, 1LL, \" %-10s\", v5->pw_name);\n  else\n    __fprintf_chk(a1, 1LL, \" %-10u\", a2[2]);\n  v6 = getgrgid(a2[3]);\n  if ( v6 )\n    result = __fprintf_chk(a1, 1LL, \" %-10s\\n\", v6->gr_name);\n  else\n    result = __fprintf_chk(a1, 1LL, \" %-10u\\n\", a2[3]);\n  return result;\n}\n", 
            "funcStartAddr": "0x8350L", 
            "funcEndAddr": "0x84aeL", 
            "funcName": "sub_8350"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_86D0(_BYTE *a1, signed __int64 *a2)\n{\n  _BYTE *result; // rax\n  char v3; // dl\n  signed __int64 v4; // rdx\n  char v5; // cl\n\n  *a2 = 0LL;\n  if ( !a1 )\n    return 0LL;\n  while ( *a1 == 47 )\n  {\n    if ( a1[1] != 47 )\n    {\n      result = a1;\n      goto LABEL_7;\n    }\n    if ( !++a1 )\n      return 0LL;\n  }\n  result = a1;\n  if ( !*a1 )\n    return 0LL;\nLABEL_7:\n  *a2 = 1LL;\n  v3 = a1[1];\n  if ( v3 != 47 && v3 )\n  {\n    v4 = 2LL;\n    do\n    {\n      *a2 = v4;\n      v5 = a1[v4++];\n    }\n    while ( v5 && v5 != 47 );\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x86d0L", 
            "funcEndAddr": "0x8755L", 
            "funcName": "sub_86D0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_8760(_BYTE *a1, const char *a2)\n{\n  const char *v2; // r12\n  __int64 result; // rax\n  int v4; // esi\n  int v5; // ebx\n  _BYTE *v6; // r13\n\n  v2 = a2;\n  result = 0LL;\n  v4 = (char)*a1;\n  if ( *a1 )\n  {\n    v5 = 0;\n    while ( (_BYTE)v4 == 92 )\n    {\nLABEL_8:\n      if ( !a1[v5 + 1] )\n        goto LABEL_11;\n      v5 += 2;\n      result = v5;\n      v4 = (char)a1[v5];\n      if ( !a1[v5] )\n        return result;\n    }\n    v6 = &a1[v5 + 1];\n    while ( !strchr(v2, v4) )\n    {\n      v4 = (char)*v6;\n      ++v5;\n      if ( !*v6 )\n        break;\n      ++v6;\n      if ( (_BYTE)v4 == 92 )\n        goto LABEL_8;\n    }\nLABEL_11:\n    result = v5;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x8760L", 
            "funcEndAddr": "0x87eeL", 
            "funcName": "sub_8760"
        }, 
        {
            "decompiledFuncCode": "// write access to const memory has been detected, the output may be wrong!\n__int64 __usercall sub_8D30@<rax>(char *nptr@<rdi>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned __int64 *a4@<rsi>, __int64 a5@<r12>, __int64 a6@<r13>, __int64 a7@<r14>, __int64 a8@<r15>)\n{\n  unsigned __int64 *v8; // rbp\n  int *v9; // rbx\n  unsigned __int8 v10; // r14\n  const unsigned __int16 **v11; // rax\n  const unsigned __int16 **v12; // r13\n  const unsigned __int16 *v13; // rcx\n  char *v14; // rax\n  int v15; // eax\n  unsigned int v16; // ecx\n  unsigned __int64 v18; // rax\n  char *v19; // r14\n  int v20; // ecx\n  int v21; // er15\n  char v22; // al\n  struct lconv *v23; // rax\n  size_t v24; // rax\n  char *v25; // r8\n  __int64 i; // rax\n  signed int v27; // er13\n  int v28; // er14\n  char *v29; // rax\n  int v30; // edi\n  int v31; // ecx\n  int v32; // edi\n  int v33; // er8\n  unsigned __int64 v34; // r10\n  unsigned __int64 v35; // rdi\n  unsigned __int64 v36; // r8\n  int v37; // esi\n  char *v38; // ST08_8\n  unsigned __int64 v39; // rax\n  unsigned __int64 v40; // r9\n  signed __int64 v41; // r11\n  unsigned __int64 v42; // rsi\n  unsigned __int64 v43; // r13\n  unsigned __int64 v44; // r9\n  char *v45; // rax\n  size_t v46; // [rsp+0h] [rbp-70h]\n  char *s1; // [rsp+8h] [rbp-68h]\n  unsigned __int64 v48; // [rsp+10h] [rbp-60h]\n  unsigned __int64 v49; // [rsp+18h] [rbp-58h]\n  char *endptr; // [rsp+28h] [rbp-48h]\n  unsigned __int64 v51; // [rsp+30h] [rbp-40h]\n  __int64 v52; // [rsp+40h] [rbp-30h]\n  __int64 v53; // [rsp+48h] [rbp-28h]\n  __int64 v54; // [rsp+50h] [rbp-20h]\n  __int64 v55; // [rsp+58h] [rbp-18h]\n  __int64 v56; // [rsp+60h] [rbp-10h]\n  __int64 v57; // [rsp+68h] [rbp-8h]\n\n  v57 = a8;\n  v56 = a7;\n  v55 = a6;\n  v54 = a5;\n  v53 = a3;\n  v52 = a2;\n  v8 = a4;\n  *a4 = 0LL;\n  v51 = __readfsqword(0x28u);\n  v9 = __errno_location();\n  if ( !nptr )\n    goto LABEL_7;\n  v10 = *nptr;\n  if ( !*nptr )\n    goto LABEL_7;\n  v11 = __ctype_b_loc();\n  v12 = v11;\n  v13 = *v11;\n  v14 = nptr;\n  while ( v13[v10] & 0x2000 )\n    v10 = *++v14;\n  if ( v10 == 45 )\n    goto LABEL_7;\n  *v9 = 0;\n  endptr = 0LL;\n  v18 = __strtoul_internal(nptr, &endptr, 0, 0);\n  v19 = endptr;\n  v48 = v18;\n  v20 = *v9;\n  if ( endptr == nptr )\n  {\nLABEL_33:\n    if ( !v20 )\n    {\nLABEL_7:\n      v15 = 22;\n      v16 = -22;\n      goto LABEL_8;\n    }\nLABEL_13:\n    v16 = -v20;\n    goto LABEL_14;\n  }\n  if ( v20 && v18 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n    goto LABEL_13;\n  if ( !endptr || !*endptr )\n  {\n    v16 = 0;\n    *a4 = v18;\n    return v16;\n  }\n  v21 = 0;\n  v49 = 0LL;\n  while ( 1 )\n  {\n    v22 = v19[1];\n    if ( v22 == 105 )\n    {\n      if ( (v19[2] & 0xDF) == 66 && !v19[3] )\n      {\nLABEL_37:\n        v27 = 1024;\n        goto LABEL_38;\n      }\n      goto LABEL_23;\n    }\n    if ( (v22 & 0xDF) == 66 && !v19[2] )\n      break;\n    if ( !v22 )\n      goto LABEL_37;\nLABEL_23:\n    v23 = localeconv();\n    if ( !v23 )\n      goto LABEL_7;\n    if ( !v23->decimal_point )\n      goto LABEL_7;\n    s1 = v23->decimal_point;\n    v24 = strlen(v23->decimal_point);\n    if ( v49 )\n      goto LABEL_7;\n    if ( !*v19 )\n      goto LABEL_7;\n    v46 = v24;\n    if ( strncmp(s1, v19, v24) )\n      goto LABEL_7;\n    v25 = &v19[v46];\n    for ( i = v19[v46]; (_BYTE)i == 48; ++v21 )\n      i = *++v25;\n    if ( (*v12)[i] & 0x800 )\n    {\n      *v9 = 0;\n      v38 = v25;\n      endptr = 0LL;\n      v39 = __strtoul_internal(v25, &endptr, 0, 0);\n      v19 = endptr;\n      v49 = v39;\n      v20 = *v9;\n      if ( endptr == v38 )\n        goto LABEL_33;\n      if ( v20 )\n      {\n        if ( v39 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n          goto LABEL_13;\n        goto LABEL_62;\n      }\n      if ( v39 )\n      {\nLABEL_62:\n        if ( !endptr || !*endptr )\n          goto LABEL_7;\n      }\n    }\n    else\n    {\n      endptr = v25;\n      v19 = v25;\n    }\n  }\n  v27 = 1000;\nLABEL_38:\n  v28 = *v19;\n  v29 = strchr(\"KMGTPEZY\", v28);\n  if ( v29 )\n  {\n    v30 = (unsigned __int64)(v29 - \"KMGTPEZY\") + 1;\n    goto LABEL_40;\n  }\n  v45 = strchr(\"kmgtpezy\", v28);\n  if ( !v45 )\n    goto LABEL_7;\n  v30 = (unsigned __int64)(v45 - \"kmgtpezy\") + 1;\nLABEL_40:\n  if ( v30 )\n  {\n    if ( is_mul_ok(v27, v48) )\n    {\n      v31 = 0;\n      while ( 1 )\n      {\n        v48 *= v27;\n        if ( v30 - 1 == v31 )\n          break;\n        ++v31;\n        if ( !is_mul_ok(v27, v48) )\n          goto LABEL_77;\n      }\n      v16 = 0;\n    }\n    else\n    {\nLABEL_77:\n      v16 = -34;\n    }\n    if ( v49 )\n    {\n      v32 = v30 - 1;\n      v33 = 0;\n      v34 = 1LL;\n      do\n      {\n        v34 *= v27;\n        if ( v33 == v32 )\n          break;\n        ++v33;\n      }\n      while ( is_mul_ok(v27, v34) );\n      if ( v49 <= 0xA )\n      {\n        v36 = v49;\n        v35 = 10LL;\n      }\n      else\n      {\n        v35 = 10LL;\n        while ( 1 )\n        {\n          v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v49 >> 64) >> 3;\n          if ( v35 > 0x1999999999999999LL )\n            break;\n          v35 *= 10LL;\n          if ( v35 >= v49 )\n          {\n            v36 = v49;\n            break;\n          }\n        }\n      }\n      if ( v21 )\n      {\n        v37 = 0;\n        do\n        {\n          if ( v35 <= 0x1999999999999999LL )\n            v35 *= 10LL;\n          else\n            v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n          ++v37;\n        }\n        while ( v21 != v37 );\n      }\n      v40 = 1LL;\n      do\n      {\n        v41 = 10 * v40;\n        v42 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        v43 = v36 - 10 * v42;\n        v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        if ( v43 )\n        {\n          v44 = v35 / v40 / v43;\n          if ( v44 )\n            v48 += v34 / v44;\n        }\n        v40 = v41;\n      }\n      while ( v42 );\n    }\n    *v8 = v48;\nLABEL_14:\n    if ( (v16 & 0x80000000) != 0 )\n    {\n      v15 = -v16;\nLABEL_8:\n      *v9 = v15;\n    }\n  }\n  else\n  {\n    v16 = 0;\n    *a4 = v48;\n  }\n  return v16;\n}\n\n// write access to const memory has been detected, the output may be wrong!\n__int64 __usercall sub_8D30@<rax>(char *nptr@<rdi>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned __int64 *a4@<rsi>, __int64 a5@<r12>, __int64 a6@<r13>, __int64 a7@<r14>, __int64 a8@<r15>)\n{\n  unsigned __int64 *v8; // rbp\n  int *v9; // rbx\n  unsigned __int8 v10; // r14\n  const unsigned __int16 **v11; // rax\n  const unsigned __int16 **v12; // r13\n  const unsigned __int16 *v13; // rcx\n  char *v14; // rax\n  int v15; // eax\n  unsigned int v16; // ecx\n  unsigned __int64 v18; // rax\n  char *v19; // r14\n  int v20; // ecx\n  int v21; // er15\n  char v22; // al\n  struct lconv *v23; // rax\n  size_t v24; // rax\n  char *v25; // r8\n  __int64 i; // rax\n  signed int v27; // er13\n  int v28; // er14\n  char *v29; // rax\n  int v30; // edi\n  int v31; // ecx\n  int v32; // edi\n  int v33; // er8\n  unsigned __int64 v34; // r10\n  unsigned __int64 v35; // rdi\n  unsigned __int64 v36; // r8\n  int v37; // esi\n  char *v38; // ST08_8\n  unsigned __int64 v39; // rax\n  unsigned __int64 v40; // r9\n  signed __int64 v41; // r11\n  unsigned __int64 v42; // rsi\n  unsigned __int64 v43; // r13\n  unsigned __int64 v44; // r9\n  char *v45; // rax\n  size_t v46; // [rsp+0h] [rbp-70h]\n  char *s1; // [rsp+8h] [rbp-68h]\n  unsigned __int64 v48; // [rsp+10h] [rbp-60h]\n  unsigned __int64 v49; // [rsp+18h] [rbp-58h]\n  char *endptr; // [rsp+28h] [rbp-48h]\n  unsigned __int64 v51; // [rsp+30h] [rbp-40h]\n  __int64 v52; // [rsp+40h] [rbp-30h]\n  __int64 v53; // [rsp+48h] [rbp-28h]\n  __int64 v54; // [rsp+50h] [rbp-20h]\n  __int64 v55; // [rsp+58h] [rbp-18h]\n  __int64 v56; // [rsp+60h] [rbp-10h]\n  __int64 v57; // [rsp+68h] [rbp-8h]\n\n  v57 = a8;\n  v56 = a7;\n  v55 = a6;\n  v54 = a5;\n  v53 = a3;\n  v52 = a2;\n  v8 = a4;\n  *a4 = 0LL;\n  v51 = __readfsqword(0x28u);\n  v9 = __errno_location();\n  if ( !nptr )\n    goto LABEL_7;\n  v10 = *nptr;\n  if ( !*nptr )\n    goto LABEL_7;\n  v11 = __ctype_b_loc();\n  v12 = v11;\n  v13 = *v11;\n  v14 = nptr;\n  while ( v13[v10] & 0x2000 )\n    v10 = *++v14;\n  if ( v10 == 45 )\n    goto LABEL_7;\n  *v9 = 0;\n  endptr = 0LL;\n  v18 = __strtoul_internal(nptr, &endptr, 0, 0);\n  v19 = endptr;\n  v48 = v18;\n  v20 = *v9;\n  if ( endptr == nptr )\n  {\nLABEL_33:\n    if ( !v20 )\n    {\nLABEL_7:\n      v15 = 22;\n      v16 = -22;\n      goto LABEL_8;\n    }\nLABEL_13:\n    v16 = -v20;\n    goto LABEL_14;\n  }\n  if ( v20 && v18 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n    goto LABEL_13;\n  if ( !endptr || !*endptr )\n  {\n    v16 = 0;\n    *a4 = v18;\n    return v16;\n  }\n  v21 = 0;\n  v49 = 0LL;\n  while ( 1 )\n  {\n    v22 = v19[1];\n    if ( v22 == 105 )\n    {\n      if ( (v19[2] & 0xDF) == 66 && !v19[3] )\n      {\nLABEL_37:\n        v27 = 1024;\n        goto LABEL_38;\n      }\n      goto LABEL_23;\n    }\n    if ( (v22 & 0xDF) == 66 && !v19[2] )\n      break;\n    if ( !v22 )\n      goto LABEL_37;\nLABEL_23:\n    v23 = localeconv();\n    if ( !v23 )\n      goto LABEL_7;\n    if ( !v23->decimal_point )\n      goto LABEL_7;\n    s1 = v23->decimal_point;\n    v24 = strlen(v23->decimal_point);\n    if ( v49 )\n      goto LABEL_7;\n    if ( !*v19 )\n      goto LABEL_7;\n    v46 = v24;\n    if ( strncmp(s1, v19, v24) )\n      goto LABEL_7;\n    v25 = &v19[v46];\n    for ( i = v19[v46]; (_BYTE)i == 48; ++v21 )\n      i = *++v25;\n    if ( (*v12)[i] & 0x800 )\n    {\n      *v9 = 0;\n      v38 = v25;\n      endptr = 0LL;\n      v39 = __strtoul_internal(v25, &endptr, 0, 0);\n      v19 = endptr;\n      v49 = v39;\n      v20 = *v9;\n      if ( endptr == v38 )\n        goto LABEL_33;\n      if ( v20 )\n      {\n        if ( v39 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n          goto LABEL_13;\n        goto LABEL_62;\n      }\n      if ( v39 )\n      {\nLABEL_62:\n        if ( !endptr || !*endptr )\n          goto LABEL_7;\n      }\n    }\n    else\n    {\n      endptr = v25;\n      v19 = v25;\n    }\n  }\n  v27 = 1000;\nLABEL_38:\n  v28 = *v19;\n  v29 = strchr(\"KMGTPEZY\", v28);\n  if ( v29 )\n  {\n    v30 = (unsigned __int64)(v29 - \"KMGTPEZY\") + 1;\n    goto LABEL_40;\n  }\n  v45 = strchr(\"kmgtpezy\", v28);\n  if ( !v45 )\n    goto LABEL_7;\n  v30 = (unsigned __int64)(v45 - \"kmgtpezy\") + 1;\nLABEL_40:\n  if ( v30 )\n  {\n    if ( is_mul_ok(v27, v48) )\n    {\n      v31 = 0;\n      while ( 1 )\n      {\n        v48 *= v27;\n        if ( v30 - 1 == v31 )\n          break;\n        ++v31;\n        if ( !is_mul_ok(v27, v48) )\n          goto LABEL_77;\n      }\n      v16 = 0;\n    }\n    else\n    {\nLABEL_77:\n      v16 = -34;\n    }\n    if ( v49 )\n    {\n      v32 = v30 - 1;\n      v33 = 0;\n      v34 = 1LL;\n      do\n      {\n        v34 *= v27;\n        if ( v33 == v32 )\n          break;\n        ++v33;\n      }\n      while ( is_mul_ok(v27, v34) );\n      if ( v49 <= 0xA )\n      {\n        v36 = v49;\n        v35 = 10LL;\n      }\n      else\n      {\n        v35 = 10LL;\n        while ( 1 )\n        {\n          v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v49 >> 64) >> 3;\n          if ( v35 > 0x1999999999999999LL )\n            break;\n          v35 *= 10LL;\n          if ( v35 >= v49 )\n          {\n            v36 = v49;\n            break;\n          }\n        }\n      }\n      if ( v21 )\n      {\n        v37 = 0;\n        do\n        {\n          if ( v35 <= 0x1999999999999999LL )\n            v35 *= 10LL;\n          else\n            v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n          ++v37;\n        }\n        while ( v21 != v37 );\n      }\n      v40 = 1LL;\n      do\n      {\n        v41 = 10 * v40;\n        v42 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        v43 = v36 - 10 * v42;\n        v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        if ( v43 )\n        {\n          v44 = v35 / v40 / v43;\n          if ( v44 )\n            v48 += v34 / v44;\n        }\n        v40 = v41;\n      }\n      while ( v42 );\n    }\n    *v8 = v48;\nLABEL_14:\n    if ( (v16 & 0x80000000) != 0 )\n    {\n      v15 = -v16;\nLABEL_8:\n      *v9 = v15;\n    }\n  }\n  else\n  {\n    v16 = 0;\n    *a4 = v48;\n  }\n  return v16;\n}\n\n// write access to const memory has been detected, the output may be wrong!\n__int64 __usercall sub_8D30@<rax>(char *nptr@<rdi>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned __int64 *a4@<rsi>, __int64 a5@<r12>, __int64 a6@<r13>, __int64 a7@<r14>, __int64 a8@<r15>)\n{\n  unsigned __int64 *v8; // rbp\n  int *v9; // rbx\n  unsigned __int8 v10; // r14\n  const unsigned __int16 **v11; // rax\n  const unsigned __int16 **v12; // r13\n  const unsigned __int16 *v13; // rcx\n  char *v14; // rax\n  int v15; // eax\n  unsigned int v16; // ecx\n  unsigned __int64 v18; // rax\n  char *v19; // r14\n  int v20; // ecx\n  int v21; // er15\n  char v22; // al\n  struct lconv *v23; // rax\n  size_t v24; // rax\n  char *v25; // r8\n  __int64 i; // rax\n  signed int v27; // er13\n  int v28; // er14\n  char *v29; // rax\n  int v30; // edi\n  int v31; // ecx\n  int v32; // edi\n  int v33; // er8\n  unsigned __int64 v34; // r10\n  unsigned __int64 v35; // rdi\n  unsigned __int64 v36; // r8\n  int v37; // esi\n  char *v38; // ST08_8\n  unsigned __int64 v39; // rax\n  unsigned __int64 v40; // r9\n  signed __int64 v41; // r11\n  unsigned __int64 v42; // rsi\n  unsigned __int64 v43; // r13\n  unsigned __int64 v44; // r9\n  char *v45; // rax\n  size_t v46; // [rsp+0h] [rbp-70h]\n  char *s1; // [rsp+8h] [rbp-68h]\n  unsigned __int64 v48; // [rsp+10h] [rbp-60h]\n  unsigned __int64 v49; // [rsp+18h] [rbp-58h]\n  char *endptr; // [rsp+28h] [rbp-48h]\n  unsigned __int64 v51; // [rsp+30h] [rbp-40h]\n  __int64 v52; // [rsp+40h] [rbp-30h]\n  __int64 v53; // [rsp+48h] [rbp-28h]\n  __int64 v54; // [rsp+50h] [rbp-20h]\n  __int64 v55; // [rsp+58h] [rbp-18h]\n  __int64 v56; // [rsp+60h] [rbp-10h]\n  __int64 v57; // [rsp+68h] [rbp-8h]\n\n  v57 = a8;\n  v56 = a7;\n  v55 = a6;\n  v54 = a5;\n  v53 = a3;\n  v52 = a2;\n  v8 = a4;\n  *a4 = 0LL;\n  v51 = __readfsqword(0x28u);\n  v9 = __errno_location();\n  if ( !nptr )\n    goto LABEL_7;\n  v10 = *nptr;\n  if ( !*nptr )\n    goto LABEL_7;\n  v11 = __ctype_b_loc();\n  v12 = v11;\n  v13 = *v11;\n  v14 = nptr;\n  while ( v13[v10] & 0x2000 )\n    v10 = *++v14;\n  if ( v10 == 45 )\n    goto LABEL_7;\n  *v9 = 0;\n  endptr = 0LL;\n  v18 = __strtoul_internal(nptr, &endptr, 0, 0);\n  v19 = endptr;\n  v48 = v18;\n  v20 = *v9;\n  if ( endptr == nptr )\n  {\nLABEL_33:\n    if ( !v20 )\n    {\nLABEL_7:\n      v15 = 22;\n      v16 = -22;\n      goto LABEL_8;\n    }\nLABEL_13:\n    v16 = -v20;\n    goto LABEL_14;\n  }\n  if ( v20 && v18 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n    goto LABEL_13;\n  if ( !endptr || !*endptr )\n  {\n    v16 = 0;\n    *a4 = v18;\n    return v16;\n  }\n  v21 = 0;\n  v49 = 0LL;\n  while ( 1 )\n  {\n    v22 = v19[1];\n    if ( v22 == 105 )\n    {\n      if ( (v19[2] & 0xDF) == 66 && !v19[3] )\n      {\nLABEL_37:\n        v27 = 1024;\n        goto LABEL_38;\n      }\n      goto LABEL_23;\n    }\n    if ( (v22 & 0xDF) == 66 && !v19[2] )\n      break;\n    if ( !v22 )\n      goto LABEL_37;\nLABEL_23:\n    v23 = localeconv();\n    if ( !v23 )\n      goto LABEL_7;\n    if ( !v23->decimal_point )\n      goto LABEL_7;\n    s1 = v23->decimal_point;\n    v24 = strlen(v23->decimal_point);\n    if ( v49 )\n      goto LABEL_7;\n    if ( !*v19 )\n      goto LABEL_7;\n    v46 = v24;\n    if ( strncmp(s1, v19, v24) )\n      goto LABEL_7;\n    v25 = &v19[v46];\n    for ( i = v19[v46]; (_BYTE)i == 48; ++v21 )\n      i = *++v25;\n    if ( (*v12)[i] & 0x800 )\n    {\n      *v9 = 0;\n      v38 = v25;\n      endptr = 0LL;\n      v39 = __strtoul_internal(v25, &endptr, 0, 0);\n      v19 = endptr;\n      v49 = v39;\n      v20 = *v9;\n      if ( endptr == v38 )\n        goto LABEL_33;\n      if ( v20 )\n      {\n        if ( v39 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n          goto LABEL_13;\n        goto LABEL_62;\n      }\n      if ( v39 )\n      {\nLABEL_62:\n        if ( !endptr || !*endptr )\n          goto LABEL_7;\n      }\n    }\n    else\n    {\n      endptr = v25;\n      v19 = v25;\n    }\n  }\n  v27 = 1000;\nLABEL_38:\n  v28 = *v19;\n  v29 = strchr(\"KMGTPEZY\", v28);\n  if ( v29 )\n  {\n    v30 = (unsigned __int64)(v29 - \"KMGTPEZY\") + 1;\n    goto LABEL_40;\n  }\n  v45 = strchr(\"kmgtpezy\", v28);\n  if ( !v45 )\n    goto LABEL_7;\n  v30 = (unsigned __int64)(v45 - \"kmgtpezy\") + 1;\nLABEL_40:\n  if ( v30 )\n  {\n    if ( is_mul_ok(v27, v48) )\n    {\n      v31 = 0;\n      while ( 1 )\n      {\n        v48 *= v27;\n        if ( v30 - 1 == v31 )\n          break;\n        ++v31;\n        if ( !is_mul_ok(v27, v48) )\n          goto LABEL_77;\n      }\n      v16 = 0;\n    }\n    else\n    {\nLABEL_77:\n      v16 = -34;\n    }\n    if ( v49 )\n    {\n      v32 = v30 - 1;\n      v33 = 0;\n      v34 = 1LL;\n      do\n      {\n        v34 *= v27;\n        if ( v33 == v32 )\n          break;\n        ++v33;\n      }\n      while ( is_mul_ok(v27, v34) );\n      if ( v49 <= 0xA )\n      {\n        v36 = v49;\n        v35 = 10LL;\n      }\n      else\n      {\n        v35 = 10LL;\n        while ( 1 )\n        {\n          v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v49 >> 64) >> 3;\n          if ( v35 > 0x1999999999999999LL )\n            break;\n          v35 *= 10LL;\n          if ( v35 >= v49 )\n          {\n            v36 = v49;\n            break;\n          }\n        }\n      }\n      if ( v21 )\n      {\n        v37 = 0;\n        do\n        {\n          if ( v35 <= 0x1999999999999999LL )\n            v35 *= 10LL;\n          else\n            v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n          ++v37;\n        }\n        while ( v21 != v37 );\n      }\n      v40 = 1LL;\n      do\n      {\n        v41 = 10 * v40;\n        v42 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        v43 = v36 - 10 * v42;\n        v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        if ( v43 )\n        {\n          v44 = v35 / v40 / v43;\n          if ( v44 )\n            v48 += v34 / v44;\n        }\n        v40 = v41;\n      }\n      while ( v42 );\n    }\n    *v8 = v48;\nLABEL_14:\n    if ( (v16 & 0x80000000) != 0 )\n    {\n      v15 = -v16;\nLABEL_8:\n      *v9 = v15;\n    }\n  }\n  else\n  {\n    v16 = 0;\n    *a4 = v48;\n  }\n  return v16;\n}\n\n// write access to const memory has been detected, the output may be wrong!\n__int64 __usercall sub_8D30@<rax>(char *nptr@<rdi>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned __int64 *a4@<rsi>, __int64 a5@<r12>, __int64 a6@<r13>, __int64 a7@<r14>, __int64 a8@<r15>)\n{\n  unsigned __int64 *v8; // rbp\n  int *v9; // rbx\n  unsigned __int8 v10; // r14\n  const unsigned __int16 **v11; // rax\n  const unsigned __int16 **v12; // r13\n  const unsigned __int16 *v13; // rcx\n  char *v14; // rax\n  int v15; // eax\n  unsigned int v16; // ecx\n  unsigned __int64 v18; // rax\n  char *v19; // r14\n  int v20; // ecx\n  int v21; // er15\n  char v22; // al\n  struct lconv *v23; // rax\n  size_t v24; // rax\n  char *v25; // r8\n  __int64 i; // rax\n  signed int v27; // er13\n  int v28; // er14\n  char *v29; // rax\n  int v30; // edi\n  int v31; // ecx\n  int v32; // edi\n  int v33; // er8\n  unsigned __int64 v34; // r10\n  unsigned __int64 v35; // rdi\n  unsigned __int64 v36; // r8\n  int v37; // esi\n  char *v38; // ST08_8\n  unsigned __int64 v39; // rax\n  unsigned __int64 v40; // r9\n  signed __int64 v41; // r11\n  unsigned __int64 v42; // rsi\n  unsigned __int64 v43; // r13\n  unsigned __int64 v44; // r9\n  char *v45; // rax\n  size_t v46; // [rsp+0h] [rbp-70h]\n  char *s1; // [rsp+8h] [rbp-68h]\n  unsigned __int64 v48; // [rsp+10h] [rbp-60h]\n  unsigned __int64 v49; // [rsp+18h] [rbp-58h]\n  char *endptr; // [rsp+28h] [rbp-48h]\n  unsigned __int64 v51; // [rsp+30h] [rbp-40h]\n  __int64 v52; // [rsp+40h] [rbp-30h]\n  __int64 v53; // [rsp+48h] [rbp-28h]\n  __int64 v54; // [rsp+50h] [rbp-20h]\n  __int64 v55; // [rsp+58h] [rbp-18h]\n  __int64 v56; // [rsp+60h] [rbp-10h]\n  __int64 v57; // [rsp+68h] [rbp-8h]\n\n  v57 = a8;\n  v56 = a7;\n  v55 = a6;\n  v54 = a5;\n  v53 = a3;\n  v52 = a2;\n  v8 = a4;\n  *a4 = 0LL;\n  v51 = __readfsqword(0x28u);\n  v9 = __errno_location();\n  if ( !nptr )\n    goto LABEL_7;\n  v10 = *nptr;\n  if ( !*nptr )\n    goto LABEL_7;\n  v11 = __ctype_b_loc();\n  v12 = v11;\n  v13 = *v11;\n  v14 = nptr;\n  while ( v13[v10] & 0x2000 )\n    v10 = *++v14;\n  if ( v10 == 45 )\n    goto LABEL_7;\n  *v9 = 0;\n  endptr = 0LL;\n  v18 = __strtoul_internal(nptr, &endptr, 0, 0);\n  v19 = endptr;\n  v48 = v18;\n  v20 = *v9;\n  if ( endptr == nptr )\n  {\nLABEL_33:\n    if ( !v20 )\n    {\nLABEL_7:\n      v15 = 22;\n      v16 = -22;\n      goto LABEL_8;\n    }\nLABEL_13:\n    v16 = -v20;\n    goto LABEL_14;\n  }\n  if ( v20 && v18 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n    goto LABEL_13;\n  if ( !endptr || !*endptr )\n  {\n    v16 = 0;\n    *a4 = v18;\n    return v16;\n  }\n  v21 = 0;\n  v49 = 0LL;\n  while ( 1 )\n  {\n    v22 = v19[1];\n    if ( v22 == 105 )\n    {\n      if ( (v19[2] & 0xDF) == 66 && !v19[3] )\n      {\nLABEL_37:\n        v27 = 1024;\n        goto LABEL_38;\n      }\n      goto LABEL_23;\n    }\n    if ( (v22 & 0xDF) == 66 && !v19[2] )\n      break;\n    if ( !v22 )\n      goto LABEL_37;\nLABEL_23:\n    v23 = localeconv();\n    if ( !v23 )\n      goto LABEL_7;\n    if ( !v23->decimal_point )\n      goto LABEL_7;\n    s1 = v23->decimal_point;\n    v24 = strlen(v23->decimal_point);\n    if ( v49 )\n      goto LABEL_7;\n    if ( !*v19 )\n      goto LABEL_7;\n    v46 = v24;\n    if ( strncmp(s1, v19, v24) )\n      goto LABEL_7;\n    v25 = &v19[v46];\n    for ( i = v19[v46]; (_BYTE)i == 48; ++v21 )\n      i = *++v25;\n    if ( (*v12)[i] & 0x800 )\n    {\n      *v9 = 0;\n      v38 = v25;\n      endptr = 0LL;\n      v39 = __strtoul_internal(v25, &endptr, 0, 0);\n      v19 = endptr;\n      v49 = v39;\n      v20 = *v9;\n      if ( endptr == v38 )\n        goto LABEL_33;\n      if ( v20 )\n      {\n        if ( v39 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n          goto LABEL_13;\n        goto LABEL_62;\n      }\n      if ( v39 )\n      {\nLABEL_62:\n        if ( !endptr || !*endptr )\n          goto LABEL_7;\n      }\n    }\n    else\n    {\n      endptr = v25;\n      v19 = v25;\n    }\n  }\n  v27 = 1000;\nLABEL_38:\n  v28 = *v19;\n  v29 = strchr(\"KMGTPEZY\", v28);\n  if ( v29 )\n  {\n    v30 = (unsigned __int64)(v29 - \"KMGTPEZY\") + 1;\n    goto LABEL_40;\n  }\n  v45 = strchr(\"kmgtpezy\", v28);\n  if ( !v45 )\n    goto LABEL_7;\n  v30 = (unsigned __int64)(v45 - \"kmgtpezy\") + 1;\nLABEL_40:\n  if ( v30 )\n  {\n    if ( is_mul_ok(v27, v48) )\n    {\n      v31 = 0;\n      while ( 1 )\n      {\n        v48 *= v27;\n        if ( v30 - 1 == v31 )\n          break;\n        ++v31;\n        if ( !is_mul_ok(v27, v48) )\n          goto LABEL_77;\n      }\n      v16 = 0;\n    }\n    else\n    {\nLABEL_77:\n      v16 = -34;\n    }\n    if ( v49 )\n    {\n      v32 = v30 - 1;\n      v33 = 0;\n      v34 = 1LL;\n      do\n      {\n        v34 *= v27;\n        if ( v33 == v32 )\n          break;\n        ++v33;\n      }\n      while ( is_mul_ok(v27, v34) );\n      if ( v49 <= 0xA )\n      {\n        v36 = v49;\n        v35 = 10LL;\n      }\n      else\n      {\n        v35 = 10LL;\n        while ( 1 )\n        {\n          v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v49 >> 64) >> 3;\n          if ( v35 > 0x1999999999999999LL )\n            break;\n          v35 *= 10LL;\n          if ( v35 >= v49 )\n          {\n            v36 = v49;\n            break;\n          }\n        }\n      }\n      if ( v21 )\n      {\n        v37 = 0;\n        do\n        {\n          if ( v35 <= 0x1999999999999999LL )\n            v35 *= 10LL;\n          else\n            v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n          ++v37;\n        }\n        while ( v21 != v37 );\n      }\n      v40 = 1LL;\n      do\n      {\n        v41 = 10 * v40;\n        v42 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        v43 = v36 - 10 * v42;\n        v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        if ( v43 )\n        {\n          v44 = v35 / v40 / v43;\n          if ( v44 )\n            v48 += v34 / v44;\n        }\n        v40 = v41;\n      }\n      while ( v42 );\n    }\n    *v8 = v48;\nLABEL_14:\n    if ( (v16 & 0x80000000) != 0 )\n    {\n      v15 = -v16;\nLABEL_8:\n      *v9 = v15;\n    }\n  }\n  else\n  {\n    v16 = 0;\n    *a4 = v48;\n  }\n  return v16;\n}\n\n// write access to const memory has been detected, the output may be wrong!\n__int64 __usercall sub_8D30@<rax>(char *nptr@<rdi>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned __int64 *a4@<rsi>, __int64 a5@<r12>, __int64 a6@<r13>, __int64 a7@<r14>, __int64 a8@<r15>)\n{\n  unsigned __int64 *v8; // rbp\n  int *v9; // rbx\n  unsigned __int8 v10; // r14\n  const unsigned __int16 **v11; // rax\n  const unsigned __int16 **v12; // r13\n  const unsigned __int16 *v13; // rcx\n  char *v14; // rax\n  int v15; // eax\n  unsigned int v16; // ecx\n  unsigned __int64 v18; // rax\n  char *v19; // r14\n  int v20; // ecx\n  int v21; // er15\n  char v22; // al\n  struct lconv *v23; // rax\n  size_t v24; // rax\n  char *v25; // r8\n  __int64 i; // rax\n  signed int v27; // er13\n  int v28; // er14\n  char *v29; // rax\n  int v30; // edi\n  int v31; // ecx\n  int v32; // edi\n  int v33; // er8\n  unsigned __int64 v34; // r10\n  unsigned __int64 v35; // rdi\n  unsigned __int64 v36; // r8\n  int v37; // esi\n  char *v38; // ST08_8\n  unsigned __int64 v39; // rax\n  unsigned __int64 v40; // r9\n  signed __int64 v41; // r11\n  unsigned __int64 v42; // rsi\n  unsigned __int64 v43; // r13\n  unsigned __int64 v44; // r9\n  char *v45; // rax\n  size_t v46; // [rsp+0h] [rbp-70h]\n  char *s1; // [rsp+8h] [rbp-68h]\n  unsigned __int64 v48; // [rsp+10h] [rbp-60h]\n  unsigned __int64 v49; // [rsp+18h] [rbp-58h]\n  char *endptr; // [rsp+28h] [rbp-48h]\n  unsigned __int64 v51; // [rsp+30h] [rbp-40h]\n  __int64 v52; // [rsp+40h] [rbp-30h]\n  __int64 v53; // [rsp+48h] [rbp-28h]\n  __int64 v54; // [rsp+50h] [rbp-20h]\n  __int64 v55; // [rsp+58h] [rbp-18h]\n  __int64 v56; // [rsp+60h] [rbp-10h]\n  __int64 v57; // [rsp+68h] [rbp-8h]\n\n  v57 = a8;\n  v56 = a7;\n  v55 = a6;\n  v54 = a5;\n  v53 = a3;\n  v52 = a2;\n  v8 = a4;\n  *a4 = 0LL;\n  v51 = __readfsqword(0x28u);\n  v9 = __errno_location();\n  if ( !nptr )\n    goto LABEL_7;\n  v10 = *nptr;\n  if ( !*nptr )\n    goto LABEL_7;\n  v11 = __ctype_b_loc();\n  v12 = v11;\n  v13 = *v11;\n  v14 = nptr;\n  while ( v13[v10] & 0x2000 )\n    v10 = *++v14;\n  if ( v10 == 45 )\n    goto LABEL_7;\n  *v9 = 0;\n  endptr = 0LL;\n  v18 = __strtoul_internal(nptr, &endptr, 0, 0);\n  v19 = endptr;\n  v48 = v18;\n  v20 = *v9;\n  if ( endptr == nptr )\n  {\nLABEL_33:\n    if ( !v20 )\n    {\nLABEL_7:\n      v15 = 22;\n      v16 = -22;\n      goto LABEL_8;\n    }\nLABEL_13:\n    v16 = -v20;\n    goto LABEL_14;\n  }\n  if ( v20 && v18 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n    goto LABEL_13;\n  if ( !endptr || !*endptr )\n  {\n    v16 = 0;\n    *a4 = v18;\n    return v16;\n  }\n  v21 = 0;\n  v49 = 0LL;\n  while ( 1 )\n  {\n    v22 = v19[1];\n    if ( v22 == 105 )\n    {\n      if ( (v19[2] & 0xDF) == 66 && !v19[3] )\n      {\nLABEL_37:\n        v27 = 1024;\n        goto LABEL_38;\n      }\n      goto LABEL_23;\n    }\n    if ( (v22 & 0xDF) == 66 && !v19[2] )\n      break;\n    if ( !v22 )\n      goto LABEL_37;\nLABEL_23:\n    v23 = localeconv();\n    if ( !v23 )\n      goto LABEL_7;\n    if ( !v23->decimal_point )\n      goto LABEL_7;\n    s1 = v23->decimal_point;\n    v24 = strlen(v23->decimal_point);\n    if ( v49 )\n      goto LABEL_7;\n    if ( !*v19 )\n      goto LABEL_7;\n    v46 = v24;\n    if ( strncmp(s1, v19, v24) )\n      goto LABEL_7;\n    v25 = &v19[v46];\n    for ( i = v19[v46]; (_BYTE)i == 48; ++v21 )\n      i = *++v25;\n    if ( (*v12)[i] & 0x800 )\n    {\n      *v9 = 0;\n      v38 = v25;\n      endptr = 0LL;\n      v39 = __strtoul_internal(v25, &endptr, 0, 0);\n      v19 = endptr;\n      v49 = v39;\n      v20 = *v9;\n      if ( endptr == v38 )\n        goto LABEL_33;\n      if ( v20 )\n      {\n        if ( v39 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n          goto LABEL_13;\n        goto LABEL_62;\n      }\n      if ( v39 )\n      {\nLABEL_62:\n        if ( !endptr || !*endptr )\n          goto LABEL_7;\n      }\n    }\n    else\n    {\n      endptr = v25;\n      v19 = v25;\n    }\n  }\n  v27 = 1000;\nLABEL_38:\n  v28 = *v19;\n  v29 = strchr(\"KMGTPEZY\", v28);\n  if ( v29 )\n  {\n    v30 = (unsigned __int64)(v29 - \"KMGTPEZY\") + 1;\n    goto LABEL_40;\n  }\n  v45 = strchr(\"kmgtpezy\", v28);\n  if ( !v45 )\n    goto LABEL_7;\n  v30 = (unsigned __int64)(v45 - \"kmgtpezy\") + 1;\nLABEL_40:\n  if ( v30 )\n  {\n    if ( is_mul_ok(v27, v48) )\n    {\n      v31 = 0;\n      while ( 1 )\n      {\n        v48 *= v27;\n        if ( v30 - 1 == v31 )\n          break;\n        ++v31;\n        if ( !is_mul_ok(v27, v48) )\n          goto LABEL_77;\n      }\n      v16 = 0;\n    }\n    else\n    {\nLABEL_77:\n      v16 = -34;\n    }\n    if ( v49 )\n    {\n      v32 = v30 - 1;\n      v33 = 0;\n      v34 = 1LL;\n      do\n      {\n        v34 *= v27;\n        if ( v33 == v32 )\n          break;\n        ++v33;\n      }\n      while ( is_mul_ok(v27, v34) );\n      if ( v49 <= 0xA )\n      {\n        v36 = v49;\n        v35 = 10LL;\n      }\n      else\n      {\n        v35 = 10LL;\n        while ( 1 )\n        {\n          v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v49 >> 64) >> 3;\n          if ( v35 > 0x1999999999999999LL )\n            break;\n          v35 *= 10LL;\n          if ( v35 >= v49 )\n          {\n            v36 = v49;\n            break;\n          }\n        }\n      }\n      if ( v21 )\n      {\n        v37 = 0;\n        do\n        {\n          if ( v35 <= 0x1999999999999999LL )\n            v35 *= 10LL;\n          else\n            v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n          ++v37;\n        }\n        while ( v21 != v37 );\n      }\n      v40 = 1LL;\n      do\n      {\n        v41 = 10 * v40;\n        v42 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        v43 = v36 - 10 * v42;\n        v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        if ( v43 )\n        {\n          v44 = v35 / v40 / v43;\n          if ( v44 )\n            v48 += v34 / v44;\n        }\n        v40 = v41;\n      }\n      while ( v42 );\n    }\n    *v8 = v48;\nLABEL_14:\n    if ( (v16 & 0x80000000) != 0 )\n    {\n      v15 = -v16;\nLABEL_8:\n      *v9 = v15;\n    }\n  }\n  else\n  {\n    v16 = 0;\n    *a4 = v48;\n  }\n  return v16;\n}\n\n// write access to const memory has been detected, the output may be wrong!\n__int64 __usercall sub_8D30@<rax>(char *nptr@<rdi>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned __int64 *a4@<rsi>, __int64 a5@<r12>, __int64 a6@<r13>, __int64 a7@<r14>, __int64 a8@<r15>)\n{\n  unsigned __int64 *v8; // rbp\n  int *v9; // rbx\n  unsigned __int8 v10; // r14\n  const unsigned __int16 **v11; // rax\n  const unsigned __int16 **v12; // r13\n  const unsigned __int16 *v13; // rcx\n  char *v14; // rax\n  int v15; // eax\n  unsigned int v16; // ecx\n  unsigned __int64 v18; // rax\n  char *v19; // r14\n  int v20; // ecx\n  int v21; // er15\n  char v22; // al\n  struct lconv *v23; // rax\n  size_t v24; // rax\n  char *v25; // r8\n  __int64 i; // rax\n  signed int v27; // er13\n  int v28; // er14\n  char *v29; // rax\n  int v30; // edi\n  int v31; // ecx\n  int v32; // edi\n  int v33; // er8\n  unsigned __int64 v34; // r10\n  unsigned __int64 v35; // rdi\n  unsigned __int64 v36; // r8\n  int v37; // esi\n  char *v38; // ST08_8\n  unsigned __int64 v39; // rax\n  unsigned __int64 v40; // r9\n  signed __int64 v41; // r11\n  unsigned __int64 v42; // rsi\n  unsigned __int64 v43; // r13\n  unsigned __int64 v44; // r9\n  char *v45; // rax\n  size_t v46; // [rsp+0h] [rbp-70h]\n  char *s1; // [rsp+8h] [rbp-68h]\n  unsigned __int64 v48; // [rsp+10h] [rbp-60h]\n  unsigned __int64 v49; // [rsp+18h] [rbp-58h]\n  char *endptr; // [rsp+28h] [rbp-48h]\n  unsigned __int64 v51; // [rsp+30h] [rbp-40h]\n  __int64 v52; // [rsp+40h] [rbp-30h]\n  __int64 v53; // [rsp+48h] [rbp-28h]\n  __int64 v54; // [rsp+50h] [rbp-20h]\n  __int64 v55; // [rsp+58h] [rbp-18h]\n  __int64 v56; // [rsp+60h] [rbp-10h]\n  __int64 v57; // [rsp+68h] [rbp-8h]\n\n  v57 = a8;\n  v56 = a7;\n  v55 = a6;\n  v54 = a5;\n  v53 = a3;\n  v52 = a2;\n  v8 = a4;\n  *a4 = 0LL;\n  v51 = __readfsqword(0x28u);\n  v9 = __errno_location();\n  if ( !nptr )\n    goto LABEL_7;\n  v10 = *nptr;\n  if ( !*nptr )\n    goto LABEL_7;\n  v11 = __ctype_b_loc();\n  v12 = v11;\n  v13 = *v11;\n  v14 = nptr;\n  while ( v13[v10] & 0x2000 )\n    v10 = *++v14;\n  if ( v10 == 45 )\n    goto LABEL_7;\n  *v9 = 0;\n  endptr = 0LL;\n  v18 = __strtoul_internal(nptr, &endptr, 0, 0);\n  v19 = endptr;\n  v48 = v18;\n  v20 = *v9;\n  if ( endptr == nptr )\n  {\nLABEL_33:\n    if ( !v20 )\n    {\nLABEL_7:\n      v15 = 22;\n      v16 = -22;\n      goto LABEL_8;\n    }\nLABEL_13:\n    v16 = -v20;\n    goto LABEL_14;\n  }\n  if ( v20 && v18 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n    goto LABEL_13;\n  if ( !endptr || !*endptr )\n  {\n    v16 = 0;\n    *a4 = v18;\n    return v16;\n  }\n  v21 = 0;\n  v49 = 0LL;\n  while ( 1 )\n  {\n    v22 = v19[1];\n    if ( v22 == 105 )\n    {\n      if ( (v19[2] & 0xDF) == 66 && !v19[3] )\n      {\nLABEL_37:\n        v27 = 1024;\n        goto LABEL_38;\n      }\n      goto LABEL_23;\n    }\n    if ( (v22 & 0xDF) == 66 && !v19[2] )\n      break;\n    if ( !v22 )\n      goto LABEL_37;\nLABEL_23:\n    v23 = localeconv();\n    if ( !v23 )\n      goto LABEL_7;\n    if ( !v23->decimal_point )\n      goto LABEL_7;\n    s1 = v23->decimal_point;\n    v24 = strlen(v23->decimal_point);\n    if ( v49 )\n      goto LABEL_7;\n    if ( !*v19 )\n      goto LABEL_7;\n    v46 = v24;\n    if ( strncmp(s1, v19, v24) )\n      goto LABEL_7;\n    v25 = &v19[v46];\n    for ( i = v19[v46]; (_BYTE)i == 48; ++v21 )\n      i = *++v25;\n    if ( (*v12)[i] & 0x800 )\n    {\n      *v9 = 0;\n      v38 = v25;\n      endptr = 0LL;\n      v39 = __strtoul_internal(v25, &endptr, 0, 0);\n      v19 = endptr;\n      v49 = v39;\n      v20 = *v9;\n      if ( endptr == v38 )\n        goto LABEL_33;\n      if ( v20 )\n      {\n        if ( v39 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n          goto LABEL_13;\n        goto LABEL_62;\n      }\n      if ( v39 )\n      {\nLABEL_62:\n        if ( !endptr || !*endptr )\n          goto LABEL_7;\n      }\n    }\n    else\n    {\n      endptr = v25;\n      v19 = v25;\n    }\n  }\n  v27 = 1000;\nLABEL_38:\n  v28 = *v19;\n  v29 = strchr(\"KMGTPEZY\", v28);\n  if ( v29 )\n  {\n    v30 = (unsigned __int64)(v29 - \"KMGTPEZY\") + 1;\n    goto LABEL_40;\n  }\n  v45 = strchr(\"kmgtpezy\", v28);\n  if ( !v45 )\n    goto LABEL_7;\n  v30 = (unsigned __int64)(v45 - \"kmgtpezy\") + 1;\nLABEL_40:\n  if ( v30 )\n  {\n    if ( is_mul_ok(v27, v48) )\n    {\n      v31 = 0;\n      while ( 1 )\n      {\n        v48 *= v27;\n        if ( v30 - 1 == v31 )\n          break;\n        ++v31;\n        if ( !is_mul_ok(v27, v48) )\n          goto LABEL_77;\n      }\n      v16 = 0;\n    }\n    else\n    {\nLABEL_77:\n      v16 = -34;\n    }\n    if ( v49 )\n    {\n      v32 = v30 - 1;\n      v33 = 0;\n      v34 = 1LL;\n      do\n      {\n        v34 *= v27;\n        if ( v33 == v32 )\n          break;\n        ++v33;\n      }\n      while ( is_mul_ok(v27, v34) );\n      if ( v49 <= 0xA )\n      {\n        v36 = v49;\n        v35 = 10LL;\n      }\n      else\n      {\n        v35 = 10LL;\n        while ( 1 )\n        {\n          v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v49 >> 64) >> 3;\n          if ( v35 > 0x1999999999999999LL )\n            break;\n          v35 *= 10LL;\n          if ( v35 >= v49 )\n          {\n            v36 = v49;\n            break;\n          }\n        }\n      }\n      if ( v21 )\n      {\n        v37 = 0;\n        do\n        {\n          if ( v35 <= 0x1999999999999999LL )\n            v35 *= 10LL;\n          else\n            v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n          ++v37;\n        }\n        while ( v21 != v37 );\n      }\n      v40 = 1LL;\n      do\n      {\n        v41 = 10 * v40;\n        v42 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        v43 = v36 - 10 * v42;\n        v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        if ( v43 )\n        {\n          v44 = v35 / v40 / v43;\n          if ( v44 )\n            v48 += v34 / v44;\n        }\n        v40 = v41;\n      }\n      while ( v42 );\n    }\n    *v8 = v48;\nLABEL_14:\n    if ( (v16 & 0x80000000) != 0 )\n    {\n      v15 = -v16;\nLABEL_8:\n      *v9 = v15;\n    }\n  }\n  else\n  {\n    v16 = 0;\n    *a4 = v48;\n  }\n  return v16;\n}\n\n// write access to const memory has been detected, the output may be wrong!\n__int64 __usercall sub_8D30@<rax>(char *nptr@<rdi>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned __int64 *a4@<rsi>, __int64 a5@<r12>, __int64 a6@<r13>, __int64 a7@<r14>, __int64 a8@<r15>)\n{\n  unsigned __int64 *v8; // rbp\n  int *v9; // rbx\n  unsigned __int8 v10; // r14\n  const unsigned __int16 **v11; // rax\n  const unsigned __int16 **v12; // r13\n  const unsigned __int16 *v13; // rcx\n  char *v14; // rax\n  int v15; // eax\n  unsigned int v16; // ecx\n  unsigned __int64 v18; // rax\n  char *v19; // r14\n  int v20; // ecx\n  int v21; // er15\n  char v22; // al\n  struct lconv *v23; // rax\n  size_t v24; // rax\n  char *v25; // r8\n  __int64 i; // rax\n  signed int v27; // er13\n  int v28; // er14\n  char *v29; // rax\n  int v30; // edi\n  int v31; // ecx\n  int v32; // edi\n  int v33; // er8\n  unsigned __int64 v34; // r10\n  unsigned __int64 v35; // rdi\n  unsigned __int64 v36; // r8\n  int v37; // esi\n  char *v38; // ST08_8\n  unsigned __int64 v39; // rax\n  unsigned __int64 v40; // r9\n  signed __int64 v41; // r11\n  unsigned __int64 v42; // rsi\n  unsigned __int64 v43; // r13\n  unsigned __int64 v44; // r9\n  char *v45; // rax\n  size_t v46; // [rsp+0h] [rbp-70h]\n  char *s1; // [rsp+8h] [rbp-68h]\n  unsigned __int64 v48; // [rsp+10h] [rbp-60h]\n  unsigned __int64 v49; // [rsp+18h] [rbp-58h]\n  char *endptr; // [rsp+28h] [rbp-48h]\n  unsigned __int64 v51; // [rsp+30h] [rbp-40h]\n  __int64 v52; // [rsp+40h] [rbp-30h]\n  __int64 v53; // [rsp+48h] [rbp-28h]\n  __int64 v54; // [rsp+50h] [rbp-20h]\n  __int64 v55; // [rsp+58h] [rbp-18h]\n  __int64 v56; // [rsp+60h] [rbp-10h]\n  __int64 v57; // [rsp+68h] [rbp-8h]\n\n  v57 = a8;\n  v56 = a7;\n  v55 = a6;\n  v54 = a5;\n  v53 = a3;\n  v52 = a2;\n  v8 = a4;\n  *a4 = 0LL;\n  v51 = __readfsqword(0x28u);\n  v9 = __errno_location();\n  if ( !nptr )\n    goto LABEL_7;\n  v10 = *nptr;\n  if ( !*nptr )\n    goto LABEL_7;\n  v11 = __ctype_b_loc();\n  v12 = v11;\n  v13 = *v11;\n  v14 = nptr;\n  while ( v13[v10] & 0x2000 )\n    v10 = *++v14;\n  if ( v10 == 45 )\n    goto LABEL_7;\n  *v9 = 0;\n  endptr = 0LL;\n  v18 = __strtoul_internal(nptr, &endptr, 0, 0);\n  v19 = endptr;\n  v48 = v18;\n  v20 = *v9;\n  if ( endptr == nptr )\n  {\nLABEL_33:\n    if ( !v20 )\n    {\nLABEL_7:\n      v15 = 22;\n      v16 = -22;\n      goto LABEL_8;\n    }\nLABEL_13:\n    v16 = -v20;\n    goto LABEL_14;\n  }\n  if ( v20 && v18 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n    goto LABEL_13;\n  if ( !endptr || !*endptr )\n  {\n    v16 = 0;\n    *a4 = v18;\n    return v16;\n  }\n  v21 = 0;\n  v49 = 0LL;\n  while ( 1 )\n  {\n    v22 = v19[1];\n    if ( v22 == 105 )\n    {\n      if ( (v19[2] & 0xDF) == 66 && !v19[3] )\n      {\nLABEL_37:\n        v27 = 1024;\n        goto LABEL_38;\n      }\n      goto LABEL_23;\n    }\n    if ( (v22 & 0xDF) == 66 && !v19[2] )\n      break;\n    if ( !v22 )\n      goto LABEL_37;\nLABEL_23:\n    v23 = localeconv();\n    if ( !v23 )\n      goto LABEL_7;\n    if ( !v23->decimal_point )\n      goto LABEL_7;\n    s1 = v23->decimal_point;\n    v24 = strlen(v23->decimal_point);\n    if ( v49 )\n      goto LABEL_7;\n    if ( !*v19 )\n      goto LABEL_7;\n    v46 = v24;\n    if ( strncmp(s1, v19, v24) )\n      goto LABEL_7;\n    v25 = &v19[v46];\n    for ( i = v19[v46]; (_BYTE)i == 48; ++v21 )\n      i = *++v25;\n    if ( (*v12)[i] & 0x800 )\n    {\n      *v9 = 0;\n      v38 = v25;\n      endptr = 0LL;\n      v39 = __strtoul_internal(v25, &endptr, 0, 0);\n      v19 = endptr;\n      v49 = v39;\n      v20 = *v9;\n      if ( endptr == v38 )\n        goto LABEL_33;\n      if ( v20 )\n      {\n        if ( v39 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n          goto LABEL_13;\n        goto LABEL_62;\n      }\n      if ( v39 )\n      {\nLABEL_62:\n        if ( !endptr || !*endptr )\n          goto LABEL_7;\n      }\n    }\n    else\n    {\n      endptr = v25;\n      v19 = v25;\n    }\n  }\n  v27 = 1000;\nLABEL_38:\n  v28 = *v19;\n  v29 = strchr(\"KMGTPEZY\", v28);\n  if ( v29 )\n  {\n    v30 = (unsigned __int64)(v29 - \"KMGTPEZY\") + 1;\n    goto LABEL_40;\n  }\n  v45 = strchr(\"kmgtpezy\", v28);\n  if ( !v45 )\n    goto LABEL_7;\n  v30 = (unsigned __int64)(v45 - \"kmgtpezy\") + 1;\nLABEL_40:\n  if ( v30 )\n  {\n    if ( is_mul_ok(v27, v48) )\n    {\n      v31 = 0;\n      while ( 1 )\n      {\n        v48 *= v27;\n        if ( v30 - 1 == v31 )\n          break;\n        ++v31;\n        if ( !is_mul_ok(v27, v48) )\n          goto LABEL_77;\n      }\n      v16 = 0;\n    }\n    else\n    {\nLABEL_77:\n      v16 = -34;\n    }\n    if ( v49 )\n    {\n      v32 = v30 - 1;\n      v33 = 0;\n      v34 = 1LL;\n      do\n      {\n        v34 *= v27;\n        if ( v33 == v32 )\n          break;\n        ++v33;\n      }\n      while ( is_mul_ok(v27, v34) );\n      if ( v49 <= 0xA )\n      {\n        v36 = v49;\n        v35 = 10LL;\n      }\n      else\n      {\n        v35 = 10LL;\n        while ( 1 )\n        {\n          v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v49 >> 64) >> 3;\n          if ( v35 > 0x1999999999999999LL )\n            break;\n          v35 *= 10LL;\n          if ( v35 >= v49 )\n          {\n            v36 = v49;\n            break;\n          }\n        }\n      }\n      if ( v21 )\n      {\n        v37 = 0;\n        do\n        {\n          if ( v35 <= 0x1999999999999999LL )\n            v35 *= 10LL;\n          else\n            v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n          ++v37;\n        }\n        while ( v21 != v37 );\n      }\n      v40 = 1LL;\n      do\n      {\n        v41 = 10 * v40;\n        v42 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        v43 = v36 - 10 * v42;\n        v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        if ( v43 )\n        {\n          v44 = v35 / v40 / v43;\n          if ( v44 )\n            v48 += v34 / v44;\n        }\n        v40 = v41;\n      }\n      while ( v42 );\n    }\n    *v8 = v48;\nLABEL_14:\n    if ( (v16 & 0x80000000) != 0 )\n    {\n      v15 = -v16;\nLABEL_8:\n      *v9 = v15;\n    }\n  }\n  else\n  {\n    v16 = 0;\n    *a4 = v48;\n  }\n  return v16;\n}\n\n// write access to const memory has been detected, the output may be wrong!\n__int64 __usercall sub_8D30@<rax>(char *nptr@<rdi>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned __int64 *a4@<rsi>, __int64 a5@<r12>, __int64 a6@<r13>, __int64 a7@<r14>, __int64 a8@<r15>)\n{\n  unsigned __int64 *v8; // rbp\n  int *v9; // rbx\n  unsigned __int8 v10; // r14\n  const unsigned __int16 **v11; // rax\n  const unsigned __int16 **v12; // r13\n  const unsigned __int16 *v13; // rcx\n  char *v14; // rax\n  int v15; // eax\n  unsigned int v16; // ecx\n  unsigned __int64 v18; // rax\n  char *v19; // r14\n  int v20; // ecx\n  int v21; // er15\n  char v22; // al\n  struct lconv *v23; // rax\n  size_t v24; // rax\n  char *v25; // r8\n  __int64 i; // rax\n  signed int v27; // er13\n  int v28; // er14\n  char *v29; // rax\n  int v30; // edi\n  int v31; // ecx\n  int v32; // edi\n  int v33; // er8\n  unsigned __int64 v34; // r10\n  unsigned __int64 v35; // rdi\n  unsigned __int64 v36; // r8\n  int v37; // esi\n  char *v38; // ST08_8\n  unsigned __int64 v39; // rax\n  unsigned __int64 v40; // r9\n  signed __int64 v41; // r11\n  unsigned __int64 v42; // rsi\n  unsigned __int64 v43; // r13\n  unsigned __int64 v44; // r9\n  char *v45; // rax\n  size_t v46; // [rsp+0h] [rbp-70h]\n  char *s1; // [rsp+8h] [rbp-68h]\n  unsigned __int64 v48; // [rsp+10h] [rbp-60h]\n  unsigned __int64 v49; // [rsp+18h] [rbp-58h]\n  char *endptr; // [rsp+28h] [rbp-48h]\n  unsigned __int64 v51; // [rsp+30h] [rbp-40h]\n  __int64 v52; // [rsp+40h] [rbp-30h]\n  __int64 v53; // [rsp+48h] [rbp-28h]\n  __int64 v54; // [rsp+50h] [rbp-20h]\n  __int64 v55; // [rsp+58h] [rbp-18h]\n  __int64 v56; // [rsp+60h] [rbp-10h]\n  __int64 v57; // [rsp+68h] [rbp-8h]\n\n  v57 = a8;\n  v56 = a7;\n  v55 = a6;\n  v54 = a5;\n  v53 = a3;\n  v52 = a2;\n  v8 = a4;\n  *a4 = 0LL;\n  v51 = __readfsqword(0x28u);\n  v9 = __errno_location();\n  if ( !nptr )\n    goto LABEL_7;\n  v10 = *nptr;\n  if ( !*nptr )\n    goto LABEL_7;\n  v11 = __ctype_b_loc();\n  v12 = v11;\n  v13 = *v11;\n  v14 = nptr;\n  while ( v13[v10] & 0x2000 )\n    v10 = *++v14;\n  if ( v10 == 45 )\n    goto LABEL_7;\n  *v9 = 0;\n  endptr = 0LL;\n  v18 = __strtoul_internal(nptr, &endptr, 0, 0);\n  v19 = endptr;\n  v48 = v18;\n  v20 = *v9;\n  if ( endptr == nptr )\n  {\nLABEL_33:\n    if ( !v20 )\n    {\nLABEL_7:\n      v15 = 22;\n      v16 = -22;\n      goto LABEL_8;\n    }\nLABEL_13:\n    v16 = -v20;\n    goto LABEL_14;\n  }\n  if ( v20 && v18 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n    goto LABEL_13;\n  if ( !endptr || !*endptr )\n  {\n    v16 = 0;\n    *a4 = v18;\n    return v16;\n  }\n  v21 = 0;\n  v49 = 0LL;\n  while ( 1 )\n  {\n    v22 = v19[1];\n    if ( v22 == 105 )\n    {\n      if ( (v19[2] & 0xDF) == 66 && !v19[3] )\n      {\nLABEL_37:\n        v27 = 1024;\n        goto LABEL_38;\n      }\n      goto LABEL_23;\n    }\n    if ( (v22 & 0xDF) == 66 && !v19[2] )\n      break;\n    if ( !v22 )\n      goto LABEL_37;\nLABEL_23:\n    v23 = localeconv();\n    if ( !v23 )\n      goto LABEL_7;\n    if ( !v23->decimal_point )\n      goto LABEL_7;\n    s1 = v23->decimal_point;\n    v24 = strlen(v23->decimal_point);\n    if ( v49 )\n      goto LABEL_7;\n    if ( !*v19 )\n      goto LABEL_7;\n    v46 = v24;\n    if ( strncmp(s1, v19, v24) )\n      goto LABEL_7;\n    v25 = &v19[v46];\n    for ( i = v19[v46]; (_BYTE)i == 48; ++v21 )\n      i = *++v25;\n    if ( (*v12)[i] & 0x800 )\n    {\n      *v9 = 0;\n      v38 = v25;\n      endptr = 0LL;\n      v39 = __strtoul_internal(v25, &endptr, 0, 0);\n      v19 = endptr;\n      v49 = v39;\n      v20 = *v9;\n      if ( endptr == v38 )\n        goto LABEL_33;\n      if ( v20 )\n      {\n        if ( v39 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n          goto LABEL_13;\n        goto LABEL_62;\n      }\n      if ( v39 )\n      {\nLABEL_62:\n        if ( !endptr || !*endptr )\n          goto LABEL_7;\n      }\n    }\n    else\n    {\n      endptr = v25;\n      v19 = v25;\n    }\n  }\n  v27 = 1000;\nLABEL_38:\n  v28 = *v19;\n  v29 = strchr(\"KMGTPEZY\", v28);\n  if ( v29 )\n  {\n    v30 = (unsigned __int64)(v29 - \"KMGTPEZY\") + 1;\n    goto LABEL_40;\n  }\n  v45 = strchr(\"kmgtpezy\", v28);\n  if ( !v45 )\n    goto LABEL_7;\n  v30 = (unsigned __int64)(v45 - \"kmgtpezy\") + 1;\nLABEL_40:\n  if ( v30 )\n  {\n    if ( is_mul_ok(v27, v48) )\n    {\n      v31 = 0;\n      while ( 1 )\n      {\n        v48 *= v27;\n        if ( v30 - 1 == v31 )\n          break;\n        ++v31;\n        if ( !is_mul_ok(v27, v48) )\n          goto LABEL_77;\n      }\n      v16 = 0;\n    }\n    else\n    {\nLABEL_77:\n      v16 = -34;\n    }\n    if ( v49 )\n    {\n      v32 = v30 - 1;\n      v33 = 0;\n      v34 = 1LL;\n      do\n      {\n        v34 *= v27;\n        if ( v33 == v32 )\n          break;\n        ++v33;\n      }\n      while ( is_mul_ok(v27, v34) );\n      if ( v49 <= 0xA )\n      {\n        v36 = v49;\n        v35 = 10LL;\n      }\n      else\n      {\n        v35 = 10LL;\n        while ( 1 )\n        {\n          v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v49 >> 64) >> 3;\n          if ( v35 > 0x1999999999999999LL )\n            break;\n          v35 *= 10LL;\n          if ( v35 >= v49 )\n          {\n            v36 = v49;\n            break;\n          }\n        }\n      }\n      if ( v21 )\n      {\n        v37 = 0;\n        do\n        {\n          if ( v35 <= 0x1999999999999999LL )\n            v35 *= 10LL;\n          else\n            v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n          ++v37;\n        }\n        while ( v21 != v37 );\n      }\n      v40 = 1LL;\n      do\n      {\n        v41 = 10 * v40;\n        v42 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        v43 = v36 - 10 * v42;\n        v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        if ( v43 )\n        {\n          v44 = v35 / v40 / v43;\n          if ( v44 )\n            v48 += v34 / v44;\n        }\n        v40 = v41;\n      }\n      while ( v42 );\n    }\n    *v8 = v48;\nLABEL_14:\n    if ( (v16 & 0x80000000) != 0 )\n    {\n      v15 = -v16;\nLABEL_8:\n      *v9 = v15;\n    }\n  }\n  else\n  {\n    v16 = 0;\n    *a4 = v48;\n  }\n  return v16;\n}\n\n// write access to const memory has been detected, the output may be wrong!\n__int64 __usercall sub_8D30@<rax>(char *nptr@<rdi>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned __int64 *a4@<rsi>, __int64 a5@<r12>, __int64 a6@<r13>, __int64 a7@<r14>, __int64 a8@<r15>)\n{\n  unsigned __int64 *v8; // rbp\n  int *v9; // rbx\n  unsigned __int8 v10; // r14\n  const unsigned __int16 **v11; // rax\n  const unsigned __int16 **v12; // r13\n  const unsigned __int16 *v13; // rcx\n  char *v14; // rax\n  int v15; // eax\n  unsigned int v16; // ecx\n  unsigned __int64 v18; // rax\n  char *v19; // r14\n  int v20; // ecx\n  int v21; // er15\n  char v22; // al\n  struct lconv *v23; // rax\n  size_t v24; // rax\n  char *v25; // r8\n  __int64 i; // rax\n  signed int v27; // er13\n  int v28; // er14\n  char *v29; // rax\n  int v30; // edi\n  int v31; // ecx\n  int v32; // edi\n  int v33; // er8\n  unsigned __int64 v34; // r10\n  unsigned __int64 v35; // rdi\n  unsigned __int64 v36; // r8\n  int v37; // esi\n  char *v38; // ST08_8\n  unsigned __int64 v39; // rax\n  unsigned __int64 v40; // r9\n  signed __int64 v41; // r11\n  unsigned __int64 v42; // rsi\n  unsigned __int64 v43; // r13\n  unsigned __int64 v44; // r9\n  char *v45; // rax\n  size_t v46; // [rsp+0h] [rbp-70h]\n  char *s1; // [rsp+8h] [rbp-68h]\n  unsigned __int64 v48; // [rsp+10h] [rbp-60h]\n  unsigned __int64 v49; // [rsp+18h] [rbp-58h]\n  char *endptr; // [rsp+28h] [rbp-48h]\n  unsigned __int64 v51; // [rsp+30h] [rbp-40h]\n  __int64 v52; // [rsp+40h] [rbp-30h]\n  __int64 v53; // [rsp+48h] [rbp-28h]\n  __int64 v54; // [rsp+50h] [rbp-20h]\n  __int64 v55; // [rsp+58h] [rbp-18h]\n  __int64 v56; // [rsp+60h] [rbp-10h]\n  __int64 v57; // [rsp+68h] [rbp-8h]\n\n  v57 = a8;\n  v56 = a7;\n  v55 = a6;\n  v54 = a5;\n  v53 = a3;\n  v52 = a2;\n  v8 = a4;\n  *a4 = 0LL;\n  v51 = __readfsqword(0x28u);\n  v9 = __errno_location();\n  if ( !nptr )\n    goto LABEL_7;\n  v10 = *nptr;\n  if ( !*nptr )\n    goto LABEL_7;\n  v11 = __ctype_b_loc();\n  v12 = v11;\n  v13 = *v11;\n  v14 = nptr;\n  while ( v13[v10] & 0x2000 )\n    v10 = *++v14;\n  if ( v10 == 45 )\n    goto LABEL_7;\n  *v9 = 0;\n  endptr = 0LL;\n  v18 = __strtoul_internal(nptr, &endptr, 0, 0);\n  v19 = endptr;\n  v48 = v18;\n  v20 = *v9;\n  if ( endptr == nptr )\n  {\nLABEL_33:\n    if ( !v20 )\n    {\nLABEL_7:\n      v15 = 22;\n      v16 = -22;\n      goto LABEL_8;\n    }\nLABEL_13:\n    v16 = -v20;\n    goto LABEL_14;\n  }\n  if ( v20 && v18 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n    goto LABEL_13;\n  if ( !endptr || !*endptr )\n  {\n    v16 = 0;\n    *a4 = v18;\n    return v16;\n  }\n  v21 = 0;\n  v49 = 0LL;\n  while ( 1 )\n  {\n    v22 = v19[1];\n    if ( v22 == 105 )\n    {\n      if ( (v19[2] & 0xDF) == 66 && !v19[3] )\n      {\nLABEL_37:\n        v27 = 1024;\n        goto LABEL_38;\n      }\n      goto LABEL_23;\n    }\n    if ( (v22 & 0xDF) == 66 && !v19[2] )\n      break;\n    if ( !v22 )\n      goto LABEL_37;\nLABEL_23:\n    v23 = localeconv();\n    if ( !v23 )\n      goto LABEL_7;\n    if ( !v23->decimal_point )\n      goto LABEL_7;\n    s1 = v23->decimal_point;\n    v24 = strlen(v23->decimal_point);\n    if ( v49 )\n      goto LABEL_7;\n    if ( !*v19 )\n      goto LABEL_7;\n    v46 = v24;\n    if ( strncmp(s1, v19, v24) )\n      goto LABEL_7;\n    v25 = &v19[v46];\n    for ( i = v19[v46]; (_BYTE)i == 48; ++v21 )\n      i = *++v25;\n    if ( (*v12)[i] & 0x800 )\n    {\n      *v9 = 0;\n      v38 = v25;\n      endptr = 0LL;\n      v39 = __strtoul_internal(v25, &endptr, 0, 0);\n      v19 = endptr;\n      v49 = v39;\n      v20 = *v9;\n      if ( endptr == v38 )\n        goto LABEL_33;\n      if ( v20 )\n      {\n        if ( v39 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n          goto LABEL_13;\n        goto LABEL_62;\n      }\n      if ( v39 )\n      {\nLABEL_62:\n        if ( !endptr || !*endptr )\n          goto LABEL_7;\n      }\n    }\n    else\n    {\n      endptr = v25;\n      v19 = v25;\n    }\n  }\n  v27 = 1000;\nLABEL_38:\n  v28 = *v19;\n  v29 = strchr(\"KMGTPEZY\", v28);\n  if ( v29 )\n  {\n    v30 = (unsigned __int64)(v29 - \"KMGTPEZY\") + 1;\n    goto LABEL_40;\n  }\n  v45 = strchr(\"kmgtpezy\", v28);\n  if ( !v45 )\n    goto LABEL_7;\n  v30 = (unsigned __int64)(v45 - \"kmgtpezy\") + 1;\nLABEL_40:\n  if ( v30 )\n  {\n    if ( is_mul_ok(v27, v48) )\n    {\n      v31 = 0;\n      while ( 1 )\n      {\n        v48 *= v27;\n        if ( v30 - 1 == v31 )\n          break;\n        ++v31;\n        if ( !is_mul_ok(v27, v48) )\n          goto LABEL_77;\n      }\n      v16 = 0;\n    }\n    else\n    {\nLABEL_77:\n      v16 = -34;\n    }\n    if ( v49 )\n    {\n      v32 = v30 - 1;\n      v33 = 0;\n      v34 = 1LL;\n      do\n      {\n        v34 *= v27;\n        if ( v33 == v32 )\n          break;\n        ++v33;\n      }\n      while ( is_mul_ok(v27, v34) );\n      if ( v49 <= 0xA )\n      {\n        v36 = v49;\n        v35 = 10LL;\n      }\n      else\n      {\n        v35 = 10LL;\n        while ( 1 )\n        {\n          v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v49 >> 64) >> 3;\n          if ( v35 > 0x1999999999999999LL )\n            break;\n          v35 *= 10LL;\n          if ( v35 >= v49 )\n          {\n            v36 = v49;\n            break;\n          }\n        }\n      }\n      if ( v21 )\n      {\n        v37 = 0;\n        do\n        {\n          if ( v35 <= 0x1999999999999999LL )\n            v35 *= 10LL;\n          else\n            v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n          ++v37;\n        }\n        while ( v21 != v37 );\n      }\n      v40 = 1LL;\n      do\n      {\n        v41 = 10 * v40;\n        v42 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        v43 = v36 - 10 * v42;\n        v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        if ( v43 )\n        {\n          v44 = v35 / v40 / v43;\n          if ( v44 )\n            v48 += v34 / v44;\n        }\n        v40 = v41;\n      }\n      while ( v42 );\n    }\n    *v8 = v48;\nLABEL_14:\n    if ( (v16 & 0x80000000) != 0 )\n    {\n      v15 = -v16;\nLABEL_8:\n      *v9 = v15;\n    }\n  }\n  else\n  {\n    v16 = 0;\n    *a4 = v48;\n  }\n  return v16;\n}\n\n// write access to const memory has been detected, the output may be wrong!\n__int64 __usercall sub_8D30@<rax>(char *nptr@<rdi>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned __int64 *a4@<rsi>, __int64 a5@<r12>, __int64 a6@<r13>, __int64 a7@<r14>, __int64 a8@<r15>)\n{\n  unsigned __int64 *v8; // rbp\n  int *v9; // rbx\n  unsigned __int8 v10; // r14\n  const unsigned __int16 **v11; // rax\n  const unsigned __int16 **v12; // r13\n  const unsigned __int16 *v13; // rcx\n  char *v14; // rax\n  int v15; // eax\n  unsigned int v16; // ecx\n  unsigned __int64 v18; // rax\n  char *v19; // r14\n  int v20; // ecx\n  int v21; // er15\n  char v22; // al\n  struct lconv *v23; // rax\n  size_t v24; // rax\n  char *v25; // r8\n  __int64 i; // rax\n  signed int v27; // er13\n  int v28; // er14\n  char *v29; // rax\n  int v30; // edi\n  int v31; // ecx\n  int v32; // edi\n  int v33; // er8\n  unsigned __int64 v34; // r10\n  unsigned __int64 v35; // rdi\n  unsigned __int64 v36; // r8\n  int v37; // esi\n  char *v38; // ST08_8\n  unsigned __int64 v39; // rax\n  unsigned __int64 v40; // r9\n  signed __int64 v41; // r11\n  unsigned __int64 v42; // rsi\n  unsigned __int64 v43; // r13\n  unsigned __int64 v44; // r9\n  char *v45; // rax\n  size_t v46; // [rsp+0h] [rbp-70h]\n  char *s1; // [rsp+8h] [rbp-68h]\n  unsigned __int64 v48; // [rsp+10h] [rbp-60h]\n  unsigned __int64 v49; // [rsp+18h] [rbp-58h]\n  char *endptr; // [rsp+28h] [rbp-48h]\n  unsigned __int64 v51; // [rsp+30h] [rbp-40h]\n  __int64 v52; // [rsp+40h] [rbp-30h]\n  __int64 v53; // [rsp+48h] [rbp-28h]\n  __int64 v54; // [rsp+50h] [rbp-20h]\n  __int64 v55; // [rsp+58h] [rbp-18h]\n  __int64 v56; // [rsp+60h] [rbp-10h]\n  __int64 v57; // [rsp+68h] [rbp-8h]\n\n  v57 = a8;\n  v56 = a7;\n  v55 = a6;\n  v54 = a5;\n  v53 = a3;\n  v52 = a2;\n  v8 = a4;\n  *a4 = 0LL;\n  v51 = __readfsqword(0x28u);\n  v9 = __errno_location();\n  if ( !nptr )\n    goto LABEL_7;\n  v10 = *nptr;\n  if ( !*nptr )\n    goto LABEL_7;\n  v11 = __ctype_b_loc();\n  v12 = v11;\n  v13 = *v11;\n  v14 = nptr;\n  while ( v13[v10] & 0x2000 )\n    v10 = *++v14;\n  if ( v10 == 45 )\n    goto LABEL_7;\n  *v9 = 0;\n  endptr = 0LL;\n  v18 = __strtoul_internal(nptr, &endptr, 0, 0);\n  v19 = endptr;\n  v48 = v18;\n  v20 = *v9;\n  if ( endptr == nptr )\n  {\nLABEL_33:\n    if ( !v20 )\n    {\nLABEL_7:\n      v15 = 22;\n      v16 = -22;\n      goto LABEL_8;\n    }\nLABEL_13:\n    v16 = -v20;\n    goto LABEL_14;\n  }\n  if ( v20 && v18 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n    goto LABEL_13;\n  if ( !endptr || !*endptr )\n  {\n    v16 = 0;\n    *a4 = v18;\n    return v16;\n  }\n  v21 = 0;\n  v49 = 0LL;\n  while ( 1 )\n  {\n    v22 = v19[1];\n    if ( v22 == 105 )\n    {\n      if ( (v19[2] & 0xDF) == 66 && !v19[3] )\n      {\nLABEL_37:\n        v27 = 1024;\n        goto LABEL_38;\n      }\n      goto LABEL_23;\n    }\n    if ( (v22 & 0xDF) == 66 && !v19[2] )\n      break;\n    if ( !v22 )\n      goto LABEL_37;\nLABEL_23:\n    v23 = localeconv();\n    if ( !v23 )\n      goto LABEL_7;\n    if ( !v23->decimal_point )\n      goto LABEL_7;\n    s1 = v23->decimal_point;\n    v24 = strlen(v23->decimal_point);\n    if ( v49 )\n      goto LABEL_7;\n    if ( !*v19 )\n      goto LABEL_7;\n    v46 = v24;\n    if ( strncmp(s1, v19, v24) )\n      goto LABEL_7;\n    v25 = &v19[v46];\n    for ( i = v19[v46]; (_BYTE)i == 48; ++v21 )\n      i = *++v25;\n    if ( (*v12)[i] & 0x800 )\n    {\n      *v9 = 0;\n      v38 = v25;\n      endptr = 0LL;\n      v39 = __strtoul_internal(v25, &endptr, 0, 0);\n      v19 = endptr;\n      v49 = v39;\n      v20 = *v9;\n      if ( endptr == v38 )\n        goto LABEL_33;\n      if ( v20 )\n      {\n        if ( v39 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n          goto LABEL_13;\n        goto LABEL_62;\n      }\n      if ( v39 )\n      {\nLABEL_62:\n        if ( !endptr || !*endptr )\n          goto LABEL_7;\n      }\n    }\n    else\n    {\n      endptr = v25;\n      v19 = v25;\n    }\n  }\n  v27 = 1000;\nLABEL_38:\n  v28 = *v19;\n  v29 = strchr(\"KMGTPEZY\", v28);\n  if ( v29 )\n  {\n    v30 = (unsigned __int64)(v29 - \"KMGTPEZY\") + 1;\n    goto LABEL_40;\n  }\n  v45 = strchr(\"kmgtpezy\", v28);\n  if ( !v45 )\n    goto LABEL_7;\n  v30 = (unsigned __int64)(v45 - \"kmgtpezy\") + 1;\nLABEL_40:\n  if ( v30 )\n  {\n    if ( is_mul_ok(v27, v48) )\n    {\n      v31 = 0;\n      while ( 1 )\n      {\n        v48 *= v27;\n        if ( v30 - 1 == v31 )\n          break;\n        ++v31;\n        if ( !is_mul_ok(v27, v48) )\n          goto LABEL_77;\n      }\n      v16 = 0;\n    }\n    else\n    {\nLABEL_77:\n      v16 = -34;\n    }\n    if ( v49 )\n    {\n      v32 = v30 - 1;\n      v33 = 0;\n      v34 = 1LL;\n      do\n      {\n        v34 *= v27;\n        if ( v33 == v32 )\n          break;\n        ++v33;\n      }\n      while ( is_mul_ok(v27, v34) );\n      if ( v49 <= 0xA )\n      {\n        v36 = v49;\n        v35 = 10LL;\n      }\n      else\n      {\n        v35 = 10LL;\n        while ( 1 )\n        {\n          v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v49 >> 64) >> 3;\n          if ( v35 > 0x1999999999999999LL )\n            break;\n          v35 *= 10LL;\n          if ( v35 >= v49 )\n          {\n            v36 = v49;\n            break;\n          }\n        }\n      }\n      if ( v21 )\n      {\n        v37 = 0;\n        do\n        {\n          if ( v35 <= 0x1999999999999999LL )\n            v35 *= 10LL;\n          else\n            v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n          ++v37;\n        }\n        while ( v21 != v37 );\n      }\n      v40 = 1LL;\n      do\n      {\n        v41 = 10 * v40;\n        v42 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        v43 = v36 - 10 * v42;\n        v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        if ( v43 )\n        {\n          v44 = v35 / v40 / v43;\n          if ( v44 )\n            v48 += v34 / v44;\n        }\n        v40 = v41;\n      }\n      while ( v42 );\n    }\n    *v8 = v48;\nLABEL_14:\n    if ( (v16 & 0x80000000) != 0 )\n    {\n      v15 = -v16;\nLABEL_8:\n      *v9 = v15;\n    }\n  }\n  else\n  {\n    v16 = 0;\n    *a4 = v48;\n  }\n  return v16;\n}\n\n// write access to const memory has been detected, the output may be wrong!\n__int64 __usercall sub_8D30@<rax>(char *nptr@<rdi>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned __int64 *a4@<rsi>, __int64 a5@<r12>, __int64 a6@<r13>, __int64 a7@<r14>, __int64 a8@<r15>)\n{\n  unsigned __int64 *v8; // rbp\n  int *v9; // rbx\n  unsigned __int8 v10; // r14\n  const unsigned __int16 **v11; // rax\n  const unsigned __int16 **v12; // r13\n  const unsigned __int16 *v13; // rcx\n  char *v14; // rax\n  int v15; // eax\n  unsigned int v16; // ecx\n  unsigned __int64 v18; // rax\n  char *v19; // r14\n  int v20; // ecx\n  int v21; // er15\n  char v22; // al\n  struct lconv *v23; // rax\n  size_t v24; // rax\n  char *v25; // r8\n  __int64 i; // rax\n  signed int v27; // er13\n  int v28; // er14\n  char *v29; // rax\n  int v30; // edi\n  int v31; // ecx\n  int v32; // edi\n  int v33; // er8\n  unsigned __int64 v34; // r10\n  unsigned __int64 v35; // rdi\n  unsigned __int64 v36; // r8\n  int v37; // esi\n  char *v38; // ST08_8\n  unsigned __int64 v39; // rax\n  unsigned __int64 v40; // r9\n  signed __int64 v41; // r11\n  unsigned __int64 v42; // rsi\n  unsigned __int64 v43; // r13\n  unsigned __int64 v44; // r9\n  char *v45; // rax\n  size_t v46; // [rsp+0h] [rbp-70h]\n  char *s1; // [rsp+8h] [rbp-68h]\n  unsigned __int64 v48; // [rsp+10h] [rbp-60h]\n  unsigned __int64 v49; // [rsp+18h] [rbp-58h]\n  char *endptr; // [rsp+28h] [rbp-48h]\n  unsigned __int64 v51; // [rsp+30h] [rbp-40h]\n  __int64 v52; // [rsp+40h] [rbp-30h]\n  __int64 v53; // [rsp+48h] [rbp-28h]\n  __int64 v54; // [rsp+50h] [rbp-20h]\n  __int64 v55; // [rsp+58h] [rbp-18h]\n  __int64 v56; // [rsp+60h] [rbp-10h]\n  __int64 v57; // [rsp+68h] [rbp-8h]\n\n  v57 = a8;\n  v56 = a7;\n  v55 = a6;\n  v54 = a5;\n  v53 = a3;\n  v52 = a2;\n  v8 = a4;\n  *a4 = 0LL;\n  v51 = __readfsqword(0x28u);\n  v9 = __errno_location();\n  if ( !nptr )\n    goto LABEL_7;\n  v10 = *nptr;\n  if ( !*nptr )\n    goto LABEL_7;\n  v11 = __ctype_b_loc();\n  v12 = v11;\n  v13 = *v11;\n  v14 = nptr;\n  while ( v13[v10] & 0x2000 )\n    v10 = *++v14;\n  if ( v10 == 45 )\n    goto LABEL_7;\n  *v9 = 0;\n  endptr = 0LL;\n  v18 = __strtoul_internal(nptr, &endptr, 0, 0);\n  v19 = endptr;\n  v48 = v18;\n  v20 = *v9;\n  if ( endptr == nptr )\n  {\nLABEL_33:\n    if ( !v20 )\n    {\nLABEL_7:\n      v15 = 22;\n      v16 = -22;\n      goto LABEL_8;\n    }\nLABEL_13:\n    v16 = -v20;\n    goto LABEL_14;\n  }\n  if ( v20 && v18 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n    goto LABEL_13;\n  if ( !endptr || !*endptr )\n  {\n    v16 = 0;\n    *a4 = v18;\n    return v16;\n  }\n  v21 = 0;\n  v49 = 0LL;\n  while ( 1 )\n  {\n    v22 = v19[1];\n    if ( v22 == 105 )\n    {\n      if ( (v19[2] & 0xDF) == 66 && !v19[3] )\n      {\nLABEL_37:\n        v27 = 1024;\n        goto LABEL_38;\n      }\n      goto LABEL_23;\n    }\n    if ( (v22 & 0xDF) == 66 && !v19[2] )\n      break;\n    if ( !v22 )\n      goto LABEL_37;\nLABEL_23:\n    v23 = localeconv();\n    if ( !v23 )\n      goto LABEL_7;\n    if ( !v23->decimal_point )\n      goto LABEL_7;\n    s1 = v23->decimal_point;\n    v24 = strlen(v23->decimal_point);\n    if ( v49 )\n      goto LABEL_7;\n    if ( !*v19 )\n      goto LABEL_7;\n    v46 = v24;\n    if ( strncmp(s1, v19, v24) )\n      goto LABEL_7;\n    v25 = &v19[v46];\n    for ( i = v19[v46]; (_BYTE)i == 48; ++v21 )\n      i = *++v25;\n    if ( (*v12)[i] & 0x800 )\n    {\n      *v9 = 0;\n      v38 = v25;\n      endptr = 0LL;\n      v39 = __strtoul_internal(v25, &endptr, 0, 0);\n      v19 = endptr;\n      v49 = v39;\n      v20 = *v9;\n      if ( endptr == v38 )\n        goto LABEL_33;\n      if ( v20 )\n      {\n        if ( v39 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n          goto LABEL_13;\n        goto LABEL_62;\n      }\n      if ( v39 )\n      {\nLABEL_62:\n        if ( !endptr || !*endptr )\n          goto LABEL_7;\n      }\n    }\n    else\n    {\n      endptr = v25;\n      v19 = v25;\n    }\n  }\n  v27 = 1000;\nLABEL_38:\n  v28 = *v19;\n  v29 = strchr(\"KMGTPEZY\", v28);\n  if ( v29 )\n  {\n    v30 = (unsigned __int64)(v29 - \"KMGTPEZY\") + 1;\n    goto LABEL_40;\n  }\n  v45 = strchr(\"kmgtpezy\", v28);\n  if ( !v45 )\n    goto LABEL_7;\n  v30 = (unsigned __int64)(v45 - \"kmgtpezy\") + 1;\nLABEL_40:\n  if ( v30 )\n  {\n    if ( is_mul_ok(v27, v48) )\n    {\n      v31 = 0;\n      while ( 1 )\n      {\n        v48 *= v27;\n        if ( v30 - 1 == v31 )\n          break;\n        ++v31;\n        if ( !is_mul_ok(v27, v48) )\n          goto LABEL_77;\n      }\n      v16 = 0;\n    }\n    else\n    {\nLABEL_77:\n      v16 = -34;\n    }\n    if ( v49 )\n    {\n      v32 = v30 - 1;\n      v33 = 0;\n      v34 = 1LL;\n      do\n      {\n        v34 *= v27;\n        if ( v33 == v32 )\n          break;\n        ++v33;\n      }\n      while ( is_mul_ok(v27, v34) );\n      if ( v49 <= 0xA )\n      {\n        v36 = v49;\n        v35 = 10LL;\n      }\n      else\n      {\n        v35 = 10LL;\n        while ( 1 )\n        {\n          v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v49 >> 64) >> 3;\n          if ( v35 > 0x1999999999999999LL )\n            break;\n          v35 *= 10LL;\n          if ( v35 >= v49 )\n          {\n            v36 = v49;\n            break;\n          }\n        }\n      }\n      if ( v21 )\n      {\n        v37 = 0;\n        do\n        {\n          if ( v35 <= 0x1999999999999999LL )\n            v35 *= 10LL;\n          else\n            v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n          ++v37;\n        }\n        while ( v21 != v37 );\n      }\n      v40 = 1LL;\n      do\n      {\n        v41 = 10 * v40;\n        v42 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        v43 = v36 - 10 * v42;\n        v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        if ( v43 )\n        {\n          v44 = v35 / v40 / v43;\n          if ( v44 )\n            v48 += v34 / v44;\n        }\n        v40 = v41;\n      }\n      while ( v42 );\n    }\n    *v8 = v48;\nLABEL_14:\n    if ( (v16 & 0x80000000) != 0 )\n    {\n      v15 = -v16;\nLABEL_8:\n      *v9 = v15;\n    }\n  }\n  else\n  {\n    v16 = 0;\n    *a4 = v48;\n  }\n  return v16;\n}\n", 
            "funcStartAddr": "0x8c38L", 
            "funcEndAddr": "0x8d29L", 
            "funcName": "sub_8D30"
        }, 
        {
            "decompiledFuncCode": "// write access to const memory has been detected, the output may be wrong!\n__int64 __usercall sub_8D30@<rax>(char *nptr@<rdi>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned __int64 *a4@<rsi>, __int64 a5@<r12>, __int64 a6@<r13>, __int64 a7@<r14>, __int64 a8@<r15>)\n{\n  unsigned __int64 *v8; // rbp\n  int *v9; // rbx\n  unsigned __int8 v10; // r14\n  const unsigned __int16 **v11; // rax\n  const unsigned __int16 **v12; // r13\n  const unsigned __int16 *v13; // rcx\n  char *v14; // rax\n  int v15; // eax\n  unsigned int v16; // ecx\n  unsigned __int64 v18; // rax\n  char *v19; // r14\n  int v20; // ecx\n  int v21; // er15\n  char v22; // al\n  struct lconv *v23; // rax\n  size_t v24; // rax\n  char *v25; // r8\n  __int64 i; // rax\n  signed int v27; // er13\n  int v28; // er14\n  char *v29; // rax\n  int v30; // edi\n  int v31; // ecx\n  int v32; // edi\n  int v33; // er8\n  unsigned __int64 v34; // r10\n  unsigned __int64 v35; // rdi\n  unsigned __int64 v36; // r8\n  int v37; // esi\n  char *v38; // ST08_8\n  unsigned __int64 v39; // rax\n  unsigned __int64 v40; // r9\n  signed __int64 v41; // r11\n  unsigned __int64 v42; // rsi\n  unsigned __int64 v43; // r13\n  unsigned __int64 v44; // r9\n  char *v45; // rax\n  size_t v46; // [rsp+0h] [rbp-70h]\n  char *s1; // [rsp+8h] [rbp-68h]\n  unsigned __int64 v48; // [rsp+10h] [rbp-60h]\n  unsigned __int64 v49; // [rsp+18h] [rbp-58h]\n  char *endptr; // [rsp+28h] [rbp-48h]\n  unsigned __int64 v51; // [rsp+30h] [rbp-40h]\n  __int64 v52; // [rsp+40h] [rbp-30h]\n  __int64 v53; // [rsp+48h] [rbp-28h]\n  __int64 v54; // [rsp+50h] [rbp-20h]\n  __int64 v55; // [rsp+58h] [rbp-18h]\n  __int64 v56; // [rsp+60h] [rbp-10h]\n  __int64 v57; // [rsp+68h] [rbp-8h]\n\n  v57 = a8;\n  v56 = a7;\n  v55 = a6;\n  v54 = a5;\n  v53 = a3;\n  v52 = a2;\n  v8 = a4;\n  *a4 = 0LL;\n  v51 = __readfsqword(0x28u);\n  v9 = __errno_location();\n  if ( !nptr )\n    goto LABEL_7;\n  v10 = *nptr;\n  if ( !*nptr )\n    goto LABEL_7;\n  v11 = __ctype_b_loc();\n  v12 = v11;\n  v13 = *v11;\n  v14 = nptr;\n  while ( v13[v10] & 0x2000 )\n    v10 = *++v14;\n  if ( v10 == 45 )\n    goto LABEL_7;\n  *v9 = 0;\n  endptr = 0LL;\n  v18 = __strtoul_internal(nptr, &endptr, 0, 0);\n  v19 = endptr;\n  v48 = v18;\n  v20 = *v9;\n  if ( endptr == nptr )\n  {\nLABEL_33:\n    if ( !v20 )\n    {\nLABEL_7:\n      v15 = 22;\n      v16 = -22;\n      goto LABEL_8;\n    }\nLABEL_13:\n    v16 = -v20;\n    goto LABEL_14;\n  }\n  if ( v20 && v18 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n    goto LABEL_13;\n  if ( !endptr || !*endptr )\n  {\n    v16 = 0;\n    *a4 = v18;\n    return v16;\n  }\n  v21 = 0;\n  v49 = 0LL;\n  while ( 1 )\n  {\n    v22 = v19[1];\n    if ( v22 == 105 )\n    {\n      if ( (v19[2] & 0xDF) == 66 && !v19[3] )\n      {\nLABEL_37:\n        v27 = 1024;\n        goto LABEL_38;\n      }\n      goto LABEL_23;\n    }\n    if ( (v22 & 0xDF) == 66 && !v19[2] )\n      break;\n    if ( !v22 )\n      goto LABEL_37;\nLABEL_23:\n    v23 = localeconv();\n    if ( !v23 )\n      goto LABEL_7;\n    if ( !v23->decimal_point )\n      goto LABEL_7;\n    s1 = v23->decimal_point;\n    v24 = strlen(v23->decimal_point);\n    if ( v49 )\n      goto LABEL_7;\n    if ( !*v19 )\n      goto LABEL_7;\n    v46 = v24;\n    if ( strncmp(s1, v19, v24) )\n      goto LABEL_7;\n    v25 = &v19[v46];\n    for ( i = v19[v46]; (_BYTE)i == 48; ++v21 )\n      i = *++v25;\n    if ( (*v12)[i] & 0x800 )\n    {\n      *v9 = 0;\n      v38 = v25;\n      endptr = 0LL;\n      v39 = __strtoul_internal(v25, &endptr, 0, 0);\n      v19 = endptr;\n      v49 = v39;\n      v20 = *v9;\n      if ( endptr == v38 )\n        goto LABEL_33;\n      if ( v20 )\n      {\n        if ( v39 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n          goto LABEL_13;\n        goto LABEL_62;\n      }\n      if ( v39 )\n      {\nLABEL_62:\n        if ( !endptr || !*endptr )\n          goto LABEL_7;\n      }\n    }\n    else\n    {\n      endptr = v25;\n      v19 = v25;\n    }\n  }\n  v27 = 1000;\nLABEL_38:\n  v28 = *v19;\n  v29 = strchr(\"KMGTPEZY\", v28);\n  if ( v29 )\n  {\n    v30 = (unsigned __int64)(v29 - \"KMGTPEZY\") + 1;\n    goto LABEL_40;\n  }\n  v45 = strchr(\"kmgtpezy\", v28);\n  if ( !v45 )\n    goto LABEL_7;\n  v30 = (unsigned __int64)(v45 - \"kmgtpezy\") + 1;\nLABEL_40:\n  if ( v30 )\n  {\n    if ( is_mul_ok(v27, v48) )\n    {\n      v31 = 0;\n      while ( 1 )\n      {\n        v48 *= v27;\n        if ( v30 - 1 == v31 )\n          break;\n        ++v31;\n        if ( !is_mul_ok(v27, v48) )\n          goto LABEL_77;\n      }\n      v16 = 0;\n    }\n    else\n    {\nLABEL_77:\n      v16 = -34;\n    }\n    if ( v49 )\n    {\n      v32 = v30 - 1;\n      v33 = 0;\n      v34 = 1LL;\n      do\n      {\n        v34 *= v27;\n        if ( v33 == v32 )\n          break;\n        ++v33;\n      }\n      while ( is_mul_ok(v27, v34) );\n      if ( v49 <= 0xA )\n      {\n        v36 = v49;\n        v35 = 10LL;\n      }\n      else\n      {\n        v35 = 10LL;\n        while ( 1 )\n        {\n          v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v49 >> 64) >> 3;\n          if ( v35 > 0x1999999999999999LL )\n            break;\n          v35 *= 10LL;\n          if ( v35 >= v49 )\n          {\n            v36 = v49;\n            break;\n          }\n        }\n      }\n      if ( v21 )\n      {\n        v37 = 0;\n        do\n        {\n          if ( v35 <= 0x1999999999999999LL )\n            v35 *= 10LL;\n          else\n            v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n          ++v37;\n        }\n        while ( v21 != v37 );\n      }\n      v40 = 1LL;\n      do\n      {\n        v41 = 10 * v40;\n        v42 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        v43 = v36 - 10 * v42;\n        v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        if ( v43 )\n        {\n          v44 = v35 / v40 / v43;\n          if ( v44 )\n            v48 += v34 / v44;\n        }\n        v40 = v41;\n      }\n      while ( v42 );\n    }\n    *v8 = v48;\nLABEL_14:\n    if ( (v16 & 0x80000000) != 0 )\n    {\n      v15 = -v16;\nLABEL_8:\n      *v9 = v15;\n    }\n  }\n  else\n  {\n    v16 = 0;\n    *a4 = v48;\n  }\n  return v16;\n}\n\n// write access to const memory has been detected, the output may be wrong!\n__int64 __usercall sub_8D30@<rax>(char *nptr@<rdi>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned __int64 *a4@<rsi>, __int64 a5@<r12>, __int64 a6@<r13>, __int64 a7@<r14>, __int64 a8@<r15>)\n{\n  unsigned __int64 *v8; // rbp\n  int *v9; // rbx\n  unsigned __int8 v10; // r14\n  const unsigned __int16 **v11; // rax\n  const unsigned __int16 **v12; // r13\n  const unsigned __int16 *v13; // rcx\n  char *v14; // rax\n  int v15; // eax\n  unsigned int v16; // ecx\n  unsigned __int64 v18; // rax\n  char *v19; // r14\n  int v20; // ecx\n  int v21; // er15\n  char v22; // al\n  struct lconv *v23; // rax\n  size_t v24; // rax\n  char *v25; // r8\n  __int64 i; // rax\n  signed int v27; // er13\n  int v28; // er14\n  char *v29; // rax\n  int v30; // edi\n  int v31; // ecx\n  int v32; // edi\n  int v33; // er8\n  unsigned __int64 v34; // r10\n  unsigned __int64 v35; // rdi\n  unsigned __int64 v36; // r8\n  int v37; // esi\n  char *v38; // ST08_8\n  unsigned __int64 v39; // rax\n  unsigned __int64 v40; // r9\n  signed __int64 v41; // r11\n  unsigned __int64 v42; // rsi\n  unsigned __int64 v43; // r13\n  unsigned __int64 v44; // r9\n  char *v45; // rax\n  size_t v46; // [rsp+0h] [rbp-70h]\n  char *s1; // [rsp+8h] [rbp-68h]\n  unsigned __int64 v48; // [rsp+10h] [rbp-60h]\n  unsigned __int64 v49; // [rsp+18h] [rbp-58h]\n  char *endptr; // [rsp+28h] [rbp-48h]\n  unsigned __int64 v51; // [rsp+30h] [rbp-40h]\n  __int64 v52; // [rsp+40h] [rbp-30h]\n  __int64 v53; // [rsp+48h] [rbp-28h]\n  __int64 v54; // [rsp+50h] [rbp-20h]\n  __int64 v55; // [rsp+58h] [rbp-18h]\n  __int64 v56; // [rsp+60h] [rbp-10h]\n  __int64 v57; // [rsp+68h] [rbp-8h]\n\n  v57 = a8;\n  v56 = a7;\n  v55 = a6;\n  v54 = a5;\n  v53 = a3;\n  v52 = a2;\n  v8 = a4;\n  *a4 = 0LL;\n  v51 = __readfsqword(0x28u);\n  v9 = __errno_location();\n  if ( !nptr )\n    goto LABEL_7;\n  v10 = *nptr;\n  if ( !*nptr )\n    goto LABEL_7;\n  v11 = __ctype_b_loc();\n  v12 = v11;\n  v13 = *v11;\n  v14 = nptr;\n  while ( v13[v10] & 0x2000 )\n    v10 = *++v14;\n  if ( v10 == 45 )\n    goto LABEL_7;\n  *v9 = 0;\n  endptr = 0LL;\n  v18 = __strtoul_internal(nptr, &endptr, 0, 0);\n  v19 = endptr;\n  v48 = v18;\n  v20 = *v9;\n  if ( endptr == nptr )\n  {\nLABEL_33:\n    if ( !v20 )\n    {\nLABEL_7:\n      v15 = 22;\n      v16 = -22;\n      goto LABEL_8;\n    }\nLABEL_13:\n    v16 = -v20;\n    goto LABEL_14;\n  }\n  if ( v20 && v18 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n    goto LABEL_13;\n  if ( !endptr || !*endptr )\n  {\n    v16 = 0;\n    *a4 = v18;\n    return v16;\n  }\n  v21 = 0;\n  v49 = 0LL;\n  while ( 1 )\n  {\n    v22 = v19[1];\n    if ( v22 == 105 )\n    {\n      if ( (v19[2] & 0xDF) == 66 && !v19[3] )\n      {\nLABEL_37:\n        v27 = 1024;\n        goto LABEL_38;\n      }\n      goto LABEL_23;\n    }\n    if ( (v22 & 0xDF) == 66 && !v19[2] )\n      break;\n    if ( !v22 )\n      goto LABEL_37;\nLABEL_23:\n    v23 = localeconv();\n    if ( !v23 )\n      goto LABEL_7;\n    if ( !v23->decimal_point )\n      goto LABEL_7;\n    s1 = v23->decimal_point;\n    v24 = strlen(v23->decimal_point);\n    if ( v49 )\n      goto LABEL_7;\n    if ( !*v19 )\n      goto LABEL_7;\n    v46 = v24;\n    if ( strncmp(s1, v19, v24) )\n      goto LABEL_7;\n    v25 = &v19[v46];\n    for ( i = v19[v46]; (_BYTE)i == 48; ++v21 )\n      i = *++v25;\n    if ( (*v12)[i] & 0x800 )\n    {\n      *v9 = 0;\n      v38 = v25;\n      endptr = 0LL;\n      v39 = __strtoul_internal(v25, &endptr, 0, 0);\n      v19 = endptr;\n      v49 = v39;\n      v20 = *v9;\n      if ( endptr == v38 )\n        goto LABEL_33;\n      if ( v20 )\n      {\n        if ( v39 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n          goto LABEL_13;\n        goto LABEL_62;\n      }\n      if ( v39 )\n      {\nLABEL_62:\n        if ( !endptr || !*endptr )\n          goto LABEL_7;\n      }\n    }\n    else\n    {\n      endptr = v25;\n      v19 = v25;\n    }\n  }\n  v27 = 1000;\nLABEL_38:\n  v28 = *v19;\n  v29 = strchr(\"KMGTPEZY\", v28);\n  if ( v29 )\n  {\n    v30 = (unsigned __int64)(v29 - \"KMGTPEZY\") + 1;\n    goto LABEL_40;\n  }\n  v45 = strchr(\"kmgtpezy\", v28);\n  if ( !v45 )\n    goto LABEL_7;\n  v30 = (unsigned __int64)(v45 - \"kmgtpezy\") + 1;\nLABEL_40:\n  if ( v30 )\n  {\n    if ( is_mul_ok(v27, v48) )\n    {\n      v31 = 0;\n      while ( 1 )\n      {\n        v48 *= v27;\n        if ( v30 - 1 == v31 )\n          break;\n        ++v31;\n        if ( !is_mul_ok(v27, v48) )\n          goto LABEL_77;\n      }\n      v16 = 0;\n    }\n    else\n    {\nLABEL_77:\n      v16 = -34;\n    }\n    if ( v49 )\n    {\n      v32 = v30 - 1;\n      v33 = 0;\n      v34 = 1LL;\n      do\n      {\n        v34 *= v27;\n        if ( v33 == v32 )\n          break;\n        ++v33;\n      }\n      while ( is_mul_ok(v27, v34) );\n      if ( v49 <= 0xA )\n      {\n        v36 = v49;\n        v35 = 10LL;\n      }\n      else\n      {\n        v35 = 10LL;\n        while ( 1 )\n        {\n          v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v49 >> 64) >> 3;\n          if ( v35 > 0x1999999999999999LL )\n            break;\n          v35 *= 10LL;\n          if ( v35 >= v49 )\n          {\n            v36 = v49;\n            break;\n          }\n        }\n      }\n      if ( v21 )\n      {\n        v37 = 0;\n        do\n        {\n          if ( v35 <= 0x1999999999999999LL )\n            v35 *= 10LL;\n          else\n            v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n          ++v37;\n        }\n        while ( v21 != v37 );\n      }\n      v40 = 1LL;\n      do\n      {\n        v41 = 10 * v40;\n        v42 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        v43 = v36 - 10 * v42;\n        v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        if ( v43 )\n        {\n          v44 = v35 / v40 / v43;\n          if ( v44 )\n            v48 += v34 / v44;\n        }\n        v40 = v41;\n      }\n      while ( v42 );\n    }\n    *v8 = v48;\nLABEL_14:\n    if ( (v16 & 0x80000000) != 0 )\n    {\n      v15 = -v16;\nLABEL_8:\n      *v9 = v15;\n    }\n  }\n  else\n  {\n    v16 = 0;\n    *a4 = v48;\n  }\n  return v16;\n}\n\n// write access to const memory has been detected, the output may be wrong!\n__int64 __usercall sub_8D30@<rax>(char *nptr@<rdi>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned __int64 *a4@<rsi>, __int64 a5@<r12>, __int64 a6@<r13>, __int64 a7@<r14>, __int64 a8@<r15>)\n{\n  unsigned __int64 *v8; // rbp\n  int *v9; // rbx\n  unsigned __int8 v10; // r14\n  const unsigned __int16 **v11; // rax\n  const unsigned __int16 **v12; // r13\n  const unsigned __int16 *v13; // rcx\n  char *v14; // rax\n  int v15; // eax\n  unsigned int v16; // ecx\n  unsigned __int64 v18; // rax\n  char *v19; // r14\n  int v20; // ecx\n  int v21; // er15\n  char v22; // al\n  struct lconv *v23; // rax\n  size_t v24; // rax\n  char *v25; // r8\n  __int64 i; // rax\n  signed int v27; // er13\n  int v28; // er14\n  char *v29; // rax\n  int v30; // edi\n  int v31; // ecx\n  int v32; // edi\n  int v33; // er8\n  unsigned __int64 v34; // r10\n  unsigned __int64 v35; // rdi\n  unsigned __int64 v36; // r8\n  int v37; // esi\n  char *v38; // ST08_8\n  unsigned __int64 v39; // rax\n  unsigned __int64 v40; // r9\n  signed __int64 v41; // r11\n  unsigned __int64 v42; // rsi\n  unsigned __int64 v43; // r13\n  unsigned __int64 v44; // r9\n  char *v45; // rax\n  size_t v46; // [rsp+0h] [rbp-70h]\n  char *s1; // [rsp+8h] [rbp-68h]\n  unsigned __int64 v48; // [rsp+10h] [rbp-60h]\n  unsigned __int64 v49; // [rsp+18h] [rbp-58h]\n  char *endptr; // [rsp+28h] [rbp-48h]\n  unsigned __int64 v51; // [rsp+30h] [rbp-40h]\n  __int64 v52; // [rsp+40h] [rbp-30h]\n  __int64 v53; // [rsp+48h] [rbp-28h]\n  __int64 v54; // [rsp+50h] [rbp-20h]\n  __int64 v55; // [rsp+58h] [rbp-18h]\n  __int64 v56; // [rsp+60h] [rbp-10h]\n  __int64 v57; // [rsp+68h] [rbp-8h]\n\n  v57 = a8;\n  v56 = a7;\n  v55 = a6;\n  v54 = a5;\n  v53 = a3;\n  v52 = a2;\n  v8 = a4;\n  *a4 = 0LL;\n  v51 = __readfsqword(0x28u);\n  v9 = __errno_location();\n  if ( !nptr )\n    goto LABEL_7;\n  v10 = *nptr;\n  if ( !*nptr )\n    goto LABEL_7;\n  v11 = __ctype_b_loc();\n  v12 = v11;\n  v13 = *v11;\n  v14 = nptr;\n  while ( v13[v10] & 0x2000 )\n    v10 = *++v14;\n  if ( v10 == 45 )\n    goto LABEL_7;\n  *v9 = 0;\n  endptr = 0LL;\n  v18 = __strtoul_internal(nptr, &endptr, 0, 0);\n  v19 = endptr;\n  v48 = v18;\n  v20 = *v9;\n  if ( endptr == nptr )\n  {\nLABEL_33:\n    if ( !v20 )\n    {\nLABEL_7:\n      v15 = 22;\n      v16 = -22;\n      goto LABEL_8;\n    }\nLABEL_13:\n    v16 = -v20;\n    goto LABEL_14;\n  }\n  if ( v20 && v18 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n    goto LABEL_13;\n  if ( !endptr || !*endptr )\n  {\n    v16 = 0;\n    *a4 = v18;\n    return v16;\n  }\n  v21 = 0;\n  v49 = 0LL;\n  while ( 1 )\n  {\n    v22 = v19[1];\n    if ( v22 == 105 )\n    {\n      if ( (v19[2] & 0xDF) == 66 && !v19[3] )\n      {\nLABEL_37:\n        v27 = 1024;\n        goto LABEL_38;\n      }\n      goto LABEL_23;\n    }\n    if ( (v22 & 0xDF) == 66 && !v19[2] )\n      break;\n    if ( !v22 )\n      goto LABEL_37;\nLABEL_23:\n    v23 = localeconv();\n    if ( !v23 )\n      goto LABEL_7;\n    if ( !v23->decimal_point )\n      goto LABEL_7;\n    s1 = v23->decimal_point;\n    v24 = strlen(v23->decimal_point);\n    if ( v49 )\n      goto LABEL_7;\n    if ( !*v19 )\n      goto LABEL_7;\n    v46 = v24;\n    if ( strncmp(s1, v19, v24) )\n      goto LABEL_7;\n    v25 = &v19[v46];\n    for ( i = v19[v46]; (_BYTE)i == 48; ++v21 )\n      i = *++v25;\n    if ( (*v12)[i] & 0x800 )\n    {\n      *v9 = 0;\n      v38 = v25;\n      endptr = 0LL;\n      v39 = __strtoul_internal(v25, &endptr, 0, 0);\n      v19 = endptr;\n      v49 = v39;\n      v20 = *v9;\n      if ( endptr == v38 )\n        goto LABEL_33;\n      if ( v20 )\n      {\n        if ( v39 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n          goto LABEL_13;\n        goto LABEL_62;\n      }\n      if ( v39 )\n      {\nLABEL_62:\n        if ( !endptr || !*endptr )\n          goto LABEL_7;\n      }\n    }\n    else\n    {\n      endptr = v25;\n      v19 = v25;\n    }\n  }\n  v27 = 1000;\nLABEL_38:\n  v28 = *v19;\n  v29 = strchr(\"KMGTPEZY\", v28);\n  if ( v29 )\n  {\n    v30 = (unsigned __int64)(v29 - \"KMGTPEZY\") + 1;\n    goto LABEL_40;\n  }\n  v45 = strchr(\"kmgtpezy\", v28);\n  if ( !v45 )\n    goto LABEL_7;\n  v30 = (unsigned __int64)(v45 - \"kmgtpezy\") + 1;\nLABEL_40:\n  if ( v30 )\n  {\n    if ( is_mul_ok(v27, v48) )\n    {\n      v31 = 0;\n      while ( 1 )\n      {\n        v48 *= v27;\n        if ( v30 - 1 == v31 )\n          break;\n        ++v31;\n        if ( !is_mul_ok(v27, v48) )\n          goto LABEL_77;\n      }\n      v16 = 0;\n    }\n    else\n    {\nLABEL_77:\n      v16 = -34;\n    }\n    if ( v49 )\n    {\n      v32 = v30 - 1;\n      v33 = 0;\n      v34 = 1LL;\n      do\n      {\n        v34 *= v27;\n        if ( v33 == v32 )\n          break;\n        ++v33;\n      }\n      while ( is_mul_ok(v27, v34) );\n      if ( v49 <= 0xA )\n      {\n        v36 = v49;\n        v35 = 10LL;\n      }\n      else\n      {\n        v35 = 10LL;\n        while ( 1 )\n        {\n          v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v49 >> 64) >> 3;\n          if ( v35 > 0x1999999999999999LL )\n            break;\n          v35 *= 10LL;\n          if ( v35 >= v49 )\n          {\n            v36 = v49;\n            break;\n          }\n        }\n      }\n      if ( v21 )\n      {\n        v37 = 0;\n        do\n        {\n          if ( v35 <= 0x1999999999999999LL )\n            v35 *= 10LL;\n          else\n            v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n          ++v37;\n        }\n        while ( v21 != v37 );\n      }\n      v40 = 1LL;\n      do\n      {\n        v41 = 10 * v40;\n        v42 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        v43 = v36 - 10 * v42;\n        v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        if ( v43 )\n        {\n          v44 = v35 / v40 / v43;\n          if ( v44 )\n            v48 += v34 / v44;\n        }\n        v40 = v41;\n      }\n      while ( v42 );\n    }\n    *v8 = v48;\nLABEL_14:\n    if ( (v16 & 0x80000000) != 0 )\n    {\n      v15 = -v16;\nLABEL_8:\n      *v9 = v15;\n    }\n  }\n  else\n  {\n    v16 = 0;\n    *a4 = v48;\n  }\n  return v16;\n}\n\n// write access to const memory has been detected, the output may be wrong!\n__int64 __usercall sub_8D30@<rax>(char *nptr@<rdi>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned __int64 *a4@<rsi>, __int64 a5@<r12>, __int64 a6@<r13>, __int64 a7@<r14>, __int64 a8@<r15>)\n{\n  unsigned __int64 *v8; // rbp\n  int *v9; // rbx\n  unsigned __int8 v10; // r14\n  const unsigned __int16 **v11; // rax\n  const unsigned __int16 **v12; // r13\n  const unsigned __int16 *v13; // rcx\n  char *v14; // rax\n  int v15; // eax\n  unsigned int v16; // ecx\n  unsigned __int64 v18; // rax\n  char *v19; // r14\n  int v20; // ecx\n  int v21; // er15\n  char v22; // al\n  struct lconv *v23; // rax\n  size_t v24; // rax\n  char *v25; // r8\n  __int64 i; // rax\n  signed int v27; // er13\n  int v28; // er14\n  char *v29; // rax\n  int v30; // edi\n  int v31; // ecx\n  int v32; // edi\n  int v33; // er8\n  unsigned __int64 v34; // r10\n  unsigned __int64 v35; // rdi\n  unsigned __int64 v36; // r8\n  int v37; // esi\n  char *v38; // ST08_8\n  unsigned __int64 v39; // rax\n  unsigned __int64 v40; // r9\n  signed __int64 v41; // r11\n  unsigned __int64 v42; // rsi\n  unsigned __int64 v43; // r13\n  unsigned __int64 v44; // r9\n  char *v45; // rax\n  size_t v46; // [rsp+0h] [rbp-70h]\n  char *s1; // [rsp+8h] [rbp-68h]\n  unsigned __int64 v48; // [rsp+10h] [rbp-60h]\n  unsigned __int64 v49; // [rsp+18h] [rbp-58h]\n  char *endptr; // [rsp+28h] [rbp-48h]\n  unsigned __int64 v51; // [rsp+30h] [rbp-40h]\n  __int64 v52; // [rsp+40h] [rbp-30h]\n  __int64 v53; // [rsp+48h] [rbp-28h]\n  __int64 v54; // [rsp+50h] [rbp-20h]\n  __int64 v55; // [rsp+58h] [rbp-18h]\n  __int64 v56; // [rsp+60h] [rbp-10h]\n  __int64 v57; // [rsp+68h] [rbp-8h]\n\n  v57 = a8;\n  v56 = a7;\n  v55 = a6;\n  v54 = a5;\n  v53 = a3;\n  v52 = a2;\n  v8 = a4;\n  *a4 = 0LL;\n  v51 = __readfsqword(0x28u);\n  v9 = __errno_location();\n  if ( !nptr )\n    goto LABEL_7;\n  v10 = *nptr;\n  if ( !*nptr )\n    goto LABEL_7;\n  v11 = __ctype_b_loc();\n  v12 = v11;\n  v13 = *v11;\n  v14 = nptr;\n  while ( v13[v10] & 0x2000 )\n    v10 = *++v14;\n  if ( v10 == 45 )\n    goto LABEL_7;\n  *v9 = 0;\n  endptr = 0LL;\n  v18 = __strtoul_internal(nptr, &endptr, 0, 0);\n  v19 = endptr;\n  v48 = v18;\n  v20 = *v9;\n  if ( endptr == nptr )\n  {\nLABEL_33:\n    if ( !v20 )\n    {\nLABEL_7:\n      v15 = 22;\n      v16 = -22;\n      goto LABEL_8;\n    }\nLABEL_13:\n    v16 = -v20;\n    goto LABEL_14;\n  }\n  if ( v20 && v18 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n    goto LABEL_13;\n  if ( !endptr || !*endptr )\n  {\n    v16 = 0;\n    *a4 = v18;\n    return v16;\n  }\n  v21 = 0;\n  v49 = 0LL;\n  while ( 1 )\n  {\n    v22 = v19[1];\n    if ( v22 == 105 )\n    {\n      if ( (v19[2] & 0xDF) == 66 && !v19[3] )\n      {\nLABEL_37:\n        v27 = 1024;\n        goto LABEL_38;\n      }\n      goto LABEL_23;\n    }\n    if ( (v22 & 0xDF) == 66 && !v19[2] )\n      break;\n    if ( !v22 )\n      goto LABEL_37;\nLABEL_23:\n    v23 = localeconv();\n    if ( !v23 )\n      goto LABEL_7;\n    if ( !v23->decimal_point )\n      goto LABEL_7;\n    s1 = v23->decimal_point;\n    v24 = strlen(v23->decimal_point);\n    if ( v49 )\n      goto LABEL_7;\n    if ( !*v19 )\n      goto LABEL_7;\n    v46 = v24;\n    if ( strncmp(s1, v19, v24) )\n      goto LABEL_7;\n    v25 = &v19[v46];\n    for ( i = v19[v46]; (_BYTE)i == 48; ++v21 )\n      i = *++v25;\n    if ( (*v12)[i] & 0x800 )\n    {\n      *v9 = 0;\n      v38 = v25;\n      endptr = 0LL;\n      v39 = __strtoul_internal(v25, &endptr, 0, 0);\n      v19 = endptr;\n      v49 = v39;\n      v20 = *v9;\n      if ( endptr == v38 )\n        goto LABEL_33;\n      if ( v20 )\n      {\n        if ( v39 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n          goto LABEL_13;\n        goto LABEL_62;\n      }\n      if ( v39 )\n      {\nLABEL_62:\n        if ( !endptr || !*endptr )\n          goto LABEL_7;\n      }\n    }\n    else\n    {\n      endptr = v25;\n      v19 = v25;\n    }\n  }\n  v27 = 1000;\nLABEL_38:\n  v28 = *v19;\n  v29 = strchr(\"KMGTPEZY\", v28);\n  if ( v29 )\n  {\n    v30 = (unsigned __int64)(v29 - \"KMGTPEZY\") + 1;\n    goto LABEL_40;\n  }\n  v45 = strchr(\"kmgtpezy\", v28);\n  if ( !v45 )\n    goto LABEL_7;\n  v30 = (unsigned __int64)(v45 - \"kmgtpezy\") + 1;\nLABEL_40:\n  if ( v30 )\n  {\n    if ( is_mul_ok(v27, v48) )\n    {\n      v31 = 0;\n      while ( 1 )\n      {\n        v48 *= v27;\n        if ( v30 - 1 == v31 )\n          break;\n        ++v31;\n        if ( !is_mul_ok(v27, v48) )\n          goto LABEL_77;\n      }\n      v16 = 0;\n    }\n    else\n    {\nLABEL_77:\n      v16 = -34;\n    }\n    if ( v49 )\n    {\n      v32 = v30 - 1;\n      v33 = 0;\n      v34 = 1LL;\n      do\n      {\n        v34 *= v27;\n        if ( v33 == v32 )\n          break;\n        ++v33;\n      }\n      while ( is_mul_ok(v27, v34) );\n      if ( v49 <= 0xA )\n      {\n        v36 = v49;\n        v35 = 10LL;\n      }\n      else\n      {\n        v35 = 10LL;\n        while ( 1 )\n        {\n          v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v49 >> 64) >> 3;\n          if ( v35 > 0x1999999999999999LL )\n            break;\n          v35 *= 10LL;\n          if ( v35 >= v49 )\n          {\n            v36 = v49;\n            break;\n          }\n        }\n      }\n      if ( v21 )\n      {\n        v37 = 0;\n        do\n        {\n          if ( v35 <= 0x1999999999999999LL )\n            v35 *= 10LL;\n          else\n            v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n          ++v37;\n        }\n        while ( v21 != v37 );\n      }\n      v40 = 1LL;\n      do\n      {\n        v41 = 10 * v40;\n        v42 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        v43 = v36 - 10 * v42;\n        v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        if ( v43 )\n        {\n          v44 = v35 / v40 / v43;\n          if ( v44 )\n            v48 += v34 / v44;\n        }\n        v40 = v41;\n      }\n      while ( v42 );\n    }\n    *v8 = v48;\nLABEL_14:\n    if ( (v16 & 0x80000000) != 0 )\n    {\n      v15 = -v16;\nLABEL_8:\n      *v9 = v15;\n    }\n  }\n  else\n  {\n    v16 = 0;\n    *a4 = v48;\n  }\n  return v16;\n}\n\n// write access to const memory has been detected, the output may be wrong!\n__int64 __usercall sub_8D30@<rax>(char *nptr@<rdi>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned __int64 *a4@<rsi>, __int64 a5@<r12>, __int64 a6@<r13>, __int64 a7@<r14>, __int64 a8@<r15>)\n{\n  unsigned __int64 *v8; // rbp\n  int *v9; // rbx\n  unsigned __int8 v10; // r14\n  const unsigned __int16 **v11; // rax\n  const unsigned __int16 **v12; // r13\n  const unsigned __int16 *v13; // rcx\n  char *v14; // rax\n  int v15; // eax\n  unsigned int v16; // ecx\n  unsigned __int64 v18; // rax\n  char *v19; // r14\n  int v20; // ecx\n  int v21; // er15\n  char v22; // al\n  struct lconv *v23; // rax\n  size_t v24; // rax\n  char *v25; // r8\n  __int64 i; // rax\n  signed int v27; // er13\n  int v28; // er14\n  char *v29; // rax\n  int v30; // edi\n  int v31; // ecx\n  int v32; // edi\n  int v33; // er8\n  unsigned __int64 v34; // r10\n  unsigned __int64 v35; // rdi\n  unsigned __int64 v36; // r8\n  int v37; // esi\n  char *v38; // ST08_8\n  unsigned __int64 v39; // rax\n  unsigned __int64 v40; // r9\n  signed __int64 v41; // r11\n  unsigned __int64 v42; // rsi\n  unsigned __int64 v43; // r13\n  unsigned __int64 v44; // r9\n  char *v45; // rax\n  size_t v46; // [rsp+0h] [rbp-70h]\n  char *s1; // [rsp+8h] [rbp-68h]\n  unsigned __int64 v48; // [rsp+10h] [rbp-60h]\n  unsigned __int64 v49; // [rsp+18h] [rbp-58h]\n  char *endptr; // [rsp+28h] [rbp-48h]\n  unsigned __int64 v51; // [rsp+30h] [rbp-40h]\n  __int64 v52; // [rsp+40h] [rbp-30h]\n  __int64 v53; // [rsp+48h] [rbp-28h]\n  __int64 v54; // [rsp+50h] [rbp-20h]\n  __int64 v55; // [rsp+58h] [rbp-18h]\n  __int64 v56; // [rsp+60h] [rbp-10h]\n  __int64 v57; // [rsp+68h] [rbp-8h]\n\n  v57 = a8;\n  v56 = a7;\n  v55 = a6;\n  v54 = a5;\n  v53 = a3;\n  v52 = a2;\n  v8 = a4;\n  *a4 = 0LL;\n  v51 = __readfsqword(0x28u);\n  v9 = __errno_location();\n  if ( !nptr )\n    goto LABEL_7;\n  v10 = *nptr;\n  if ( !*nptr )\n    goto LABEL_7;\n  v11 = __ctype_b_loc();\n  v12 = v11;\n  v13 = *v11;\n  v14 = nptr;\n  while ( v13[v10] & 0x2000 )\n    v10 = *++v14;\n  if ( v10 == 45 )\n    goto LABEL_7;\n  *v9 = 0;\n  endptr = 0LL;\n  v18 = __strtoul_internal(nptr, &endptr, 0, 0);\n  v19 = endptr;\n  v48 = v18;\n  v20 = *v9;\n  if ( endptr == nptr )\n  {\nLABEL_33:\n    if ( !v20 )\n    {\nLABEL_7:\n      v15 = 22;\n      v16 = -22;\n      goto LABEL_8;\n    }\nLABEL_13:\n    v16 = -v20;\n    goto LABEL_14;\n  }\n  if ( v20 && v18 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n    goto LABEL_13;\n  if ( !endptr || !*endptr )\n  {\n    v16 = 0;\n    *a4 = v18;\n    return v16;\n  }\n  v21 = 0;\n  v49 = 0LL;\n  while ( 1 )\n  {\n    v22 = v19[1];\n    if ( v22 == 105 )\n    {\n      if ( (v19[2] & 0xDF) == 66 && !v19[3] )\n      {\nLABEL_37:\n        v27 = 1024;\n        goto LABEL_38;\n      }\n      goto LABEL_23;\n    }\n    if ( (v22 & 0xDF) == 66 && !v19[2] )\n      break;\n    if ( !v22 )\n      goto LABEL_37;\nLABEL_23:\n    v23 = localeconv();\n    if ( !v23 )\n      goto LABEL_7;\n    if ( !v23->decimal_point )\n      goto LABEL_7;\n    s1 = v23->decimal_point;\n    v24 = strlen(v23->decimal_point);\n    if ( v49 )\n      goto LABEL_7;\n    if ( !*v19 )\n      goto LABEL_7;\n    v46 = v24;\n    if ( strncmp(s1, v19, v24) )\n      goto LABEL_7;\n    v25 = &v19[v46];\n    for ( i = v19[v46]; (_BYTE)i == 48; ++v21 )\n      i = *++v25;\n    if ( (*v12)[i] & 0x800 )\n    {\n      *v9 = 0;\n      v38 = v25;\n      endptr = 0LL;\n      v39 = __strtoul_internal(v25, &endptr, 0, 0);\n      v19 = endptr;\n      v49 = v39;\n      v20 = *v9;\n      if ( endptr == v38 )\n        goto LABEL_33;\n      if ( v20 )\n      {\n        if ( v39 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n          goto LABEL_13;\n        goto LABEL_62;\n      }\n      if ( v39 )\n      {\nLABEL_62:\n        if ( !endptr || !*endptr )\n          goto LABEL_7;\n      }\n    }\n    else\n    {\n      endptr = v25;\n      v19 = v25;\n    }\n  }\n  v27 = 1000;\nLABEL_38:\n  v28 = *v19;\n  v29 = strchr(\"KMGTPEZY\", v28);\n  if ( v29 )\n  {\n    v30 = (unsigned __int64)(v29 - \"KMGTPEZY\") + 1;\n    goto LABEL_40;\n  }\n  v45 = strchr(\"kmgtpezy\", v28);\n  if ( !v45 )\n    goto LABEL_7;\n  v30 = (unsigned __int64)(v45 - \"kmgtpezy\") + 1;\nLABEL_40:\n  if ( v30 )\n  {\n    if ( is_mul_ok(v27, v48) )\n    {\n      v31 = 0;\n      while ( 1 )\n      {\n        v48 *= v27;\n        if ( v30 - 1 == v31 )\n          break;\n        ++v31;\n        if ( !is_mul_ok(v27, v48) )\n          goto LABEL_77;\n      }\n      v16 = 0;\n    }\n    else\n    {\nLABEL_77:\n      v16 = -34;\n    }\n    if ( v49 )\n    {\n      v32 = v30 - 1;\n      v33 = 0;\n      v34 = 1LL;\n      do\n      {\n        v34 *= v27;\n        if ( v33 == v32 )\n          break;\n        ++v33;\n      }\n      while ( is_mul_ok(v27, v34) );\n      if ( v49 <= 0xA )\n      {\n        v36 = v49;\n        v35 = 10LL;\n      }\n      else\n      {\n        v35 = 10LL;\n        while ( 1 )\n        {\n          v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v49 >> 64) >> 3;\n          if ( v35 > 0x1999999999999999LL )\n            break;\n          v35 *= 10LL;\n          if ( v35 >= v49 )\n          {\n            v36 = v49;\n            break;\n          }\n        }\n      }\n      if ( v21 )\n      {\n        v37 = 0;\n        do\n        {\n          if ( v35 <= 0x1999999999999999LL )\n            v35 *= 10LL;\n          else\n            v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n          ++v37;\n        }\n        while ( v21 != v37 );\n      }\n      v40 = 1LL;\n      do\n      {\n        v41 = 10 * v40;\n        v42 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        v43 = v36 - 10 * v42;\n        v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        if ( v43 )\n        {\n          v44 = v35 / v40 / v43;\n          if ( v44 )\n            v48 += v34 / v44;\n        }\n        v40 = v41;\n      }\n      while ( v42 );\n    }\n    *v8 = v48;\nLABEL_14:\n    if ( (v16 & 0x80000000) != 0 )\n    {\n      v15 = -v16;\nLABEL_8:\n      *v9 = v15;\n    }\n  }\n  else\n  {\n    v16 = 0;\n    *a4 = v48;\n  }\n  return v16;\n}\n\n// write access to const memory has been detected, the output may be wrong!\n__int64 __usercall sub_8D30@<rax>(char *nptr@<rdi>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned __int64 *a4@<rsi>, __int64 a5@<r12>, __int64 a6@<r13>, __int64 a7@<r14>, __int64 a8@<r15>)\n{\n  unsigned __int64 *v8; // rbp\n  int *v9; // rbx\n  unsigned __int8 v10; // r14\n  const unsigned __int16 **v11; // rax\n  const unsigned __int16 **v12; // r13\n  const unsigned __int16 *v13; // rcx\n  char *v14; // rax\n  int v15; // eax\n  unsigned int v16; // ecx\n  unsigned __int64 v18; // rax\n  char *v19; // r14\n  int v20; // ecx\n  int v21; // er15\n  char v22; // al\n  struct lconv *v23; // rax\n  size_t v24; // rax\n  char *v25; // r8\n  __int64 i; // rax\n  signed int v27; // er13\n  int v28; // er14\n  char *v29; // rax\n  int v30; // edi\n  int v31; // ecx\n  int v32; // edi\n  int v33; // er8\n  unsigned __int64 v34; // r10\n  unsigned __int64 v35; // rdi\n  unsigned __int64 v36; // r8\n  int v37; // esi\n  char *v38; // ST08_8\n  unsigned __int64 v39; // rax\n  unsigned __int64 v40; // r9\n  signed __int64 v41; // r11\n  unsigned __int64 v42; // rsi\n  unsigned __int64 v43; // r13\n  unsigned __int64 v44; // r9\n  char *v45; // rax\n  size_t v46; // [rsp+0h] [rbp-70h]\n  char *s1; // [rsp+8h] [rbp-68h]\n  unsigned __int64 v48; // [rsp+10h] [rbp-60h]\n  unsigned __int64 v49; // [rsp+18h] [rbp-58h]\n  char *endptr; // [rsp+28h] [rbp-48h]\n  unsigned __int64 v51; // [rsp+30h] [rbp-40h]\n  __int64 v52; // [rsp+40h] [rbp-30h]\n  __int64 v53; // [rsp+48h] [rbp-28h]\n  __int64 v54; // [rsp+50h] [rbp-20h]\n  __int64 v55; // [rsp+58h] [rbp-18h]\n  __int64 v56; // [rsp+60h] [rbp-10h]\n  __int64 v57; // [rsp+68h] [rbp-8h]\n\n  v57 = a8;\n  v56 = a7;\n  v55 = a6;\n  v54 = a5;\n  v53 = a3;\n  v52 = a2;\n  v8 = a4;\n  *a4 = 0LL;\n  v51 = __readfsqword(0x28u);\n  v9 = __errno_location();\n  if ( !nptr )\n    goto LABEL_7;\n  v10 = *nptr;\n  if ( !*nptr )\n    goto LABEL_7;\n  v11 = __ctype_b_loc();\n  v12 = v11;\n  v13 = *v11;\n  v14 = nptr;\n  while ( v13[v10] & 0x2000 )\n    v10 = *++v14;\n  if ( v10 == 45 )\n    goto LABEL_7;\n  *v9 = 0;\n  endptr = 0LL;\n  v18 = __strtoul_internal(nptr, &endptr, 0, 0);\n  v19 = endptr;\n  v48 = v18;\n  v20 = *v9;\n  if ( endptr == nptr )\n  {\nLABEL_33:\n    if ( !v20 )\n    {\nLABEL_7:\n      v15 = 22;\n      v16 = -22;\n      goto LABEL_8;\n    }\nLABEL_13:\n    v16 = -v20;\n    goto LABEL_14;\n  }\n  if ( v20 && v18 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n    goto LABEL_13;\n  if ( !endptr || !*endptr )\n  {\n    v16 = 0;\n    *a4 = v18;\n    return v16;\n  }\n  v21 = 0;\n  v49 = 0LL;\n  while ( 1 )\n  {\n    v22 = v19[1];\n    if ( v22 == 105 )\n    {\n      if ( (v19[2] & 0xDF) == 66 && !v19[3] )\n      {\nLABEL_37:\n        v27 = 1024;\n        goto LABEL_38;\n      }\n      goto LABEL_23;\n    }\n    if ( (v22 & 0xDF) == 66 && !v19[2] )\n      break;\n    if ( !v22 )\n      goto LABEL_37;\nLABEL_23:\n    v23 = localeconv();\n    if ( !v23 )\n      goto LABEL_7;\n    if ( !v23->decimal_point )\n      goto LABEL_7;\n    s1 = v23->decimal_point;\n    v24 = strlen(v23->decimal_point);\n    if ( v49 )\n      goto LABEL_7;\n    if ( !*v19 )\n      goto LABEL_7;\n    v46 = v24;\n    if ( strncmp(s1, v19, v24) )\n      goto LABEL_7;\n    v25 = &v19[v46];\n    for ( i = v19[v46]; (_BYTE)i == 48; ++v21 )\n      i = *++v25;\n    if ( (*v12)[i] & 0x800 )\n    {\n      *v9 = 0;\n      v38 = v25;\n      endptr = 0LL;\n      v39 = __strtoul_internal(v25, &endptr, 0, 0);\n      v19 = endptr;\n      v49 = v39;\n      v20 = *v9;\n      if ( endptr == v38 )\n        goto LABEL_33;\n      if ( v20 )\n      {\n        if ( v39 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n          goto LABEL_13;\n        goto LABEL_62;\n      }\n      if ( v39 )\n      {\nLABEL_62:\n        if ( !endptr || !*endptr )\n          goto LABEL_7;\n      }\n    }\n    else\n    {\n      endptr = v25;\n      v19 = v25;\n    }\n  }\n  v27 = 1000;\nLABEL_38:\n  v28 = *v19;\n  v29 = strchr(\"KMGTPEZY\", v28);\n  if ( v29 )\n  {\n    v30 = (unsigned __int64)(v29 - \"KMGTPEZY\") + 1;\n    goto LABEL_40;\n  }\n  v45 = strchr(\"kmgtpezy\", v28);\n  if ( !v45 )\n    goto LABEL_7;\n  v30 = (unsigned __int64)(v45 - \"kmgtpezy\") + 1;\nLABEL_40:\n  if ( v30 )\n  {\n    if ( is_mul_ok(v27, v48) )\n    {\n      v31 = 0;\n      while ( 1 )\n      {\n        v48 *= v27;\n        if ( v30 - 1 == v31 )\n          break;\n        ++v31;\n        if ( !is_mul_ok(v27, v48) )\n          goto LABEL_77;\n      }\n      v16 = 0;\n    }\n    else\n    {\nLABEL_77:\n      v16 = -34;\n    }\n    if ( v49 )\n    {\n      v32 = v30 - 1;\n      v33 = 0;\n      v34 = 1LL;\n      do\n      {\n        v34 *= v27;\n        if ( v33 == v32 )\n          break;\n        ++v33;\n      }\n      while ( is_mul_ok(v27, v34) );\n      if ( v49 <= 0xA )\n      {\n        v36 = v49;\n        v35 = 10LL;\n      }\n      else\n      {\n        v35 = 10LL;\n        while ( 1 )\n        {\n          v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v49 >> 64) >> 3;\n          if ( v35 > 0x1999999999999999LL )\n            break;\n          v35 *= 10LL;\n          if ( v35 >= v49 )\n          {\n            v36 = v49;\n            break;\n          }\n        }\n      }\n      if ( v21 )\n      {\n        v37 = 0;\n        do\n        {\n          if ( v35 <= 0x1999999999999999LL )\n            v35 *= 10LL;\n          else\n            v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n          ++v37;\n        }\n        while ( v21 != v37 );\n      }\n      v40 = 1LL;\n      do\n      {\n        v41 = 10 * v40;\n        v42 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        v43 = v36 - 10 * v42;\n        v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        if ( v43 )\n        {\n          v44 = v35 / v40 / v43;\n          if ( v44 )\n            v48 += v34 / v44;\n        }\n        v40 = v41;\n      }\n      while ( v42 );\n    }\n    *v8 = v48;\nLABEL_14:\n    if ( (v16 & 0x80000000) != 0 )\n    {\n      v15 = -v16;\nLABEL_8:\n      *v9 = v15;\n    }\n  }\n  else\n  {\n    v16 = 0;\n    *a4 = v48;\n  }\n  return v16;\n}\n\n// write access to const memory has been detected, the output may be wrong!\n__int64 __usercall sub_8D30@<rax>(char *nptr@<rdi>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned __int64 *a4@<rsi>, __int64 a5@<r12>, __int64 a6@<r13>, __int64 a7@<r14>, __int64 a8@<r15>)\n{\n  unsigned __int64 *v8; // rbp\n  int *v9; // rbx\n  unsigned __int8 v10; // r14\n  const unsigned __int16 **v11; // rax\n  const unsigned __int16 **v12; // r13\n  const unsigned __int16 *v13; // rcx\n  char *v14; // rax\n  int v15; // eax\n  unsigned int v16; // ecx\n  unsigned __int64 v18; // rax\n  char *v19; // r14\n  int v20; // ecx\n  int v21; // er15\n  char v22; // al\n  struct lconv *v23; // rax\n  size_t v24; // rax\n  char *v25; // r8\n  __int64 i; // rax\n  signed int v27; // er13\n  int v28; // er14\n  char *v29; // rax\n  int v30; // edi\n  int v31; // ecx\n  int v32; // edi\n  int v33; // er8\n  unsigned __int64 v34; // r10\n  unsigned __int64 v35; // rdi\n  unsigned __int64 v36; // r8\n  int v37; // esi\n  char *v38; // ST08_8\n  unsigned __int64 v39; // rax\n  unsigned __int64 v40; // r9\n  signed __int64 v41; // r11\n  unsigned __int64 v42; // rsi\n  unsigned __int64 v43; // r13\n  unsigned __int64 v44; // r9\n  char *v45; // rax\n  size_t v46; // [rsp+0h] [rbp-70h]\n  char *s1; // [rsp+8h] [rbp-68h]\n  unsigned __int64 v48; // [rsp+10h] [rbp-60h]\n  unsigned __int64 v49; // [rsp+18h] [rbp-58h]\n  char *endptr; // [rsp+28h] [rbp-48h]\n  unsigned __int64 v51; // [rsp+30h] [rbp-40h]\n  __int64 v52; // [rsp+40h] [rbp-30h]\n  __int64 v53; // [rsp+48h] [rbp-28h]\n  __int64 v54; // [rsp+50h] [rbp-20h]\n  __int64 v55; // [rsp+58h] [rbp-18h]\n  __int64 v56; // [rsp+60h] [rbp-10h]\n  __int64 v57; // [rsp+68h] [rbp-8h]\n\n  v57 = a8;\n  v56 = a7;\n  v55 = a6;\n  v54 = a5;\n  v53 = a3;\n  v52 = a2;\n  v8 = a4;\n  *a4 = 0LL;\n  v51 = __readfsqword(0x28u);\n  v9 = __errno_location();\n  if ( !nptr )\n    goto LABEL_7;\n  v10 = *nptr;\n  if ( !*nptr )\n    goto LABEL_7;\n  v11 = __ctype_b_loc();\n  v12 = v11;\n  v13 = *v11;\n  v14 = nptr;\n  while ( v13[v10] & 0x2000 )\n    v10 = *++v14;\n  if ( v10 == 45 )\n    goto LABEL_7;\n  *v9 = 0;\n  endptr = 0LL;\n  v18 = __strtoul_internal(nptr, &endptr, 0, 0);\n  v19 = endptr;\n  v48 = v18;\n  v20 = *v9;\n  if ( endptr == nptr )\n  {\nLABEL_33:\n    if ( !v20 )\n    {\nLABEL_7:\n      v15 = 22;\n      v16 = -22;\n      goto LABEL_8;\n    }\nLABEL_13:\n    v16 = -v20;\n    goto LABEL_14;\n  }\n  if ( v20 && v18 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n    goto LABEL_13;\n  if ( !endptr || !*endptr )\n  {\n    v16 = 0;\n    *a4 = v18;\n    return v16;\n  }\n  v21 = 0;\n  v49 = 0LL;\n  while ( 1 )\n  {\n    v22 = v19[1];\n    if ( v22 == 105 )\n    {\n      if ( (v19[2] & 0xDF) == 66 && !v19[3] )\n      {\nLABEL_37:\n        v27 = 1024;\n        goto LABEL_38;\n      }\n      goto LABEL_23;\n    }\n    if ( (v22 & 0xDF) == 66 && !v19[2] )\n      break;\n    if ( !v22 )\n      goto LABEL_37;\nLABEL_23:\n    v23 = localeconv();\n    if ( !v23 )\n      goto LABEL_7;\n    if ( !v23->decimal_point )\n      goto LABEL_7;\n    s1 = v23->decimal_point;\n    v24 = strlen(v23->decimal_point);\n    if ( v49 )\n      goto LABEL_7;\n    if ( !*v19 )\n      goto LABEL_7;\n    v46 = v24;\n    if ( strncmp(s1, v19, v24) )\n      goto LABEL_7;\n    v25 = &v19[v46];\n    for ( i = v19[v46]; (_BYTE)i == 48; ++v21 )\n      i = *++v25;\n    if ( (*v12)[i] & 0x800 )\n    {\n      *v9 = 0;\n      v38 = v25;\n      endptr = 0LL;\n      v39 = __strtoul_internal(v25, &endptr, 0, 0);\n      v19 = endptr;\n      v49 = v39;\n      v20 = *v9;\n      if ( endptr == v38 )\n        goto LABEL_33;\n      if ( v20 )\n      {\n        if ( v39 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n          goto LABEL_13;\n        goto LABEL_62;\n      }\n      if ( v39 )\n      {\nLABEL_62:\n        if ( !endptr || !*endptr )\n          goto LABEL_7;\n      }\n    }\n    else\n    {\n      endptr = v25;\n      v19 = v25;\n    }\n  }\n  v27 = 1000;\nLABEL_38:\n  v28 = *v19;\n  v29 = strchr(\"KMGTPEZY\", v28);\n  if ( v29 )\n  {\n    v30 = (unsigned __int64)(v29 - \"KMGTPEZY\") + 1;\n    goto LABEL_40;\n  }\n  v45 = strchr(\"kmgtpezy\", v28);\n  if ( !v45 )\n    goto LABEL_7;\n  v30 = (unsigned __int64)(v45 - \"kmgtpezy\") + 1;\nLABEL_40:\n  if ( v30 )\n  {\n    if ( is_mul_ok(v27, v48) )\n    {\n      v31 = 0;\n      while ( 1 )\n      {\n        v48 *= v27;\n        if ( v30 - 1 == v31 )\n          break;\n        ++v31;\n        if ( !is_mul_ok(v27, v48) )\n          goto LABEL_77;\n      }\n      v16 = 0;\n    }\n    else\n    {\nLABEL_77:\n      v16 = -34;\n    }\n    if ( v49 )\n    {\n      v32 = v30 - 1;\n      v33 = 0;\n      v34 = 1LL;\n      do\n      {\n        v34 *= v27;\n        if ( v33 == v32 )\n          break;\n        ++v33;\n      }\n      while ( is_mul_ok(v27, v34) );\n      if ( v49 <= 0xA )\n      {\n        v36 = v49;\n        v35 = 10LL;\n      }\n      else\n      {\n        v35 = 10LL;\n        while ( 1 )\n        {\n          v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v49 >> 64) >> 3;\n          if ( v35 > 0x1999999999999999LL )\n            break;\n          v35 *= 10LL;\n          if ( v35 >= v49 )\n          {\n            v36 = v49;\n            break;\n          }\n        }\n      }\n      if ( v21 )\n      {\n        v37 = 0;\n        do\n        {\n          if ( v35 <= 0x1999999999999999LL )\n            v35 *= 10LL;\n          else\n            v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n          ++v37;\n        }\n        while ( v21 != v37 );\n      }\n      v40 = 1LL;\n      do\n      {\n        v41 = 10 * v40;\n        v42 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        v43 = v36 - 10 * v42;\n        v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        if ( v43 )\n        {\n          v44 = v35 / v40 / v43;\n          if ( v44 )\n            v48 += v34 / v44;\n        }\n        v40 = v41;\n      }\n      while ( v42 );\n    }\n    *v8 = v48;\nLABEL_14:\n    if ( (v16 & 0x80000000) != 0 )\n    {\n      v15 = -v16;\nLABEL_8:\n      *v9 = v15;\n    }\n  }\n  else\n  {\n    v16 = 0;\n    *a4 = v48;\n  }\n  return v16;\n}\n\n// write access to const memory has been detected, the output may be wrong!\n__int64 __usercall sub_8D30@<rax>(char *nptr@<rdi>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned __int64 *a4@<rsi>, __int64 a5@<r12>, __int64 a6@<r13>, __int64 a7@<r14>, __int64 a8@<r15>)\n{\n  unsigned __int64 *v8; // rbp\n  int *v9; // rbx\n  unsigned __int8 v10; // r14\n  const unsigned __int16 **v11; // rax\n  const unsigned __int16 **v12; // r13\n  const unsigned __int16 *v13; // rcx\n  char *v14; // rax\n  int v15; // eax\n  unsigned int v16; // ecx\n  unsigned __int64 v18; // rax\n  char *v19; // r14\n  int v20; // ecx\n  int v21; // er15\n  char v22; // al\n  struct lconv *v23; // rax\n  size_t v24; // rax\n  char *v25; // r8\n  __int64 i; // rax\n  signed int v27; // er13\n  int v28; // er14\n  char *v29; // rax\n  int v30; // edi\n  int v31; // ecx\n  int v32; // edi\n  int v33; // er8\n  unsigned __int64 v34; // r10\n  unsigned __int64 v35; // rdi\n  unsigned __int64 v36; // r8\n  int v37; // esi\n  char *v38; // ST08_8\n  unsigned __int64 v39; // rax\n  unsigned __int64 v40; // r9\n  signed __int64 v41; // r11\n  unsigned __int64 v42; // rsi\n  unsigned __int64 v43; // r13\n  unsigned __int64 v44; // r9\n  char *v45; // rax\n  size_t v46; // [rsp+0h] [rbp-70h]\n  char *s1; // [rsp+8h] [rbp-68h]\n  unsigned __int64 v48; // [rsp+10h] [rbp-60h]\n  unsigned __int64 v49; // [rsp+18h] [rbp-58h]\n  char *endptr; // [rsp+28h] [rbp-48h]\n  unsigned __int64 v51; // [rsp+30h] [rbp-40h]\n  __int64 v52; // [rsp+40h] [rbp-30h]\n  __int64 v53; // [rsp+48h] [rbp-28h]\n  __int64 v54; // [rsp+50h] [rbp-20h]\n  __int64 v55; // [rsp+58h] [rbp-18h]\n  __int64 v56; // [rsp+60h] [rbp-10h]\n  __int64 v57; // [rsp+68h] [rbp-8h]\n\n  v57 = a8;\n  v56 = a7;\n  v55 = a6;\n  v54 = a5;\n  v53 = a3;\n  v52 = a2;\n  v8 = a4;\n  *a4 = 0LL;\n  v51 = __readfsqword(0x28u);\n  v9 = __errno_location();\n  if ( !nptr )\n    goto LABEL_7;\n  v10 = *nptr;\n  if ( !*nptr )\n    goto LABEL_7;\n  v11 = __ctype_b_loc();\n  v12 = v11;\n  v13 = *v11;\n  v14 = nptr;\n  while ( v13[v10] & 0x2000 )\n    v10 = *++v14;\n  if ( v10 == 45 )\n    goto LABEL_7;\n  *v9 = 0;\n  endptr = 0LL;\n  v18 = __strtoul_internal(nptr, &endptr, 0, 0);\n  v19 = endptr;\n  v48 = v18;\n  v20 = *v9;\n  if ( endptr == nptr )\n  {\nLABEL_33:\n    if ( !v20 )\n    {\nLABEL_7:\n      v15 = 22;\n      v16 = -22;\n      goto LABEL_8;\n    }\nLABEL_13:\n    v16 = -v20;\n    goto LABEL_14;\n  }\n  if ( v20 && v18 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n    goto LABEL_13;\n  if ( !endptr || !*endptr )\n  {\n    v16 = 0;\n    *a4 = v18;\n    return v16;\n  }\n  v21 = 0;\n  v49 = 0LL;\n  while ( 1 )\n  {\n    v22 = v19[1];\n    if ( v22 == 105 )\n    {\n      if ( (v19[2] & 0xDF) == 66 && !v19[3] )\n      {\nLABEL_37:\n        v27 = 1024;\n        goto LABEL_38;\n      }\n      goto LABEL_23;\n    }\n    if ( (v22 & 0xDF) == 66 && !v19[2] )\n      break;\n    if ( !v22 )\n      goto LABEL_37;\nLABEL_23:\n    v23 = localeconv();\n    if ( !v23 )\n      goto LABEL_7;\n    if ( !v23->decimal_point )\n      goto LABEL_7;\n    s1 = v23->decimal_point;\n    v24 = strlen(v23->decimal_point);\n    if ( v49 )\n      goto LABEL_7;\n    if ( !*v19 )\n      goto LABEL_7;\n    v46 = v24;\n    if ( strncmp(s1, v19, v24) )\n      goto LABEL_7;\n    v25 = &v19[v46];\n    for ( i = v19[v46]; (_BYTE)i == 48; ++v21 )\n      i = *++v25;\n    if ( (*v12)[i] & 0x800 )\n    {\n      *v9 = 0;\n      v38 = v25;\n      endptr = 0LL;\n      v39 = __strtoul_internal(v25, &endptr, 0, 0);\n      v19 = endptr;\n      v49 = v39;\n      v20 = *v9;\n      if ( endptr == v38 )\n        goto LABEL_33;\n      if ( v20 )\n      {\n        if ( v39 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n          goto LABEL_13;\n        goto LABEL_62;\n      }\n      if ( v39 )\n      {\nLABEL_62:\n        if ( !endptr || !*endptr )\n          goto LABEL_7;\n      }\n    }\n    else\n    {\n      endptr = v25;\n      v19 = v25;\n    }\n  }\n  v27 = 1000;\nLABEL_38:\n  v28 = *v19;\n  v29 = strchr(\"KMGTPEZY\", v28);\n  if ( v29 )\n  {\n    v30 = (unsigned __int64)(v29 - \"KMGTPEZY\") + 1;\n    goto LABEL_40;\n  }\n  v45 = strchr(\"kmgtpezy\", v28);\n  if ( !v45 )\n    goto LABEL_7;\n  v30 = (unsigned __int64)(v45 - \"kmgtpezy\") + 1;\nLABEL_40:\n  if ( v30 )\n  {\n    if ( is_mul_ok(v27, v48) )\n    {\n      v31 = 0;\n      while ( 1 )\n      {\n        v48 *= v27;\n        if ( v30 - 1 == v31 )\n          break;\n        ++v31;\n        if ( !is_mul_ok(v27, v48) )\n          goto LABEL_77;\n      }\n      v16 = 0;\n    }\n    else\n    {\nLABEL_77:\n      v16 = -34;\n    }\n    if ( v49 )\n    {\n      v32 = v30 - 1;\n      v33 = 0;\n      v34 = 1LL;\n      do\n      {\n        v34 *= v27;\n        if ( v33 == v32 )\n          break;\n        ++v33;\n      }\n      while ( is_mul_ok(v27, v34) );\n      if ( v49 <= 0xA )\n      {\n        v36 = v49;\n        v35 = 10LL;\n      }\n      else\n      {\n        v35 = 10LL;\n        while ( 1 )\n        {\n          v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v49 >> 64) >> 3;\n          if ( v35 > 0x1999999999999999LL )\n            break;\n          v35 *= 10LL;\n          if ( v35 >= v49 )\n          {\n            v36 = v49;\n            break;\n          }\n        }\n      }\n      if ( v21 )\n      {\n        v37 = 0;\n        do\n        {\n          if ( v35 <= 0x1999999999999999LL )\n            v35 *= 10LL;\n          else\n            v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n          ++v37;\n        }\n        while ( v21 != v37 );\n      }\n      v40 = 1LL;\n      do\n      {\n        v41 = 10 * v40;\n        v42 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        v43 = v36 - 10 * v42;\n        v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        if ( v43 )\n        {\n          v44 = v35 / v40 / v43;\n          if ( v44 )\n            v48 += v34 / v44;\n        }\n        v40 = v41;\n      }\n      while ( v42 );\n    }\n    *v8 = v48;\nLABEL_14:\n    if ( (v16 & 0x80000000) != 0 )\n    {\n      v15 = -v16;\nLABEL_8:\n      *v9 = v15;\n    }\n  }\n  else\n  {\n    v16 = 0;\n    *a4 = v48;\n  }\n  return v16;\n}\n\n// write access to const memory has been detected, the output may be wrong!\n__int64 __usercall sub_8D30@<rax>(char *nptr@<rdi>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned __int64 *a4@<rsi>, __int64 a5@<r12>, __int64 a6@<r13>, __int64 a7@<r14>, __int64 a8@<r15>)\n{\n  unsigned __int64 *v8; // rbp\n  int *v9; // rbx\n  unsigned __int8 v10; // r14\n  const unsigned __int16 **v11; // rax\n  const unsigned __int16 **v12; // r13\n  const unsigned __int16 *v13; // rcx\n  char *v14; // rax\n  int v15; // eax\n  unsigned int v16; // ecx\n  unsigned __int64 v18; // rax\n  char *v19; // r14\n  int v20; // ecx\n  int v21; // er15\n  char v22; // al\n  struct lconv *v23; // rax\n  size_t v24; // rax\n  char *v25; // r8\n  __int64 i; // rax\n  signed int v27; // er13\n  int v28; // er14\n  char *v29; // rax\n  int v30; // edi\n  int v31; // ecx\n  int v32; // edi\n  int v33; // er8\n  unsigned __int64 v34; // r10\n  unsigned __int64 v35; // rdi\n  unsigned __int64 v36; // r8\n  int v37; // esi\n  char *v38; // ST08_8\n  unsigned __int64 v39; // rax\n  unsigned __int64 v40; // r9\n  signed __int64 v41; // r11\n  unsigned __int64 v42; // rsi\n  unsigned __int64 v43; // r13\n  unsigned __int64 v44; // r9\n  char *v45; // rax\n  size_t v46; // [rsp+0h] [rbp-70h]\n  char *s1; // [rsp+8h] [rbp-68h]\n  unsigned __int64 v48; // [rsp+10h] [rbp-60h]\n  unsigned __int64 v49; // [rsp+18h] [rbp-58h]\n  char *endptr; // [rsp+28h] [rbp-48h]\n  unsigned __int64 v51; // [rsp+30h] [rbp-40h]\n  __int64 v52; // [rsp+40h] [rbp-30h]\n  __int64 v53; // [rsp+48h] [rbp-28h]\n  __int64 v54; // [rsp+50h] [rbp-20h]\n  __int64 v55; // [rsp+58h] [rbp-18h]\n  __int64 v56; // [rsp+60h] [rbp-10h]\n  __int64 v57; // [rsp+68h] [rbp-8h]\n\n  v57 = a8;\n  v56 = a7;\n  v55 = a6;\n  v54 = a5;\n  v53 = a3;\n  v52 = a2;\n  v8 = a4;\n  *a4 = 0LL;\n  v51 = __readfsqword(0x28u);\n  v9 = __errno_location();\n  if ( !nptr )\n    goto LABEL_7;\n  v10 = *nptr;\n  if ( !*nptr )\n    goto LABEL_7;\n  v11 = __ctype_b_loc();\n  v12 = v11;\n  v13 = *v11;\n  v14 = nptr;\n  while ( v13[v10] & 0x2000 )\n    v10 = *++v14;\n  if ( v10 == 45 )\n    goto LABEL_7;\n  *v9 = 0;\n  endptr = 0LL;\n  v18 = __strtoul_internal(nptr, &endptr, 0, 0);\n  v19 = endptr;\n  v48 = v18;\n  v20 = *v9;\n  if ( endptr == nptr )\n  {\nLABEL_33:\n    if ( !v20 )\n    {\nLABEL_7:\n      v15 = 22;\n      v16 = -22;\n      goto LABEL_8;\n    }\nLABEL_13:\n    v16 = -v20;\n    goto LABEL_14;\n  }\n  if ( v20 && v18 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n    goto LABEL_13;\n  if ( !endptr || !*endptr )\n  {\n    v16 = 0;\n    *a4 = v18;\n    return v16;\n  }\n  v21 = 0;\n  v49 = 0LL;\n  while ( 1 )\n  {\n    v22 = v19[1];\n    if ( v22 == 105 )\n    {\n      if ( (v19[2] & 0xDF) == 66 && !v19[3] )\n      {\nLABEL_37:\n        v27 = 1024;\n        goto LABEL_38;\n      }\n      goto LABEL_23;\n    }\n    if ( (v22 & 0xDF) == 66 && !v19[2] )\n      break;\n    if ( !v22 )\n      goto LABEL_37;\nLABEL_23:\n    v23 = localeconv();\n    if ( !v23 )\n      goto LABEL_7;\n    if ( !v23->decimal_point )\n      goto LABEL_7;\n    s1 = v23->decimal_point;\n    v24 = strlen(v23->decimal_point);\n    if ( v49 )\n      goto LABEL_7;\n    if ( !*v19 )\n      goto LABEL_7;\n    v46 = v24;\n    if ( strncmp(s1, v19, v24) )\n      goto LABEL_7;\n    v25 = &v19[v46];\n    for ( i = v19[v46]; (_BYTE)i == 48; ++v21 )\n      i = *++v25;\n    if ( (*v12)[i] & 0x800 )\n    {\n      *v9 = 0;\n      v38 = v25;\n      endptr = 0LL;\n      v39 = __strtoul_internal(v25, &endptr, 0, 0);\n      v19 = endptr;\n      v49 = v39;\n      v20 = *v9;\n      if ( endptr == v38 )\n        goto LABEL_33;\n      if ( v20 )\n      {\n        if ( v39 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n          goto LABEL_13;\n        goto LABEL_62;\n      }\n      if ( v39 )\n      {\nLABEL_62:\n        if ( !endptr || !*endptr )\n          goto LABEL_7;\n      }\n    }\n    else\n    {\n      endptr = v25;\n      v19 = v25;\n    }\n  }\n  v27 = 1000;\nLABEL_38:\n  v28 = *v19;\n  v29 = strchr(\"KMGTPEZY\", v28);\n  if ( v29 )\n  {\n    v30 = (unsigned __int64)(v29 - \"KMGTPEZY\") + 1;\n    goto LABEL_40;\n  }\n  v45 = strchr(\"kmgtpezy\", v28);\n  if ( !v45 )\n    goto LABEL_7;\n  v30 = (unsigned __int64)(v45 - \"kmgtpezy\") + 1;\nLABEL_40:\n  if ( v30 )\n  {\n    if ( is_mul_ok(v27, v48) )\n    {\n      v31 = 0;\n      while ( 1 )\n      {\n        v48 *= v27;\n        if ( v30 - 1 == v31 )\n          break;\n        ++v31;\n        if ( !is_mul_ok(v27, v48) )\n          goto LABEL_77;\n      }\n      v16 = 0;\n    }\n    else\n    {\nLABEL_77:\n      v16 = -34;\n    }\n    if ( v49 )\n    {\n      v32 = v30 - 1;\n      v33 = 0;\n      v34 = 1LL;\n      do\n      {\n        v34 *= v27;\n        if ( v33 == v32 )\n          break;\n        ++v33;\n      }\n      while ( is_mul_ok(v27, v34) );\n      if ( v49 <= 0xA )\n      {\n        v36 = v49;\n        v35 = 10LL;\n      }\n      else\n      {\n        v35 = 10LL;\n        while ( 1 )\n        {\n          v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v49 >> 64) >> 3;\n          if ( v35 > 0x1999999999999999LL )\n            break;\n          v35 *= 10LL;\n          if ( v35 >= v49 )\n          {\n            v36 = v49;\n            break;\n          }\n        }\n      }\n      if ( v21 )\n      {\n        v37 = 0;\n        do\n        {\n          if ( v35 <= 0x1999999999999999LL )\n            v35 *= 10LL;\n          else\n            v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n          ++v37;\n        }\n        while ( v21 != v37 );\n      }\n      v40 = 1LL;\n      do\n      {\n        v41 = 10 * v40;\n        v42 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        v43 = v36 - 10 * v42;\n        v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        if ( v43 )\n        {\n          v44 = v35 / v40 / v43;\n          if ( v44 )\n            v48 += v34 / v44;\n        }\n        v40 = v41;\n      }\n      while ( v42 );\n    }\n    *v8 = v48;\nLABEL_14:\n    if ( (v16 & 0x80000000) != 0 )\n    {\n      v15 = -v16;\nLABEL_8:\n      *v9 = v15;\n    }\n  }\n  else\n  {\n    v16 = 0;\n    *a4 = v48;\n  }\n  return v16;\n}\n\n// write access to const memory has been detected, the output may be wrong!\n__int64 __usercall sub_8D30@<rax>(char *nptr@<rdi>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned __int64 *a4@<rsi>, __int64 a5@<r12>, __int64 a6@<r13>, __int64 a7@<r14>, __int64 a8@<r15>)\n{\n  unsigned __int64 *v8; // rbp\n  int *v9; // rbx\n  unsigned __int8 v10; // r14\n  const unsigned __int16 **v11; // rax\n  const unsigned __int16 **v12; // r13\n  const unsigned __int16 *v13; // rcx\n  char *v14; // rax\n  int v15; // eax\n  unsigned int v16; // ecx\n  unsigned __int64 v18; // rax\n  char *v19; // r14\n  int v20; // ecx\n  int v21; // er15\n  char v22; // al\n  struct lconv *v23; // rax\n  size_t v24; // rax\n  char *v25; // r8\n  __int64 i; // rax\n  signed int v27; // er13\n  int v28; // er14\n  char *v29; // rax\n  int v30; // edi\n  int v31; // ecx\n  int v32; // edi\n  int v33; // er8\n  unsigned __int64 v34; // r10\n  unsigned __int64 v35; // rdi\n  unsigned __int64 v36; // r8\n  int v37; // esi\n  char *v38; // ST08_8\n  unsigned __int64 v39; // rax\n  unsigned __int64 v40; // r9\n  signed __int64 v41; // r11\n  unsigned __int64 v42; // rsi\n  unsigned __int64 v43; // r13\n  unsigned __int64 v44; // r9\n  char *v45; // rax\n  size_t v46; // [rsp+0h] [rbp-70h]\n  char *s1; // [rsp+8h] [rbp-68h]\n  unsigned __int64 v48; // [rsp+10h] [rbp-60h]\n  unsigned __int64 v49; // [rsp+18h] [rbp-58h]\n  char *endptr; // [rsp+28h] [rbp-48h]\n  unsigned __int64 v51; // [rsp+30h] [rbp-40h]\n  __int64 v52; // [rsp+40h] [rbp-30h]\n  __int64 v53; // [rsp+48h] [rbp-28h]\n  __int64 v54; // [rsp+50h] [rbp-20h]\n  __int64 v55; // [rsp+58h] [rbp-18h]\n  __int64 v56; // [rsp+60h] [rbp-10h]\n  __int64 v57; // [rsp+68h] [rbp-8h]\n\n  v57 = a8;\n  v56 = a7;\n  v55 = a6;\n  v54 = a5;\n  v53 = a3;\n  v52 = a2;\n  v8 = a4;\n  *a4 = 0LL;\n  v51 = __readfsqword(0x28u);\n  v9 = __errno_location();\n  if ( !nptr )\n    goto LABEL_7;\n  v10 = *nptr;\n  if ( !*nptr )\n    goto LABEL_7;\n  v11 = __ctype_b_loc();\n  v12 = v11;\n  v13 = *v11;\n  v14 = nptr;\n  while ( v13[v10] & 0x2000 )\n    v10 = *++v14;\n  if ( v10 == 45 )\n    goto LABEL_7;\n  *v9 = 0;\n  endptr = 0LL;\n  v18 = __strtoul_internal(nptr, &endptr, 0, 0);\n  v19 = endptr;\n  v48 = v18;\n  v20 = *v9;\n  if ( endptr == nptr )\n  {\nLABEL_33:\n    if ( !v20 )\n    {\nLABEL_7:\n      v15 = 22;\n      v16 = -22;\n      goto LABEL_8;\n    }\nLABEL_13:\n    v16 = -v20;\n    goto LABEL_14;\n  }\n  if ( v20 && v18 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n    goto LABEL_13;\n  if ( !endptr || !*endptr )\n  {\n    v16 = 0;\n    *a4 = v18;\n    return v16;\n  }\n  v21 = 0;\n  v49 = 0LL;\n  while ( 1 )\n  {\n    v22 = v19[1];\n    if ( v22 == 105 )\n    {\n      if ( (v19[2] & 0xDF) == 66 && !v19[3] )\n      {\nLABEL_37:\n        v27 = 1024;\n        goto LABEL_38;\n      }\n      goto LABEL_23;\n    }\n    if ( (v22 & 0xDF) == 66 && !v19[2] )\n      break;\n    if ( !v22 )\n      goto LABEL_37;\nLABEL_23:\n    v23 = localeconv();\n    if ( !v23 )\n      goto LABEL_7;\n    if ( !v23->decimal_point )\n      goto LABEL_7;\n    s1 = v23->decimal_point;\n    v24 = strlen(v23->decimal_point);\n    if ( v49 )\n      goto LABEL_7;\n    if ( !*v19 )\n      goto LABEL_7;\n    v46 = v24;\n    if ( strncmp(s1, v19, v24) )\n      goto LABEL_7;\n    v25 = &v19[v46];\n    for ( i = v19[v46]; (_BYTE)i == 48; ++v21 )\n      i = *++v25;\n    if ( (*v12)[i] & 0x800 )\n    {\n      *v9 = 0;\n      v38 = v25;\n      endptr = 0LL;\n      v39 = __strtoul_internal(v25, &endptr, 0, 0);\n      v19 = endptr;\n      v49 = v39;\n      v20 = *v9;\n      if ( endptr == v38 )\n        goto LABEL_33;\n      if ( v20 )\n      {\n        if ( v39 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n          goto LABEL_13;\n        goto LABEL_62;\n      }\n      if ( v39 )\n      {\nLABEL_62:\n        if ( !endptr || !*endptr )\n          goto LABEL_7;\n      }\n    }\n    else\n    {\n      endptr = v25;\n      v19 = v25;\n    }\n  }\n  v27 = 1000;\nLABEL_38:\n  v28 = *v19;\n  v29 = strchr(\"KMGTPEZY\", v28);\n  if ( v29 )\n  {\n    v30 = (unsigned __int64)(v29 - \"KMGTPEZY\") + 1;\n    goto LABEL_40;\n  }\n  v45 = strchr(\"kmgtpezy\", v28);\n  if ( !v45 )\n    goto LABEL_7;\n  v30 = (unsigned __int64)(v45 - \"kmgtpezy\") + 1;\nLABEL_40:\n  if ( v30 )\n  {\n    if ( is_mul_ok(v27, v48) )\n    {\n      v31 = 0;\n      while ( 1 )\n      {\n        v48 *= v27;\n        if ( v30 - 1 == v31 )\n          break;\n        ++v31;\n        if ( !is_mul_ok(v27, v48) )\n          goto LABEL_77;\n      }\n      v16 = 0;\n    }\n    else\n    {\nLABEL_77:\n      v16 = -34;\n    }\n    if ( v49 )\n    {\n      v32 = v30 - 1;\n      v33 = 0;\n      v34 = 1LL;\n      do\n      {\n        v34 *= v27;\n        if ( v33 == v32 )\n          break;\n        ++v33;\n      }\n      while ( is_mul_ok(v27, v34) );\n      if ( v49 <= 0xA )\n      {\n        v36 = v49;\n        v35 = 10LL;\n      }\n      else\n      {\n        v35 = 10LL;\n        while ( 1 )\n        {\n          v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v49 >> 64) >> 3;\n          if ( v35 > 0x1999999999999999LL )\n            break;\n          v35 *= 10LL;\n          if ( v35 >= v49 )\n          {\n            v36 = v49;\n            break;\n          }\n        }\n      }\n      if ( v21 )\n      {\n        v37 = 0;\n        do\n        {\n          if ( v35 <= 0x1999999999999999LL )\n            v35 *= 10LL;\n          else\n            v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n          ++v37;\n        }\n        while ( v21 != v37 );\n      }\n      v40 = 1LL;\n      do\n      {\n        v41 = 10 * v40;\n        v42 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        v43 = v36 - 10 * v42;\n        v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        if ( v43 )\n        {\n          v44 = v35 / v40 / v43;\n          if ( v44 )\n            v48 += v34 / v44;\n        }\n        v40 = v41;\n      }\n      while ( v42 );\n    }\n    *v8 = v48;\nLABEL_14:\n    if ( (v16 & 0x80000000) != 0 )\n    {\n      v15 = -v16;\nLABEL_8:\n      *v9 = v15;\n    }\n  }\n  else\n  {\n    v16 = 0;\n    *a4 = v48;\n  }\n  return v16;\n}\n\n// write access to const memory has been detected, the output may be wrong!\n__int64 __usercall sub_8D30@<rax>(char *nptr@<rdi>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned __int64 *a4@<rsi>, __int64 a5@<r12>, __int64 a6@<r13>, __int64 a7@<r14>, __int64 a8@<r15>)\n{\n  unsigned __int64 *v8; // rbp\n  int *v9; // rbx\n  unsigned __int8 v10; // r14\n  const unsigned __int16 **v11; // rax\n  const unsigned __int16 **v12; // r13\n  const unsigned __int16 *v13; // rcx\n  char *v14; // rax\n  int v15; // eax\n  unsigned int v16; // ecx\n  unsigned __int64 v18; // rax\n  char *v19; // r14\n  int v20; // ecx\n  int v21; // er15\n  char v22; // al\n  struct lconv *v23; // rax\n  size_t v24; // rax\n  char *v25; // r8\n  __int64 i; // rax\n  signed int v27; // er13\n  int v28; // er14\n  char *v29; // rax\n  int v30; // edi\n  int v31; // ecx\n  int v32; // edi\n  int v33; // er8\n  unsigned __int64 v34; // r10\n  unsigned __int64 v35; // rdi\n  unsigned __int64 v36; // r8\n  int v37; // esi\n  char *v38; // ST08_8\n  unsigned __int64 v39; // rax\n  unsigned __int64 v40; // r9\n  signed __int64 v41; // r11\n  unsigned __int64 v42; // rsi\n  unsigned __int64 v43; // r13\n  unsigned __int64 v44; // r9\n  char *v45; // rax\n  size_t v46; // [rsp+0h] [rbp-70h]\n  char *s1; // [rsp+8h] [rbp-68h]\n  unsigned __int64 v48; // [rsp+10h] [rbp-60h]\n  unsigned __int64 v49; // [rsp+18h] [rbp-58h]\n  char *endptr; // [rsp+28h] [rbp-48h]\n  unsigned __int64 v51; // [rsp+30h] [rbp-40h]\n  __int64 v52; // [rsp+40h] [rbp-30h]\n  __int64 v53; // [rsp+48h] [rbp-28h]\n  __int64 v54; // [rsp+50h] [rbp-20h]\n  __int64 v55; // [rsp+58h] [rbp-18h]\n  __int64 v56; // [rsp+60h] [rbp-10h]\n  __int64 v57; // [rsp+68h] [rbp-8h]\n\n  v57 = a8;\n  v56 = a7;\n  v55 = a6;\n  v54 = a5;\n  v53 = a3;\n  v52 = a2;\n  v8 = a4;\n  *a4 = 0LL;\n  v51 = __readfsqword(0x28u);\n  v9 = __errno_location();\n  if ( !nptr )\n    goto LABEL_7;\n  v10 = *nptr;\n  if ( !*nptr )\n    goto LABEL_7;\n  v11 = __ctype_b_loc();\n  v12 = v11;\n  v13 = *v11;\n  v14 = nptr;\n  while ( v13[v10] & 0x2000 )\n    v10 = *++v14;\n  if ( v10 == 45 )\n    goto LABEL_7;\n  *v9 = 0;\n  endptr = 0LL;\n  v18 = __strtoul_internal(nptr, &endptr, 0, 0);\n  v19 = endptr;\n  v48 = v18;\n  v20 = *v9;\n  if ( endptr == nptr )\n  {\nLABEL_33:\n    if ( !v20 )\n    {\nLABEL_7:\n      v15 = 22;\n      v16 = -22;\n      goto LABEL_8;\n    }\nLABEL_13:\n    v16 = -v20;\n    goto LABEL_14;\n  }\n  if ( v20 && v18 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n    goto LABEL_13;\n  if ( !endptr || !*endptr )\n  {\n    v16 = 0;\n    *a4 = v18;\n    return v16;\n  }\n  v21 = 0;\n  v49 = 0LL;\n  while ( 1 )\n  {\n    v22 = v19[1];\n    if ( v22 == 105 )\n    {\n      if ( (v19[2] & 0xDF) == 66 && !v19[3] )\n      {\nLABEL_37:\n        v27 = 1024;\n        goto LABEL_38;\n      }\n      goto LABEL_23;\n    }\n    if ( (v22 & 0xDF) == 66 && !v19[2] )\n      break;\n    if ( !v22 )\n      goto LABEL_37;\nLABEL_23:\n    v23 = localeconv();\n    if ( !v23 )\n      goto LABEL_7;\n    if ( !v23->decimal_point )\n      goto LABEL_7;\n    s1 = v23->decimal_point;\n    v24 = strlen(v23->decimal_point);\n    if ( v49 )\n      goto LABEL_7;\n    if ( !*v19 )\n      goto LABEL_7;\n    v46 = v24;\n    if ( strncmp(s1, v19, v24) )\n      goto LABEL_7;\n    v25 = &v19[v46];\n    for ( i = v19[v46]; (_BYTE)i == 48; ++v21 )\n      i = *++v25;\n    if ( (*v12)[i] & 0x800 )\n    {\n      *v9 = 0;\n      v38 = v25;\n      endptr = 0LL;\n      v39 = __strtoul_internal(v25, &endptr, 0, 0);\n      v19 = endptr;\n      v49 = v39;\n      v20 = *v9;\n      if ( endptr == v38 )\n        goto LABEL_33;\n      if ( v20 )\n      {\n        if ( v39 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n          goto LABEL_13;\n        goto LABEL_62;\n      }\n      if ( v39 )\n      {\nLABEL_62:\n        if ( !endptr || !*endptr )\n          goto LABEL_7;\n      }\n    }\n    else\n    {\n      endptr = v25;\n      v19 = v25;\n    }\n  }\n  v27 = 1000;\nLABEL_38:\n  v28 = *v19;\n  v29 = strchr(\"KMGTPEZY\", v28);\n  if ( v29 )\n  {\n    v30 = (unsigned __int64)(v29 - \"KMGTPEZY\") + 1;\n    goto LABEL_40;\n  }\n  v45 = strchr(\"kmgtpezy\", v28);\n  if ( !v45 )\n    goto LABEL_7;\n  v30 = (unsigned __int64)(v45 - \"kmgtpezy\") + 1;\nLABEL_40:\n  if ( v30 )\n  {\n    if ( is_mul_ok(v27, v48) )\n    {\n      v31 = 0;\n      while ( 1 )\n      {\n        v48 *= v27;\n        if ( v30 - 1 == v31 )\n          break;\n        ++v31;\n        if ( !is_mul_ok(v27, v48) )\n          goto LABEL_77;\n      }\n      v16 = 0;\n    }\n    else\n    {\nLABEL_77:\n      v16 = -34;\n    }\n    if ( v49 )\n    {\n      v32 = v30 - 1;\n      v33 = 0;\n      v34 = 1LL;\n      do\n      {\n        v34 *= v27;\n        if ( v33 == v32 )\n          break;\n        ++v33;\n      }\n      while ( is_mul_ok(v27, v34) );\n      if ( v49 <= 0xA )\n      {\n        v36 = v49;\n        v35 = 10LL;\n      }\n      else\n      {\n        v35 = 10LL;\n        while ( 1 )\n        {\n          v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v49 >> 64) >> 3;\n          if ( v35 > 0x1999999999999999LL )\n            break;\n          v35 *= 10LL;\n          if ( v35 >= v49 )\n          {\n            v36 = v49;\n            break;\n          }\n        }\n      }\n      if ( v21 )\n      {\n        v37 = 0;\n        do\n        {\n          if ( v35 <= 0x1999999999999999LL )\n            v35 *= 10LL;\n          else\n            v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n          ++v37;\n        }\n        while ( v21 != v37 );\n      }\n      v40 = 1LL;\n      do\n      {\n        v41 = 10 * v40;\n        v42 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        v43 = v36 - 10 * v42;\n        v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        if ( v43 )\n        {\n          v44 = v35 / v40 / v43;\n          if ( v44 )\n            v48 += v34 / v44;\n        }\n        v40 = v41;\n      }\n      while ( v42 );\n    }\n    *v8 = v48;\nLABEL_14:\n    if ( (v16 & 0x80000000) != 0 )\n    {\n      v15 = -v16;\nLABEL_8:\n      *v9 = v15;\n    }\n  }\n  else\n  {\n    v16 = 0;\n    *a4 = v48;\n  }\n  return v16;\n}\n", 
            "funcStartAddr": "0x8c38L", 
            "funcEndAddr": "0x8d29L", 
            "funcName": "sub_8D30"
        }, 
        {
            "decompiledFuncCode": "// write access to const memory has been detected, the output may be wrong!\n__int64 __usercall sub_8D30@<rax>(char *nptr@<rdi>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned __int64 *a4@<rsi>, __int64 a5@<r12>, __int64 a6@<r13>, __int64 a7@<r14>, __int64 a8@<r15>)\n{\n  unsigned __int64 *v8; // rbp\n  int *v9; // rbx\n  unsigned __int8 v10; // r14\n  const unsigned __int16 **v11; // rax\n  const unsigned __int16 **v12; // r13\n  const unsigned __int16 *v13; // rcx\n  char *v14; // rax\n  int v15; // eax\n  unsigned int v16; // ecx\n  unsigned __int64 v18; // rax\n  char *v19; // r14\n  int v20; // ecx\n  int v21; // er15\n  char v22; // al\n  struct lconv *v23; // rax\n  size_t v24; // rax\n  char *v25; // r8\n  __int64 i; // rax\n  signed int v27; // er13\n  int v28; // er14\n  char *v29; // rax\n  int v30; // edi\n  int v31; // ecx\n  int v32; // edi\n  int v33; // er8\n  unsigned __int64 v34; // r10\n  unsigned __int64 v35; // rdi\n  unsigned __int64 v36; // r8\n  int v37; // esi\n  char *v38; // ST08_8\n  unsigned __int64 v39; // rax\n  unsigned __int64 v40; // r9\n  signed __int64 v41; // r11\n  unsigned __int64 v42; // rsi\n  unsigned __int64 v43; // r13\n  unsigned __int64 v44; // r9\n  char *v45; // rax\n  size_t v46; // [rsp+0h] [rbp-70h]\n  char *s1; // [rsp+8h] [rbp-68h]\n  unsigned __int64 v48; // [rsp+10h] [rbp-60h]\n  unsigned __int64 v49; // [rsp+18h] [rbp-58h]\n  char *endptr; // [rsp+28h] [rbp-48h]\n  unsigned __int64 v51; // [rsp+30h] [rbp-40h]\n  __int64 v52; // [rsp+40h] [rbp-30h]\n  __int64 v53; // [rsp+48h] [rbp-28h]\n  __int64 v54; // [rsp+50h] [rbp-20h]\n  __int64 v55; // [rsp+58h] [rbp-18h]\n  __int64 v56; // [rsp+60h] [rbp-10h]\n  __int64 v57; // [rsp+68h] [rbp-8h]\n\n  v57 = a8;\n  v56 = a7;\n  v55 = a6;\n  v54 = a5;\n  v53 = a3;\n  v52 = a2;\n  v8 = a4;\n  *a4 = 0LL;\n  v51 = __readfsqword(0x28u);\n  v9 = __errno_location();\n  if ( !nptr )\n    goto LABEL_7;\n  v10 = *nptr;\n  if ( !*nptr )\n    goto LABEL_7;\n  v11 = __ctype_b_loc();\n  v12 = v11;\n  v13 = *v11;\n  v14 = nptr;\n  while ( v13[v10] & 0x2000 )\n    v10 = *++v14;\n  if ( v10 == 45 )\n    goto LABEL_7;\n  *v9 = 0;\n  endptr = 0LL;\n  v18 = __strtoul_internal(nptr, &endptr, 0, 0);\n  v19 = endptr;\n  v48 = v18;\n  v20 = *v9;\n  if ( endptr == nptr )\n  {\nLABEL_33:\n    if ( !v20 )\n    {\nLABEL_7:\n      v15 = 22;\n      v16 = -22;\n      goto LABEL_8;\n    }\nLABEL_13:\n    v16 = -v20;\n    goto LABEL_14;\n  }\n  if ( v20 && v18 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n    goto LABEL_13;\n  if ( !endptr || !*endptr )\n  {\n    v16 = 0;\n    *a4 = v18;\n    return v16;\n  }\n  v21 = 0;\n  v49 = 0LL;\n  while ( 1 )\n  {\n    v22 = v19[1];\n    if ( v22 == 105 )\n    {\n      if ( (v19[2] & 0xDF) == 66 && !v19[3] )\n      {\nLABEL_37:\n        v27 = 1024;\n        goto LABEL_38;\n      }\n      goto LABEL_23;\n    }\n    if ( (v22 & 0xDF) == 66 && !v19[2] )\n      break;\n    if ( !v22 )\n      goto LABEL_37;\nLABEL_23:\n    v23 = localeconv();\n    if ( !v23 )\n      goto LABEL_7;\n    if ( !v23->decimal_point )\n      goto LABEL_7;\n    s1 = v23->decimal_point;\n    v24 = strlen(v23->decimal_point);\n    if ( v49 )\n      goto LABEL_7;\n    if ( !*v19 )\n      goto LABEL_7;\n    v46 = v24;\n    if ( strncmp(s1, v19, v24) )\n      goto LABEL_7;\n    v25 = &v19[v46];\n    for ( i = v19[v46]; (_BYTE)i == 48; ++v21 )\n      i = *++v25;\n    if ( (*v12)[i] & 0x800 )\n    {\n      *v9 = 0;\n      v38 = v25;\n      endptr = 0LL;\n      v39 = __strtoul_internal(v25, &endptr, 0, 0);\n      v19 = endptr;\n      v49 = v39;\n      v20 = *v9;\n      if ( endptr == v38 )\n        goto LABEL_33;\n      if ( v20 )\n      {\n        if ( v39 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n          goto LABEL_13;\n        goto LABEL_62;\n      }\n      if ( v39 )\n      {\nLABEL_62:\n        if ( !endptr || !*endptr )\n          goto LABEL_7;\n      }\n    }\n    else\n    {\n      endptr = v25;\n      v19 = v25;\n    }\n  }\n  v27 = 1000;\nLABEL_38:\n  v28 = *v19;\n  v29 = strchr(\"KMGTPEZY\", v28);\n  if ( v29 )\n  {\n    v30 = (unsigned __int64)(v29 - \"KMGTPEZY\") + 1;\n    goto LABEL_40;\n  }\n  v45 = strchr(\"kmgtpezy\", v28);\n  if ( !v45 )\n    goto LABEL_7;\n  v30 = (unsigned __int64)(v45 - \"kmgtpezy\") + 1;\nLABEL_40:\n  if ( v30 )\n  {\n    if ( is_mul_ok(v27, v48) )\n    {\n      v31 = 0;\n      while ( 1 )\n      {\n        v48 *= v27;\n        if ( v30 - 1 == v31 )\n          break;\n        ++v31;\n        if ( !is_mul_ok(v27, v48) )\n          goto LABEL_77;\n      }\n      v16 = 0;\n    }\n    else\n    {\nLABEL_77:\n      v16 = -34;\n    }\n    if ( v49 )\n    {\n      v32 = v30 - 1;\n      v33 = 0;\n      v34 = 1LL;\n      do\n      {\n        v34 *= v27;\n        if ( v33 == v32 )\n          break;\n        ++v33;\n      }\n      while ( is_mul_ok(v27, v34) );\n      if ( v49 <= 0xA )\n      {\n        v36 = v49;\n        v35 = 10LL;\n      }\n      else\n      {\n        v35 = 10LL;\n        while ( 1 )\n        {\n          v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v49 >> 64) >> 3;\n          if ( v35 > 0x1999999999999999LL )\n            break;\n          v35 *= 10LL;\n          if ( v35 >= v49 )\n          {\n            v36 = v49;\n            break;\n          }\n        }\n      }\n      if ( v21 )\n      {\n        v37 = 0;\n        do\n        {\n          if ( v35 <= 0x1999999999999999LL )\n            v35 *= 10LL;\n          else\n            v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n          ++v37;\n        }\n        while ( v21 != v37 );\n      }\n      v40 = 1LL;\n      do\n      {\n        v41 = 10 * v40;\n        v42 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        v43 = v36 - 10 * v42;\n        v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        if ( v43 )\n        {\n          v44 = v35 / v40 / v43;\n          if ( v44 )\n            v48 += v34 / v44;\n        }\n        v40 = v41;\n      }\n      while ( v42 );\n    }\n    *v8 = v48;\nLABEL_14:\n    if ( (v16 & 0x80000000) != 0 )\n    {\n      v15 = -v16;\nLABEL_8:\n      *v9 = v15;\n    }\n  }\n  else\n  {\n    v16 = 0;\n    *a4 = v48;\n  }\n  return v16;\n}\n\n// write access to const memory has been detected, the output may be wrong!\n__int64 __usercall sub_8D30@<rax>(char *nptr@<rdi>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned __int64 *a4@<rsi>, __int64 a5@<r12>, __int64 a6@<r13>, __int64 a7@<r14>, __int64 a8@<r15>)\n{\n  unsigned __int64 *v8; // rbp\n  int *v9; // rbx\n  unsigned __int8 v10; // r14\n  const unsigned __int16 **v11; // rax\n  const unsigned __int16 **v12; // r13\n  const unsigned __int16 *v13; // rcx\n  char *v14; // rax\n  int v15; // eax\n  unsigned int v16; // ecx\n  unsigned __int64 v18; // rax\n  char *v19; // r14\n  int v20; // ecx\n  int v21; // er15\n  char v22; // al\n  struct lconv *v23; // rax\n  size_t v24; // rax\n  char *v25; // r8\n  __int64 i; // rax\n  signed int v27; // er13\n  int v28; // er14\n  char *v29; // rax\n  int v30; // edi\n  int v31; // ecx\n  int v32; // edi\n  int v33; // er8\n  unsigned __int64 v34; // r10\n  unsigned __int64 v35; // rdi\n  unsigned __int64 v36; // r8\n  int v37; // esi\n  char *v38; // ST08_8\n  unsigned __int64 v39; // rax\n  unsigned __int64 v40; // r9\n  signed __int64 v41; // r11\n  unsigned __int64 v42; // rsi\n  unsigned __int64 v43; // r13\n  unsigned __int64 v44; // r9\n  char *v45; // rax\n  size_t v46; // [rsp+0h] [rbp-70h]\n  char *s1; // [rsp+8h] [rbp-68h]\n  unsigned __int64 v48; // [rsp+10h] [rbp-60h]\n  unsigned __int64 v49; // [rsp+18h] [rbp-58h]\n  char *endptr; // [rsp+28h] [rbp-48h]\n  unsigned __int64 v51; // [rsp+30h] [rbp-40h]\n  __int64 v52; // [rsp+40h] [rbp-30h]\n  __int64 v53; // [rsp+48h] [rbp-28h]\n  __int64 v54; // [rsp+50h] [rbp-20h]\n  __int64 v55; // [rsp+58h] [rbp-18h]\n  __int64 v56; // [rsp+60h] [rbp-10h]\n  __int64 v57; // [rsp+68h] [rbp-8h]\n\n  v57 = a8;\n  v56 = a7;\n  v55 = a6;\n  v54 = a5;\n  v53 = a3;\n  v52 = a2;\n  v8 = a4;\n  *a4 = 0LL;\n  v51 = __readfsqword(0x28u);\n  v9 = __errno_location();\n  if ( !nptr )\n    goto LABEL_7;\n  v10 = *nptr;\n  if ( !*nptr )\n    goto LABEL_7;\n  v11 = __ctype_b_loc();\n  v12 = v11;\n  v13 = *v11;\n  v14 = nptr;\n  while ( v13[v10] & 0x2000 )\n    v10 = *++v14;\n  if ( v10 == 45 )\n    goto LABEL_7;\n  *v9 = 0;\n  endptr = 0LL;\n  v18 = __strtoul_internal(nptr, &endptr, 0, 0);\n  v19 = endptr;\n  v48 = v18;\n  v20 = *v9;\n  if ( endptr == nptr )\n  {\nLABEL_33:\n    if ( !v20 )\n    {\nLABEL_7:\n      v15 = 22;\n      v16 = -22;\n      goto LABEL_8;\n    }\nLABEL_13:\n    v16 = -v20;\n    goto LABEL_14;\n  }\n  if ( v20 && v18 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n    goto LABEL_13;\n  if ( !endptr || !*endptr )\n  {\n    v16 = 0;\n    *a4 = v18;\n    return v16;\n  }\n  v21 = 0;\n  v49 = 0LL;\n  while ( 1 )\n  {\n    v22 = v19[1];\n    if ( v22 == 105 )\n    {\n      if ( (v19[2] & 0xDF) == 66 && !v19[3] )\n      {\nLABEL_37:\n        v27 = 1024;\n        goto LABEL_38;\n      }\n      goto LABEL_23;\n    }\n    if ( (v22 & 0xDF) == 66 && !v19[2] )\n      break;\n    if ( !v22 )\n      goto LABEL_37;\nLABEL_23:\n    v23 = localeconv();\n    if ( !v23 )\n      goto LABEL_7;\n    if ( !v23->decimal_point )\n      goto LABEL_7;\n    s1 = v23->decimal_point;\n    v24 = strlen(v23->decimal_point);\n    if ( v49 )\n      goto LABEL_7;\n    if ( !*v19 )\n      goto LABEL_7;\n    v46 = v24;\n    if ( strncmp(s1, v19, v24) )\n      goto LABEL_7;\n    v25 = &v19[v46];\n    for ( i = v19[v46]; (_BYTE)i == 48; ++v21 )\n      i = *++v25;\n    if ( (*v12)[i] & 0x800 )\n    {\n      *v9 = 0;\n      v38 = v25;\n      endptr = 0LL;\n      v39 = __strtoul_internal(v25, &endptr, 0, 0);\n      v19 = endptr;\n      v49 = v39;\n      v20 = *v9;\n      if ( endptr == v38 )\n        goto LABEL_33;\n      if ( v20 )\n      {\n        if ( v39 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n          goto LABEL_13;\n        goto LABEL_62;\n      }\n      if ( v39 )\n      {\nLABEL_62:\n        if ( !endptr || !*endptr )\n          goto LABEL_7;\n      }\n    }\n    else\n    {\n      endptr = v25;\n      v19 = v25;\n    }\n  }\n  v27 = 1000;\nLABEL_38:\n  v28 = *v19;\n  v29 = strchr(\"KMGTPEZY\", v28);\n  if ( v29 )\n  {\n    v30 = (unsigned __int64)(v29 - \"KMGTPEZY\") + 1;\n    goto LABEL_40;\n  }\n  v45 = strchr(\"kmgtpezy\", v28);\n  if ( !v45 )\n    goto LABEL_7;\n  v30 = (unsigned __int64)(v45 - \"kmgtpezy\") + 1;\nLABEL_40:\n  if ( v30 )\n  {\n    if ( is_mul_ok(v27, v48) )\n    {\n      v31 = 0;\n      while ( 1 )\n      {\n        v48 *= v27;\n        if ( v30 - 1 == v31 )\n          break;\n        ++v31;\n        if ( !is_mul_ok(v27, v48) )\n          goto LABEL_77;\n      }\n      v16 = 0;\n    }\n    else\n    {\nLABEL_77:\n      v16 = -34;\n    }\n    if ( v49 )\n    {\n      v32 = v30 - 1;\n      v33 = 0;\n      v34 = 1LL;\n      do\n      {\n        v34 *= v27;\n        if ( v33 == v32 )\n          break;\n        ++v33;\n      }\n      while ( is_mul_ok(v27, v34) );\n      if ( v49 <= 0xA )\n      {\n        v36 = v49;\n        v35 = 10LL;\n      }\n      else\n      {\n        v35 = 10LL;\n        while ( 1 )\n        {\n          v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v49 >> 64) >> 3;\n          if ( v35 > 0x1999999999999999LL )\n            break;\n          v35 *= 10LL;\n          if ( v35 >= v49 )\n          {\n            v36 = v49;\n            break;\n          }\n        }\n      }\n      if ( v21 )\n      {\n        v37 = 0;\n        do\n        {\n          if ( v35 <= 0x1999999999999999LL )\n            v35 *= 10LL;\n          else\n            v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n          ++v37;\n        }\n        while ( v21 != v37 );\n      }\n      v40 = 1LL;\n      do\n      {\n        v41 = 10 * v40;\n        v42 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        v43 = v36 - 10 * v42;\n        v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        if ( v43 )\n        {\n          v44 = v35 / v40 / v43;\n          if ( v44 )\n            v48 += v34 / v44;\n        }\n        v40 = v41;\n      }\n      while ( v42 );\n    }\n    *v8 = v48;\nLABEL_14:\n    if ( (v16 & 0x80000000) != 0 )\n    {\n      v15 = -v16;\nLABEL_8:\n      *v9 = v15;\n    }\n  }\n  else\n  {\n    v16 = 0;\n    *a4 = v48;\n  }\n  return v16;\n}\n\n// write access to const memory has been detected, the output may be wrong!\n__int64 __usercall sub_8D30@<rax>(char *nptr@<rdi>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned __int64 *a4@<rsi>, __int64 a5@<r12>, __int64 a6@<r13>, __int64 a7@<r14>, __int64 a8@<r15>)\n{\n  unsigned __int64 *v8; // rbp\n  int *v9; // rbx\n  unsigned __int8 v10; // r14\n  const unsigned __int16 **v11; // rax\n  const unsigned __int16 **v12; // r13\n  const unsigned __int16 *v13; // rcx\n  char *v14; // rax\n  int v15; // eax\n  unsigned int v16; // ecx\n  unsigned __int64 v18; // rax\n  char *v19; // r14\n  int v20; // ecx\n  int v21; // er15\n  char v22; // al\n  struct lconv *v23; // rax\n  size_t v24; // rax\n  char *v25; // r8\n  __int64 i; // rax\n  signed int v27; // er13\n  int v28; // er14\n  char *v29; // rax\n  int v30; // edi\n  int v31; // ecx\n  int v32; // edi\n  int v33; // er8\n  unsigned __int64 v34; // r10\n  unsigned __int64 v35; // rdi\n  unsigned __int64 v36; // r8\n  int v37; // esi\n  char *v38; // ST08_8\n  unsigned __int64 v39; // rax\n  unsigned __int64 v40; // r9\n  signed __int64 v41; // r11\n  unsigned __int64 v42; // rsi\n  unsigned __int64 v43; // r13\n  unsigned __int64 v44; // r9\n  char *v45; // rax\n  size_t v46; // [rsp+0h] [rbp-70h]\n  char *s1; // [rsp+8h] [rbp-68h]\n  unsigned __int64 v48; // [rsp+10h] [rbp-60h]\n  unsigned __int64 v49; // [rsp+18h] [rbp-58h]\n  char *endptr; // [rsp+28h] [rbp-48h]\n  unsigned __int64 v51; // [rsp+30h] [rbp-40h]\n  __int64 v52; // [rsp+40h] [rbp-30h]\n  __int64 v53; // [rsp+48h] [rbp-28h]\n  __int64 v54; // [rsp+50h] [rbp-20h]\n  __int64 v55; // [rsp+58h] [rbp-18h]\n  __int64 v56; // [rsp+60h] [rbp-10h]\n  __int64 v57; // [rsp+68h] [rbp-8h]\n\n  v57 = a8;\n  v56 = a7;\n  v55 = a6;\n  v54 = a5;\n  v53 = a3;\n  v52 = a2;\n  v8 = a4;\n  *a4 = 0LL;\n  v51 = __readfsqword(0x28u);\n  v9 = __errno_location();\n  if ( !nptr )\n    goto LABEL_7;\n  v10 = *nptr;\n  if ( !*nptr )\n    goto LABEL_7;\n  v11 = __ctype_b_loc();\n  v12 = v11;\n  v13 = *v11;\n  v14 = nptr;\n  while ( v13[v10] & 0x2000 )\n    v10 = *++v14;\n  if ( v10 == 45 )\n    goto LABEL_7;\n  *v9 = 0;\n  endptr = 0LL;\n  v18 = __strtoul_internal(nptr, &endptr, 0, 0);\n  v19 = endptr;\n  v48 = v18;\n  v20 = *v9;\n  if ( endptr == nptr )\n  {\nLABEL_33:\n    if ( !v20 )\n    {\nLABEL_7:\n      v15 = 22;\n      v16 = -22;\n      goto LABEL_8;\n    }\nLABEL_13:\n    v16 = -v20;\n    goto LABEL_14;\n  }\n  if ( v20 && v18 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n    goto LABEL_13;\n  if ( !endptr || !*endptr )\n  {\n    v16 = 0;\n    *a4 = v18;\n    return v16;\n  }\n  v21 = 0;\n  v49 = 0LL;\n  while ( 1 )\n  {\n    v22 = v19[1];\n    if ( v22 == 105 )\n    {\n      if ( (v19[2] & 0xDF) == 66 && !v19[3] )\n      {\nLABEL_37:\n        v27 = 1024;\n        goto LABEL_38;\n      }\n      goto LABEL_23;\n    }\n    if ( (v22 & 0xDF) == 66 && !v19[2] )\n      break;\n    if ( !v22 )\n      goto LABEL_37;\nLABEL_23:\n    v23 = localeconv();\n    if ( !v23 )\n      goto LABEL_7;\n    if ( !v23->decimal_point )\n      goto LABEL_7;\n    s1 = v23->decimal_point;\n    v24 = strlen(v23->decimal_point);\n    if ( v49 )\n      goto LABEL_7;\n    if ( !*v19 )\n      goto LABEL_7;\n    v46 = v24;\n    if ( strncmp(s1, v19, v24) )\n      goto LABEL_7;\n    v25 = &v19[v46];\n    for ( i = v19[v46]; (_BYTE)i == 48; ++v21 )\n      i = *++v25;\n    if ( (*v12)[i] & 0x800 )\n    {\n      *v9 = 0;\n      v38 = v25;\n      endptr = 0LL;\n      v39 = __strtoul_internal(v25, &endptr, 0, 0);\n      v19 = endptr;\n      v49 = v39;\n      v20 = *v9;\n      if ( endptr == v38 )\n        goto LABEL_33;\n      if ( v20 )\n      {\n        if ( v39 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n          goto LABEL_13;\n        goto LABEL_62;\n      }\n      if ( v39 )\n      {\nLABEL_62:\n        if ( !endptr || !*endptr )\n          goto LABEL_7;\n      }\n    }\n    else\n    {\n      endptr = v25;\n      v19 = v25;\n    }\n  }\n  v27 = 1000;\nLABEL_38:\n  v28 = *v19;\n  v29 = strchr(\"KMGTPEZY\", v28);\n  if ( v29 )\n  {\n    v30 = (unsigned __int64)(v29 - \"KMGTPEZY\") + 1;\n    goto LABEL_40;\n  }\n  v45 = strchr(\"kmgtpezy\", v28);\n  if ( !v45 )\n    goto LABEL_7;\n  v30 = (unsigned __int64)(v45 - \"kmgtpezy\") + 1;\nLABEL_40:\n  if ( v30 )\n  {\n    if ( is_mul_ok(v27, v48) )\n    {\n      v31 = 0;\n      while ( 1 )\n      {\n        v48 *= v27;\n        if ( v30 - 1 == v31 )\n          break;\n        ++v31;\n        if ( !is_mul_ok(v27, v48) )\n          goto LABEL_77;\n      }\n      v16 = 0;\n    }\n    else\n    {\nLABEL_77:\n      v16 = -34;\n    }\n    if ( v49 )\n    {\n      v32 = v30 - 1;\n      v33 = 0;\n      v34 = 1LL;\n      do\n      {\n        v34 *= v27;\n        if ( v33 == v32 )\n          break;\n        ++v33;\n      }\n      while ( is_mul_ok(v27, v34) );\n      if ( v49 <= 0xA )\n      {\n        v36 = v49;\n        v35 = 10LL;\n      }\n      else\n      {\n        v35 = 10LL;\n        while ( 1 )\n        {\n          v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v49 >> 64) >> 3;\n          if ( v35 > 0x1999999999999999LL )\n            break;\n          v35 *= 10LL;\n          if ( v35 >= v49 )\n          {\n            v36 = v49;\n            break;\n          }\n        }\n      }\n      if ( v21 )\n      {\n        v37 = 0;\n        do\n        {\n          if ( v35 <= 0x1999999999999999LL )\n            v35 *= 10LL;\n          else\n            v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n          ++v37;\n        }\n        while ( v21 != v37 );\n      }\n      v40 = 1LL;\n      do\n      {\n        v41 = 10 * v40;\n        v42 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        v43 = v36 - 10 * v42;\n        v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        if ( v43 )\n        {\n          v44 = v35 / v40 / v43;\n          if ( v44 )\n            v48 += v34 / v44;\n        }\n        v40 = v41;\n      }\n      while ( v42 );\n    }\n    *v8 = v48;\nLABEL_14:\n    if ( (v16 & 0x80000000) != 0 )\n    {\n      v15 = -v16;\nLABEL_8:\n      *v9 = v15;\n    }\n  }\n  else\n  {\n    v16 = 0;\n    *a4 = v48;\n  }\n  return v16;\n}\n\n// write access to const memory has been detected, the output may be wrong!\n__int64 __usercall sub_8D30@<rax>(char *nptr@<rdi>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned __int64 *a4@<rsi>, __int64 a5@<r12>, __int64 a6@<r13>, __int64 a7@<r14>, __int64 a8@<r15>)\n{\n  unsigned __int64 *v8; // rbp\n  int *v9; // rbx\n  unsigned __int8 v10; // r14\n  const unsigned __int16 **v11; // rax\n  const unsigned __int16 **v12; // r13\n  const unsigned __int16 *v13; // rcx\n  char *v14; // rax\n  int v15; // eax\n  unsigned int v16; // ecx\n  unsigned __int64 v18; // rax\n  char *v19; // r14\n  int v20; // ecx\n  int v21; // er15\n  char v22; // al\n  struct lconv *v23; // rax\n  size_t v24; // rax\n  char *v25; // r8\n  __int64 i; // rax\n  signed int v27; // er13\n  int v28; // er14\n  char *v29; // rax\n  int v30; // edi\n  int v31; // ecx\n  int v32; // edi\n  int v33; // er8\n  unsigned __int64 v34; // r10\n  unsigned __int64 v35; // rdi\n  unsigned __int64 v36; // r8\n  int v37; // esi\n  char *v38; // ST08_8\n  unsigned __int64 v39; // rax\n  unsigned __int64 v40; // r9\n  signed __int64 v41; // r11\n  unsigned __int64 v42; // rsi\n  unsigned __int64 v43; // r13\n  unsigned __int64 v44; // r9\n  char *v45; // rax\n  size_t v46; // [rsp+0h] [rbp-70h]\n  char *s1; // [rsp+8h] [rbp-68h]\n  unsigned __int64 v48; // [rsp+10h] [rbp-60h]\n  unsigned __int64 v49; // [rsp+18h] [rbp-58h]\n  char *endptr; // [rsp+28h] [rbp-48h]\n  unsigned __int64 v51; // [rsp+30h] [rbp-40h]\n  __int64 v52; // [rsp+40h] [rbp-30h]\n  __int64 v53; // [rsp+48h] [rbp-28h]\n  __int64 v54; // [rsp+50h] [rbp-20h]\n  __int64 v55; // [rsp+58h] [rbp-18h]\n  __int64 v56; // [rsp+60h] [rbp-10h]\n  __int64 v57; // [rsp+68h] [rbp-8h]\n\n  v57 = a8;\n  v56 = a7;\n  v55 = a6;\n  v54 = a5;\n  v53 = a3;\n  v52 = a2;\n  v8 = a4;\n  *a4 = 0LL;\n  v51 = __readfsqword(0x28u);\n  v9 = __errno_location();\n  if ( !nptr )\n    goto LABEL_7;\n  v10 = *nptr;\n  if ( !*nptr )\n    goto LABEL_7;\n  v11 = __ctype_b_loc();\n  v12 = v11;\n  v13 = *v11;\n  v14 = nptr;\n  while ( v13[v10] & 0x2000 )\n    v10 = *++v14;\n  if ( v10 == 45 )\n    goto LABEL_7;\n  *v9 = 0;\n  endptr = 0LL;\n  v18 = __strtoul_internal(nptr, &endptr, 0, 0);\n  v19 = endptr;\n  v48 = v18;\n  v20 = *v9;\n  if ( endptr == nptr )\n  {\nLABEL_33:\n    if ( !v20 )\n    {\nLABEL_7:\n      v15 = 22;\n      v16 = -22;\n      goto LABEL_8;\n    }\nLABEL_13:\n    v16 = -v20;\n    goto LABEL_14;\n  }\n  if ( v20 && v18 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n    goto LABEL_13;\n  if ( !endptr || !*endptr )\n  {\n    v16 = 0;\n    *a4 = v18;\n    return v16;\n  }\n  v21 = 0;\n  v49 = 0LL;\n  while ( 1 )\n  {\n    v22 = v19[1];\n    if ( v22 == 105 )\n    {\n      if ( (v19[2] & 0xDF) == 66 && !v19[3] )\n      {\nLABEL_37:\n        v27 = 1024;\n        goto LABEL_38;\n      }\n      goto LABEL_23;\n    }\n    if ( (v22 & 0xDF) == 66 && !v19[2] )\n      break;\n    if ( !v22 )\n      goto LABEL_37;\nLABEL_23:\n    v23 = localeconv();\n    if ( !v23 )\n      goto LABEL_7;\n    if ( !v23->decimal_point )\n      goto LABEL_7;\n    s1 = v23->decimal_point;\n    v24 = strlen(v23->decimal_point);\n    if ( v49 )\n      goto LABEL_7;\n    if ( !*v19 )\n      goto LABEL_7;\n    v46 = v24;\n    if ( strncmp(s1, v19, v24) )\n      goto LABEL_7;\n    v25 = &v19[v46];\n    for ( i = v19[v46]; (_BYTE)i == 48; ++v21 )\n      i = *++v25;\n    if ( (*v12)[i] & 0x800 )\n    {\n      *v9 = 0;\n      v38 = v25;\n      endptr = 0LL;\n      v39 = __strtoul_internal(v25, &endptr, 0, 0);\n      v19 = endptr;\n      v49 = v39;\n      v20 = *v9;\n      if ( endptr == v38 )\n        goto LABEL_33;\n      if ( v20 )\n      {\n        if ( v39 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n          goto LABEL_13;\n        goto LABEL_62;\n      }\n      if ( v39 )\n      {\nLABEL_62:\n        if ( !endptr || !*endptr )\n          goto LABEL_7;\n      }\n    }\n    else\n    {\n      endptr = v25;\n      v19 = v25;\n    }\n  }\n  v27 = 1000;\nLABEL_38:\n  v28 = *v19;\n  v29 = strchr(\"KMGTPEZY\", v28);\n  if ( v29 )\n  {\n    v30 = (unsigned __int64)(v29 - \"KMGTPEZY\") + 1;\n    goto LABEL_40;\n  }\n  v45 = strchr(\"kmgtpezy\", v28);\n  if ( !v45 )\n    goto LABEL_7;\n  v30 = (unsigned __int64)(v45 - \"kmgtpezy\") + 1;\nLABEL_40:\n  if ( v30 )\n  {\n    if ( is_mul_ok(v27, v48) )\n    {\n      v31 = 0;\n      while ( 1 )\n      {\n        v48 *= v27;\n        if ( v30 - 1 == v31 )\n          break;\n        ++v31;\n        if ( !is_mul_ok(v27, v48) )\n          goto LABEL_77;\n      }\n      v16 = 0;\n    }\n    else\n    {\nLABEL_77:\n      v16 = -34;\n    }\n    if ( v49 )\n    {\n      v32 = v30 - 1;\n      v33 = 0;\n      v34 = 1LL;\n      do\n      {\n        v34 *= v27;\n        if ( v33 == v32 )\n          break;\n        ++v33;\n      }\n      while ( is_mul_ok(v27, v34) );\n      if ( v49 <= 0xA )\n      {\n        v36 = v49;\n        v35 = 10LL;\n      }\n      else\n      {\n        v35 = 10LL;\n        while ( 1 )\n        {\n          v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v49 >> 64) >> 3;\n          if ( v35 > 0x1999999999999999LL )\n            break;\n          v35 *= 10LL;\n          if ( v35 >= v49 )\n          {\n            v36 = v49;\n            break;\n          }\n        }\n      }\n      if ( v21 )\n      {\n        v37 = 0;\n        do\n        {\n          if ( v35 <= 0x1999999999999999LL )\n            v35 *= 10LL;\n          else\n            v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n          ++v37;\n        }\n        while ( v21 != v37 );\n      }\n      v40 = 1LL;\n      do\n      {\n        v41 = 10 * v40;\n        v42 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        v43 = v36 - 10 * v42;\n        v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        if ( v43 )\n        {\n          v44 = v35 / v40 / v43;\n          if ( v44 )\n            v48 += v34 / v44;\n        }\n        v40 = v41;\n      }\n      while ( v42 );\n    }\n    *v8 = v48;\nLABEL_14:\n    if ( (v16 & 0x80000000) != 0 )\n    {\n      v15 = -v16;\nLABEL_8:\n      *v9 = v15;\n    }\n  }\n  else\n  {\n    v16 = 0;\n    *a4 = v48;\n  }\n  return v16;\n}\n\n// write access to const memory has been detected, the output may be wrong!\n__int64 __usercall sub_8D30@<rax>(char *nptr@<rdi>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned __int64 *a4@<rsi>, __int64 a5@<r12>, __int64 a6@<r13>, __int64 a7@<r14>, __int64 a8@<r15>)\n{\n  unsigned __int64 *v8; // rbp\n  int *v9; // rbx\n  unsigned __int8 v10; // r14\n  const unsigned __int16 **v11; // rax\n  const unsigned __int16 **v12; // r13\n  const unsigned __int16 *v13; // rcx\n  char *v14; // rax\n  int v15; // eax\n  unsigned int v16; // ecx\n  unsigned __int64 v18; // rax\n  char *v19; // r14\n  int v20; // ecx\n  int v21; // er15\n  char v22; // al\n  struct lconv *v23; // rax\n  size_t v24; // rax\n  char *v25; // r8\n  __int64 i; // rax\n  signed int v27; // er13\n  int v28; // er14\n  char *v29; // rax\n  int v30; // edi\n  int v31; // ecx\n  int v32; // edi\n  int v33; // er8\n  unsigned __int64 v34; // r10\n  unsigned __int64 v35; // rdi\n  unsigned __int64 v36; // r8\n  int v37; // esi\n  char *v38; // ST08_8\n  unsigned __int64 v39; // rax\n  unsigned __int64 v40; // r9\n  signed __int64 v41; // r11\n  unsigned __int64 v42; // rsi\n  unsigned __int64 v43; // r13\n  unsigned __int64 v44; // r9\n  char *v45; // rax\n  size_t v46; // [rsp+0h] [rbp-70h]\n  char *s1; // [rsp+8h] [rbp-68h]\n  unsigned __int64 v48; // [rsp+10h] [rbp-60h]\n  unsigned __int64 v49; // [rsp+18h] [rbp-58h]\n  char *endptr; // [rsp+28h] [rbp-48h]\n  unsigned __int64 v51; // [rsp+30h] [rbp-40h]\n  __int64 v52; // [rsp+40h] [rbp-30h]\n  __int64 v53; // [rsp+48h] [rbp-28h]\n  __int64 v54; // [rsp+50h] [rbp-20h]\n  __int64 v55; // [rsp+58h] [rbp-18h]\n  __int64 v56; // [rsp+60h] [rbp-10h]\n  __int64 v57; // [rsp+68h] [rbp-8h]\n\n  v57 = a8;\n  v56 = a7;\n  v55 = a6;\n  v54 = a5;\n  v53 = a3;\n  v52 = a2;\n  v8 = a4;\n  *a4 = 0LL;\n  v51 = __readfsqword(0x28u);\n  v9 = __errno_location();\n  if ( !nptr )\n    goto LABEL_7;\n  v10 = *nptr;\n  if ( !*nptr )\n    goto LABEL_7;\n  v11 = __ctype_b_loc();\n  v12 = v11;\n  v13 = *v11;\n  v14 = nptr;\n  while ( v13[v10] & 0x2000 )\n    v10 = *++v14;\n  if ( v10 == 45 )\n    goto LABEL_7;\n  *v9 = 0;\n  endptr = 0LL;\n  v18 = __strtoul_internal(nptr, &endptr, 0, 0);\n  v19 = endptr;\n  v48 = v18;\n  v20 = *v9;\n  if ( endptr == nptr )\n  {\nLABEL_33:\n    if ( !v20 )\n    {\nLABEL_7:\n      v15 = 22;\n      v16 = -22;\n      goto LABEL_8;\n    }\nLABEL_13:\n    v16 = -v20;\n    goto LABEL_14;\n  }\n  if ( v20 && v18 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n    goto LABEL_13;\n  if ( !endptr || !*endptr )\n  {\n    v16 = 0;\n    *a4 = v18;\n    return v16;\n  }\n  v21 = 0;\n  v49 = 0LL;\n  while ( 1 )\n  {\n    v22 = v19[1];\n    if ( v22 == 105 )\n    {\n      if ( (v19[2] & 0xDF) == 66 && !v19[3] )\n      {\nLABEL_37:\n        v27 = 1024;\n        goto LABEL_38;\n      }\n      goto LABEL_23;\n    }\n    if ( (v22 & 0xDF) == 66 && !v19[2] )\n      break;\n    if ( !v22 )\n      goto LABEL_37;\nLABEL_23:\n    v23 = localeconv();\n    if ( !v23 )\n      goto LABEL_7;\n    if ( !v23->decimal_point )\n      goto LABEL_7;\n    s1 = v23->decimal_point;\n    v24 = strlen(v23->decimal_point);\n    if ( v49 )\n      goto LABEL_7;\n    if ( !*v19 )\n      goto LABEL_7;\n    v46 = v24;\n    if ( strncmp(s1, v19, v24) )\n      goto LABEL_7;\n    v25 = &v19[v46];\n    for ( i = v19[v46]; (_BYTE)i == 48; ++v21 )\n      i = *++v25;\n    if ( (*v12)[i] & 0x800 )\n    {\n      *v9 = 0;\n      v38 = v25;\n      endptr = 0LL;\n      v39 = __strtoul_internal(v25, &endptr, 0, 0);\n      v19 = endptr;\n      v49 = v39;\n      v20 = *v9;\n      if ( endptr == v38 )\n        goto LABEL_33;\n      if ( v20 )\n      {\n        if ( v39 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n          goto LABEL_13;\n        goto LABEL_62;\n      }\n      if ( v39 )\n      {\nLABEL_62:\n        if ( !endptr || !*endptr )\n          goto LABEL_7;\n      }\n    }\n    else\n    {\n      endptr = v25;\n      v19 = v25;\n    }\n  }\n  v27 = 1000;\nLABEL_38:\n  v28 = *v19;\n  v29 = strchr(\"KMGTPEZY\", v28);\n  if ( v29 )\n  {\n    v30 = (unsigned __int64)(v29 - \"KMGTPEZY\") + 1;\n    goto LABEL_40;\n  }\n  v45 = strchr(\"kmgtpezy\", v28);\n  if ( !v45 )\n    goto LABEL_7;\n  v30 = (unsigned __int64)(v45 - \"kmgtpezy\") + 1;\nLABEL_40:\n  if ( v30 )\n  {\n    if ( is_mul_ok(v27, v48) )\n    {\n      v31 = 0;\n      while ( 1 )\n      {\n        v48 *= v27;\n        if ( v30 - 1 == v31 )\n          break;\n        ++v31;\n        if ( !is_mul_ok(v27, v48) )\n          goto LABEL_77;\n      }\n      v16 = 0;\n    }\n    else\n    {\nLABEL_77:\n      v16 = -34;\n    }\n    if ( v49 )\n    {\n      v32 = v30 - 1;\n      v33 = 0;\n      v34 = 1LL;\n      do\n      {\n        v34 *= v27;\n        if ( v33 == v32 )\n          break;\n        ++v33;\n      }\n      while ( is_mul_ok(v27, v34) );\n      if ( v49 <= 0xA )\n      {\n        v36 = v49;\n        v35 = 10LL;\n      }\n      else\n      {\n        v35 = 10LL;\n        while ( 1 )\n        {\n          v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v49 >> 64) >> 3;\n          if ( v35 > 0x1999999999999999LL )\n            break;\n          v35 *= 10LL;\n          if ( v35 >= v49 )\n          {\n            v36 = v49;\n            break;\n          }\n        }\n      }\n      if ( v21 )\n      {\n        v37 = 0;\n        do\n        {\n          if ( v35 <= 0x1999999999999999LL )\n            v35 *= 10LL;\n          else\n            v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n          ++v37;\n        }\n        while ( v21 != v37 );\n      }\n      v40 = 1LL;\n      do\n      {\n        v41 = 10 * v40;\n        v42 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        v43 = v36 - 10 * v42;\n        v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        if ( v43 )\n        {\n          v44 = v35 / v40 / v43;\n          if ( v44 )\n            v48 += v34 / v44;\n        }\n        v40 = v41;\n      }\n      while ( v42 );\n    }\n    *v8 = v48;\nLABEL_14:\n    if ( (v16 & 0x80000000) != 0 )\n    {\n      v15 = -v16;\nLABEL_8:\n      *v9 = v15;\n    }\n  }\n  else\n  {\n    v16 = 0;\n    *a4 = v48;\n  }\n  return v16;\n}\n\n// write access to const memory has been detected, the output may be wrong!\n__int64 __usercall sub_8D30@<rax>(char *nptr@<rdi>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned __int64 *a4@<rsi>, __int64 a5@<r12>, __int64 a6@<r13>, __int64 a7@<r14>, __int64 a8@<r15>)\n{\n  unsigned __int64 *v8; // rbp\n  int *v9; // rbx\n  unsigned __int8 v10; // r14\n  const unsigned __int16 **v11; // rax\n  const unsigned __int16 **v12; // r13\n  const unsigned __int16 *v13; // rcx\n  char *v14; // rax\n  int v15; // eax\n  unsigned int v16; // ecx\n  unsigned __int64 v18; // rax\n  char *v19; // r14\n  int v20; // ecx\n  int v21; // er15\n  char v22; // al\n  struct lconv *v23; // rax\n  size_t v24; // rax\n  char *v25; // r8\n  __int64 i; // rax\n  signed int v27; // er13\n  int v28; // er14\n  char *v29; // rax\n  int v30; // edi\n  int v31; // ecx\n  int v32; // edi\n  int v33; // er8\n  unsigned __int64 v34; // r10\n  unsigned __int64 v35; // rdi\n  unsigned __int64 v36; // r8\n  int v37; // esi\n  char *v38; // ST08_8\n  unsigned __int64 v39; // rax\n  unsigned __int64 v40; // r9\n  signed __int64 v41; // r11\n  unsigned __int64 v42; // rsi\n  unsigned __int64 v43; // r13\n  unsigned __int64 v44; // r9\n  char *v45; // rax\n  size_t v46; // [rsp+0h] [rbp-70h]\n  char *s1; // [rsp+8h] [rbp-68h]\n  unsigned __int64 v48; // [rsp+10h] [rbp-60h]\n  unsigned __int64 v49; // [rsp+18h] [rbp-58h]\n  char *endptr; // [rsp+28h] [rbp-48h]\n  unsigned __int64 v51; // [rsp+30h] [rbp-40h]\n  __int64 v52; // [rsp+40h] [rbp-30h]\n  __int64 v53; // [rsp+48h] [rbp-28h]\n  __int64 v54; // [rsp+50h] [rbp-20h]\n  __int64 v55; // [rsp+58h] [rbp-18h]\n  __int64 v56; // [rsp+60h] [rbp-10h]\n  __int64 v57; // [rsp+68h] [rbp-8h]\n\n  v57 = a8;\n  v56 = a7;\n  v55 = a6;\n  v54 = a5;\n  v53 = a3;\n  v52 = a2;\n  v8 = a4;\n  *a4 = 0LL;\n  v51 = __readfsqword(0x28u);\n  v9 = __errno_location();\n  if ( !nptr )\n    goto LABEL_7;\n  v10 = *nptr;\n  if ( !*nptr )\n    goto LABEL_7;\n  v11 = __ctype_b_loc();\n  v12 = v11;\n  v13 = *v11;\n  v14 = nptr;\n  while ( v13[v10] & 0x2000 )\n    v10 = *++v14;\n  if ( v10 == 45 )\n    goto LABEL_7;\n  *v9 = 0;\n  endptr = 0LL;\n  v18 = __strtoul_internal(nptr, &endptr, 0, 0);\n  v19 = endptr;\n  v48 = v18;\n  v20 = *v9;\n  if ( endptr == nptr )\n  {\nLABEL_33:\n    if ( !v20 )\n    {\nLABEL_7:\n      v15 = 22;\n      v16 = -22;\n      goto LABEL_8;\n    }\nLABEL_13:\n    v16 = -v20;\n    goto LABEL_14;\n  }\n  if ( v20 && v18 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n    goto LABEL_13;\n  if ( !endptr || !*endptr )\n  {\n    v16 = 0;\n    *a4 = v18;\n    return v16;\n  }\n  v21 = 0;\n  v49 = 0LL;\n  while ( 1 )\n  {\n    v22 = v19[1];\n    if ( v22 == 105 )\n    {\n      if ( (v19[2] & 0xDF) == 66 && !v19[3] )\n      {\nLABEL_37:\n        v27 = 1024;\n        goto LABEL_38;\n      }\n      goto LABEL_23;\n    }\n    if ( (v22 & 0xDF) == 66 && !v19[2] )\n      break;\n    if ( !v22 )\n      goto LABEL_37;\nLABEL_23:\n    v23 = localeconv();\n    if ( !v23 )\n      goto LABEL_7;\n    if ( !v23->decimal_point )\n      goto LABEL_7;\n    s1 = v23->decimal_point;\n    v24 = strlen(v23->decimal_point);\n    if ( v49 )\n      goto LABEL_7;\n    if ( !*v19 )\n      goto LABEL_7;\n    v46 = v24;\n    if ( strncmp(s1, v19, v24) )\n      goto LABEL_7;\n    v25 = &v19[v46];\n    for ( i = v19[v46]; (_BYTE)i == 48; ++v21 )\n      i = *++v25;\n    if ( (*v12)[i] & 0x800 )\n    {\n      *v9 = 0;\n      v38 = v25;\n      endptr = 0LL;\n      v39 = __strtoul_internal(v25, &endptr, 0, 0);\n      v19 = endptr;\n      v49 = v39;\n      v20 = *v9;\n      if ( endptr == v38 )\n        goto LABEL_33;\n      if ( v20 )\n      {\n        if ( v39 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n          goto LABEL_13;\n        goto LABEL_62;\n      }\n      if ( v39 )\n      {\nLABEL_62:\n        if ( !endptr || !*endptr )\n          goto LABEL_7;\n      }\n    }\n    else\n    {\n      endptr = v25;\n      v19 = v25;\n    }\n  }\n  v27 = 1000;\nLABEL_38:\n  v28 = *v19;\n  v29 = strchr(\"KMGTPEZY\", v28);\n  if ( v29 )\n  {\n    v30 = (unsigned __int64)(v29 - \"KMGTPEZY\") + 1;\n    goto LABEL_40;\n  }\n  v45 = strchr(\"kmgtpezy\", v28);\n  if ( !v45 )\n    goto LABEL_7;\n  v30 = (unsigned __int64)(v45 - \"kmgtpezy\") + 1;\nLABEL_40:\n  if ( v30 )\n  {\n    if ( is_mul_ok(v27, v48) )\n    {\n      v31 = 0;\n      while ( 1 )\n      {\n        v48 *= v27;\n        if ( v30 - 1 == v31 )\n          break;\n        ++v31;\n        if ( !is_mul_ok(v27, v48) )\n          goto LABEL_77;\n      }\n      v16 = 0;\n    }\n    else\n    {\nLABEL_77:\n      v16 = -34;\n    }\n    if ( v49 )\n    {\n      v32 = v30 - 1;\n      v33 = 0;\n      v34 = 1LL;\n      do\n      {\n        v34 *= v27;\n        if ( v33 == v32 )\n          break;\n        ++v33;\n      }\n      while ( is_mul_ok(v27, v34) );\n      if ( v49 <= 0xA )\n      {\n        v36 = v49;\n        v35 = 10LL;\n      }\n      else\n      {\n        v35 = 10LL;\n        while ( 1 )\n        {\n          v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v49 >> 64) >> 3;\n          if ( v35 > 0x1999999999999999LL )\n            break;\n          v35 *= 10LL;\n          if ( v35 >= v49 )\n          {\n            v36 = v49;\n            break;\n          }\n        }\n      }\n      if ( v21 )\n      {\n        v37 = 0;\n        do\n        {\n          if ( v35 <= 0x1999999999999999LL )\n            v35 *= 10LL;\n          else\n            v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n          ++v37;\n        }\n        while ( v21 != v37 );\n      }\n      v40 = 1LL;\n      do\n      {\n        v41 = 10 * v40;\n        v42 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        v43 = v36 - 10 * v42;\n        v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        if ( v43 )\n        {\n          v44 = v35 / v40 / v43;\n          if ( v44 )\n            v48 += v34 / v44;\n        }\n        v40 = v41;\n      }\n      while ( v42 );\n    }\n    *v8 = v48;\nLABEL_14:\n    if ( (v16 & 0x80000000) != 0 )\n    {\n      v15 = -v16;\nLABEL_8:\n      *v9 = v15;\n    }\n  }\n  else\n  {\n    v16 = 0;\n    *a4 = v48;\n  }\n  return v16;\n}\n\n// write access to const memory has been detected, the output may be wrong!\n__int64 __usercall sub_8D30@<rax>(char *nptr@<rdi>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned __int64 *a4@<rsi>, __int64 a5@<r12>, __int64 a6@<r13>, __int64 a7@<r14>, __int64 a8@<r15>)\n{\n  unsigned __int64 *v8; // rbp\n  int *v9; // rbx\n  unsigned __int8 v10; // r14\n  const unsigned __int16 **v11; // rax\n  const unsigned __int16 **v12; // r13\n  const unsigned __int16 *v13; // rcx\n  char *v14; // rax\n  int v15; // eax\n  unsigned int v16; // ecx\n  unsigned __int64 v18; // rax\n  char *v19; // r14\n  int v20; // ecx\n  int v21; // er15\n  char v22; // al\n  struct lconv *v23; // rax\n  size_t v24; // rax\n  char *v25; // r8\n  __int64 i; // rax\n  signed int v27; // er13\n  int v28; // er14\n  char *v29; // rax\n  int v30; // edi\n  int v31; // ecx\n  int v32; // edi\n  int v33; // er8\n  unsigned __int64 v34; // r10\n  unsigned __int64 v35; // rdi\n  unsigned __int64 v36; // r8\n  int v37; // esi\n  char *v38; // ST08_8\n  unsigned __int64 v39; // rax\n  unsigned __int64 v40; // r9\n  signed __int64 v41; // r11\n  unsigned __int64 v42; // rsi\n  unsigned __int64 v43; // r13\n  unsigned __int64 v44; // r9\n  char *v45; // rax\n  size_t v46; // [rsp+0h] [rbp-70h]\n  char *s1; // [rsp+8h] [rbp-68h]\n  unsigned __int64 v48; // [rsp+10h] [rbp-60h]\n  unsigned __int64 v49; // [rsp+18h] [rbp-58h]\n  char *endptr; // [rsp+28h] [rbp-48h]\n  unsigned __int64 v51; // [rsp+30h] [rbp-40h]\n  __int64 v52; // [rsp+40h] [rbp-30h]\n  __int64 v53; // [rsp+48h] [rbp-28h]\n  __int64 v54; // [rsp+50h] [rbp-20h]\n  __int64 v55; // [rsp+58h] [rbp-18h]\n  __int64 v56; // [rsp+60h] [rbp-10h]\n  __int64 v57; // [rsp+68h] [rbp-8h]\n\n  v57 = a8;\n  v56 = a7;\n  v55 = a6;\n  v54 = a5;\n  v53 = a3;\n  v52 = a2;\n  v8 = a4;\n  *a4 = 0LL;\n  v51 = __readfsqword(0x28u);\n  v9 = __errno_location();\n  if ( !nptr )\n    goto LABEL_7;\n  v10 = *nptr;\n  if ( !*nptr )\n    goto LABEL_7;\n  v11 = __ctype_b_loc();\n  v12 = v11;\n  v13 = *v11;\n  v14 = nptr;\n  while ( v13[v10] & 0x2000 )\n    v10 = *++v14;\n  if ( v10 == 45 )\n    goto LABEL_7;\n  *v9 = 0;\n  endptr = 0LL;\n  v18 = __strtoul_internal(nptr, &endptr, 0, 0);\n  v19 = endptr;\n  v48 = v18;\n  v20 = *v9;\n  if ( endptr == nptr )\n  {\nLABEL_33:\n    if ( !v20 )\n    {\nLABEL_7:\n      v15 = 22;\n      v16 = -22;\n      goto LABEL_8;\n    }\nLABEL_13:\n    v16 = -v20;\n    goto LABEL_14;\n  }\n  if ( v20 && v18 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n    goto LABEL_13;\n  if ( !endptr || !*endptr )\n  {\n    v16 = 0;\n    *a4 = v18;\n    return v16;\n  }\n  v21 = 0;\n  v49 = 0LL;\n  while ( 1 )\n  {\n    v22 = v19[1];\n    if ( v22 == 105 )\n    {\n      if ( (v19[2] & 0xDF) == 66 && !v19[3] )\n      {\nLABEL_37:\n        v27 = 1024;\n        goto LABEL_38;\n      }\n      goto LABEL_23;\n    }\n    if ( (v22 & 0xDF) == 66 && !v19[2] )\n      break;\n    if ( !v22 )\n      goto LABEL_37;\nLABEL_23:\n    v23 = localeconv();\n    if ( !v23 )\n      goto LABEL_7;\n    if ( !v23->decimal_point )\n      goto LABEL_7;\n    s1 = v23->decimal_point;\n    v24 = strlen(v23->decimal_point);\n    if ( v49 )\n      goto LABEL_7;\n    if ( !*v19 )\n      goto LABEL_7;\n    v46 = v24;\n    if ( strncmp(s1, v19, v24) )\n      goto LABEL_7;\n    v25 = &v19[v46];\n    for ( i = v19[v46]; (_BYTE)i == 48; ++v21 )\n      i = *++v25;\n    if ( (*v12)[i] & 0x800 )\n    {\n      *v9 = 0;\n      v38 = v25;\n      endptr = 0LL;\n      v39 = __strtoul_internal(v25, &endptr, 0, 0);\n      v19 = endptr;\n      v49 = v39;\n      v20 = *v9;\n      if ( endptr == v38 )\n        goto LABEL_33;\n      if ( v20 )\n      {\n        if ( v39 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n          goto LABEL_13;\n        goto LABEL_62;\n      }\n      if ( v39 )\n      {\nLABEL_62:\n        if ( !endptr || !*endptr )\n          goto LABEL_7;\n      }\n    }\n    else\n    {\n      endptr = v25;\n      v19 = v25;\n    }\n  }\n  v27 = 1000;\nLABEL_38:\n  v28 = *v19;\n  v29 = strchr(\"KMGTPEZY\", v28);\n  if ( v29 )\n  {\n    v30 = (unsigned __int64)(v29 - \"KMGTPEZY\") + 1;\n    goto LABEL_40;\n  }\n  v45 = strchr(\"kmgtpezy\", v28);\n  if ( !v45 )\n    goto LABEL_7;\n  v30 = (unsigned __int64)(v45 - \"kmgtpezy\") + 1;\nLABEL_40:\n  if ( v30 )\n  {\n    if ( is_mul_ok(v27, v48) )\n    {\n      v31 = 0;\n      while ( 1 )\n      {\n        v48 *= v27;\n        if ( v30 - 1 == v31 )\n          break;\n        ++v31;\n        if ( !is_mul_ok(v27, v48) )\n          goto LABEL_77;\n      }\n      v16 = 0;\n    }\n    else\n    {\nLABEL_77:\n      v16 = -34;\n    }\n    if ( v49 )\n    {\n      v32 = v30 - 1;\n      v33 = 0;\n      v34 = 1LL;\n      do\n      {\n        v34 *= v27;\n        if ( v33 == v32 )\n          break;\n        ++v33;\n      }\n      while ( is_mul_ok(v27, v34) );\n      if ( v49 <= 0xA )\n      {\n        v36 = v49;\n        v35 = 10LL;\n      }\n      else\n      {\n        v35 = 10LL;\n        while ( 1 )\n        {\n          v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v49 >> 64) >> 3;\n          if ( v35 > 0x1999999999999999LL )\n            break;\n          v35 *= 10LL;\n          if ( v35 >= v49 )\n          {\n            v36 = v49;\n            break;\n          }\n        }\n      }\n      if ( v21 )\n      {\n        v37 = 0;\n        do\n        {\n          if ( v35 <= 0x1999999999999999LL )\n            v35 *= 10LL;\n          else\n            v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n          ++v37;\n        }\n        while ( v21 != v37 );\n      }\n      v40 = 1LL;\n      do\n      {\n        v41 = 10 * v40;\n        v42 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        v43 = v36 - 10 * v42;\n        v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        if ( v43 )\n        {\n          v44 = v35 / v40 / v43;\n          if ( v44 )\n            v48 += v34 / v44;\n        }\n        v40 = v41;\n      }\n      while ( v42 );\n    }\n    *v8 = v48;\nLABEL_14:\n    if ( (v16 & 0x80000000) != 0 )\n    {\n      v15 = -v16;\nLABEL_8:\n      *v9 = v15;\n    }\n  }\n  else\n  {\n    v16 = 0;\n    *a4 = v48;\n  }\n  return v16;\n}\n\n// write access to const memory has been detected, the output may be wrong!\n__int64 __usercall sub_8D30@<rax>(char *nptr@<rdi>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned __int64 *a4@<rsi>, __int64 a5@<r12>, __int64 a6@<r13>, __int64 a7@<r14>, __int64 a8@<r15>)\n{\n  unsigned __int64 *v8; // rbp\n  int *v9; // rbx\n  unsigned __int8 v10; // r14\n  const unsigned __int16 **v11; // rax\n  const unsigned __int16 **v12; // r13\n  const unsigned __int16 *v13; // rcx\n  char *v14; // rax\n  int v15; // eax\n  unsigned int v16; // ecx\n  unsigned __int64 v18; // rax\n  char *v19; // r14\n  int v20; // ecx\n  int v21; // er15\n  char v22; // al\n  struct lconv *v23; // rax\n  size_t v24; // rax\n  char *v25; // r8\n  __int64 i; // rax\n  signed int v27; // er13\n  int v28; // er14\n  char *v29; // rax\n  int v30; // edi\n  int v31; // ecx\n  int v32; // edi\n  int v33; // er8\n  unsigned __int64 v34; // r10\n  unsigned __int64 v35; // rdi\n  unsigned __int64 v36; // r8\n  int v37; // esi\n  char *v38; // ST08_8\n  unsigned __int64 v39; // rax\n  unsigned __int64 v40; // r9\n  signed __int64 v41; // r11\n  unsigned __int64 v42; // rsi\n  unsigned __int64 v43; // r13\n  unsigned __int64 v44; // r9\n  char *v45; // rax\n  size_t v46; // [rsp+0h] [rbp-70h]\n  char *s1; // [rsp+8h] [rbp-68h]\n  unsigned __int64 v48; // [rsp+10h] [rbp-60h]\n  unsigned __int64 v49; // [rsp+18h] [rbp-58h]\n  char *endptr; // [rsp+28h] [rbp-48h]\n  unsigned __int64 v51; // [rsp+30h] [rbp-40h]\n  __int64 v52; // [rsp+40h] [rbp-30h]\n  __int64 v53; // [rsp+48h] [rbp-28h]\n  __int64 v54; // [rsp+50h] [rbp-20h]\n  __int64 v55; // [rsp+58h] [rbp-18h]\n  __int64 v56; // [rsp+60h] [rbp-10h]\n  __int64 v57; // [rsp+68h] [rbp-8h]\n\n  v57 = a8;\n  v56 = a7;\n  v55 = a6;\n  v54 = a5;\n  v53 = a3;\n  v52 = a2;\n  v8 = a4;\n  *a4 = 0LL;\n  v51 = __readfsqword(0x28u);\n  v9 = __errno_location();\n  if ( !nptr )\n    goto LABEL_7;\n  v10 = *nptr;\n  if ( !*nptr )\n    goto LABEL_7;\n  v11 = __ctype_b_loc();\n  v12 = v11;\n  v13 = *v11;\n  v14 = nptr;\n  while ( v13[v10] & 0x2000 )\n    v10 = *++v14;\n  if ( v10 == 45 )\n    goto LABEL_7;\n  *v9 = 0;\n  endptr = 0LL;\n  v18 = __strtoul_internal(nptr, &endptr, 0, 0);\n  v19 = endptr;\n  v48 = v18;\n  v20 = *v9;\n  if ( endptr == nptr )\n  {\nLABEL_33:\n    if ( !v20 )\n    {\nLABEL_7:\n      v15 = 22;\n      v16 = -22;\n      goto LABEL_8;\n    }\nLABEL_13:\n    v16 = -v20;\n    goto LABEL_14;\n  }\n  if ( v20 && v18 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n    goto LABEL_13;\n  if ( !endptr || !*endptr )\n  {\n    v16 = 0;\n    *a4 = v18;\n    return v16;\n  }\n  v21 = 0;\n  v49 = 0LL;\n  while ( 1 )\n  {\n    v22 = v19[1];\n    if ( v22 == 105 )\n    {\n      if ( (v19[2] & 0xDF) == 66 && !v19[3] )\n      {\nLABEL_37:\n        v27 = 1024;\n        goto LABEL_38;\n      }\n      goto LABEL_23;\n    }\n    if ( (v22 & 0xDF) == 66 && !v19[2] )\n      break;\n    if ( !v22 )\n      goto LABEL_37;\nLABEL_23:\n    v23 = localeconv();\n    if ( !v23 )\n      goto LABEL_7;\n    if ( !v23->decimal_point )\n      goto LABEL_7;\n    s1 = v23->decimal_point;\n    v24 = strlen(v23->decimal_point);\n    if ( v49 )\n      goto LABEL_7;\n    if ( !*v19 )\n      goto LABEL_7;\n    v46 = v24;\n    if ( strncmp(s1, v19, v24) )\n      goto LABEL_7;\n    v25 = &v19[v46];\n    for ( i = v19[v46]; (_BYTE)i == 48; ++v21 )\n      i = *++v25;\n    if ( (*v12)[i] & 0x800 )\n    {\n      *v9 = 0;\n      v38 = v25;\n      endptr = 0LL;\n      v39 = __strtoul_internal(v25, &endptr, 0, 0);\n      v19 = endptr;\n      v49 = v39;\n      v20 = *v9;\n      if ( endptr == v38 )\n        goto LABEL_33;\n      if ( v20 )\n      {\n        if ( v39 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n          goto LABEL_13;\n        goto LABEL_62;\n      }\n      if ( v39 )\n      {\nLABEL_62:\n        if ( !endptr || !*endptr )\n          goto LABEL_7;\n      }\n    }\n    else\n    {\n      endptr = v25;\n      v19 = v25;\n    }\n  }\n  v27 = 1000;\nLABEL_38:\n  v28 = *v19;\n  v29 = strchr(\"KMGTPEZY\", v28);\n  if ( v29 )\n  {\n    v30 = (unsigned __int64)(v29 - \"KMGTPEZY\") + 1;\n    goto LABEL_40;\n  }\n  v45 = strchr(\"kmgtpezy\", v28);\n  if ( !v45 )\n    goto LABEL_7;\n  v30 = (unsigned __int64)(v45 - \"kmgtpezy\") + 1;\nLABEL_40:\n  if ( v30 )\n  {\n    if ( is_mul_ok(v27, v48) )\n    {\n      v31 = 0;\n      while ( 1 )\n      {\n        v48 *= v27;\n        if ( v30 - 1 == v31 )\n          break;\n        ++v31;\n        if ( !is_mul_ok(v27, v48) )\n          goto LABEL_77;\n      }\n      v16 = 0;\n    }\n    else\n    {\nLABEL_77:\n      v16 = -34;\n    }\n    if ( v49 )\n    {\n      v32 = v30 - 1;\n      v33 = 0;\n      v34 = 1LL;\n      do\n      {\n        v34 *= v27;\n        if ( v33 == v32 )\n          break;\n        ++v33;\n      }\n      while ( is_mul_ok(v27, v34) );\n      if ( v49 <= 0xA )\n      {\n        v36 = v49;\n        v35 = 10LL;\n      }\n      else\n      {\n        v35 = 10LL;\n        while ( 1 )\n        {\n          v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v49 >> 64) >> 3;\n          if ( v35 > 0x1999999999999999LL )\n            break;\n          v35 *= 10LL;\n          if ( v35 >= v49 )\n          {\n            v36 = v49;\n            break;\n          }\n        }\n      }\n      if ( v21 )\n      {\n        v37 = 0;\n        do\n        {\n          if ( v35 <= 0x1999999999999999LL )\n            v35 *= 10LL;\n          else\n            v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n          ++v37;\n        }\n        while ( v21 != v37 );\n      }\n      v40 = 1LL;\n      do\n      {\n        v41 = 10 * v40;\n        v42 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        v43 = v36 - 10 * v42;\n        v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        if ( v43 )\n        {\n          v44 = v35 / v40 / v43;\n          if ( v44 )\n            v48 += v34 / v44;\n        }\n        v40 = v41;\n      }\n      while ( v42 );\n    }\n    *v8 = v48;\nLABEL_14:\n    if ( (v16 & 0x80000000) != 0 )\n    {\n      v15 = -v16;\nLABEL_8:\n      *v9 = v15;\n    }\n  }\n  else\n  {\n    v16 = 0;\n    *a4 = v48;\n  }\n  return v16;\n}\n\n// write access to const memory has been detected, the output may be wrong!\n__int64 __usercall sub_8D30@<rax>(char *nptr@<rdi>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned __int64 *a4@<rsi>, __int64 a5@<r12>, __int64 a6@<r13>, __int64 a7@<r14>, __int64 a8@<r15>)\n{\n  unsigned __int64 *v8; // rbp\n  int *v9; // rbx\n  unsigned __int8 v10; // r14\n  const unsigned __int16 **v11; // rax\n  const unsigned __int16 **v12; // r13\n  const unsigned __int16 *v13; // rcx\n  char *v14; // rax\n  int v15; // eax\n  unsigned int v16; // ecx\n  unsigned __int64 v18; // rax\n  char *v19; // r14\n  int v20; // ecx\n  int v21; // er15\n  char v22; // al\n  struct lconv *v23; // rax\n  size_t v24; // rax\n  char *v25; // r8\n  __int64 i; // rax\n  signed int v27; // er13\n  int v28; // er14\n  char *v29; // rax\n  int v30; // edi\n  int v31; // ecx\n  int v32; // edi\n  int v33; // er8\n  unsigned __int64 v34; // r10\n  unsigned __int64 v35; // rdi\n  unsigned __int64 v36; // r8\n  int v37; // esi\n  char *v38; // ST08_8\n  unsigned __int64 v39; // rax\n  unsigned __int64 v40; // r9\n  signed __int64 v41; // r11\n  unsigned __int64 v42; // rsi\n  unsigned __int64 v43; // r13\n  unsigned __int64 v44; // r9\n  char *v45; // rax\n  size_t v46; // [rsp+0h] [rbp-70h]\n  char *s1; // [rsp+8h] [rbp-68h]\n  unsigned __int64 v48; // [rsp+10h] [rbp-60h]\n  unsigned __int64 v49; // [rsp+18h] [rbp-58h]\n  char *endptr; // [rsp+28h] [rbp-48h]\n  unsigned __int64 v51; // [rsp+30h] [rbp-40h]\n  __int64 v52; // [rsp+40h] [rbp-30h]\n  __int64 v53; // [rsp+48h] [rbp-28h]\n  __int64 v54; // [rsp+50h] [rbp-20h]\n  __int64 v55; // [rsp+58h] [rbp-18h]\n  __int64 v56; // [rsp+60h] [rbp-10h]\n  __int64 v57; // [rsp+68h] [rbp-8h]\n\n  v57 = a8;\n  v56 = a7;\n  v55 = a6;\n  v54 = a5;\n  v53 = a3;\n  v52 = a2;\n  v8 = a4;\n  *a4 = 0LL;\n  v51 = __readfsqword(0x28u);\n  v9 = __errno_location();\n  if ( !nptr )\n    goto LABEL_7;\n  v10 = *nptr;\n  if ( !*nptr )\n    goto LABEL_7;\n  v11 = __ctype_b_loc();\n  v12 = v11;\n  v13 = *v11;\n  v14 = nptr;\n  while ( v13[v10] & 0x2000 )\n    v10 = *++v14;\n  if ( v10 == 45 )\n    goto LABEL_7;\n  *v9 = 0;\n  endptr = 0LL;\n  v18 = __strtoul_internal(nptr, &endptr, 0, 0);\n  v19 = endptr;\n  v48 = v18;\n  v20 = *v9;\n  if ( endptr == nptr )\n  {\nLABEL_33:\n    if ( !v20 )\n    {\nLABEL_7:\n      v15 = 22;\n      v16 = -22;\n      goto LABEL_8;\n    }\nLABEL_13:\n    v16 = -v20;\n    goto LABEL_14;\n  }\n  if ( v20 && v18 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n    goto LABEL_13;\n  if ( !endptr || !*endptr )\n  {\n    v16 = 0;\n    *a4 = v18;\n    return v16;\n  }\n  v21 = 0;\n  v49 = 0LL;\n  while ( 1 )\n  {\n    v22 = v19[1];\n    if ( v22 == 105 )\n    {\n      if ( (v19[2] & 0xDF) == 66 && !v19[3] )\n      {\nLABEL_37:\n        v27 = 1024;\n        goto LABEL_38;\n      }\n      goto LABEL_23;\n    }\n    if ( (v22 & 0xDF) == 66 && !v19[2] )\n      break;\n    if ( !v22 )\n      goto LABEL_37;\nLABEL_23:\n    v23 = localeconv();\n    if ( !v23 )\n      goto LABEL_7;\n    if ( !v23->decimal_point )\n      goto LABEL_7;\n    s1 = v23->decimal_point;\n    v24 = strlen(v23->decimal_point);\n    if ( v49 )\n      goto LABEL_7;\n    if ( !*v19 )\n      goto LABEL_7;\n    v46 = v24;\n    if ( strncmp(s1, v19, v24) )\n      goto LABEL_7;\n    v25 = &v19[v46];\n    for ( i = v19[v46]; (_BYTE)i == 48; ++v21 )\n      i = *++v25;\n    if ( (*v12)[i] & 0x800 )\n    {\n      *v9 = 0;\n      v38 = v25;\n      endptr = 0LL;\n      v39 = __strtoul_internal(v25, &endptr, 0, 0);\n      v19 = endptr;\n      v49 = v39;\n      v20 = *v9;\n      if ( endptr == v38 )\n        goto LABEL_33;\n      if ( v20 )\n      {\n        if ( v39 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n          goto LABEL_13;\n        goto LABEL_62;\n      }\n      if ( v39 )\n      {\nLABEL_62:\n        if ( !endptr || !*endptr )\n          goto LABEL_7;\n      }\n    }\n    else\n    {\n      endptr = v25;\n      v19 = v25;\n    }\n  }\n  v27 = 1000;\nLABEL_38:\n  v28 = *v19;\n  v29 = strchr(\"KMGTPEZY\", v28);\n  if ( v29 )\n  {\n    v30 = (unsigned __int64)(v29 - \"KMGTPEZY\") + 1;\n    goto LABEL_40;\n  }\n  v45 = strchr(\"kmgtpezy\", v28);\n  if ( !v45 )\n    goto LABEL_7;\n  v30 = (unsigned __int64)(v45 - \"kmgtpezy\") + 1;\nLABEL_40:\n  if ( v30 )\n  {\n    if ( is_mul_ok(v27, v48) )\n    {\n      v31 = 0;\n      while ( 1 )\n      {\n        v48 *= v27;\n        if ( v30 - 1 == v31 )\n          break;\n        ++v31;\n        if ( !is_mul_ok(v27, v48) )\n          goto LABEL_77;\n      }\n      v16 = 0;\n    }\n    else\n    {\nLABEL_77:\n      v16 = -34;\n    }\n    if ( v49 )\n    {\n      v32 = v30 - 1;\n      v33 = 0;\n      v34 = 1LL;\n      do\n      {\n        v34 *= v27;\n        if ( v33 == v32 )\n          break;\n        ++v33;\n      }\n      while ( is_mul_ok(v27, v34) );\n      if ( v49 <= 0xA )\n      {\n        v36 = v49;\n        v35 = 10LL;\n      }\n      else\n      {\n        v35 = 10LL;\n        while ( 1 )\n        {\n          v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v49 >> 64) >> 3;\n          if ( v35 > 0x1999999999999999LL )\n            break;\n          v35 *= 10LL;\n          if ( v35 >= v49 )\n          {\n            v36 = v49;\n            break;\n          }\n        }\n      }\n      if ( v21 )\n      {\n        v37 = 0;\n        do\n        {\n          if ( v35 <= 0x1999999999999999LL )\n            v35 *= 10LL;\n          else\n            v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n          ++v37;\n        }\n        while ( v21 != v37 );\n      }\n      v40 = 1LL;\n      do\n      {\n        v41 = 10 * v40;\n        v42 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        v43 = v36 - 10 * v42;\n        v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        if ( v43 )\n        {\n          v44 = v35 / v40 / v43;\n          if ( v44 )\n            v48 += v34 / v44;\n        }\n        v40 = v41;\n      }\n      while ( v42 );\n    }\n    *v8 = v48;\nLABEL_14:\n    if ( (v16 & 0x80000000) != 0 )\n    {\n      v15 = -v16;\nLABEL_8:\n      *v9 = v15;\n    }\n  }\n  else\n  {\n    v16 = 0;\n    *a4 = v48;\n  }\n  return v16;\n}\n\n// write access to const memory has been detected, the output may be wrong!\n__int64 __usercall sub_8D30@<rax>(char *nptr@<rdi>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned __int64 *a4@<rsi>, __int64 a5@<r12>, __int64 a6@<r13>, __int64 a7@<r14>, __int64 a8@<r15>)\n{\n  unsigned __int64 *v8; // rbp\n  int *v9; // rbx\n  unsigned __int8 v10; // r14\n  const unsigned __int16 **v11; // rax\n  const unsigned __int16 **v12; // r13\n  const unsigned __int16 *v13; // rcx\n  char *v14; // rax\n  int v15; // eax\n  unsigned int v16; // ecx\n  unsigned __int64 v18; // rax\n  char *v19; // r14\n  int v20; // ecx\n  int v21; // er15\n  char v22; // al\n  struct lconv *v23; // rax\n  size_t v24; // rax\n  char *v25; // r8\n  __int64 i; // rax\n  signed int v27; // er13\n  int v28; // er14\n  char *v29; // rax\n  int v30; // edi\n  int v31; // ecx\n  int v32; // edi\n  int v33; // er8\n  unsigned __int64 v34; // r10\n  unsigned __int64 v35; // rdi\n  unsigned __int64 v36; // r8\n  int v37; // esi\n  char *v38; // ST08_8\n  unsigned __int64 v39; // rax\n  unsigned __int64 v40; // r9\n  signed __int64 v41; // r11\n  unsigned __int64 v42; // rsi\n  unsigned __int64 v43; // r13\n  unsigned __int64 v44; // r9\n  char *v45; // rax\n  size_t v46; // [rsp+0h] [rbp-70h]\n  char *s1; // [rsp+8h] [rbp-68h]\n  unsigned __int64 v48; // [rsp+10h] [rbp-60h]\n  unsigned __int64 v49; // [rsp+18h] [rbp-58h]\n  char *endptr; // [rsp+28h] [rbp-48h]\n  unsigned __int64 v51; // [rsp+30h] [rbp-40h]\n  __int64 v52; // [rsp+40h] [rbp-30h]\n  __int64 v53; // [rsp+48h] [rbp-28h]\n  __int64 v54; // [rsp+50h] [rbp-20h]\n  __int64 v55; // [rsp+58h] [rbp-18h]\n  __int64 v56; // [rsp+60h] [rbp-10h]\n  __int64 v57; // [rsp+68h] [rbp-8h]\n\n  v57 = a8;\n  v56 = a7;\n  v55 = a6;\n  v54 = a5;\n  v53 = a3;\n  v52 = a2;\n  v8 = a4;\n  *a4 = 0LL;\n  v51 = __readfsqword(0x28u);\n  v9 = __errno_location();\n  if ( !nptr )\n    goto LABEL_7;\n  v10 = *nptr;\n  if ( !*nptr )\n    goto LABEL_7;\n  v11 = __ctype_b_loc();\n  v12 = v11;\n  v13 = *v11;\n  v14 = nptr;\n  while ( v13[v10] & 0x2000 )\n    v10 = *++v14;\n  if ( v10 == 45 )\n    goto LABEL_7;\n  *v9 = 0;\n  endptr = 0LL;\n  v18 = __strtoul_internal(nptr, &endptr, 0, 0);\n  v19 = endptr;\n  v48 = v18;\n  v20 = *v9;\n  if ( endptr == nptr )\n  {\nLABEL_33:\n    if ( !v20 )\n    {\nLABEL_7:\n      v15 = 22;\n      v16 = -22;\n      goto LABEL_8;\n    }\nLABEL_13:\n    v16 = -v20;\n    goto LABEL_14;\n  }\n  if ( v20 && v18 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n    goto LABEL_13;\n  if ( !endptr || !*endptr )\n  {\n    v16 = 0;\n    *a4 = v18;\n    return v16;\n  }\n  v21 = 0;\n  v49 = 0LL;\n  while ( 1 )\n  {\n    v22 = v19[1];\n    if ( v22 == 105 )\n    {\n      if ( (v19[2] & 0xDF) == 66 && !v19[3] )\n      {\nLABEL_37:\n        v27 = 1024;\n        goto LABEL_38;\n      }\n      goto LABEL_23;\n    }\n    if ( (v22 & 0xDF) == 66 && !v19[2] )\n      break;\n    if ( !v22 )\n      goto LABEL_37;\nLABEL_23:\n    v23 = localeconv();\n    if ( !v23 )\n      goto LABEL_7;\n    if ( !v23->decimal_point )\n      goto LABEL_7;\n    s1 = v23->decimal_point;\n    v24 = strlen(v23->decimal_point);\n    if ( v49 )\n      goto LABEL_7;\n    if ( !*v19 )\n      goto LABEL_7;\n    v46 = v24;\n    if ( strncmp(s1, v19, v24) )\n      goto LABEL_7;\n    v25 = &v19[v46];\n    for ( i = v19[v46]; (_BYTE)i == 48; ++v21 )\n      i = *++v25;\n    if ( (*v12)[i] & 0x800 )\n    {\n      *v9 = 0;\n      v38 = v25;\n      endptr = 0LL;\n      v39 = __strtoul_internal(v25, &endptr, 0, 0);\n      v19 = endptr;\n      v49 = v39;\n      v20 = *v9;\n      if ( endptr == v38 )\n        goto LABEL_33;\n      if ( v20 )\n      {\n        if ( v39 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n          goto LABEL_13;\n        goto LABEL_62;\n      }\n      if ( v39 )\n      {\nLABEL_62:\n        if ( !endptr || !*endptr )\n          goto LABEL_7;\n      }\n    }\n    else\n    {\n      endptr = v25;\n      v19 = v25;\n    }\n  }\n  v27 = 1000;\nLABEL_38:\n  v28 = *v19;\n  v29 = strchr(\"KMGTPEZY\", v28);\n  if ( v29 )\n  {\n    v30 = (unsigned __int64)(v29 - \"KMGTPEZY\") + 1;\n    goto LABEL_40;\n  }\n  v45 = strchr(\"kmgtpezy\", v28);\n  if ( !v45 )\n    goto LABEL_7;\n  v30 = (unsigned __int64)(v45 - \"kmgtpezy\") + 1;\nLABEL_40:\n  if ( v30 )\n  {\n    if ( is_mul_ok(v27, v48) )\n    {\n      v31 = 0;\n      while ( 1 )\n      {\n        v48 *= v27;\n        if ( v30 - 1 == v31 )\n          break;\n        ++v31;\n        if ( !is_mul_ok(v27, v48) )\n          goto LABEL_77;\n      }\n      v16 = 0;\n    }\n    else\n    {\nLABEL_77:\n      v16 = -34;\n    }\n    if ( v49 )\n    {\n      v32 = v30 - 1;\n      v33 = 0;\n      v34 = 1LL;\n      do\n      {\n        v34 *= v27;\n        if ( v33 == v32 )\n          break;\n        ++v33;\n      }\n      while ( is_mul_ok(v27, v34) );\n      if ( v49 <= 0xA )\n      {\n        v36 = v49;\n        v35 = 10LL;\n      }\n      else\n      {\n        v35 = 10LL;\n        while ( 1 )\n        {\n          v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v49 >> 64) >> 3;\n          if ( v35 > 0x1999999999999999LL )\n            break;\n          v35 *= 10LL;\n          if ( v35 >= v49 )\n          {\n            v36 = v49;\n            break;\n          }\n        }\n      }\n      if ( v21 )\n      {\n        v37 = 0;\n        do\n        {\n          if ( v35 <= 0x1999999999999999LL )\n            v35 *= 10LL;\n          else\n            v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n          ++v37;\n        }\n        while ( v21 != v37 );\n      }\n      v40 = 1LL;\n      do\n      {\n        v41 = 10 * v40;\n        v42 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        v43 = v36 - 10 * v42;\n        v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        if ( v43 )\n        {\n          v44 = v35 / v40 / v43;\n          if ( v44 )\n            v48 += v34 / v44;\n        }\n        v40 = v41;\n      }\n      while ( v42 );\n    }\n    *v8 = v48;\nLABEL_14:\n    if ( (v16 & 0x80000000) != 0 )\n    {\n      v15 = -v16;\nLABEL_8:\n      *v9 = v15;\n    }\n  }\n  else\n  {\n    v16 = 0;\n    *a4 = v48;\n  }\n  return v16;\n}\n\n// write access to const memory has been detected, the output may be wrong!\n__int64 __usercall sub_8D30@<rax>(char *nptr@<rdi>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned __int64 *a4@<rsi>, __int64 a5@<r12>, __int64 a6@<r13>, __int64 a7@<r14>, __int64 a8@<r15>)\n{\n  unsigned __int64 *v8; // rbp\n  int *v9; // rbx\n  unsigned __int8 v10; // r14\n  const unsigned __int16 **v11; // rax\n  const unsigned __int16 **v12; // r13\n  const unsigned __int16 *v13; // rcx\n  char *v14; // rax\n  int v15; // eax\n  unsigned int v16; // ecx\n  unsigned __int64 v18; // rax\n  char *v19; // r14\n  int v20; // ecx\n  int v21; // er15\n  char v22; // al\n  struct lconv *v23; // rax\n  size_t v24; // rax\n  char *v25; // r8\n  __int64 i; // rax\n  signed int v27; // er13\n  int v28; // er14\n  char *v29; // rax\n  int v30; // edi\n  int v31; // ecx\n  int v32; // edi\n  int v33; // er8\n  unsigned __int64 v34; // r10\n  unsigned __int64 v35; // rdi\n  unsigned __int64 v36; // r8\n  int v37; // esi\n  char *v38; // ST08_8\n  unsigned __int64 v39; // rax\n  unsigned __int64 v40; // r9\n  signed __int64 v41; // r11\n  unsigned __int64 v42; // rsi\n  unsigned __int64 v43; // r13\n  unsigned __int64 v44; // r9\n  char *v45; // rax\n  size_t v46; // [rsp+0h] [rbp-70h]\n  char *s1; // [rsp+8h] [rbp-68h]\n  unsigned __int64 v48; // [rsp+10h] [rbp-60h]\n  unsigned __int64 v49; // [rsp+18h] [rbp-58h]\n  char *endptr; // [rsp+28h] [rbp-48h]\n  unsigned __int64 v51; // [rsp+30h] [rbp-40h]\n  __int64 v52; // [rsp+40h] [rbp-30h]\n  __int64 v53; // [rsp+48h] [rbp-28h]\n  __int64 v54; // [rsp+50h] [rbp-20h]\n  __int64 v55; // [rsp+58h] [rbp-18h]\n  __int64 v56; // [rsp+60h] [rbp-10h]\n  __int64 v57; // [rsp+68h] [rbp-8h]\n\n  v57 = a8;\n  v56 = a7;\n  v55 = a6;\n  v54 = a5;\n  v53 = a3;\n  v52 = a2;\n  v8 = a4;\n  *a4 = 0LL;\n  v51 = __readfsqword(0x28u);\n  v9 = __errno_location();\n  if ( !nptr )\n    goto LABEL_7;\n  v10 = *nptr;\n  if ( !*nptr )\n    goto LABEL_7;\n  v11 = __ctype_b_loc();\n  v12 = v11;\n  v13 = *v11;\n  v14 = nptr;\n  while ( v13[v10] & 0x2000 )\n    v10 = *++v14;\n  if ( v10 == 45 )\n    goto LABEL_7;\n  *v9 = 0;\n  endptr = 0LL;\n  v18 = __strtoul_internal(nptr, &endptr, 0, 0);\n  v19 = endptr;\n  v48 = v18;\n  v20 = *v9;\n  if ( endptr == nptr )\n  {\nLABEL_33:\n    if ( !v20 )\n    {\nLABEL_7:\n      v15 = 22;\n      v16 = -22;\n      goto LABEL_8;\n    }\nLABEL_13:\n    v16 = -v20;\n    goto LABEL_14;\n  }\n  if ( v20 && v18 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n    goto LABEL_13;\n  if ( !endptr || !*endptr )\n  {\n    v16 = 0;\n    *a4 = v18;\n    return v16;\n  }\n  v21 = 0;\n  v49 = 0LL;\n  while ( 1 )\n  {\n    v22 = v19[1];\n    if ( v22 == 105 )\n    {\n      if ( (v19[2] & 0xDF) == 66 && !v19[3] )\n      {\nLABEL_37:\n        v27 = 1024;\n        goto LABEL_38;\n      }\n      goto LABEL_23;\n    }\n    if ( (v22 & 0xDF) == 66 && !v19[2] )\n      break;\n    if ( !v22 )\n      goto LABEL_37;\nLABEL_23:\n    v23 = localeconv();\n    if ( !v23 )\n      goto LABEL_7;\n    if ( !v23->decimal_point )\n      goto LABEL_7;\n    s1 = v23->decimal_point;\n    v24 = strlen(v23->decimal_point);\n    if ( v49 )\n      goto LABEL_7;\n    if ( !*v19 )\n      goto LABEL_7;\n    v46 = v24;\n    if ( strncmp(s1, v19, v24) )\n      goto LABEL_7;\n    v25 = &v19[v46];\n    for ( i = v19[v46]; (_BYTE)i == 48; ++v21 )\n      i = *++v25;\n    if ( (*v12)[i] & 0x800 )\n    {\n      *v9 = 0;\n      v38 = v25;\n      endptr = 0LL;\n      v39 = __strtoul_internal(v25, &endptr, 0, 0);\n      v19 = endptr;\n      v49 = v39;\n      v20 = *v9;\n      if ( endptr == v38 )\n        goto LABEL_33;\n      if ( v20 )\n      {\n        if ( v39 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n          goto LABEL_13;\n        goto LABEL_62;\n      }\n      if ( v39 )\n      {\nLABEL_62:\n        if ( !endptr || !*endptr )\n          goto LABEL_7;\n      }\n    }\n    else\n    {\n      endptr = v25;\n      v19 = v25;\n    }\n  }\n  v27 = 1000;\nLABEL_38:\n  v28 = *v19;\n  v29 = strchr(\"KMGTPEZY\", v28);\n  if ( v29 )\n  {\n    v30 = (unsigned __int64)(v29 - \"KMGTPEZY\") + 1;\n    goto LABEL_40;\n  }\n  v45 = strchr(\"kmgtpezy\", v28);\n  if ( !v45 )\n    goto LABEL_7;\n  v30 = (unsigned __int64)(v45 - \"kmgtpezy\") + 1;\nLABEL_40:\n  if ( v30 )\n  {\n    if ( is_mul_ok(v27, v48) )\n    {\n      v31 = 0;\n      while ( 1 )\n      {\n        v48 *= v27;\n        if ( v30 - 1 == v31 )\n          break;\n        ++v31;\n        if ( !is_mul_ok(v27, v48) )\n          goto LABEL_77;\n      }\n      v16 = 0;\n    }\n    else\n    {\nLABEL_77:\n      v16 = -34;\n    }\n    if ( v49 )\n    {\n      v32 = v30 - 1;\n      v33 = 0;\n      v34 = 1LL;\n      do\n      {\n        v34 *= v27;\n        if ( v33 == v32 )\n          break;\n        ++v33;\n      }\n      while ( is_mul_ok(v27, v34) );\n      if ( v49 <= 0xA )\n      {\n        v36 = v49;\n        v35 = 10LL;\n      }\n      else\n      {\n        v35 = 10LL;\n        while ( 1 )\n        {\n          v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v49 >> 64) >> 3;\n          if ( v35 > 0x1999999999999999LL )\n            break;\n          v35 *= 10LL;\n          if ( v35 >= v49 )\n          {\n            v36 = v49;\n            break;\n          }\n        }\n      }\n      if ( v21 )\n      {\n        v37 = 0;\n        do\n        {\n          if ( v35 <= 0x1999999999999999LL )\n            v35 *= 10LL;\n          else\n            v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n          ++v37;\n        }\n        while ( v21 != v37 );\n      }\n      v40 = 1LL;\n      do\n      {\n        v41 = 10 * v40;\n        v42 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        v43 = v36 - 10 * v42;\n        v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        if ( v43 )\n        {\n          v44 = v35 / v40 / v43;\n          if ( v44 )\n            v48 += v34 / v44;\n        }\n        v40 = v41;\n      }\n      while ( v42 );\n    }\n    *v8 = v48;\nLABEL_14:\n    if ( (v16 & 0x80000000) != 0 )\n    {\n      v15 = -v16;\nLABEL_8:\n      *v9 = v15;\n    }\n  }\n  else\n  {\n    v16 = 0;\n    *a4 = v48;\n  }\n  return v16;\n}\n", 
            "funcStartAddr": "0x8c38L", 
            "funcEndAddr": "0x8d29L", 
            "funcName": "sub_8D30"
        }, 
        {
            "decompiledFuncCode": "// write access to const memory has been detected, the output may be wrong!\n__int64 __usercall sub_8D30@<rax>(char *nptr@<rdi>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned __int64 *a4@<rsi>, __int64 a5@<r12>, __int64 a6@<r13>, __int64 a7@<r14>, __int64 a8@<r15>)\n{\n  unsigned __int64 *v8; // rbp\n  int *v9; // rbx\n  unsigned __int8 v10; // r14\n  const unsigned __int16 **v11; // rax\n  const unsigned __int16 **v12; // r13\n  const unsigned __int16 *v13; // rcx\n  char *v14; // rax\n  int v15; // eax\n  unsigned int v16; // ecx\n  unsigned __int64 v18; // rax\n  char *v19; // r14\n  int v20; // ecx\n  int v21; // er15\n  char v22; // al\n  struct lconv *v23; // rax\n  size_t v24; // rax\n  char *v25; // r8\n  __int64 i; // rax\n  signed int v27; // er13\n  int v28; // er14\n  char *v29; // rax\n  int v30; // edi\n  int v31; // ecx\n  int v32; // edi\n  int v33; // er8\n  unsigned __int64 v34; // r10\n  unsigned __int64 v35; // rdi\n  unsigned __int64 v36; // r8\n  int v37; // esi\n  char *v38; // ST08_8\n  unsigned __int64 v39; // rax\n  unsigned __int64 v40; // r9\n  signed __int64 v41; // r11\n  unsigned __int64 v42; // rsi\n  unsigned __int64 v43; // r13\n  unsigned __int64 v44; // r9\n  char *v45; // rax\n  size_t v46; // [rsp+0h] [rbp-70h]\n  char *s1; // [rsp+8h] [rbp-68h]\n  unsigned __int64 v48; // [rsp+10h] [rbp-60h]\n  unsigned __int64 v49; // [rsp+18h] [rbp-58h]\n  char *endptr; // [rsp+28h] [rbp-48h]\n  unsigned __int64 v51; // [rsp+30h] [rbp-40h]\n  __int64 v52; // [rsp+40h] [rbp-30h]\n  __int64 v53; // [rsp+48h] [rbp-28h]\n  __int64 v54; // [rsp+50h] [rbp-20h]\n  __int64 v55; // [rsp+58h] [rbp-18h]\n  __int64 v56; // [rsp+60h] [rbp-10h]\n  __int64 v57; // [rsp+68h] [rbp-8h]\n\n  v57 = a8;\n  v56 = a7;\n  v55 = a6;\n  v54 = a5;\n  v53 = a3;\n  v52 = a2;\n  v8 = a4;\n  *a4 = 0LL;\n  v51 = __readfsqword(0x28u);\n  v9 = __errno_location();\n  if ( !nptr )\n    goto LABEL_7;\n  v10 = *nptr;\n  if ( !*nptr )\n    goto LABEL_7;\n  v11 = __ctype_b_loc();\n  v12 = v11;\n  v13 = *v11;\n  v14 = nptr;\n  while ( v13[v10] & 0x2000 )\n    v10 = *++v14;\n  if ( v10 == 45 )\n    goto LABEL_7;\n  *v9 = 0;\n  endptr = 0LL;\n  v18 = __strtoul_internal(nptr, &endptr, 0, 0);\n  v19 = endptr;\n  v48 = v18;\n  v20 = *v9;\n  if ( endptr == nptr )\n  {\nLABEL_33:\n    if ( !v20 )\n    {\nLABEL_7:\n      v15 = 22;\n      v16 = -22;\n      goto LABEL_8;\n    }\nLABEL_13:\n    v16 = -v20;\n    goto LABEL_14;\n  }\n  if ( v20 && v18 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n    goto LABEL_13;\n  if ( !endptr || !*endptr )\n  {\n    v16 = 0;\n    *a4 = v18;\n    return v16;\n  }\n  v21 = 0;\n  v49 = 0LL;\n  while ( 1 )\n  {\n    v22 = v19[1];\n    if ( v22 == 105 )\n    {\n      if ( (v19[2] & 0xDF) == 66 && !v19[3] )\n      {\nLABEL_37:\n        v27 = 1024;\n        goto LABEL_38;\n      }\n      goto LABEL_23;\n    }\n    if ( (v22 & 0xDF) == 66 && !v19[2] )\n      break;\n    if ( !v22 )\n      goto LABEL_37;\nLABEL_23:\n    v23 = localeconv();\n    if ( !v23 )\n      goto LABEL_7;\n    if ( !v23->decimal_point )\n      goto LABEL_7;\n    s1 = v23->decimal_point;\n    v24 = strlen(v23->decimal_point);\n    if ( v49 )\n      goto LABEL_7;\n    if ( !*v19 )\n      goto LABEL_7;\n    v46 = v24;\n    if ( strncmp(s1, v19, v24) )\n      goto LABEL_7;\n    v25 = &v19[v46];\n    for ( i = v19[v46]; (_BYTE)i == 48; ++v21 )\n      i = *++v25;\n    if ( (*v12)[i] & 0x800 )\n    {\n      *v9 = 0;\n      v38 = v25;\n      endptr = 0LL;\n      v39 = __strtoul_internal(v25, &endptr, 0, 0);\n      v19 = endptr;\n      v49 = v39;\n      v20 = *v9;\n      if ( endptr == v38 )\n        goto LABEL_33;\n      if ( v20 )\n      {\n        if ( v39 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n          goto LABEL_13;\n        goto LABEL_62;\n      }\n      if ( v39 )\n      {\nLABEL_62:\n        if ( !endptr || !*endptr )\n          goto LABEL_7;\n      }\n    }\n    else\n    {\n      endptr = v25;\n      v19 = v25;\n    }\n  }\n  v27 = 1000;\nLABEL_38:\n  v28 = *v19;\n  v29 = strchr(\"KMGTPEZY\", v28);\n  if ( v29 )\n  {\n    v30 = (unsigned __int64)(v29 - \"KMGTPEZY\") + 1;\n    goto LABEL_40;\n  }\n  v45 = strchr(\"kmgtpezy\", v28);\n  if ( !v45 )\n    goto LABEL_7;\n  v30 = (unsigned __int64)(v45 - \"kmgtpezy\") + 1;\nLABEL_40:\n  if ( v30 )\n  {\n    if ( is_mul_ok(v27, v48) )\n    {\n      v31 = 0;\n      while ( 1 )\n      {\n        v48 *= v27;\n        if ( v30 - 1 == v31 )\n          break;\n        ++v31;\n        if ( !is_mul_ok(v27, v48) )\n          goto LABEL_77;\n      }\n      v16 = 0;\n    }\n    else\n    {\nLABEL_77:\n      v16 = -34;\n    }\n    if ( v49 )\n    {\n      v32 = v30 - 1;\n      v33 = 0;\n      v34 = 1LL;\n      do\n      {\n        v34 *= v27;\n        if ( v33 == v32 )\n          break;\n        ++v33;\n      }\n      while ( is_mul_ok(v27, v34) );\n      if ( v49 <= 0xA )\n      {\n        v36 = v49;\n        v35 = 10LL;\n      }\n      else\n      {\n        v35 = 10LL;\n        while ( 1 )\n        {\n          v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v49 >> 64) >> 3;\n          if ( v35 > 0x1999999999999999LL )\n            break;\n          v35 *= 10LL;\n          if ( v35 >= v49 )\n          {\n            v36 = v49;\n            break;\n          }\n        }\n      }\n      if ( v21 )\n      {\n        v37 = 0;\n        do\n        {\n          if ( v35 <= 0x1999999999999999LL )\n            v35 *= 10LL;\n          else\n            v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n          ++v37;\n        }\n        while ( v21 != v37 );\n      }\n      v40 = 1LL;\n      do\n      {\n        v41 = 10 * v40;\n        v42 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        v43 = v36 - 10 * v42;\n        v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        if ( v43 )\n        {\n          v44 = v35 / v40 / v43;\n          if ( v44 )\n            v48 += v34 / v44;\n        }\n        v40 = v41;\n      }\n      while ( v42 );\n    }\n    *v8 = v48;\nLABEL_14:\n    if ( (v16 & 0x80000000) != 0 )\n    {\n      v15 = -v16;\nLABEL_8:\n      *v9 = v15;\n    }\n  }\n  else\n  {\n    v16 = 0;\n    *a4 = v48;\n  }\n  return v16;\n}\n\n// write access to const memory has been detected, the output may be wrong!\n__int64 __usercall sub_8D30@<rax>(char *nptr@<rdi>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned __int64 *a4@<rsi>, __int64 a5@<r12>, __int64 a6@<r13>, __int64 a7@<r14>, __int64 a8@<r15>)\n{\n  unsigned __int64 *v8; // rbp\n  int *v9; // rbx\n  unsigned __int8 v10; // r14\n  const unsigned __int16 **v11; // rax\n  const unsigned __int16 **v12; // r13\n  const unsigned __int16 *v13; // rcx\n  char *v14; // rax\n  int v15; // eax\n  unsigned int v16; // ecx\n  unsigned __int64 v18; // rax\n  char *v19; // r14\n  int v20; // ecx\n  int v21; // er15\n  char v22; // al\n  struct lconv *v23; // rax\n  size_t v24; // rax\n  char *v25; // r8\n  __int64 i; // rax\n  signed int v27; // er13\n  int v28; // er14\n  char *v29; // rax\n  int v30; // edi\n  int v31; // ecx\n  int v32; // edi\n  int v33; // er8\n  unsigned __int64 v34; // r10\n  unsigned __int64 v35; // rdi\n  unsigned __int64 v36; // r8\n  int v37; // esi\n  char *v38; // ST08_8\n  unsigned __int64 v39; // rax\n  unsigned __int64 v40; // r9\n  signed __int64 v41; // r11\n  unsigned __int64 v42; // rsi\n  unsigned __int64 v43; // r13\n  unsigned __int64 v44; // r9\n  char *v45; // rax\n  size_t v46; // [rsp+0h] [rbp-70h]\n  char *s1; // [rsp+8h] [rbp-68h]\n  unsigned __int64 v48; // [rsp+10h] [rbp-60h]\n  unsigned __int64 v49; // [rsp+18h] [rbp-58h]\n  char *endptr; // [rsp+28h] [rbp-48h]\n  unsigned __int64 v51; // [rsp+30h] [rbp-40h]\n  __int64 v52; // [rsp+40h] [rbp-30h]\n  __int64 v53; // [rsp+48h] [rbp-28h]\n  __int64 v54; // [rsp+50h] [rbp-20h]\n  __int64 v55; // [rsp+58h] [rbp-18h]\n  __int64 v56; // [rsp+60h] [rbp-10h]\n  __int64 v57; // [rsp+68h] [rbp-8h]\n\n  v57 = a8;\n  v56 = a7;\n  v55 = a6;\n  v54 = a5;\n  v53 = a3;\n  v52 = a2;\n  v8 = a4;\n  *a4 = 0LL;\n  v51 = __readfsqword(0x28u);\n  v9 = __errno_location();\n  if ( !nptr )\n    goto LABEL_7;\n  v10 = *nptr;\n  if ( !*nptr )\n    goto LABEL_7;\n  v11 = __ctype_b_loc();\n  v12 = v11;\n  v13 = *v11;\n  v14 = nptr;\n  while ( v13[v10] & 0x2000 )\n    v10 = *++v14;\n  if ( v10 == 45 )\n    goto LABEL_7;\n  *v9 = 0;\n  endptr = 0LL;\n  v18 = __strtoul_internal(nptr, &endptr, 0, 0);\n  v19 = endptr;\n  v48 = v18;\n  v20 = *v9;\n  if ( endptr == nptr )\n  {\nLABEL_33:\n    if ( !v20 )\n    {\nLABEL_7:\n      v15 = 22;\n      v16 = -22;\n      goto LABEL_8;\n    }\nLABEL_13:\n    v16 = -v20;\n    goto LABEL_14;\n  }\n  if ( v20 && v18 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n    goto LABEL_13;\n  if ( !endptr || !*endptr )\n  {\n    v16 = 0;\n    *a4 = v18;\n    return v16;\n  }\n  v21 = 0;\n  v49 = 0LL;\n  while ( 1 )\n  {\n    v22 = v19[1];\n    if ( v22 == 105 )\n    {\n      if ( (v19[2] & 0xDF) == 66 && !v19[3] )\n      {\nLABEL_37:\n        v27 = 1024;\n        goto LABEL_38;\n      }\n      goto LABEL_23;\n    }\n    if ( (v22 & 0xDF) == 66 && !v19[2] )\n      break;\n    if ( !v22 )\n      goto LABEL_37;\nLABEL_23:\n    v23 = localeconv();\n    if ( !v23 )\n      goto LABEL_7;\n    if ( !v23->decimal_point )\n      goto LABEL_7;\n    s1 = v23->decimal_point;\n    v24 = strlen(v23->decimal_point);\n    if ( v49 )\n      goto LABEL_7;\n    if ( !*v19 )\n      goto LABEL_7;\n    v46 = v24;\n    if ( strncmp(s1, v19, v24) )\n      goto LABEL_7;\n    v25 = &v19[v46];\n    for ( i = v19[v46]; (_BYTE)i == 48; ++v21 )\n      i = *++v25;\n    if ( (*v12)[i] & 0x800 )\n    {\n      *v9 = 0;\n      v38 = v25;\n      endptr = 0LL;\n      v39 = __strtoul_internal(v25, &endptr, 0, 0);\n      v19 = endptr;\n      v49 = v39;\n      v20 = *v9;\n      if ( endptr == v38 )\n        goto LABEL_33;\n      if ( v20 )\n      {\n        if ( v39 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n          goto LABEL_13;\n        goto LABEL_62;\n      }\n      if ( v39 )\n      {\nLABEL_62:\n        if ( !endptr || !*endptr )\n          goto LABEL_7;\n      }\n    }\n    else\n    {\n      endptr = v25;\n      v19 = v25;\n    }\n  }\n  v27 = 1000;\nLABEL_38:\n  v28 = *v19;\n  v29 = strchr(\"KMGTPEZY\", v28);\n  if ( v29 )\n  {\n    v30 = (unsigned __int64)(v29 - \"KMGTPEZY\") + 1;\n    goto LABEL_40;\n  }\n  v45 = strchr(\"kmgtpezy\", v28);\n  if ( !v45 )\n    goto LABEL_7;\n  v30 = (unsigned __int64)(v45 - \"kmgtpezy\") + 1;\nLABEL_40:\n  if ( v30 )\n  {\n    if ( is_mul_ok(v27, v48) )\n    {\n      v31 = 0;\n      while ( 1 )\n      {\n        v48 *= v27;\n        if ( v30 - 1 == v31 )\n          break;\n        ++v31;\n        if ( !is_mul_ok(v27, v48) )\n          goto LABEL_77;\n      }\n      v16 = 0;\n    }\n    else\n    {\nLABEL_77:\n      v16 = -34;\n    }\n    if ( v49 )\n    {\n      v32 = v30 - 1;\n      v33 = 0;\n      v34 = 1LL;\n      do\n      {\n        v34 *= v27;\n        if ( v33 == v32 )\n          break;\n        ++v33;\n      }\n      while ( is_mul_ok(v27, v34) );\n      if ( v49 <= 0xA )\n      {\n        v36 = v49;\n        v35 = 10LL;\n      }\n      else\n      {\n        v35 = 10LL;\n        while ( 1 )\n        {\n          v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v49 >> 64) >> 3;\n          if ( v35 > 0x1999999999999999LL )\n            break;\n          v35 *= 10LL;\n          if ( v35 >= v49 )\n          {\n            v36 = v49;\n            break;\n          }\n        }\n      }\n      if ( v21 )\n      {\n        v37 = 0;\n        do\n        {\n          if ( v35 <= 0x1999999999999999LL )\n            v35 *= 10LL;\n          else\n            v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n          ++v37;\n        }\n        while ( v21 != v37 );\n      }\n      v40 = 1LL;\n      do\n      {\n        v41 = 10 * v40;\n        v42 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        v43 = v36 - 10 * v42;\n        v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        if ( v43 )\n        {\n          v44 = v35 / v40 / v43;\n          if ( v44 )\n            v48 += v34 / v44;\n        }\n        v40 = v41;\n      }\n      while ( v42 );\n    }\n    *v8 = v48;\nLABEL_14:\n    if ( (v16 & 0x80000000) != 0 )\n    {\n      v15 = -v16;\nLABEL_8:\n      *v9 = v15;\n    }\n  }\n  else\n  {\n    v16 = 0;\n    *a4 = v48;\n  }\n  return v16;\n}\n\n// write access to const memory has been detected, the output may be wrong!\n__int64 __usercall sub_8D30@<rax>(char *nptr@<rdi>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned __int64 *a4@<rsi>, __int64 a5@<r12>, __int64 a6@<r13>, __int64 a7@<r14>, __int64 a8@<r15>)\n{\n  unsigned __int64 *v8; // rbp\n  int *v9; // rbx\n  unsigned __int8 v10; // r14\n  const unsigned __int16 **v11; // rax\n  const unsigned __int16 **v12; // r13\n  const unsigned __int16 *v13; // rcx\n  char *v14; // rax\n  int v15; // eax\n  unsigned int v16; // ecx\n  unsigned __int64 v18; // rax\n  char *v19; // r14\n  int v20; // ecx\n  int v21; // er15\n  char v22; // al\n  struct lconv *v23; // rax\n  size_t v24; // rax\n  char *v25; // r8\n  __int64 i; // rax\n  signed int v27; // er13\n  int v28; // er14\n  char *v29; // rax\n  int v30; // edi\n  int v31; // ecx\n  int v32; // edi\n  int v33; // er8\n  unsigned __int64 v34; // r10\n  unsigned __int64 v35; // rdi\n  unsigned __int64 v36; // r8\n  int v37; // esi\n  char *v38; // ST08_8\n  unsigned __int64 v39; // rax\n  unsigned __int64 v40; // r9\n  signed __int64 v41; // r11\n  unsigned __int64 v42; // rsi\n  unsigned __int64 v43; // r13\n  unsigned __int64 v44; // r9\n  char *v45; // rax\n  size_t v46; // [rsp+0h] [rbp-70h]\n  char *s1; // [rsp+8h] [rbp-68h]\n  unsigned __int64 v48; // [rsp+10h] [rbp-60h]\n  unsigned __int64 v49; // [rsp+18h] [rbp-58h]\n  char *endptr; // [rsp+28h] [rbp-48h]\n  unsigned __int64 v51; // [rsp+30h] [rbp-40h]\n  __int64 v52; // [rsp+40h] [rbp-30h]\n  __int64 v53; // [rsp+48h] [rbp-28h]\n  __int64 v54; // [rsp+50h] [rbp-20h]\n  __int64 v55; // [rsp+58h] [rbp-18h]\n  __int64 v56; // [rsp+60h] [rbp-10h]\n  __int64 v57; // [rsp+68h] [rbp-8h]\n\n  v57 = a8;\n  v56 = a7;\n  v55 = a6;\n  v54 = a5;\n  v53 = a3;\n  v52 = a2;\n  v8 = a4;\n  *a4 = 0LL;\n  v51 = __readfsqword(0x28u);\n  v9 = __errno_location();\n  if ( !nptr )\n    goto LABEL_7;\n  v10 = *nptr;\n  if ( !*nptr )\n    goto LABEL_7;\n  v11 = __ctype_b_loc();\n  v12 = v11;\n  v13 = *v11;\n  v14 = nptr;\n  while ( v13[v10] & 0x2000 )\n    v10 = *++v14;\n  if ( v10 == 45 )\n    goto LABEL_7;\n  *v9 = 0;\n  endptr = 0LL;\n  v18 = __strtoul_internal(nptr, &endptr, 0, 0);\n  v19 = endptr;\n  v48 = v18;\n  v20 = *v9;\n  if ( endptr == nptr )\n  {\nLABEL_33:\n    if ( !v20 )\n    {\nLABEL_7:\n      v15 = 22;\n      v16 = -22;\n      goto LABEL_8;\n    }\nLABEL_13:\n    v16 = -v20;\n    goto LABEL_14;\n  }\n  if ( v20 && v18 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n    goto LABEL_13;\n  if ( !endptr || !*endptr )\n  {\n    v16 = 0;\n    *a4 = v18;\n    return v16;\n  }\n  v21 = 0;\n  v49 = 0LL;\n  while ( 1 )\n  {\n    v22 = v19[1];\n    if ( v22 == 105 )\n    {\n      if ( (v19[2] & 0xDF) == 66 && !v19[3] )\n      {\nLABEL_37:\n        v27 = 1024;\n        goto LABEL_38;\n      }\n      goto LABEL_23;\n    }\n    if ( (v22 & 0xDF) == 66 && !v19[2] )\n      break;\n    if ( !v22 )\n      goto LABEL_37;\nLABEL_23:\n    v23 = localeconv();\n    if ( !v23 )\n      goto LABEL_7;\n    if ( !v23->decimal_point )\n      goto LABEL_7;\n    s1 = v23->decimal_point;\n    v24 = strlen(v23->decimal_point);\n    if ( v49 )\n      goto LABEL_7;\n    if ( !*v19 )\n      goto LABEL_7;\n    v46 = v24;\n    if ( strncmp(s1, v19, v24) )\n      goto LABEL_7;\n    v25 = &v19[v46];\n    for ( i = v19[v46]; (_BYTE)i == 48; ++v21 )\n      i = *++v25;\n    if ( (*v12)[i] & 0x800 )\n    {\n      *v9 = 0;\n      v38 = v25;\n      endptr = 0LL;\n      v39 = __strtoul_internal(v25, &endptr, 0, 0);\n      v19 = endptr;\n      v49 = v39;\n      v20 = *v9;\n      if ( endptr == v38 )\n        goto LABEL_33;\n      if ( v20 )\n      {\n        if ( v39 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n          goto LABEL_13;\n        goto LABEL_62;\n      }\n      if ( v39 )\n      {\nLABEL_62:\n        if ( !endptr || !*endptr )\n          goto LABEL_7;\n      }\n    }\n    else\n    {\n      endptr = v25;\n      v19 = v25;\n    }\n  }\n  v27 = 1000;\nLABEL_38:\n  v28 = *v19;\n  v29 = strchr(\"KMGTPEZY\", v28);\n  if ( v29 )\n  {\n    v30 = (unsigned __int64)(v29 - \"KMGTPEZY\") + 1;\n    goto LABEL_40;\n  }\n  v45 = strchr(\"kmgtpezy\", v28);\n  if ( !v45 )\n    goto LABEL_7;\n  v30 = (unsigned __int64)(v45 - \"kmgtpezy\") + 1;\nLABEL_40:\n  if ( v30 )\n  {\n    if ( is_mul_ok(v27, v48) )\n    {\n      v31 = 0;\n      while ( 1 )\n      {\n        v48 *= v27;\n        if ( v30 - 1 == v31 )\n          break;\n        ++v31;\n        if ( !is_mul_ok(v27, v48) )\n          goto LABEL_77;\n      }\n      v16 = 0;\n    }\n    else\n    {\nLABEL_77:\n      v16 = -34;\n    }\n    if ( v49 )\n    {\n      v32 = v30 - 1;\n      v33 = 0;\n      v34 = 1LL;\n      do\n      {\n        v34 *= v27;\n        if ( v33 == v32 )\n          break;\n        ++v33;\n      }\n      while ( is_mul_ok(v27, v34) );\n      if ( v49 <= 0xA )\n      {\n        v36 = v49;\n        v35 = 10LL;\n      }\n      else\n      {\n        v35 = 10LL;\n        while ( 1 )\n        {\n          v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v49 >> 64) >> 3;\n          if ( v35 > 0x1999999999999999LL )\n            break;\n          v35 *= 10LL;\n          if ( v35 >= v49 )\n          {\n            v36 = v49;\n            break;\n          }\n        }\n      }\n      if ( v21 )\n      {\n        v37 = 0;\n        do\n        {\n          if ( v35 <= 0x1999999999999999LL )\n            v35 *= 10LL;\n          else\n            v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n          ++v37;\n        }\n        while ( v21 != v37 );\n      }\n      v40 = 1LL;\n      do\n      {\n        v41 = 10 * v40;\n        v42 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        v43 = v36 - 10 * v42;\n        v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        if ( v43 )\n        {\n          v44 = v35 / v40 / v43;\n          if ( v44 )\n            v48 += v34 / v44;\n        }\n        v40 = v41;\n      }\n      while ( v42 );\n    }\n    *v8 = v48;\nLABEL_14:\n    if ( (v16 & 0x80000000) != 0 )\n    {\n      v15 = -v16;\nLABEL_8:\n      *v9 = v15;\n    }\n  }\n  else\n  {\n    v16 = 0;\n    *a4 = v48;\n  }\n  return v16;\n}\n\n// write access to const memory has been detected, the output may be wrong!\n__int64 __usercall sub_8D30@<rax>(char *nptr@<rdi>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned __int64 *a4@<rsi>, __int64 a5@<r12>, __int64 a6@<r13>, __int64 a7@<r14>, __int64 a8@<r15>)\n{\n  unsigned __int64 *v8; // rbp\n  int *v9; // rbx\n  unsigned __int8 v10; // r14\n  const unsigned __int16 **v11; // rax\n  const unsigned __int16 **v12; // r13\n  const unsigned __int16 *v13; // rcx\n  char *v14; // rax\n  int v15; // eax\n  unsigned int v16; // ecx\n  unsigned __int64 v18; // rax\n  char *v19; // r14\n  int v20; // ecx\n  int v21; // er15\n  char v22; // al\n  struct lconv *v23; // rax\n  size_t v24; // rax\n  char *v25; // r8\n  __int64 i; // rax\n  signed int v27; // er13\n  int v28; // er14\n  char *v29; // rax\n  int v30; // edi\n  int v31; // ecx\n  int v32; // edi\n  int v33; // er8\n  unsigned __int64 v34; // r10\n  unsigned __int64 v35; // rdi\n  unsigned __int64 v36; // r8\n  int v37; // esi\n  char *v38; // ST08_8\n  unsigned __int64 v39; // rax\n  unsigned __int64 v40; // r9\n  signed __int64 v41; // r11\n  unsigned __int64 v42; // rsi\n  unsigned __int64 v43; // r13\n  unsigned __int64 v44; // r9\n  char *v45; // rax\n  size_t v46; // [rsp+0h] [rbp-70h]\n  char *s1; // [rsp+8h] [rbp-68h]\n  unsigned __int64 v48; // [rsp+10h] [rbp-60h]\n  unsigned __int64 v49; // [rsp+18h] [rbp-58h]\n  char *endptr; // [rsp+28h] [rbp-48h]\n  unsigned __int64 v51; // [rsp+30h] [rbp-40h]\n  __int64 v52; // [rsp+40h] [rbp-30h]\n  __int64 v53; // [rsp+48h] [rbp-28h]\n  __int64 v54; // [rsp+50h] [rbp-20h]\n  __int64 v55; // [rsp+58h] [rbp-18h]\n  __int64 v56; // [rsp+60h] [rbp-10h]\n  __int64 v57; // [rsp+68h] [rbp-8h]\n\n  v57 = a8;\n  v56 = a7;\n  v55 = a6;\n  v54 = a5;\n  v53 = a3;\n  v52 = a2;\n  v8 = a4;\n  *a4 = 0LL;\n  v51 = __readfsqword(0x28u);\n  v9 = __errno_location();\n  if ( !nptr )\n    goto LABEL_7;\n  v10 = *nptr;\n  if ( !*nptr )\n    goto LABEL_7;\n  v11 = __ctype_b_loc();\n  v12 = v11;\n  v13 = *v11;\n  v14 = nptr;\n  while ( v13[v10] & 0x2000 )\n    v10 = *++v14;\n  if ( v10 == 45 )\n    goto LABEL_7;\n  *v9 = 0;\n  endptr = 0LL;\n  v18 = __strtoul_internal(nptr, &endptr, 0, 0);\n  v19 = endptr;\n  v48 = v18;\n  v20 = *v9;\n  if ( endptr == nptr )\n  {\nLABEL_33:\n    if ( !v20 )\n    {\nLABEL_7:\n      v15 = 22;\n      v16 = -22;\n      goto LABEL_8;\n    }\nLABEL_13:\n    v16 = -v20;\n    goto LABEL_14;\n  }\n  if ( v20 && v18 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n    goto LABEL_13;\n  if ( !endptr || !*endptr )\n  {\n    v16 = 0;\n    *a4 = v18;\n    return v16;\n  }\n  v21 = 0;\n  v49 = 0LL;\n  while ( 1 )\n  {\n    v22 = v19[1];\n    if ( v22 == 105 )\n    {\n      if ( (v19[2] & 0xDF) == 66 && !v19[3] )\n      {\nLABEL_37:\n        v27 = 1024;\n        goto LABEL_38;\n      }\n      goto LABEL_23;\n    }\n    if ( (v22 & 0xDF) == 66 && !v19[2] )\n      break;\n    if ( !v22 )\n      goto LABEL_37;\nLABEL_23:\n    v23 = localeconv();\n    if ( !v23 )\n      goto LABEL_7;\n    if ( !v23->decimal_point )\n      goto LABEL_7;\n    s1 = v23->decimal_point;\n    v24 = strlen(v23->decimal_point);\n    if ( v49 )\n      goto LABEL_7;\n    if ( !*v19 )\n      goto LABEL_7;\n    v46 = v24;\n    if ( strncmp(s1, v19, v24) )\n      goto LABEL_7;\n    v25 = &v19[v46];\n    for ( i = v19[v46]; (_BYTE)i == 48; ++v21 )\n      i = *++v25;\n    if ( (*v12)[i] & 0x800 )\n    {\n      *v9 = 0;\n      v38 = v25;\n      endptr = 0LL;\n      v39 = __strtoul_internal(v25, &endptr, 0, 0);\n      v19 = endptr;\n      v49 = v39;\n      v20 = *v9;\n      if ( endptr == v38 )\n        goto LABEL_33;\n      if ( v20 )\n      {\n        if ( v39 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n          goto LABEL_13;\n        goto LABEL_62;\n      }\n      if ( v39 )\n      {\nLABEL_62:\n        if ( !endptr || !*endptr )\n          goto LABEL_7;\n      }\n    }\n    else\n    {\n      endptr = v25;\n      v19 = v25;\n    }\n  }\n  v27 = 1000;\nLABEL_38:\n  v28 = *v19;\n  v29 = strchr(\"KMGTPEZY\", v28);\n  if ( v29 )\n  {\n    v30 = (unsigned __int64)(v29 - \"KMGTPEZY\") + 1;\n    goto LABEL_40;\n  }\n  v45 = strchr(\"kmgtpezy\", v28);\n  if ( !v45 )\n    goto LABEL_7;\n  v30 = (unsigned __int64)(v45 - \"kmgtpezy\") + 1;\nLABEL_40:\n  if ( v30 )\n  {\n    if ( is_mul_ok(v27, v48) )\n    {\n      v31 = 0;\n      while ( 1 )\n      {\n        v48 *= v27;\n        if ( v30 - 1 == v31 )\n          break;\n        ++v31;\n        if ( !is_mul_ok(v27, v48) )\n          goto LABEL_77;\n      }\n      v16 = 0;\n    }\n    else\n    {\nLABEL_77:\n      v16 = -34;\n    }\n    if ( v49 )\n    {\n      v32 = v30 - 1;\n      v33 = 0;\n      v34 = 1LL;\n      do\n      {\n        v34 *= v27;\n        if ( v33 == v32 )\n          break;\n        ++v33;\n      }\n      while ( is_mul_ok(v27, v34) );\n      if ( v49 <= 0xA )\n      {\n        v36 = v49;\n        v35 = 10LL;\n      }\n      else\n      {\n        v35 = 10LL;\n        while ( 1 )\n        {\n          v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v49 >> 64) >> 3;\n          if ( v35 > 0x1999999999999999LL )\n            break;\n          v35 *= 10LL;\n          if ( v35 >= v49 )\n          {\n            v36 = v49;\n            break;\n          }\n        }\n      }\n      if ( v21 )\n      {\n        v37 = 0;\n        do\n        {\n          if ( v35 <= 0x1999999999999999LL )\n            v35 *= 10LL;\n          else\n            v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n          ++v37;\n        }\n        while ( v21 != v37 );\n      }\n      v40 = 1LL;\n      do\n      {\n        v41 = 10 * v40;\n        v42 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        v43 = v36 - 10 * v42;\n        v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        if ( v43 )\n        {\n          v44 = v35 / v40 / v43;\n          if ( v44 )\n            v48 += v34 / v44;\n        }\n        v40 = v41;\n      }\n      while ( v42 );\n    }\n    *v8 = v48;\nLABEL_14:\n    if ( (v16 & 0x80000000) != 0 )\n    {\n      v15 = -v16;\nLABEL_8:\n      *v9 = v15;\n    }\n  }\n  else\n  {\n    v16 = 0;\n    *a4 = v48;\n  }\n  return v16;\n}\n\n// write access to const memory has been detected, the output may be wrong!\n__int64 __usercall sub_8D30@<rax>(char *nptr@<rdi>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned __int64 *a4@<rsi>, __int64 a5@<r12>, __int64 a6@<r13>, __int64 a7@<r14>, __int64 a8@<r15>)\n{\n  unsigned __int64 *v8; // rbp\n  int *v9; // rbx\n  unsigned __int8 v10; // r14\n  const unsigned __int16 **v11; // rax\n  const unsigned __int16 **v12; // r13\n  const unsigned __int16 *v13; // rcx\n  char *v14; // rax\n  int v15; // eax\n  unsigned int v16; // ecx\n  unsigned __int64 v18; // rax\n  char *v19; // r14\n  int v20; // ecx\n  int v21; // er15\n  char v22; // al\n  struct lconv *v23; // rax\n  size_t v24; // rax\n  char *v25; // r8\n  __int64 i; // rax\n  signed int v27; // er13\n  int v28; // er14\n  char *v29; // rax\n  int v30; // edi\n  int v31; // ecx\n  int v32; // edi\n  int v33; // er8\n  unsigned __int64 v34; // r10\n  unsigned __int64 v35; // rdi\n  unsigned __int64 v36; // r8\n  int v37; // esi\n  char *v38; // ST08_8\n  unsigned __int64 v39; // rax\n  unsigned __int64 v40; // r9\n  signed __int64 v41; // r11\n  unsigned __int64 v42; // rsi\n  unsigned __int64 v43; // r13\n  unsigned __int64 v44; // r9\n  char *v45; // rax\n  size_t v46; // [rsp+0h] [rbp-70h]\n  char *s1; // [rsp+8h] [rbp-68h]\n  unsigned __int64 v48; // [rsp+10h] [rbp-60h]\n  unsigned __int64 v49; // [rsp+18h] [rbp-58h]\n  char *endptr; // [rsp+28h] [rbp-48h]\n  unsigned __int64 v51; // [rsp+30h] [rbp-40h]\n  __int64 v52; // [rsp+40h] [rbp-30h]\n  __int64 v53; // [rsp+48h] [rbp-28h]\n  __int64 v54; // [rsp+50h] [rbp-20h]\n  __int64 v55; // [rsp+58h] [rbp-18h]\n  __int64 v56; // [rsp+60h] [rbp-10h]\n  __int64 v57; // [rsp+68h] [rbp-8h]\n\n  v57 = a8;\n  v56 = a7;\n  v55 = a6;\n  v54 = a5;\n  v53 = a3;\n  v52 = a2;\n  v8 = a4;\n  *a4 = 0LL;\n  v51 = __readfsqword(0x28u);\n  v9 = __errno_location();\n  if ( !nptr )\n    goto LABEL_7;\n  v10 = *nptr;\n  if ( !*nptr )\n    goto LABEL_7;\n  v11 = __ctype_b_loc();\n  v12 = v11;\n  v13 = *v11;\n  v14 = nptr;\n  while ( v13[v10] & 0x2000 )\n    v10 = *++v14;\n  if ( v10 == 45 )\n    goto LABEL_7;\n  *v9 = 0;\n  endptr = 0LL;\n  v18 = __strtoul_internal(nptr, &endptr, 0, 0);\n  v19 = endptr;\n  v48 = v18;\n  v20 = *v9;\n  if ( endptr == nptr )\n  {\nLABEL_33:\n    if ( !v20 )\n    {\nLABEL_7:\n      v15 = 22;\n      v16 = -22;\n      goto LABEL_8;\n    }\nLABEL_13:\n    v16 = -v20;\n    goto LABEL_14;\n  }\n  if ( v20 && v18 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n    goto LABEL_13;\n  if ( !endptr || !*endptr )\n  {\n    v16 = 0;\n    *a4 = v18;\n    return v16;\n  }\n  v21 = 0;\n  v49 = 0LL;\n  while ( 1 )\n  {\n    v22 = v19[1];\n    if ( v22 == 105 )\n    {\n      if ( (v19[2] & 0xDF) == 66 && !v19[3] )\n      {\nLABEL_37:\n        v27 = 1024;\n        goto LABEL_38;\n      }\n      goto LABEL_23;\n    }\n    if ( (v22 & 0xDF) == 66 && !v19[2] )\n      break;\n    if ( !v22 )\n      goto LABEL_37;\nLABEL_23:\n    v23 = localeconv();\n    if ( !v23 )\n      goto LABEL_7;\n    if ( !v23->decimal_point )\n      goto LABEL_7;\n    s1 = v23->decimal_point;\n    v24 = strlen(v23->decimal_point);\n    if ( v49 )\n      goto LABEL_7;\n    if ( !*v19 )\n      goto LABEL_7;\n    v46 = v24;\n    if ( strncmp(s1, v19, v24) )\n      goto LABEL_7;\n    v25 = &v19[v46];\n    for ( i = v19[v46]; (_BYTE)i == 48; ++v21 )\n      i = *++v25;\n    if ( (*v12)[i] & 0x800 )\n    {\n      *v9 = 0;\n      v38 = v25;\n      endptr = 0LL;\n      v39 = __strtoul_internal(v25, &endptr, 0, 0);\n      v19 = endptr;\n      v49 = v39;\n      v20 = *v9;\n      if ( endptr == v38 )\n        goto LABEL_33;\n      if ( v20 )\n      {\n        if ( v39 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n          goto LABEL_13;\n        goto LABEL_62;\n      }\n      if ( v39 )\n      {\nLABEL_62:\n        if ( !endptr || !*endptr )\n          goto LABEL_7;\n      }\n    }\n    else\n    {\n      endptr = v25;\n      v19 = v25;\n    }\n  }\n  v27 = 1000;\nLABEL_38:\n  v28 = *v19;\n  v29 = strchr(\"KMGTPEZY\", v28);\n  if ( v29 )\n  {\n    v30 = (unsigned __int64)(v29 - \"KMGTPEZY\") + 1;\n    goto LABEL_40;\n  }\n  v45 = strchr(\"kmgtpezy\", v28);\n  if ( !v45 )\n    goto LABEL_7;\n  v30 = (unsigned __int64)(v45 - \"kmgtpezy\") + 1;\nLABEL_40:\n  if ( v30 )\n  {\n    if ( is_mul_ok(v27, v48) )\n    {\n      v31 = 0;\n      while ( 1 )\n      {\n        v48 *= v27;\n        if ( v30 - 1 == v31 )\n          break;\n        ++v31;\n        if ( !is_mul_ok(v27, v48) )\n          goto LABEL_77;\n      }\n      v16 = 0;\n    }\n    else\n    {\nLABEL_77:\n      v16 = -34;\n    }\n    if ( v49 )\n    {\n      v32 = v30 - 1;\n      v33 = 0;\n      v34 = 1LL;\n      do\n      {\n        v34 *= v27;\n        if ( v33 == v32 )\n          break;\n        ++v33;\n      }\n      while ( is_mul_ok(v27, v34) );\n      if ( v49 <= 0xA )\n      {\n        v36 = v49;\n        v35 = 10LL;\n      }\n      else\n      {\n        v35 = 10LL;\n        while ( 1 )\n        {\n          v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v49 >> 64) >> 3;\n          if ( v35 > 0x1999999999999999LL )\n            break;\n          v35 *= 10LL;\n          if ( v35 >= v49 )\n          {\n            v36 = v49;\n            break;\n          }\n        }\n      }\n      if ( v21 )\n      {\n        v37 = 0;\n        do\n        {\n          if ( v35 <= 0x1999999999999999LL )\n            v35 *= 10LL;\n          else\n            v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n          ++v37;\n        }\n        while ( v21 != v37 );\n      }\n      v40 = 1LL;\n      do\n      {\n        v41 = 10 * v40;\n        v42 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        v43 = v36 - 10 * v42;\n        v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        if ( v43 )\n        {\n          v44 = v35 / v40 / v43;\n          if ( v44 )\n            v48 += v34 / v44;\n        }\n        v40 = v41;\n      }\n      while ( v42 );\n    }\n    *v8 = v48;\nLABEL_14:\n    if ( (v16 & 0x80000000) != 0 )\n    {\n      v15 = -v16;\nLABEL_8:\n      *v9 = v15;\n    }\n  }\n  else\n  {\n    v16 = 0;\n    *a4 = v48;\n  }\n  return v16;\n}\n\n// write access to const memory has been detected, the output may be wrong!\n__int64 __usercall sub_8D30@<rax>(char *nptr@<rdi>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned __int64 *a4@<rsi>, __int64 a5@<r12>, __int64 a6@<r13>, __int64 a7@<r14>, __int64 a8@<r15>)\n{\n  unsigned __int64 *v8; // rbp\n  int *v9; // rbx\n  unsigned __int8 v10; // r14\n  const unsigned __int16 **v11; // rax\n  const unsigned __int16 **v12; // r13\n  const unsigned __int16 *v13; // rcx\n  char *v14; // rax\n  int v15; // eax\n  unsigned int v16; // ecx\n  unsigned __int64 v18; // rax\n  char *v19; // r14\n  int v20; // ecx\n  int v21; // er15\n  char v22; // al\n  struct lconv *v23; // rax\n  size_t v24; // rax\n  char *v25; // r8\n  __int64 i; // rax\n  signed int v27; // er13\n  int v28; // er14\n  char *v29; // rax\n  int v30; // edi\n  int v31; // ecx\n  int v32; // edi\n  int v33; // er8\n  unsigned __int64 v34; // r10\n  unsigned __int64 v35; // rdi\n  unsigned __int64 v36; // r8\n  int v37; // esi\n  char *v38; // ST08_8\n  unsigned __int64 v39; // rax\n  unsigned __int64 v40; // r9\n  signed __int64 v41; // r11\n  unsigned __int64 v42; // rsi\n  unsigned __int64 v43; // r13\n  unsigned __int64 v44; // r9\n  char *v45; // rax\n  size_t v46; // [rsp+0h] [rbp-70h]\n  char *s1; // [rsp+8h] [rbp-68h]\n  unsigned __int64 v48; // [rsp+10h] [rbp-60h]\n  unsigned __int64 v49; // [rsp+18h] [rbp-58h]\n  char *endptr; // [rsp+28h] [rbp-48h]\n  unsigned __int64 v51; // [rsp+30h] [rbp-40h]\n  __int64 v52; // [rsp+40h] [rbp-30h]\n  __int64 v53; // [rsp+48h] [rbp-28h]\n  __int64 v54; // [rsp+50h] [rbp-20h]\n  __int64 v55; // [rsp+58h] [rbp-18h]\n  __int64 v56; // [rsp+60h] [rbp-10h]\n  __int64 v57; // [rsp+68h] [rbp-8h]\n\n  v57 = a8;\n  v56 = a7;\n  v55 = a6;\n  v54 = a5;\n  v53 = a3;\n  v52 = a2;\n  v8 = a4;\n  *a4 = 0LL;\n  v51 = __readfsqword(0x28u);\n  v9 = __errno_location();\n  if ( !nptr )\n    goto LABEL_7;\n  v10 = *nptr;\n  if ( !*nptr )\n    goto LABEL_7;\n  v11 = __ctype_b_loc();\n  v12 = v11;\n  v13 = *v11;\n  v14 = nptr;\n  while ( v13[v10] & 0x2000 )\n    v10 = *++v14;\n  if ( v10 == 45 )\n    goto LABEL_7;\n  *v9 = 0;\n  endptr = 0LL;\n  v18 = __strtoul_internal(nptr, &endptr, 0, 0);\n  v19 = endptr;\n  v48 = v18;\n  v20 = *v9;\n  if ( endptr == nptr )\n  {\nLABEL_33:\n    if ( !v20 )\n    {\nLABEL_7:\n      v15 = 22;\n      v16 = -22;\n      goto LABEL_8;\n    }\nLABEL_13:\n    v16 = -v20;\n    goto LABEL_14;\n  }\n  if ( v20 && v18 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n    goto LABEL_13;\n  if ( !endptr || !*endptr )\n  {\n    v16 = 0;\n    *a4 = v18;\n    return v16;\n  }\n  v21 = 0;\n  v49 = 0LL;\n  while ( 1 )\n  {\n    v22 = v19[1];\n    if ( v22 == 105 )\n    {\n      if ( (v19[2] & 0xDF) == 66 && !v19[3] )\n      {\nLABEL_37:\n        v27 = 1024;\n        goto LABEL_38;\n      }\n      goto LABEL_23;\n    }\n    if ( (v22 & 0xDF) == 66 && !v19[2] )\n      break;\n    if ( !v22 )\n      goto LABEL_37;\nLABEL_23:\n    v23 = localeconv();\n    if ( !v23 )\n      goto LABEL_7;\n    if ( !v23->decimal_point )\n      goto LABEL_7;\n    s1 = v23->decimal_point;\n    v24 = strlen(v23->decimal_point);\n    if ( v49 )\n      goto LABEL_7;\n    if ( !*v19 )\n      goto LABEL_7;\n    v46 = v24;\n    if ( strncmp(s1, v19, v24) )\n      goto LABEL_7;\n    v25 = &v19[v46];\n    for ( i = v19[v46]; (_BYTE)i == 48; ++v21 )\n      i = *++v25;\n    if ( (*v12)[i] & 0x800 )\n    {\n      *v9 = 0;\n      v38 = v25;\n      endptr = 0LL;\n      v39 = __strtoul_internal(v25, &endptr, 0, 0);\n      v19 = endptr;\n      v49 = v39;\n      v20 = *v9;\n      if ( endptr == v38 )\n        goto LABEL_33;\n      if ( v20 )\n      {\n        if ( v39 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n          goto LABEL_13;\n        goto LABEL_62;\n      }\n      if ( v39 )\n      {\nLABEL_62:\n        if ( !endptr || !*endptr )\n          goto LABEL_7;\n      }\n    }\n    else\n    {\n      endptr = v25;\n      v19 = v25;\n    }\n  }\n  v27 = 1000;\nLABEL_38:\n  v28 = *v19;\n  v29 = strchr(\"KMGTPEZY\", v28);\n  if ( v29 )\n  {\n    v30 = (unsigned __int64)(v29 - \"KMGTPEZY\") + 1;\n    goto LABEL_40;\n  }\n  v45 = strchr(\"kmgtpezy\", v28);\n  if ( !v45 )\n    goto LABEL_7;\n  v30 = (unsigned __int64)(v45 - \"kmgtpezy\") + 1;\nLABEL_40:\n  if ( v30 )\n  {\n    if ( is_mul_ok(v27, v48) )\n    {\n      v31 = 0;\n      while ( 1 )\n      {\n        v48 *= v27;\n        if ( v30 - 1 == v31 )\n          break;\n        ++v31;\n        if ( !is_mul_ok(v27, v48) )\n          goto LABEL_77;\n      }\n      v16 = 0;\n    }\n    else\n    {\nLABEL_77:\n      v16 = -34;\n    }\n    if ( v49 )\n    {\n      v32 = v30 - 1;\n      v33 = 0;\n      v34 = 1LL;\n      do\n      {\n        v34 *= v27;\n        if ( v33 == v32 )\n          break;\n        ++v33;\n      }\n      while ( is_mul_ok(v27, v34) );\n      if ( v49 <= 0xA )\n      {\n        v36 = v49;\n        v35 = 10LL;\n      }\n      else\n      {\n        v35 = 10LL;\n        while ( 1 )\n        {\n          v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v49 >> 64) >> 3;\n          if ( v35 > 0x1999999999999999LL )\n            break;\n          v35 *= 10LL;\n          if ( v35 >= v49 )\n          {\n            v36 = v49;\n            break;\n          }\n        }\n      }\n      if ( v21 )\n      {\n        v37 = 0;\n        do\n        {\n          if ( v35 <= 0x1999999999999999LL )\n            v35 *= 10LL;\n          else\n            v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n          ++v37;\n        }\n        while ( v21 != v37 );\n      }\n      v40 = 1LL;\n      do\n      {\n        v41 = 10 * v40;\n        v42 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        v43 = v36 - 10 * v42;\n        v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        if ( v43 )\n        {\n          v44 = v35 / v40 / v43;\n          if ( v44 )\n            v48 += v34 / v44;\n        }\n        v40 = v41;\n      }\n      while ( v42 );\n    }\n    *v8 = v48;\nLABEL_14:\n    if ( (v16 & 0x80000000) != 0 )\n    {\n      v15 = -v16;\nLABEL_8:\n      *v9 = v15;\n    }\n  }\n  else\n  {\n    v16 = 0;\n    *a4 = v48;\n  }\n  return v16;\n}\n\n// write access to const memory has been detected, the output may be wrong!\n__int64 __usercall sub_8D30@<rax>(char *nptr@<rdi>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned __int64 *a4@<rsi>, __int64 a5@<r12>, __int64 a6@<r13>, __int64 a7@<r14>, __int64 a8@<r15>)\n{\n  unsigned __int64 *v8; // rbp\n  int *v9; // rbx\n  unsigned __int8 v10; // r14\n  const unsigned __int16 **v11; // rax\n  const unsigned __int16 **v12; // r13\n  const unsigned __int16 *v13; // rcx\n  char *v14; // rax\n  int v15; // eax\n  unsigned int v16; // ecx\n  unsigned __int64 v18; // rax\n  char *v19; // r14\n  int v20; // ecx\n  int v21; // er15\n  char v22; // al\n  struct lconv *v23; // rax\n  size_t v24; // rax\n  char *v25; // r8\n  __int64 i; // rax\n  signed int v27; // er13\n  int v28; // er14\n  char *v29; // rax\n  int v30; // edi\n  int v31; // ecx\n  int v32; // edi\n  int v33; // er8\n  unsigned __int64 v34; // r10\n  unsigned __int64 v35; // rdi\n  unsigned __int64 v36; // r8\n  int v37; // esi\n  char *v38; // ST08_8\n  unsigned __int64 v39; // rax\n  unsigned __int64 v40; // r9\n  signed __int64 v41; // r11\n  unsigned __int64 v42; // rsi\n  unsigned __int64 v43; // r13\n  unsigned __int64 v44; // r9\n  char *v45; // rax\n  size_t v46; // [rsp+0h] [rbp-70h]\n  char *s1; // [rsp+8h] [rbp-68h]\n  unsigned __int64 v48; // [rsp+10h] [rbp-60h]\n  unsigned __int64 v49; // [rsp+18h] [rbp-58h]\n  char *endptr; // [rsp+28h] [rbp-48h]\n  unsigned __int64 v51; // [rsp+30h] [rbp-40h]\n  __int64 v52; // [rsp+40h] [rbp-30h]\n  __int64 v53; // [rsp+48h] [rbp-28h]\n  __int64 v54; // [rsp+50h] [rbp-20h]\n  __int64 v55; // [rsp+58h] [rbp-18h]\n  __int64 v56; // [rsp+60h] [rbp-10h]\n  __int64 v57; // [rsp+68h] [rbp-8h]\n\n  v57 = a8;\n  v56 = a7;\n  v55 = a6;\n  v54 = a5;\n  v53 = a3;\n  v52 = a2;\n  v8 = a4;\n  *a4 = 0LL;\n  v51 = __readfsqword(0x28u);\n  v9 = __errno_location();\n  if ( !nptr )\n    goto LABEL_7;\n  v10 = *nptr;\n  if ( !*nptr )\n    goto LABEL_7;\n  v11 = __ctype_b_loc();\n  v12 = v11;\n  v13 = *v11;\n  v14 = nptr;\n  while ( v13[v10] & 0x2000 )\n    v10 = *++v14;\n  if ( v10 == 45 )\n    goto LABEL_7;\n  *v9 = 0;\n  endptr = 0LL;\n  v18 = __strtoul_internal(nptr, &endptr, 0, 0);\n  v19 = endptr;\n  v48 = v18;\n  v20 = *v9;\n  if ( endptr == nptr )\n  {\nLABEL_33:\n    if ( !v20 )\n    {\nLABEL_7:\n      v15 = 22;\n      v16 = -22;\n      goto LABEL_8;\n    }\nLABEL_13:\n    v16 = -v20;\n    goto LABEL_14;\n  }\n  if ( v20 && v18 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n    goto LABEL_13;\n  if ( !endptr || !*endptr )\n  {\n    v16 = 0;\n    *a4 = v18;\n    return v16;\n  }\n  v21 = 0;\n  v49 = 0LL;\n  while ( 1 )\n  {\n    v22 = v19[1];\n    if ( v22 == 105 )\n    {\n      if ( (v19[2] & 0xDF) == 66 && !v19[3] )\n      {\nLABEL_37:\n        v27 = 1024;\n        goto LABEL_38;\n      }\n      goto LABEL_23;\n    }\n    if ( (v22 & 0xDF) == 66 && !v19[2] )\n      break;\n    if ( !v22 )\n      goto LABEL_37;\nLABEL_23:\n    v23 = localeconv();\n    if ( !v23 )\n      goto LABEL_7;\n    if ( !v23->decimal_point )\n      goto LABEL_7;\n    s1 = v23->decimal_point;\n    v24 = strlen(v23->decimal_point);\n    if ( v49 )\n      goto LABEL_7;\n    if ( !*v19 )\n      goto LABEL_7;\n    v46 = v24;\n    if ( strncmp(s1, v19, v24) )\n      goto LABEL_7;\n    v25 = &v19[v46];\n    for ( i = v19[v46]; (_BYTE)i == 48; ++v21 )\n      i = *++v25;\n    if ( (*v12)[i] & 0x800 )\n    {\n      *v9 = 0;\n      v38 = v25;\n      endptr = 0LL;\n      v39 = __strtoul_internal(v25, &endptr, 0, 0);\n      v19 = endptr;\n      v49 = v39;\n      v20 = *v9;\n      if ( endptr == v38 )\n        goto LABEL_33;\n      if ( v20 )\n      {\n        if ( v39 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n          goto LABEL_13;\n        goto LABEL_62;\n      }\n      if ( v39 )\n      {\nLABEL_62:\n        if ( !endptr || !*endptr )\n          goto LABEL_7;\n      }\n    }\n    else\n    {\n      endptr = v25;\n      v19 = v25;\n    }\n  }\n  v27 = 1000;\nLABEL_38:\n  v28 = *v19;\n  v29 = strchr(\"KMGTPEZY\", v28);\n  if ( v29 )\n  {\n    v30 = (unsigned __int64)(v29 - \"KMGTPEZY\") + 1;\n    goto LABEL_40;\n  }\n  v45 = strchr(\"kmgtpezy\", v28);\n  if ( !v45 )\n    goto LABEL_7;\n  v30 = (unsigned __int64)(v45 - \"kmgtpezy\") + 1;\nLABEL_40:\n  if ( v30 )\n  {\n    if ( is_mul_ok(v27, v48) )\n    {\n      v31 = 0;\n      while ( 1 )\n      {\n        v48 *= v27;\n        if ( v30 - 1 == v31 )\n          break;\n        ++v31;\n        if ( !is_mul_ok(v27, v48) )\n          goto LABEL_77;\n      }\n      v16 = 0;\n    }\n    else\n    {\nLABEL_77:\n      v16 = -34;\n    }\n    if ( v49 )\n    {\n      v32 = v30 - 1;\n      v33 = 0;\n      v34 = 1LL;\n      do\n      {\n        v34 *= v27;\n        if ( v33 == v32 )\n          break;\n        ++v33;\n      }\n      while ( is_mul_ok(v27, v34) );\n      if ( v49 <= 0xA )\n      {\n        v36 = v49;\n        v35 = 10LL;\n      }\n      else\n      {\n        v35 = 10LL;\n        while ( 1 )\n        {\n          v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v49 >> 64) >> 3;\n          if ( v35 > 0x1999999999999999LL )\n            break;\n          v35 *= 10LL;\n          if ( v35 >= v49 )\n          {\n            v36 = v49;\n            break;\n          }\n        }\n      }\n      if ( v21 )\n      {\n        v37 = 0;\n        do\n        {\n          if ( v35 <= 0x1999999999999999LL )\n            v35 *= 10LL;\n          else\n            v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n          ++v37;\n        }\n        while ( v21 != v37 );\n      }\n      v40 = 1LL;\n      do\n      {\n        v41 = 10 * v40;\n        v42 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        v43 = v36 - 10 * v42;\n        v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        if ( v43 )\n        {\n          v44 = v35 / v40 / v43;\n          if ( v44 )\n            v48 += v34 / v44;\n        }\n        v40 = v41;\n      }\n      while ( v42 );\n    }\n    *v8 = v48;\nLABEL_14:\n    if ( (v16 & 0x80000000) != 0 )\n    {\n      v15 = -v16;\nLABEL_8:\n      *v9 = v15;\n    }\n  }\n  else\n  {\n    v16 = 0;\n    *a4 = v48;\n  }\n  return v16;\n}\n\n// write access to const memory has been detected, the output may be wrong!\n__int64 __usercall sub_8D30@<rax>(char *nptr@<rdi>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned __int64 *a4@<rsi>, __int64 a5@<r12>, __int64 a6@<r13>, __int64 a7@<r14>, __int64 a8@<r15>)\n{\n  unsigned __int64 *v8; // rbp\n  int *v9; // rbx\n  unsigned __int8 v10; // r14\n  const unsigned __int16 **v11; // rax\n  const unsigned __int16 **v12; // r13\n  const unsigned __int16 *v13; // rcx\n  char *v14; // rax\n  int v15; // eax\n  unsigned int v16; // ecx\n  unsigned __int64 v18; // rax\n  char *v19; // r14\n  int v20; // ecx\n  int v21; // er15\n  char v22; // al\n  struct lconv *v23; // rax\n  size_t v24; // rax\n  char *v25; // r8\n  __int64 i; // rax\n  signed int v27; // er13\n  int v28; // er14\n  char *v29; // rax\n  int v30; // edi\n  int v31; // ecx\n  int v32; // edi\n  int v33; // er8\n  unsigned __int64 v34; // r10\n  unsigned __int64 v35; // rdi\n  unsigned __int64 v36; // r8\n  int v37; // esi\n  char *v38; // ST08_8\n  unsigned __int64 v39; // rax\n  unsigned __int64 v40; // r9\n  signed __int64 v41; // r11\n  unsigned __int64 v42; // rsi\n  unsigned __int64 v43; // r13\n  unsigned __int64 v44; // r9\n  char *v45; // rax\n  size_t v46; // [rsp+0h] [rbp-70h]\n  char *s1; // [rsp+8h] [rbp-68h]\n  unsigned __int64 v48; // [rsp+10h] [rbp-60h]\n  unsigned __int64 v49; // [rsp+18h] [rbp-58h]\n  char *endptr; // [rsp+28h] [rbp-48h]\n  unsigned __int64 v51; // [rsp+30h] [rbp-40h]\n  __int64 v52; // [rsp+40h] [rbp-30h]\n  __int64 v53; // [rsp+48h] [rbp-28h]\n  __int64 v54; // [rsp+50h] [rbp-20h]\n  __int64 v55; // [rsp+58h] [rbp-18h]\n  __int64 v56; // [rsp+60h] [rbp-10h]\n  __int64 v57; // [rsp+68h] [rbp-8h]\n\n  v57 = a8;\n  v56 = a7;\n  v55 = a6;\n  v54 = a5;\n  v53 = a3;\n  v52 = a2;\n  v8 = a4;\n  *a4 = 0LL;\n  v51 = __readfsqword(0x28u);\n  v9 = __errno_location();\n  if ( !nptr )\n    goto LABEL_7;\n  v10 = *nptr;\n  if ( !*nptr )\n    goto LABEL_7;\n  v11 = __ctype_b_loc();\n  v12 = v11;\n  v13 = *v11;\n  v14 = nptr;\n  while ( v13[v10] & 0x2000 )\n    v10 = *++v14;\n  if ( v10 == 45 )\n    goto LABEL_7;\n  *v9 = 0;\n  endptr = 0LL;\n  v18 = __strtoul_internal(nptr, &endptr, 0, 0);\n  v19 = endptr;\n  v48 = v18;\n  v20 = *v9;\n  if ( endptr == nptr )\n  {\nLABEL_33:\n    if ( !v20 )\n    {\nLABEL_7:\n      v15 = 22;\n      v16 = -22;\n      goto LABEL_8;\n    }\nLABEL_13:\n    v16 = -v20;\n    goto LABEL_14;\n  }\n  if ( v20 && v18 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n    goto LABEL_13;\n  if ( !endptr || !*endptr )\n  {\n    v16 = 0;\n    *a4 = v18;\n    return v16;\n  }\n  v21 = 0;\n  v49 = 0LL;\n  while ( 1 )\n  {\n    v22 = v19[1];\n    if ( v22 == 105 )\n    {\n      if ( (v19[2] & 0xDF) == 66 && !v19[3] )\n      {\nLABEL_37:\n        v27 = 1024;\n        goto LABEL_38;\n      }\n      goto LABEL_23;\n    }\n    if ( (v22 & 0xDF) == 66 && !v19[2] )\n      break;\n    if ( !v22 )\n      goto LABEL_37;\nLABEL_23:\n    v23 = localeconv();\n    if ( !v23 )\n      goto LABEL_7;\n    if ( !v23->decimal_point )\n      goto LABEL_7;\n    s1 = v23->decimal_point;\n    v24 = strlen(v23->decimal_point);\n    if ( v49 )\n      goto LABEL_7;\n    if ( !*v19 )\n      goto LABEL_7;\n    v46 = v24;\n    if ( strncmp(s1, v19, v24) )\n      goto LABEL_7;\n    v25 = &v19[v46];\n    for ( i = v19[v46]; (_BYTE)i == 48; ++v21 )\n      i = *++v25;\n    if ( (*v12)[i] & 0x800 )\n    {\n      *v9 = 0;\n      v38 = v25;\n      endptr = 0LL;\n      v39 = __strtoul_internal(v25, &endptr, 0, 0);\n      v19 = endptr;\n      v49 = v39;\n      v20 = *v9;\n      if ( endptr == v38 )\n        goto LABEL_33;\n      if ( v20 )\n      {\n        if ( v39 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n          goto LABEL_13;\n        goto LABEL_62;\n      }\n      if ( v39 )\n      {\nLABEL_62:\n        if ( !endptr || !*endptr )\n          goto LABEL_7;\n      }\n    }\n    else\n    {\n      endptr = v25;\n      v19 = v25;\n    }\n  }\n  v27 = 1000;\nLABEL_38:\n  v28 = *v19;\n  v29 = strchr(\"KMGTPEZY\", v28);\n  if ( v29 )\n  {\n    v30 = (unsigned __int64)(v29 - \"KMGTPEZY\") + 1;\n    goto LABEL_40;\n  }\n  v45 = strchr(\"kmgtpezy\", v28);\n  if ( !v45 )\n    goto LABEL_7;\n  v30 = (unsigned __int64)(v45 - \"kmgtpezy\") + 1;\nLABEL_40:\n  if ( v30 )\n  {\n    if ( is_mul_ok(v27, v48) )\n    {\n      v31 = 0;\n      while ( 1 )\n      {\n        v48 *= v27;\n        if ( v30 - 1 == v31 )\n          break;\n        ++v31;\n        if ( !is_mul_ok(v27, v48) )\n          goto LABEL_77;\n      }\n      v16 = 0;\n    }\n    else\n    {\nLABEL_77:\n      v16 = -34;\n    }\n    if ( v49 )\n    {\n      v32 = v30 - 1;\n      v33 = 0;\n      v34 = 1LL;\n      do\n      {\n        v34 *= v27;\n        if ( v33 == v32 )\n          break;\n        ++v33;\n      }\n      while ( is_mul_ok(v27, v34) );\n      if ( v49 <= 0xA )\n      {\n        v36 = v49;\n        v35 = 10LL;\n      }\n      else\n      {\n        v35 = 10LL;\n        while ( 1 )\n        {\n          v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v49 >> 64) >> 3;\n          if ( v35 > 0x1999999999999999LL )\n            break;\n          v35 *= 10LL;\n          if ( v35 >= v49 )\n          {\n            v36 = v49;\n            break;\n          }\n        }\n      }\n      if ( v21 )\n      {\n        v37 = 0;\n        do\n        {\n          if ( v35 <= 0x1999999999999999LL )\n            v35 *= 10LL;\n          else\n            v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n          ++v37;\n        }\n        while ( v21 != v37 );\n      }\n      v40 = 1LL;\n      do\n      {\n        v41 = 10 * v40;\n        v42 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        v43 = v36 - 10 * v42;\n        v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        if ( v43 )\n        {\n          v44 = v35 / v40 / v43;\n          if ( v44 )\n            v48 += v34 / v44;\n        }\n        v40 = v41;\n      }\n      while ( v42 );\n    }\n    *v8 = v48;\nLABEL_14:\n    if ( (v16 & 0x80000000) != 0 )\n    {\n      v15 = -v16;\nLABEL_8:\n      *v9 = v15;\n    }\n  }\n  else\n  {\n    v16 = 0;\n    *a4 = v48;\n  }\n  return v16;\n}\n\n// write access to const memory has been detected, the output may be wrong!\n__int64 __usercall sub_8D30@<rax>(char *nptr@<rdi>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned __int64 *a4@<rsi>, __int64 a5@<r12>, __int64 a6@<r13>, __int64 a7@<r14>, __int64 a8@<r15>)\n{\n  unsigned __int64 *v8; // rbp\n  int *v9; // rbx\n  unsigned __int8 v10; // r14\n  const unsigned __int16 **v11; // rax\n  const unsigned __int16 **v12; // r13\n  const unsigned __int16 *v13; // rcx\n  char *v14; // rax\n  int v15; // eax\n  unsigned int v16; // ecx\n  unsigned __int64 v18; // rax\n  char *v19; // r14\n  int v20; // ecx\n  int v21; // er15\n  char v22; // al\n  struct lconv *v23; // rax\n  size_t v24; // rax\n  char *v25; // r8\n  __int64 i; // rax\n  signed int v27; // er13\n  int v28; // er14\n  char *v29; // rax\n  int v30; // edi\n  int v31; // ecx\n  int v32; // edi\n  int v33; // er8\n  unsigned __int64 v34; // r10\n  unsigned __int64 v35; // rdi\n  unsigned __int64 v36; // r8\n  int v37; // esi\n  char *v38; // ST08_8\n  unsigned __int64 v39; // rax\n  unsigned __int64 v40; // r9\n  signed __int64 v41; // r11\n  unsigned __int64 v42; // rsi\n  unsigned __int64 v43; // r13\n  unsigned __int64 v44; // r9\n  char *v45; // rax\n  size_t v46; // [rsp+0h] [rbp-70h]\n  char *s1; // [rsp+8h] [rbp-68h]\n  unsigned __int64 v48; // [rsp+10h] [rbp-60h]\n  unsigned __int64 v49; // [rsp+18h] [rbp-58h]\n  char *endptr; // [rsp+28h] [rbp-48h]\n  unsigned __int64 v51; // [rsp+30h] [rbp-40h]\n  __int64 v52; // [rsp+40h] [rbp-30h]\n  __int64 v53; // [rsp+48h] [rbp-28h]\n  __int64 v54; // [rsp+50h] [rbp-20h]\n  __int64 v55; // [rsp+58h] [rbp-18h]\n  __int64 v56; // [rsp+60h] [rbp-10h]\n  __int64 v57; // [rsp+68h] [rbp-8h]\n\n  v57 = a8;\n  v56 = a7;\n  v55 = a6;\n  v54 = a5;\n  v53 = a3;\n  v52 = a2;\n  v8 = a4;\n  *a4 = 0LL;\n  v51 = __readfsqword(0x28u);\n  v9 = __errno_location();\n  if ( !nptr )\n    goto LABEL_7;\n  v10 = *nptr;\n  if ( !*nptr )\n    goto LABEL_7;\n  v11 = __ctype_b_loc();\n  v12 = v11;\n  v13 = *v11;\n  v14 = nptr;\n  while ( v13[v10] & 0x2000 )\n    v10 = *++v14;\n  if ( v10 == 45 )\n    goto LABEL_7;\n  *v9 = 0;\n  endptr = 0LL;\n  v18 = __strtoul_internal(nptr, &endptr, 0, 0);\n  v19 = endptr;\n  v48 = v18;\n  v20 = *v9;\n  if ( endptr == nptr )\n  {\nLABEL_33:\n    if ( !v20 )\n    {\nLABEL_7:\n      v15 = 22;\n      v16 = -22;\n      goto LABEL_8;\n    }\nLABEL_13:\n    v16 = -v20;\n    goto LABEL_14;\n  }\n  if ( v20 && v18 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n    goto LABEL_13;\n  if ( !endptr || !*endptr )\n  {\n    v16 = 0;\n    *a4 = v18;\n    return v16;\n  }\n  v21 = 0;\n  v49 = 0LL;\n  while ( 1 )\n  {\n    v22 = v19[1];\n    if ( v22 == 105 )\n    {\n      if ( (v19[2] & 0xDF) == 66 && !v19[3] )\n      {\nLABEL_37:\n        v27 = 1024;\n        goto LABEL_38;\n      }\n      goto LABEL_23;\n    }\n    if ( (v22 & 0xDF) == 66 && !v19[2] )\n      break;\n    if ( !v22 )\n      goto LABEL_37;\nLABEL_23:\n    v23 = localeconv();\n    if ( !v23 )\n      goto LABEL_7;\n    if ( !v23->decimal_point )\n      goto LABEL_7;\n    s1 = v23->decimal_point;\n    v24 = strlen(v23->decimal_point);\n    if ( v49 )\n      goto LABEL_7;\n    if ( !*v19 )\n      goto LABEL_7;\n    v46 = v24;\n    if ( strncmp(s1, v19, v24) )\n      goto LABEL_7;\n    v25 = &v19[v46];\n    for ( i = v19[v46]; (_BYTE)i == 48; ++v21 )\n      i = *++v25;\n    if ( (*v12)[i] & 0x800 )\n    {\n      *v9 = 0;\n      v38 = v25;\n      endptr = 0LL;\n      v39 = __strtoul_internal(v25, &endptr, 0, 0);\n      v19 = endptr;\n      v49 = v39;\n      v20 = *v9;\n      if ( endptr == v38 )\n        goto LABEL_33;\n      if ( v20 )\n      {\n        if ( v39 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n          goto LABEL_13;\n        goto LABEL_62;\n      }\n      if ( v39 )\n      {\nLABEL_62:\n        if ( !endptr || !*endptr )\n          goto LABEL_7;\n      }\n    }\n    else\n    {\n      endptr = v25;\n      v19 = v25;\n    }\n  }\n  v27 = 1000;\nLABEL_38:\n  v28 = *v19;\n  v29 = strchr(\"KMGTPEZY\", v28);\n  if ( v29 )\n  {\n    v30 = (unsigned __int64)(v29 - \"KMGTPEZY\") + 1;\n    goto LABEL_40;\n  }\n  v45 = strchr(\"kmgtpezy\", v28);\n  if ( !v45 )\n    goto LABEL_7;\n  v30 = (unsigned __int64)(v45 - \"kmgtpezy\") + 1;\nLABEL_40:\n  if ( v30 )\n  {\n    if ( is_mul_ok(v27, v48) )\n    {\n      v31 = 0;\n      while ( 1 )\n      {\n        v48 *= v27;\n        if ( v30 - 1 == v31 )\n          break;\n        ++v31;\n        if ( !is_mul_ok(v27, v48) )\n          goto LABEL_77;\n      }\n      v16 = 0;\n    }\n    else\n    {\nLABEL_77:\n      v16 = -34;\n    }\n    if ( v49 )\n    {\n      v32 = v30 - 1;\n      v33 = 0;\n      v34 = 1LL;\n      do\n      {\n        v34 *= v27;\n        if ( v33 == v32 )\n          break;\n        ++v33;\n      }\n      while ( is_mul_ok(v27, v34) );\n      if ( v49 <= 0xA )\n      {\n        v36 = v49;\n        v35 = 10LL;\n      }\n      else\n      {\n        v35 = 10LL;\n        while ( 1 )\n        {\n          v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v49 >> 64) >> 3;\n          if ( v35 > 0x1999999999999999LL )\n            break;\n          v35 *= 10LL;\n          if ( v35 >= v49 )\n          {\n            v36 = v49;\n            break;\n          }\n        }\n      }\n      if ( v21 )\n      {\n        v37 = 0;\n        do\n        {\n          if ( v35 <= 0x1999999999999999LL )\n            v35 *= 10LL;\n          else\n            v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n          ++v37;\n        }\n        while ( v21 != v37 );\n      }\n      v40 = 1LL;\n      do\n      {\n        v41 = 10 * v40;\n        v42 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        v43 = v36 - 10 * v42;\n        v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        if ( v43 )\n        {\n          v44 = v35 / v40 / v43;\n          if ( v44 )\n            v48 += v34 / v44;\n        }\n        v40 = v41;\n      }\n      while ( v42 );\n    }\n    *v8 = v48;\nLABEL_14:\n    if ( (v16 & 0x80000000) != 0 )\n    {\n      v15 = -v16;\nLABEL_8:\n      *v9 = v15;\n    }\n  }\n  else\n  {\n    v16 = 0;\n    *a4 = v48;\n  }\n  return v16;\n}\n\n// write access to const memory has been detected, the output may be wrong!\n__int64 __usercall sub_8D30@<rax>(char *nptr@<rdi>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned __int64 *a4@<rsi>, __int64 a5@<r12>, __int64 a6@<r13>, __int64 a7@<r14>, __int64 a8@<r15>)\n{\n  unsigned __int64 *v8; // rbp\n  int *v9; // rbx\n  unsigned __int8 v10; // r14\n  const unsigned __int16 **v11; // rax\n  const unsigned __int16 **v12; // r13\n  const unsigned __int16 *v13; // rcx\n  char *v14; // rax\n  int v15; // eax\n  unsigned int v16; // ecx\n  unsigned __int64 v18; // rax\n  char *v19; // r14\n  int v20; // ecx\n  int v21; // er15\n  char v22; // al\n  struct lconv *v23; // rax\n  size_t v24; // rax\n  char *v25; // r8\n  __int64 i; // rax\n  signed int v27; // er13\n  int v28; // er14\n  char *v29; // rax\n  int v30; // edi\n  int v31; // ecx\n  int v32; // edi\n  int v33; // er8\n  unsigned __int64 v34; // r10\n  unsigned __int64 v35; // rdi\n  unsigned __int64 v36; // r8\n  int v37; // esi\n  char *v38; // ST08_8\n  unsigned __int64 v39; // rax\n  unsigned __int64 v40; // r9\n  signed __int64 v41; // r11\n  unsigned __int64 v42; // rsi\n  unsigned __int64 v43; // r13\n  unsigned __int64 v44; // r9\n  char *v45; // rax\n  size_t v46; // [rsp+0h] [rbp-70h]\n  char *s1; // [rsp+8h] [rbp-68h]\n  unsigned __int64 v48; // [rsp+10h] [rbp-60h]\n  unsigned __int64 v49; // [rsp+18h] [rbp-58h]\n  char *endptr; // [rsp+28h] [rbp-48h]\n  unsigned __int64 v51; // [rsp+30h] [rbp-40h]\n  __int64 v52; // [rsp+40h] [rbp-30h]\n  __int64 v53; // [rsp+48h] [rbp-28h]\n  __int64 v54; // [rsp+50h] [rbp-20h]\n  __int64 v55; // [rsp+58h] [rbp-18h]\n  __int64 v56; // [rsp+60h] [rbp-10h]\n  __int64 v57; // [rsp+68h] [rbp-8h]\n\n  v57 = a8;\n  v56 = a7;\n  v55 = a6;\n  v54 = a5;\n  v53 = a3;\n  v52 = a2;\n  v8 = a4;\n  *a4 = 0LL;\n  v51 = __readfsqword(0x28u);\n  v9 = __errno_location();\n  if ( !nptr )\n    goto LABEL_7;\n  v10 = *nptr;\n  if ( !*nptr )\n    goto LABEL_7;\n  v11 = __ctype_b_loc();\n  v12 = v11;\n  v13 = *v11;\n  v14 = nptr;\n  while ( v13[v10] & 0x2000 )\n    v10 = *++v14;\n  if ( v10 == 45 )\n    goto LABEL_7;\n  *v9 = 0;\n  endptr = 0LL;\n  v18 = __strtoul_internal(nptr, &endptr, 0, 0);\n  v19 = endptr;\n  v48 = v18;\n  v20 = *v9;\n  if ( endptr == nptr )\n  {\nLABEL_33:\n    if ( !v20 )\n    {\nLABEL_7:\n      v15 = 22;\n      v16 = -22;\n      goto LABEL_8;\n    }\nLABEL_13:\n    v16 = -v20;\n    goto LABEL_14;\n  }\n  if ( v20 && v18 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n    goto LABEL_13;\n  if ( !endptr || !*endptr )\n  {\n    v16 = 0;\n    *a4 = v18;\n    return v16;\n  }\n  v21 = 0;\n  v49 = 0LL;\n  while ( 1 )\n  {\n    v22 = v19[1];\n    if ( v22 == 105 )\n    {\n      if ( (v19[2] & 0xDF) == 66 && !v19[3] )\n      {\nLABEL_37:\n        v27 = 1024;\n        goto LABEL_38;\n      }\n      goto LABEL_23;\n    }\n    if ( (v22 & 0xDF) == 66 && !v19[2] )\n      break;\n    if ( !v22 )\n      goto LABEL_37;\nLABEL_23:\n    v23 = localeconv();\n    if ( !v23 )\n      goto LABEL_7;\n    if ( !v23->decimal_point )\n      goto LABEL_7;\n    s1 = v23->decimal_point;\n    v24 = strlen(v23->decimal_point);\n    if ( v49 )\n      goto LABEL_7;\n    if ( !*v19 )\n      goto LABEL_7;\n    v46 = v24;\n    if ( strncmp(s1, v19, v24) )\n      goto LABEL_7;\n    v25 = &v19[v46];\n    for ( i = v19[v46]; (_BYTE)i == 48; ++v21 )\n      i = *++v25;\n    if ( (*v12)[i] & 0x800 )\n    {\n      *v9 = 0;\n      v38 = v25;\n      endptr = 0LL;\n      v39 = __strtoul_internal(v25, &endptr, 0, 0);\n      v19 = endptr;\n      v49 = v39;\n      v20 = *v9;\n      if ( endptr == v38 )\n        goto LABEL_33;\n      if ( v20 )\n      {\n        if ( v39 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n          goto LABEL_13;\n        goto LABEL_62;\n      }\n      if ( v39 )\n      {\nLABEL_62:\n        if ( !endptr || !*endptr )\n          goto LABEL_7;\n      }\n    }\n    else\n    {\n      endptr = v25;\n      v19 = v25;\n    }\n  }\n  v27 = 1000;\nLABEL_38:\n  v28 = *v19;\n  v29 = strchr(\"KMGTPEZY\", v28);\n  if ( v29 )\n  {\n    v30 = (unsigned __int64)(v29 - \"KMGTPEZY\") + 1;\n    goto LABEL_40;\n  }\n  v45 = strchr(\"kmgtpezy\", v28);\n  if ( !v45 )\n    goto LABEL_7;\n  v30 = (unsigned __int64)(v45 - \"kmgtpezy\") + 1;\nLABEL_40:\n  if ( v30 )\n  {\n    if ( is_mul_ok(v27, v48) )\n    {\n      v31 = 0;\n      while ( 1 )\n      {\n        v48 *= v27;\n        if ( v30 - 1 == v31 )\n          break;\n        ++v31;\n        if ( !is_mul_ok(v27, v48) )\n          goto LABEL_77;\n      }\n      v16 = 0;\n    }\n    else\n    {\nLABEL_77:\n      v16 = -34;\n    }\n    if ( v49 )\n    {\n      v32 = v30 - 1;\n      v33 = 0;\n      v34 = 1LL;\n      do\n      {\n        v34 *= v27;\n        if ( v33 == v32 )\n          break;\n        ++v33;\n      }\n      while ( is_mul_ok(v27, v34) );\n      if ( v49 <= 0xA )\n      {\n        v36 = v49;\n        v35 = 10LL;\n      }\n      else\n      {\n        v35 = 10LL;\n        while ( 1 )\n        {\n          v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v49 >> 64) >> 3;\n          if ( v35 > 0x1999999999999999LL )\n            break;\n          v35 *= 10LL;\n          if ( v35 >= v49 )\n          {\n            v36 = v49;\n            break;\n          }\n        }\n      }\n      if ( v21 )\n      {\n        v37 = 0;\n        do\n        {\n          if ( v35 <= 0x1999999999999999LL )\n            v35 *= 10LL;\n          else\n            v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n          ++v37;\n        }\n        while ( v21 != v37 );\n      }\n      v40 = 1LL;\n      do\n      {\n        v41 = 10 * v40;\n        v42 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        v43 = v36 - 10 * v42;\n        v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        if ( v43 )\n        {\n          v44 = v35 / v40 / v43;\n          if ( v44 )\n            v48 += v34 / v44;\n        }\n        v40 = v41;\n      }\n      while ( v42 );\n    }\n    *v8 = v48;\nLABEL_14:\n    if ( (v16 & 0x80000000) != 0 )\n    {\n      v15 = -v16;\nLABEL_8:\n      *v9 = v15;\n    }\n  }\n  else\n  {\n    v16 = 0;\n    *a4 = v48;\n  }\n  return v16;\n}\n\n// write access to const memory has been detected, the output may be wrong!\n__int64 __usercall sub_8D30@<rax>(char *nptr@<rdi>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned __int64 *a4@<rsi>, __int64 a5@<r12>, __int64 a6@<r13>, __int64 a7@<r14>, __int64 a8@<r15>)\n{\n  unsigned __int64 *v8; // rbp\n  int *v9; // rbx\n  unsigned __int8 v10; // r14\n  const unsigned __int16 **v11; // rax\n  const unsigned __int16 **v12; // r13\n  const unsigned __int16 *v13; // rcx\n  char *v14; // rax\n  int v15; // eax\n  unsigned int v16; // ecx\n  unsigned __int64 v18; // rax\n  char *v19; // r14\n  int v20; // ecx\n  int v21; // er15\n  char v22; // al\n  struct lconv *v23; // rax\n  size_t v24; // rax\n  char *v25; // r8\n  __int64 i; // rax\n  signed int v27; // er13\n  int v28; // er14\n  char *v29; // rax\n  int v30; // edi\n  int v31; // ecx\n  int v32; // edi\n  int v33; // er8\n  unsigned __int64 v34; // r10\n  unsigned __int64 v35; // rdi\n  unsigned __int64 v36; // r8\n  int v37; // esi\n  char *v38; // ST08_8\n  unsigned __int64 v39; // rax\n  unsigned __int64 v40; // r9\n  signed __int64 v41; // r11\n  unsigned __int64 v42; // rsi\n  unsigned __int64 v43; // r13\n  unsigned __int64 v44; // r9\n  char *v45; // rax\n  size_t v46; // [rsp+0h] [rbp-70h]\n  char *s1; // [rsp+8h] [rbp-68h]\n  unsigned __int64 v48; // [rsp+10h] [rbp-60h]\n  unsigned __int64 v49; // [rsp+18h] [rbp-58h]\n  char *endptr; // [rsp+28h] [rbp-48h]\n  unsigned __int64 v51; // [rsp+30h] [rbp-40h]\n  __int64 v52; // [rsp+40h] [rbp-30h]\n  __int64 v53; // [rsp+48h] [rbp-28h]\n  __int64 v54; // [rsp+50h] [rbp-20h]\n  __int64 v55; // [rsp+58h] [rbp-18h]\n  __int64 v56; // [rsp+60h] [rbp-10h]\n  __int64 v57; // [rsp+68h] [rbp-8h]\n\n  v57 = a8;\n  v56 = a7;\n  v55 = a6;\n  v54 = a5;\n  v53 = a3;\n  v52 = a2;\n  v8 = a4;\n  *a4 = 0LL;\n  v51 = __readfsqword(0x28u);\n  v9 = __errno_location();\n  if ( !nptr )\n    goto LABEL_7;\n  v10 = *nptr;\n  if ( !*nptr )\n    goto LABEL_7;\n  v11 = __ctype_b_loc();\n  v12 = v11;\n  v13 = *v11;\n  v14 = nptr;\n  while ( v13[v10] & 0x2000 )\n    v10 = *++v14;\n  if ( v10 == 45 )\n    goto LABEL_7;\n  *v9 = 0;\n  endptr = 0LL;\n  v18 = __strtoul_internal(nptr, &endptr, 0, 0);\n  v19 = endptr;\n  v48 = v18;\n  v20 = *v9;\n  if ( endptr == nptr )\n  {\nLABEL_33:\n    if ( !v20 )\n    {\nLABEL_7:\n      v15 = 22;\n      v16 = -22;\n      goto LABEL_8;\n    }\nLABEL_13:\n    v16 = -v20;\n    goto LABEL_14;\n  }\n  if ( v20 && v18 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n    goto LABEL_13;\n  if ( !endptr || !*endptr )\n  {\n    v16 = 0;\n    *a4 = v18;\n    return v16;\n  }\n  v21 = 0;\n  v49 = 0LL;\n  while ( 1 )\n  {\n    v22 = v19[1];\n    if ( v22 == 105 )\n    {\n      if ( (v19[2] & 0xDF) == 66 && !v19[3] )\n      {\nLABEL_37:\n        v27 = 1024;\n        goto LABEL_38;\n      }\n      goto LABEL_23;\n    }\n    if ( (v22 & 0xDF) == 66 && !v19[2] )\n      break;\n    if ( !v22 )\n      goto LABEL_37;\nLABEL_23:\n    v23 = localeconv();\n    if ( !v23 )\n      goto LABEL_7;\n    if ( !v23->decimal_point )\n      goto LABEL_7;\n    s1 = v23->decimal_point;\n    v24 = strlen(v23->decimal_point);\n    if ( v49 )\n      goto LABEL_7;\n    if ( !*v19 )\n      goto LABEL_7;\n    v46 = v24;\n    if ( strncmp(s1, v19, v24) )\n      goto LABEL_7;\n    v25 = &v19[v46];\n    for ( i = v19[v46]; (_BYTE)i == 48; ++v21 )\n      i = *++v25;\n    if ( (*v12)[i] & 0x800 )\n    {\n      *v9 = 0;\n      v38 = v25;\n      endptr = 0LL;\n      v39 = __strtoul_internal(v25, &endptr, 0, 0);\n      v19 = endptr;\n      v49 = v39;\n      v20 = *v9;\n      if ( endptr == v38 )\n        goto LABEL_33;\n      if ( v20 )\n      {\n        if ( v39 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n          goto LABEL_13;\n        goto LABEL_62;\n      }\n      if ( v39 )\n      {\nLABEL_62:\n        if ( !endptr || !*endptr )\n          goto LABEL_7;\n      }\n    }\n    else\n    {\n      endptr = v25;\n      v19 = v25;\n    }\n  }\n  v27 = 1000;\nLABEL_38:\n  v28 = *v19;\n  v29 = strchr(\"KMGTPEZY\", v28);\n  if ( v29 )\n  {\n    v30 = (unsigned __int64)(v29 - \"KMGTPEZY\") + 1;\n    goto LABEL_40;\n  }\n  v45 = strchr(\"kmgtpezy\", v28);\n  if ( !v45 )\n    goto LABEL_7;\n  v30 = (unsigned __int64)(v45 - \"kmgtpezy\") + 1;\nLABEL_40:\n  if ( v30 )\n  {\n    if ( is_mul_ok(v27, v48) )\n    {\n      v31 = 0;\n      while ( 1 )\n      {\n        v48 *= v27;\n        if ( v30 - 1 == v31 )\n          break;\n        ++v31;\n        if ( !is_mul_ok(v27, v48) )\n          goto LABEL_77;\n      }\n      v16 = 0;\n    }\n    else\n    {\nLABEL_77:\n      v16 = -34;\n    }\n    if ( v49 )\n    {\n      v32 = v30 - 1;\n      v33 = 0;\n      v34 = 1LL;\n      do\n      {\n        v34 *= v27;\n        if ( v33 == v32 )\n          break;\n        ++v33;\n      }\n      while ( is_mul_ok(v27, v34) );\n      if ( v49 <= 0xA )\n      {\n        v36 = v49;\n        v35 = 10LL;\n      }\n      else\n      {\n        v35 = 10LL;\n        while ( 1 )\n        {\n          v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v49 >> 64) >> 3;\n          if ( v35 > 0x1999999999999999LL )\n            break;\n          v35 *= 10LL;\n          if ( v35 >= v49 )\n          {\n            v36 = v49;\n            break;\n          }\n        }\n      }\n      if ( v21 )\n      {\n        v37 = 0;\n        do\n        {\n          if ( v35 <= 0x1999999999999999LL )\n            v35 *= 10LL;\n          else\n            v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n          ++v37;\n        }\n        while ( v21 != v37 );\n      }\n      v40 = 1LL;\n      do\n      {\n        v41 = 10 * v40;\n        v42 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        v43 = v36 - 10 * v42;\n        v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        if ( v43 )\n        {\n          v44 = v35 / v40 / v43;\n          if ( v44 )\n            v48 += v34 / v44;\n        }\n        v40 = v41;\n      }\n      while ( v42 );\n    }\n    *v8 = v48;\nLABEL_14:\n    if ( (v16 & 0x80000000) != 0 )\n    {\n      v15 = -v16;\nLABEL_8:\n      *v9 = v15;\n    }\n  }\n  else\n  {\n    v16 = 0;\n    *a4 = v48;\n  }\n  return v16;\n}\n", 
            "funcStartAddr": "0x8c38L", 
            "funcEndAddr": "0x8d29L", 
            "funcName": "sub_8D30"
        }, 
        {
            "decompiledFuncCode": "// write access to const memory has been detected, the output may be wrong!\n__int64 __usercall sub_8D30@<rax>(char *nptr@<rdi>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned __int64 *a4@<rsi>, __int64 a5@<r12>, __int64 a6@<r13>, __int64 a7@<r14>, __int64 a8@<r15>)\n{\n  unsigned __int64 *v8; // rbp\n  int *v9; // rbx\n  unsigned __int8 v10; // r14\n  const unsigned __int16 **v11; // rax\n  const unsigned __int16 **v12; // r13\n  const unsigned __int16 *v13; // rcx\n  char *v14; // rax\n  int v15; // eax\n  unsigned int v16; // ecx\n  unsigned __int64 v18; // rax\n  char *v19; // r14\n  int v20; // ecx\n  int v21; // er15\n  char v22; // al\n  struct lconv *v23; // rax\n  size_t v24; // rax\n  char *v25; // r8\n  __int64 i; // rax\n  signed int v27; // er13\n  int v28; // er14\n  char *v29; // rax\n  int v30; // edi\n  int v31; // ecx\n  int v32; // edi\n  int v33; // er8\n  unsigned __int64 v34; // r10\n  unsigned __int64 v35; // rdi\n  unsigned __int64 v36; // r8\n  int v37; // esi\n  char *v38; // ST08_8\n  unsigned __int64 v39; // rax\n  unsigned __int64 v40; // r9\n  signed __int64 v41; // r11\n  unsigned __int64 v42; // rsi\n  unsigned __int64 v43; // r13\n  unsigned __int64 v44; // r9\n  char *v45; // rax\n  size_t v46; // [rsp+0h] [rbp-70h]\n  char *s1; // [rsp+8h] [rbp-68h]\n  unsigned __int64 v48; // [rsp+10h] [rbp-60h]\n  unsigned __int64 v49; // [rsp+18h] [rbp-58h]\n  char *endptr; // [rsp+28h] [rbp-48h]\n  unsigned __int64 v51; // [rsp+30h] [rbp-40h]\n  __int64 v52; // [rsp+40h] [rbp-30h]\n  __int64 v53; // [rsp+48h] [rbp-28h]\n  __int64 v54; // [rsp+50h] [rbp-20h]\n  __int64 v55; // [rsp+58h] [rbp-18h]\n  __int64 v56; // [rsp+60h] [rbp-10h]\n  __int64 v57; // [rsp+68h] [rbp-8h]\n\n  v57 = a8;\n  v56 = a7;\n  v55 = a6;\n  v54 = a5;\n  v53 = a3;\n  v52 = a2;\n  v8 = a4;\n  *a4 = 0LL;\n  v51 = __readfsqword(0x28u);\n  v9 = __errno_location();\n  if ( !nptr )\n    goto LABEL_7;\n  v10 = *nptr;\n  if ( !*nptr )\n    goto LABEL_7;\n  v11 = __ctype_b_loc();\n  v12 = v11;\n  v13 = *v11;\n  v14 = nptr;\n  while ( v13[v10] & 0x2000 )\n    v10 = *++v14;\n  if ( v10 == 45 )\n    goto LABEL_7;\n  *v9 = 0;\n  endptr = 0LL;\n  v18 = __strtoul_internal(nptr, &endptr, 0, 0);\n  v19 = endptr;\n  v48 = v18;\n  v20 = *v9;\n  if ( endptr == nptr )\n  {\nLABEL_33:\n    if ( !v20 )\n    {\nLABEL_7:\n      v15 = 22;\n      v16 = -22;\n      goto LABEL_8;\n    }\nLABEL_13:\n    v16 = -v20;\n    goto LABEL_14;\n  }\n  if ( v20 && v18 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n    goto LABEL_13;\n  if ( !endptr || !*endptr )\n  {\n    v16 = 0;\n    *a4 = v18;\n    return v16;\n  }\n  v21 = 0;\n  v49 = 0LL;\n  while ( 1 )\n  {\n    v22 = v19[1];\n    if ( v22 == 105 )\n    {\n      if ( (v19[2] & 0xDF) == 66 && !v19[3] )\n      {\nLABEL_37:\n        v27 = 1024;\n        goto LABEL_38;\n      }\n      goto LABEL_23;\n    }\n    if ( (v22 & 0xDF) == 66 && !v19[2] )\n      break;\n    if ( !v22 )\n      goto LABEL_37;\nLABEL_23:\n    v23 = localeconv();\n    if ( !v23 )\n      goto LABEL_7;\n    if ( !v23->decimal_point )\n      goto LABEL_7;\n    s1 = v23->decimal_point;\n    v24 = strlen(v23->decimal_point);\n    if ( v49 )\n      goto LABEL_7;\n    if ( !*v19 )\n      goto LABEL_7;\n    v46 = v24;\n    if ( strncmp(s1, v19, v24) )\n      goto LABEL_7;\n    v25 = &v19[v46];\n    for ( i = v19[v46]; (_BYTE)i == 48; ++v21 )\n      i = *++v25;\n    if ( (*v12)[i] & 0x800 )\n    {\n      *v9 = 0;\n      v38 = v25;\n      endptr = 0LL;\n      v39 = __strtoul_internal(v25, &endptr, 0, 0);\n      v19 = endptr;\n      v49 = v39;\n      v20 = *v9;\n      if ( endptr == v38 )\n        goto LABEL_33;\n      if ( v20 )\n      {\n        if ( v39 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n          goto LABEL_13;\n        goto LABEL_62;\n      }\n      if ( v39 )\n      {\nLABEL_62:\n        if ( !endptr || !*endptr )\n          goto LABEL_7;\n      }\n    }\n    else\n    {\n      endptr = v25;\n      v19 = v25;\n    }\n  }\n  v27 = 1000;\nLABEL_38:\n  v28 = *v19;\n  v29 = strchr(\"KMGTPEZY\", v28);\n  if ( v29 )\n  {\n    v30 = (unsigned __int64)(v29 - \"KMGTPEZY\") + 1;\n    goto LABEL_40;\n  }\n  v45 = strchr(\"kmgtpezy\", v28);\n  if ( !v45 )\n    goto LABEL_7;\n  v30 = (unsigned __int64)(v45 - \"kmgtpezy\") + 1;\nLABEL_40:\n  if ( v30 )\n  {\n    if ( is_mul_ok(v27, v48) )\n    {\n      v31 = 0;\n      while ( 1 )\n      {\n        v48 *= v27;\n        if ( v30 - 1 == v31 )\n          break;\n        ++v31;\n        if ( !is_mul_ok(v27, v48) )\n          goto LABEL_77;\n      }\n      v16 = 0;\n    }\n    else\n    {\nLABEL_77:\n      v16 = -34;\n    }\n    if ( v49 )\n    {\n      v32 = v30 - 1;\n      v33 = 0;\n      v34 = 1LL;\n      do\n      {\n        v34 *= v27;\n        if ( v33 == v32 )\n          break;\n        ++v33;\n      }\n      while ( is_mul_ok(v27, v34) );\n      if ( v49 <= 0xA )\n      {\n        v36 = v49;\n        v35 = 10LL;\n      }\n      else\n      {\n        v35 = 10LL;\n        while ( 1 )\n        {\n          v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v49 >> 64) >> 3;\n          if ( v35 > 0x1999999999999999LL )\n            break;\n          v35 *= 10LL;\n          if ( v35 >= v49 )\n          {\n            v36 = v49;\n            break;\n          }\n        }\n      }\n      if ( v21 )\n      {\n        v37 = 0;\n        do\n        {\n          if ( v35 <= 0x1999999999999999LL )\n            v35 *= 10LL;\n          else\n            v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n          ++v37;\n        }\n        while ( v21 != v37 );\n      }\n      v40 = 1LL;\n      do\n      {\n        v41 = 10 * v40;\n        v42 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        v43 = v36 - 10 * v42;\n        v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        if ( v43 )\n        {\n          v44 = v35 / v40 / v43;\n          if ( v44 )\n            v48 += v34 / v44;\n        }\n        v40 = v41;\n      }\n      while ( v42 );\n    }\n    *v8 = v48;\nLABEL_14:\n    if ( (v16 & 0x80000000) != 0 )\n    {\n      v15 = -v16;\nLABEL_8:\n      *v9 = v15;\n    }\n  }\n  else\n  {\n    v16 = 0;\n    *a4 = v48;\n  }\n  return v16;\n}\n\n// write access to const memory has been detected, the output may be wrong!\n__int64 __usercall sub_8D30@<rax>(char *nptr@<rdi>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned __int64 *a4@<rsi>, __int64 a5@<r12>, __int64 a6@<r13>, __int64 a7@<r14>, __int64 a8@<r15>)\n{\n  unsigned __int64 *v8; // rbp\n  int *v9; // rbx\n  unsigned __int8 v10; // r14\n  const unsigned __int16 **v11; // rax\n  const unsigned __int16 **v12; // r13\n  const unsigned __int16 *v13; // rcx\n  char *v14; // rax\n  int v15; // eax\n  unsigned int v16; // ecx\n  unsigned __int64 v18; // rax\n  char *v19; // r14\n  int v20; // ecx\n  int v21; // er15\n  char v22; // al\n  struct lconv *v23; // rax\n  size_t v24; // rax\n  char *v25; // r8\n  __int64 i; // rax\n  signed int v27; // er13\n  int v28; // er14\n  char *v29; // rax\n  int v30; // edi\n  int v31; // ecx\n  int v32; // edi\n  int v33; // er8\n  unsigned __int64 v34; // r10\n  unsigned __int64 v35; // rdi\n  unsigned __int64 v36; // r8\n  int v37; // esi\n  char *v38; // ST08_8\n  unsigned __int64 v39; // rax\n  unsigned __int64 v40; // r9\n  signed __int64 v41; // r11\n  unsigned __int64 v42; // rsi\n  unsigned __int64 v43; // r13\n  unsigned __int64 v44; // r9\n  char *v45; // rax\n  size_t v46; // [rsp+0h] [rbp-70h]\n  char *s1; // [rsp+8h] [rbp-68h]\n  unsigned __int64 v48; // [rsp+10h] [rbp-60h]\n  unsigned __int64 v49; // [rsp+18h] [rbp-58h]\n  char *endptr; // [rsp+28h] [rbp-48h]\n  unsigned __int64 v51; // [rsp+30h] [rbp-40h]\n  __int64 v52; // [rsp+40h] [rbp-30h]\n  __int64 v53; // [rsp+48h] [rbp-28h]\n  __int64 v54; // [rsp+50h] [rbp-20h]\n  __int64 v55; // [rsp+58h] [rbp-18h]\n  __int64 v56; // [rsp+60h] [rbp-10h]\n  __int64 v57; // [rsp+68h] [rbp-8h]\n\n  v57 = a8;\n  v56 = a7;\n  v55 = a6;\n  v54 = a5;\n  v53 = a3;\n  v52 = a2;\n  v8 = a4;\n  *a4 = 0LL;\n  v51 = __readfsqword(0x28u);\n  v9 = __errno_location();\n  if ( !nptr )\n    goto LABEL_7;\n  v10 = *nptr;\n  if ( !*nptr )\n    goto LABEL_7;\n  v11 = __ctype_b_loc();\n  v12 = v11;\n  v13 = *v11;\n  v14 = nptr;\n  while ( v13[v10] & 0x2000 )\n    v10 = *++v14;\n  if ( v10 == 45 )\n    goto LABEL_7;\n  *v9 = 0;\n  endptr = 0LL;\n  v18 = __strtoul_internal(nptr, &endptr, 0, 0);\n  v19 = endptr;\n  v48 = v18;\n  v20 = *v9;\n  if ( endptr == nptr )\n  {\nLABEL_33:\n    if ( !v20 )\n    {\nLABEL_7:\n      v15 = 22;\n      v16 = -22;\n      goto LABEL_8;\n    }\nLABEL_13:\n    v16 = -v20;\n    goto LABEL_14;\n  }\n  if ( v20 && v18 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n    goto LABEL_13;\n  if ( !endptr || !*endptr )\n  {\n    v16 = 0;\n    *a4 = v18;\n    return v16;\n  }\n  v21 = 0;\n  v49 = 0LL;\n  while ( 1 )\n  {\n    v22 = v19[1];\n    if ( v22 == 105 )\n    {\n      if ( (v19[2] & 0xDF) == 66 && !v19[3] )\n      {\nLABEL_37:\n        v27 = 1024;\n        goto LABEL_38;\n      }\n      goto LABEL_23;\n    }\n    if ( (v22 & 0xDF) == 66 && !v19[2] )\n      break;\n    if ( !v22 )\n      goto LABEL_37;\nLABEL_23:\n    v23 = localeconv();\n    if ( !v23 )\n      goto LABEL_7;\n    if ( !v23->decimal_point )\n      goto LABEL_7;\n    s1 = v23->decimal_point;\n    v24 = strlen(v23->decimal_point);\n    if ( v49 )\n      goto LABEL_7;\n    if ( !*v19 )\n      goto LABEL_7;\n    v46 = v24;\n    if ( strncmp(s1, v19, v24) )\n      goto LABEL_7;\n    v25 = &v19[v46];\n    for ( i = v19[v46]; (_BYTE)i == 48; ++v21 )\n      i = *++v25;\n    if ( (*v12)[i] & 0x800 )\n    {\n      *v9 = 0;\n      v38 = v25;\n      endptr = 0LL;\n      v39 = __strtoul_internal(v25, &endptr, 0, 0);\n      v19 = endptr;\n      v49 = v39;\n      v20 = *v9;\n      if ( endptr == v38 )\n        goto LABEL_33;\n      if ( v20 )\n      {\n        if ( v39 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n          goto LABEL_13;\n        goto LABEL_62;\n      }\n      if ( v39 )\n      {\nLABEL_62:\n        if ( !endptr || !*endptr )\n          goto LABEL_7;\n      }\n    }\n    else\n    {\n      endptr = v25;\n      v19 = v25;\n    }\n  }\n  v27 = 1000;\nLABEL_38:\n  v28 = *v19;\n  v29 = strchr(\"KMGTPEZY\", v28);\n  if ( v29 )\n  {\n    v30 = (unsigned __int64)(v29 - \"KMGTPEZY\") + 1;\n    goto LABEL_40;\n  }\n  v45 = strchr(\"kmgtpezy\", v28);\n  if ( !v45 )\n    goto LABEL_7;\n  v30 = (unsigned __int64)(v45 - \"kmgtpezy\") + 1;\nLABEL_40:\n  if ( v30 )\n  {\n    if ( is_mul_ok(v27, v48) )\n    {\n      v31 = 0;\n      while ( 1 )\n      {\n        v48 *= v27;\n        if ( v30 - 1 == v31 )\n          break;\n        ++v31;\n        if ( !is_mul_ok(v27, v48) )\n          goto LABEL_77;\n      }\n      v16 = 0;\n    }\n    else\n    {\nLABEL_77:\n      v16 = -34;\n    }\n    if ( v49 )\n    {\n      v32 = v30 - 1;\n      v33 = 0;\n      v34 = 1LL;\n      do\n      {\n        v34 *= v27;\n        if ( v33 == v32 )\n          break;\n        ++v33;\n      }\n      while ( is_mul_ok(v27, v34) );\n      if ( v49 <= 0xA )\n      {\n        v36 = v49;\n        v35 = 10LL;\n      }\n      else\n      {\n        v35 = 10LL;\n        while ( 1 )\n        {\n          v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v49 >> 64) >> 3;\n          if ( v35 > 0x1999999999999999LL )\n            break;\n          v35 *= 10LL;\n          if ( v35 >= v49 )\n          {\n            v36 = v49;\n            break;\n          }\n        }\n      }\n      if ( v21 )\n      {\n        v37 = 0;\n        do\n        {\n          if ( v35 <= 0x1999999999999999LL )\n            v35 *= 10LL;\n          else\n            v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n          ++v37;\n        }\n        while ( v21 != v37 );\n      }\n      v40 = 1LL;\n      do\n      {\n        v41 = 10 * v40;\n        v42 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        v43 = v36 - 10 * v42;\n        v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        if ( v43 )\n        {\n          v44 = v35 / v40 / v43;\n          if ( v44 )\n            v48 += v34 / v44;\n        }\n        v40 = v41;\n      }\n      while ( v42 );\n    }\n    *v8 = v48;\nLABEL_14:\n    if ( (v16 & 0x80000000) != 0 )\n    {\n      v15 = -v16;\nLABEL_8:\n      *v9 = v15;\n    }\n  }\n  else\n  {\n    v16 = 0;\n    *a4 = v48;\n  }\n  return v16;\n}\n\n// write access to const memory has been detected, the output may be wrong!\n__int64 __usercall sub_8D30@<rax>(char *nptr@<rdi>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned __int64 *a4@<rsi>, __int64 a5@<r12>, __int64 a6@<r13>, __int64 a7@<r14>, __int64 a8@<r15>)\n{\n  unsigned __int64 *v8; // rbp\n  int *v9; // rbx\n  unsigned __int8 v10; // r14\n  const unsigned __int16 **v11; // rax\n  const unsigned __int16 **v12; // r13\n  const unsigned __int16 *v13; // rcx\n  char *v14; // rax\n  int v15; // eax\n  unsigned int v16; // ecx\n  unsigned __int64 v18; // rax\n  char *v19; // r14\n  int v20; // ecx\n  int v21; // er15\n  char v22; // al\n  struct lconv *v23; // rax\n  size_t v24; // rax\n  char *v25; // r8\n  __int64 i; // rax\n  signed int v27; // er13\n  int v28; // er14\n  char *v29; // rax\n  int v30; // edi\n  int v31; // ecx\n  int v32; // edi\n  int v33; // er8\n  unsigned __int64 v34; // r10\n  unsigned __int64 v35; // rdi\n  unsigned __int64 v36; // r8\n  int v37; // esi\n  char *v38; // ST08_8\n  unsigned __int64 v39; // rax\n  unsigned __int64 v40; // r9\n  signed __int64 v41; // r11\n  unsigned __int64 v42; // rsi\n  unsigned __int64 v43; // r13\n  unsigned __int64 v44; // r9\n  char *v45; // rax\n  size_t v46; // [rsp+0h] [rbp-70h]\n  char *s1; // [rsp+8h] [rbp-68h]\n  unsigned __int64 v48; // [rsp+10h] [rbp-60h]\n  unsigned __int64 v49; // [rsp+18h] [rbp-58h]\n  char *endptr; // [rsp+28h] [rbp-48h]\n  unsigned __int64 v51; // [rsp+30h] [rbp-40h]\n  __int64 v52; // [rsp+40h] [rbp-30h]\n  __int64 v53; // [rsp+48h] [rbp-28h]\n  __int64 v54; // [rsp+50h] [rbp-20h]\n  __int64 v55; // [rsp+58h] [rbp-18h]\n  __int64 v56; // [rsp+60h] [rbp-10h]\n  __int64 v57; // [rsp+68h] [rbp-8h]\n\n  v57 = a8;\n  v56 = a7;\n  v55 = a6;\n  v54 = a5;\n  v53 = a3;\n  v52 = a2;\n  v8 = a4;\n  *a4 = 0LL;\n  v51 = __readfsqword(0x28u);\n  v9 = __errno_location();\n  if ( !nptr )\n    goto LABEL_7;\n  v10 = *nptr;\n  if ( !*nptr )\n    goto LABEL_7;\n  v11 = __ctype_b_loc();\n  v12 = v11;\n  v13 = *v11;\n  v14 = nptr;\n  while ( v13[v10] & 0x2000 )\n    v10 = *++v14;\n  if ( v10 == 45 )\n    goto LABEL_7;\n  *v9 = 0;\n  endptr = 0LL;\n  v18 = __strtoul_internal(nptr, &endptr, 0, 0);\n  v19 = endptr;\n  v48 = v18;\n  v20 = *v9;\n  if ( endptr == nptr )\n  {\nLABEL_33:\n    if ( !v20 )\n    {\nLABEL_7:\n      v15 = 22;\n      v16 = -22;\n      goto LABEL_8;\n    }\nLABEL_13:\n    v16 = -v20;\n    goto LABEL_14;\n  }\n  if ( v20 && v18 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n    goto LABEL_13;\n  if ( !endptr || !*endptr )\n  {\n    v16 = 0;\n    *a4 = v18;\n    return v16;\n  }\n  v21 = 0;\n  v49 = 0LL;\n  while ( 1 )\n  {\n    v22 = v19[1];\n    if ( v22 == 105 )\n    {\n      if ( (v19[2] & 0xDF) == 66 && !v19[3] )\n      {\nLABEL_37:\n        v27 = 1024;\n        goto LABEL_38;\n      }\n      goto LABEL_23;\n    }\n    if ( (v22 & 0xDF) == 66 && !v19[2] )\n      break;\n    if ( !v22 )\n      goto LABEL_37;\nLABEL_23:\n    v23 = localeconv();\n    if ( !v23 )\n      goto LABEL_7;\n    if ( !v23->decimal_point )\n      goto LABEL_7;\n    s1 = v23->decimal_point;\n    v24 = strlen(v23->decimal_point);\n    if ( v49 )\n      goto LABEL_7;\n    if ( !*v19 )\n      goto LABEL_7;\n    v46 = v24;\n    if ( strncmp(s1, v19, v24) )\n      goto LABEL_7;\n    v25 = &v19[v46];\n    for ( i = v19[v46]; (_BYTE)i == 48; ++v21 )\n      i = *++v25;\n    if ( (*v12)[i] & 0x800 )\n    {\n      *v9 = 0;\n      v38 = v25;\n      endptr = 0LL;\n      v39 = __strtoul_internal(v25, &endptr, 0, 0);\n      v19 = endptr;\n      v49 = v39;\n      v20 = *v9;\n      if ( endptr == v38 )\n        goto LABEL_33;\n      if ( v20 )\n      {\n        if ( v39 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n          goto LABEL_13;\n        goto LABEL_62;\n      }\n      if ( v39 )\n      {\nLABEL_62:\n        if ( !endptr || !*endptr )\n          goto LABEL_7;\n      }\n    }\n    else\n    {\n      endptr = v25;\n      v19 = v25;\n    }\n  }\n  v27 = 1000;\nLABEL_38:\n  v28 = *v19;\n  v29 = strchr(\"KMGTPEZY\", v28);\n  if ( v29 )\n  {\n    v30 = (unsigned __int64)(v29 - \"KMGTPEZY\") + 1;\n    goto LABEL_40;\n  }\n  v45 = strchr(\"kmgtpezy\", v28);\n  if ( !v45 )\n    goto LABEL_7;\n  v30 = (unsigned __int64)(v45 - \"kmgtpezy\") + 1;\nLABEL_40:\n  if ( v30 )\n  {\n    if ( is_mul_ok(v27, v48) )\n    {\n      v31 = 0;\n      while ( 1 )\n      {\n        v48 *= v27;\n        if ( v30 - 1 == v31 )\n          break;\n        ++v31;\n        if ( !is_mul_ok(v27, v48) )\n          goto LABEL_77;\n      }\n      v16 = 0;\n    }\n    else\n    {\nLABEL_77:\n      v16 = -34;\n    }\n    if ( v49 )\n    {\n      v32 = v30 - 1;\n      v33 = 0;\n      v34 = 1LL;\n      do\n      {\n        v34 *= v27;\n        if ( v33 == v32 )\n          break;\n        ++v33;\n      }\n      while ( is_mul_ok(v27, v34) );\n      if ( v49 <= 0xA )\n      {\n        v36 = v49;\n        v35 = 10LL;\n      }\n      else\n      {\n        v35 = 10LL;\n        while ( 1 )\n        {\n          v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v49 >> 64) >> 3;\n          if ( v35 > 0x1999999999999999LL )\n            break;\n          v35 *= 10LL;\n          if ( v35 >= v49 )\n          {\n            v36 = v49;\n            break;\n          }\n        }\n      }\n      if ( v21 )\n      {\n        v37 = 0;\n        do\n        {\n          if ( v35 <= 0x1999999999999999LL )\n            v35 *= 10LL;\n          else\n            v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n          ++v37;\n        }\n        while ( v21 != v37 );\n      }\n      v40 = 1LL;\n      do\n      {\n        v41 = 10 * v40;\n        v42 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        v43 = v36 - 10 * v42;\n        v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        if ( v43 )\n        {\n          v44 = v35 / v40 / v43;\n          if ( v44 )\n            v48 += v34 / v44;\n        }\n        v40 = v41;\n      }\n      while ( v42 );\n    }\n    *v8 = v48;\nLABEL_14:\n    if ( (v16 & 0x80000000) != 0 )\n    {\n      v15 = -v16;\nLABEL_8:\n      *v9 = v15;\n    }\n  }\n  else\n  {\n    v16 = 0;\n    *a4 = v48;\n  }\n  return v16;\n}\n\n// write access to const memory has been detected, the output may be wrong!\n__int64 __usercall sub_8D30@<rax>(char *nptr@<rdi>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned __int64 *a4@<rsi>, __int64 a5@<r12>, __int64 a6@<r13>, __int64 a7@<r14>, __int64 a8@<r15>)\n{\n  unsigned __int64 *v8; // rbp\n  int *v9; // rbx\n  unsigned __int8 v10; // r14\n  const unsigned __int16 **v11; // rax\n  const unsigned __int16 **v12; // r13\n  const unsigned __int16 *v13; // rcx\n  char *v14; // rax\n  int v15; // eax\n  unsigned int v16; // ecx\n  unsigned __int64 v18; // rax\n  char *v19; // r14\n  int v20; // ecx\n  int v21; // er15\n  char v22; // al\n  struct lconv *v23; // rax\n  size_t v24; // rax\n  char *v25; // r8\n  __int64 i; // rax\n  signed int v27; // er13\n  int v28; // er14\n  char *v29; // rax\n  int v30; // edi\n  int v31; // ecx\n  int v32; // edi\n  int v33; // er8\n  unsigned __int64 v34; // r10\n  unsigned __int64 v35; // rdi\n  unsigned __int64 v36; // r8\n  int v37; // esi\n  char *v38; // ST08_8\n  unsigned __int64 v39; // rax\n  unsigned __int64 v40; // r9\n  signed __int64 v41; // r11\n  unsigned __int64 v42; // rsi\n  unsigned __int64 v43; // r13\n  unsigned __int64 v44; // r9\n  char *v45; // rax\n  size_t v46; // [rsp+0h] [rbp-70h]\n  char *s1; // [rsp+8h] [rbp-68h]\n  unsigned __int64 v48; // [rsp+10h] [rbp-60h]\n  unsigned __int64 v49; // [rsp+18h] [rbp-58h]\n  char *endptr; // [rsp+28h] [rbp-48h]\n  unsigned __int64 v51; // [rsp+30h] [rbp-40h]\n  __int64 v52; // [rsp+40h] [rbp-30h]\n  __int64 v53; // [rsp+48h] [rbp-28h]\n  __int64 v54; // [rsp+50h] [rbp-20h]\n  __int64 v55; // [rsp+58h] [rbp-18h]\n  __int64 v56; // [rsp+60h] [rbp-10h]\n  __int64 v57; // [rsp+68h] [rbp-8h]\n\n  v57 = a8;\n  v56 = a7;\n  v55 = a6;\n  v54 = a5;\n  v53 = a3;\n  v52 = a2;\n  v8 = a4;\n  *a4 = 0LL;\n  v51 = __readfsqword(0x28u);\n  v9 = __errno_location();\n  if ( !nptr )\n    goto LABEL_7;\n  v10 = *nptr;\n  if ( !*nptr )\n    goto LABEL_7;\n  v11 = __ctype_b_loc();\n  v12 = v11;\n  v13 = *v11;\n  v14 = nptr;\n  while ( v13[v10] & 0x2000 )\n    v10 = *++v14;\n  if ( v10 == 45 )\n    goto LABEL_7;\n  *v9 = 0;\n  endptr = 0LL;\n  v18 = __strtoul_internal(nptr, &endptr, 0, 0);\n  v19 = endptr;\n  v48 = v18;\n  v20 = *v9;\n  if ( endptr == nptr )\n  {\nLABEL_33:\n    if ( !v20 )\n    {\nLABEL_7:\n      v15 = 22;\n      v16 = -22;\n      goto LABEL_8;\n    }\nLABEL_13:\n    v16 = -v20;\n    goto LABEL_14;\n  }\n  if ( v20 && v18 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n    goto LABEL_13;\n  if ( !endptr || !*endptr )\n  {\n    v16 = 0;\n    *a4 = v18;\n    return v16;\n  }\n  v21 = 0;\n  v49 = 0LL;\n  while ( 1 )\n  {\n    v22 = v19[1];\n    if ( v22 == 105 )\n    {\n      if ( (v19[2] & 0xDF) == 66 && !v19[3] )\n      {\nLABEL_37:\n        v27 = 1024;\n        goto LABEL_38;\n      }\n      goto LABEL_23;\n    }\n    if ( (v22 & 0xDF) == 66 && !v19[2] )\n      break;\n    if ( !v22 )\n      goto LABEL_37;\nLABEL_23:\n    v23 = localeconv();\n    if ( !v23 )\n      goto LABEL_7;\n    if ( !v23->decimal_point )\n      goto LABEL_7;\n    s1 = v23->decimal_point;\n    v24 = strlen(v23->decimal_point);\n    if ( v49 )\n      goto LABEL_7;\n    if ( !*v19 )\n      goto LABEL_7;\n    v46 = v24;\n    if ( strncmp(s1, v19, v24) )\n      goto LABEL_7;\n    v25 = &v19[v46];\n    for ( i = v19[v46]; (_BYTE)i == 48; ++v21 )\n      i = *++v25;\n    if ( (*v12)[i] & 0x800 )\n    {\n      *v9 = 0;\n      v38 = v25;\n      endptr = 0LL;\n      v39 = __strtoul_internal(v25, &endptr, 0, 0);\n      v19 = endptr;\n      v49 = v39;\n      v20 = *v9;\n      if ( endptr == v38 )\n        goto LABEL_33;\n      if ( v20 )\n      {\n        if ( v39 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n          goto LABEL_13;\n        goto LABEL_62;\n      }\n      if ( v39 )\n      {\nLABEL_62:\n        if ( !endptr || !*endptr )\n          goto LABEL_7;\n      }\n    }\n    else\n    {\n      endptr = v25;\n      v19 = v25;\n    }\n  }\n  v27 = 1000;\nLABEL_38:\n  v28 = *v19;\n  v29 = strchr(\"KMGTPEZY\", v28);\n  if ( v29 )\n  {\n    v30 = (unsigned __int64)(v29 - \"KMGTPEZY\") + 1;\n    goto LABEL_40;\n  }\n  v45 = strchr(\"kmgtpezy\", v28);\n  if ( !v45 )\n    goto LABEL_7;\n  v30 = (unsigned __int64)(v45 - \"kmgtpezy\") + 1;\nLABEL_40:\n  if ( v30 )\n  {\n    if ( is_mul_ok(v27, v48) )\n    {\n      v31 = 0;\n      while ( 1 )\n      {\n        v48 *= v27;\n        if ( v30 - 1 == v31 )\n          break;\n        ++v31;\n        if ( !is_mul_ok(v27, v48) )\n          goto LABEL_77;\n      }\n      v16 = 0;\n    }\n    else\n    {\nLABEL_77:\n      v16 = -34;\n    }\n    if ( v49 )\n    {\n      v32 = v30 - 1;\n      v33 = 0;\n      v34 = 1LL;\n      do\n      {\n        v34 *= v27;\n        if ( v33 == v32 )\n          break;\n        ++v33;\n      }\n      while ( is_mul_ok(v27, v34) );\n      if ( v49 <= 0xA )\n      {\n        v36 = v49;\n        v35 = 10LL;\n      }\n      else\n      {\n        v35 = 10LL;\n        while ( 1 )\n        {\n          v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v49 >> 64) >> 3;\n          if ( v35 > 0x1999999999999999LL )\n            break;\n          v35 *= 10LL;\n          if ( v35 >= v49 )\n          {\n            v36 = v49;\n            break;\n          }\n        }\n      }\n      if ( v21 )\n      {\n        v37 = 0;\n        do\n        {\n          if ( v35 <= 0x1999999999999999LL )\n            v35 *= 10LL;\n          else\n            v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n          ++v37;\n        }\n        while ( v21 != v37 );\n      }\n      v40 = 1LL;\n      do\n      {\n        v41 = 10 * v40;\n        v42 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        v43 = v36 - 10 * v42;\n        v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        if ( v43 )\n        {\n          v44 = v35 / v40 / v43;\n          if ( v44 )\n            v48 += v34 / v44;\n        }\n        v40 = v41;\n      }\n      while ( v42 );\n    }\n    *v8 = v48;\nLABEL_14:\n    if ( (v16 & 0x80000000) != 0 )\n    {\n      v15 = -v16;\nLABEL_8:\n      *v9 = v15;\n    }\n  }\n  else\n  {\n    v16 = 0;\n    *a4 = v48;\n  }\n  return v16;\n}\n\n// write access to const memory has been detected, the output may be wrong!\n__int64 __usercall sub_8D30@<rax>(char *nptr@<rdi>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned __int64 *a4@<rsi>, __int64 a5@<r12>, __int64 a6@<r13>, __int64 a7@<r14>, __int64 a8@<r15>)\n{\n  unsigned __int64 *v8; // rbp\n  int *v9; // rbx\n  unsigned __int8 v10; // r14\n  const unsigned __int16 **v11; // rax\n  const unsigned __int16 **v12; // r13\n  const unsigned __int16 *v13; // rcx\n  char *v14; // rax\n  int v15; // eax\n  unsigned int v16; // ecx\n  unsigned __int64 v18; // rax\n  char *v19; // r14\n  int v20; // ecx\n  int v21; // er15\n  char v22; // al\n  struct lconv *v23; // rax\n  size_t v24; // rax\n  char *v25; // r8\n  __int64 i; // rax\n  signed int v27; // er13\n  int v28; // er14\n  char *v29; // rax\n  int v30; // edi\n  int v31; // ecx\n  int v32; // edi\n  int v33; // er8\n  unsigned __int64 v34; // r10\n  unsigned __int64 v35; // rdi\n  unsigned __int64 v36; // r8\n  int v37; // esi\n  char *v38; // ST08_8\n  unsigned __int64 v39; // rax\n  unsigned __int64 v40; // r9\n  signed __int64 v41; // r11\n  unsigned __int64 v42; // rsi\n  unsigned __int64 v43; // r13\n  unsigned __int64 v44; // r9\n  char *v45; // rax\n  size_t v46; // [rsp+0h] [rbp-70h]\n  char *s1; // [rsp+8h] [rbp-68h]\n  unsigned __int64 v48; // [rsp+10h] [rbp-60h]\n  unsigned __int64 v49; // [rsp+18h] [rbp-58h]\n  char *endptr; // [rsp+28h] [rbp-48h]\n  unsigned __int64 v51; // [rsp+30h] [rbp-40h]\n  __int64 v52; // [rsp+40h] [rbp-30h]\n  __int64 v53; // [rsp+48h] [rbp-28h]\n  __int64 v54; // [rsp+50h] [rbp-20h]\n  __int64 v55; // [rsp+58h] [rbp-18h]\n  __int64 v56; // [rsp+60h] [rbp-10h]\n  __int64 v57; // [rsp+68h] [rbp-8h]\n\n  v57 = a8;\n  v56 = a7;\n  v55 = a6;\n  v54 = a5;\n  v53 = a3;\n  v52 = a2;\n  v8 = a4;\n  *a4 = 0LL;\n  v51 = __readfsqword(0x28u);\n  v9 = __errno_location();\n  if ( !nptr )\n    goto LABEL_7;\n  v10 = *nptr;\n  if ( !*nptr )\n    goto LABEL_7;\n  v11 = __ctype_b_loc();\n  v12 = v11;\n  v13 = *v11;\n  v14 = nptr;\n  while ( v13[v10] & 0x2000 )\n    v10 = *++v14;\n  if ( v10 == 45 )\n    goto LABEL_7;\n  *v9 = 0;\n  endptr = 0LL;\n  v18 = __strtoul_internal(nptr, &endptr, 0, 0);\n  v19 = endptr;\n  v48 = v18;\n  v20 = *v9;\n  if ( endptr == nptr )\n  {\nLABEL_33:\n    if ( !v20 )\n    {\nLABEL_7:\n      v15 = 22;\n      v16 = -22;\n      goto LABEL_8;\n    }\nLABEL_13:\n    v16 = -v20;\n    goto LABEL_14;\n  }\n  if ( v20 && v18 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n    goto LABEL_13;\n  if ( !endptr || !*endptr )\n  {\n    v16 = 0;\n    *a4 = v18;\n    return v16;\n  }\n  v21 = 0;\n  v49 = 0LL;\n  while ( 1 )\n  {\n    v22 = v19[1];\n    if ( v22 == 105 )\n    {\n      if ( (v19[2] & 0xDF) == 66 && !v19[3] )\n      {\nLABEL_37:\n        v27 = 1024;\n        goto LABEL_38;\n      }\n      goto LABEL_23;\n    }\n    if ( (v22 & 0xDF) == 66 && !v19[2] )\n      break;\n    if ( !v22 )\n      goto LABEL_37;\nLABEL_23:\n    v23 = localeconv();\n    if ( !v23 )\n      goto LABEL_7;\n    if ( !v23->decimal_point )\n      goto LABEL_7;\n    s1 = v23->decimal_point;\n    v24 = strlen(v23->decimal_point);\n    if ( v49 )\n      goto LABEL_7;\n    if ( !*v19 )\n      goto LABEL_7;\n    v46 = v24;\n    if ( strncmp(s1, v19, v24) )\n      goto LABEL_7;\n    v25 = &v19[v46];\n    for ( i = v19[v46]; (_BYTE)i == 48; ++v21 )\n      i = *++v25;\n    if ( (*v12)[i] & 0x800 )\n    {\n      *v9 = 0;\n      v38 = v25;\n      endptr = 0LL;\n      v39 = __strtoul_internal(v25, &endptr, 0, 0);\n      v19 = endptr;\n      v49 = v39;\n      v20 = *v9;\n      if ( endptr == v38 )\n        goto LABEL_33;\n      if ( v20 )\n      {\n        if ( v39 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n          goto LABEL_13;\n        goto LABEL_62;\n      }\n      if ( v39 )\n      {\nLABEL_62:\n        if ( !endptr || !*endptr )\n          goto LABEL_7;\n      }\n    }\n    else\n    {\n      endptr = v25;\n      v19 = v25;\n    }\n  }\n  v27 = 1000;\nLABEL_38:\n  v28 = *v19;\n  v29 = strchr(\"KMGTPEZY\", v28);\n  if ( v29 )\n  {\n    v30 = (unsigned __int64)(v29 - \"KMGTPEZY\") + 1;\n    goto LABEL_40;\n  }\n  v45 = strchr(\"kmgtpezy\", v28);\n  if ( !v45 )\n    goto LABEL_7;\n  v30 = (unsigned __int64)(v45 - \"kmgtpezy\") + 1;\nLABEL_40:\n  if ( v30 )\n  {\n    if ( is_mul_ok(v27, v48) )\n    {\n      v31 = 0;\n      while ( 1 )\n      {\n        v48 *= v27;\n        if ( v30 - 1 == v31 )\n          break;\n        ++v31;\n        if ( !is_mul_ok(v27, v48) )\n          goto LABEL_77;\n      }\n      v16 = 0;\n    }\n    else\n    {\nLABEL_77:\n      v16 = -34;\n    }\n    if ( v49 )\n    {\n      v32 = v30 - 1;\n      v33 = 0;\n      v34 = 1LL;\n      do\n      {\n        v34 *= v27;\n        if ( v33 == v32 )\n          break;\n        ++v33;\n      }\n      while ( is_mul_ok(v27, v34) );\n      if ( v49 <= 0xA )\n      {\n        v36 = v49;\n        v35 = 10LL;\n      }\n      else\n      {\n        v35 = 10LL;\n        while ( 1 )\n        {\n          v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v49 >> 64) >> 3;\n          if ( v35 > 0x1999999999999999LL )\n            break;\n          v35 *= 10LL;\n          if ( v35 >= v49 )\n          {\n            v36 = v49;\n            break;\n          }\n        }\n      }\n      if ( v21 )\n      {\n        v37 = 0;\n        do\n        {\n          if ( v35 <= 0x1999999999999999LL )\n            v35 *= 10LL;\n          else\n            v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n          ++v37;\n        }\n        while ( v21 != v37 );\n      }\n      v40 = 1LL;\n      do\n      {\n        v41 = 10 * v40;\n        v42 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        v43 = v36 - 10 * v42;\n        v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        if ( v43 )\n        {\n          v44 = v35 / v40 / v43;\n          if ( v44 )\n            v48 += v34 / v44;\n        }\n        v40 = v41;\n      }\n      while ( v42 );\n    }\n    *v8 = v48;\nLABEL_14:\n    if ( (v16 & 0x80000000) != 0 )\n    {\n      v15 = -v16;\nLABEL_8:\n      *v9 = v15;\n    }\n  }\n  else\n  {\n    v16 = 0;\n    *a4 = v48;\n  }\n  return v16;\n}\n\n// write access to const memory has been detected, the output may be wrong!\n__int64 __usercall sub_8D30@<rax>(char *nptr@<rdi>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned __int64 *a4@<rsi>, __int64 a5@<r12>, __int64 a6@<r13>, __int64 a7@<r14>, __int64 a8@<r15>)\n{\n  unsigned __int64 *v8; // rbp\n  int *v9; // rbx\n  unsigned __int8 v10; // r14\n  const unsigned __int16 **v11; // rax\n  const unsigned __int16 **v12; // r13\n  const unsigned __int16 *v13; // rcx\n  char *v14; // rax\n  int v15; // eax\n  unsigned int v16; // ecx\n  unsigned __int64 v18; // rax\n  char *v19; // r14\n  int v20; // ecx\n  int v21; // er15\n  char v22; // al\n  struct lconv *v23; // rax\n  size_t v24; // rax\n  char *v25; // r8\n  __int64 i; // rax\n  signed int v27; // er13\n  int v28; // er14\n  char *v29; // rax\n  int v30; // edi\n  int v31; // ecx\n  int v32; // edi\n  int v33; // er8\n  unsigned __int64 v34; // r10\n  unsigned __int64 v35; // rdi\n  unsigned __int64 v36; // r8\n  int v37; // esi\n  char *v38; // ST08_8\n  unsigned __int64 v39; // rax\n  unsigned __int64 v40; // r9\n  signed __int64 v41; // r11\n  unsigned __int64 v42; // rsi\n  unsigned __int64 v43; // r13\n  unsigned __int64 v44; // r9\n  char *v45; // rax\n  size_t v46; // [rsp+0h] [rbp-70h]\n  char *s1; // [rsp+8h] [rbp-68h]\n  unsigned __int64 v48; // [rsp+10h] [rbp-60h]\n  unsigned __int64 v49; // [rsp+18h] [rbp-58h]\n  char *endptr; // [rsp+28h] [rbp-48h]\n  unsigned __int64 v51; // [rsp+30h] [rbp-40h]\n  __int64 v52; // [rsp+40h] [rbp-30h]\n  __int64 v53; // [rsp+48h] [rbp-28h]\n  __int64 v54; // [rsp+50h] [rbp-20h]\n  __int64 v55; // [rsp+58h] [rbp-18h]\n  __int64 v56; // [rsp+60h] [rbp-10h]\n  __int64 v57; // [rsp+68h] [rbp-8h]\n\n  v57 = a8;\n  v56 = a7;\n  v55 = a6;\n  v54 = a5;\n  v53 = a3;\n  v52 = a2;\n  v8 = a4;\n  *a4 = 0LL;\n  v51 = __readfsqword(0x28u);\n  v9 = __errno_location();\n  if ( !nptr )\n    goto LABEL_7;\n  v10 = *nptr;\n  if ( !*nptr )\n    goto LABEL_7;\n  v11 = __ctype_b_loc();\n  v12 = v11;\n  v13 = *v11;\n  v14 = nptr;\n  while ( v13[v10] & 0x2000 )\n    v10 = *++v14;\n  if ( v10 == 45 )\n    goto LABEL_7;\n  *v9 = 0;\n  endptr = 0LL;\n  v18 = __strtoul_internal(nptr, &endptr, 0, 0);\n  v19 = endptr;\n  v48 = v18;\n  v20 = *v9;\n  if ( endptr == nptr )\n  {\nLABEL_33:\n    if ( !v20 )\n    {\nLABEL_7:\n      v15 = 22;\n      v16 = -22;\n      goto LABEL_8;\n    }\nLABEL_13:\n    v16 = -v20;\n    goto LABEL_14;\n  }\n  if ( v20 && v18 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n    goto LABEL_13;\n  if ( !endptr || !*endptr )\n  {\n    v16 = 0;\n    *a4 = v18;\n    return v16;\n  }\n  v21 = 0;\n  v49 = 0LL;\n  while ( 1 )\n  {\n    v22 = v19[1];\n    if ( v22 == 105 )\n    {\n      if ( (v19[2] & 0xDF) == 66 && !v19[3] )\n      {\nLABEL_37:\n        v27 = 1024;\n        goto LABEL_38;\n      }\n      goto LABEL_23;\n    }\n    if ( (v22 & 0xDF) == 66 && !v19[2] )\n      break;\n    if ( !v22 )\n      goto LABEL_37;\nLABEL_23:\n    v23 = localeconv();\n    if ( !v23 )\n      goto LABEL_7;\n    if ( !v23->decimal_point )\n      goto LABEL_7;\n    s1 = v23->decimal_point;\n    v24 = strlen(v23->decimal_point);\n    if ( v49 )\n      goto LABEL_7;\n    if ( !*v19 )\n      goto LABEL_7;\n    v46 = v24;\n    if ( strncmp(s1, v19, v24) )\n      goto LABEL_7;\n    v25 = &v19[v46];\n    for ( i = v19[v46]; (_BYTE)i == 48; ++v21 )\n      i = *++v25;\n    if ( (*v12)[i] & 0x800 )\n    {\n      *v9 = 0;\n      v38 = v25;\n      endptr = 0LL;\n      v39 = __strtoul_internal(v25, &endptr, 0, 0);\n      v19 = endptr;\n      v49 = v39;\n      v20 = *v9;\n      if ( endptr == v38 )\n        goto LABEL_33;\n      if ( v20 )\n      {\n        if ( v39 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n          goto LABEL_13;\n        goto LABEL_62;\n      }\n      if ( v39 )\n      {\nLABEL_62:\n        if ( !endptr || !*endptr )\n          goto LABEL_7;\n      }\n    }\n    else\n    {\n      endptr = v25;\n      v19 = v25;\n    }\n  }\n  v27 = 1000;\nLABEL_38:\n  v28 = *v19;\n  v29 = strchr(\"KMGTPEZY\", v28);\n  if ( v29 )\n  {\n    v30 = (unsigned __int64)(v29 - \"KMGTPEZY\") + 1;\n    goto LABEL_40;\n  }\n  v45 = strchr(\"kmgtpezy\", v28);\n  if ( !v45 )\n    goto LABEL_7;\n  v30 = (unsigned __int64)(v45 - \"kmgtpezy\") + 1;\nLABEL_40:\n  if ( v30 )\n  {\n    if ( is_mul_ok(v27, v48) )\n    {\n      v31 = 0;\n      while ( 1 )\n      {\n        v48 *= v27;\n        if ( v30 - 1 == v31 )\n          break;\n        ++v31;\n        if ( !is_mul_ok(v27, v48) )\n          goto LABEL_77;\n      }\n      v16 = 0;\n    }\n    else\n    {\nLABEL_77:\n      v16 = -34;\n    }\n    if ( v49 )\n    {\n      v32 = v30 - 1;\n      v33 = 0;\n      v34 = 1LL;\n      do\n      {\n        v34 *= v27;\n        if ( v33 == v32 )\n          break;\n        ++v33;\n      }\n      while ( is_mul_ok(v27, v34) );\n      if ( v49 <= 0xA )\n      {\n        v36 = v49;\n        v35 = 10LL;\n      }\n      else\n      {\n        v35 = 10LL;\n        while ( 1 )\n        {\n          v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v49 >> 64) >> 3;\n          if ( v35 > 0x1999999999999999LL )\n            break;\n          v35 *= 10LL;\n          if ( v35 >= v49 )\n          {\n            v36 = v49;\n            break;\n          }\n        }\n      }\n      if ( v21 )\n      {\n        v37 = 0;\n        do\n        {\n          if ( v35 <= 0x1999999999999999LL )\n            v35 *= 10LL;\n          else\n            v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n          ++v37;\n        }\n        while ( v21 != v37 );\n      }\n      v40 = 1LL;\n      do\n      {\n        v41 = 10 * v40;\n        v42 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        v43 = v36 - 10 * v42;\n        v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        if ( v43 )\n        {\n          v44 = v35 / v40 / v43;\n          if ( v44 )\n            v48 += v34 / v44;\n        }\n        v40 = v41;\n      }\n      while ( v42 );\n    }\n    *v8 = v48;\nLABEL_14:\n    if ( (v16 & 0x80000000) != 0 )\n    {\n      v15 = -v16;\nLABEL_8:\n      *v9 = v15;\n    }\n  }\n  else\n  {\n    v16 = 0;\n    *a4 = v48;\n  }\n  return v16;\n}\n\n// write access to const memory has been detected, the output may be wrong!\n__int64 __usercall sub_8D30@<rax>(char *nptr@<rdi>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned __int64 *a4@<rsi>, __int64 a5@<r12>, __int64 a6@<r13>, __int64 a7@<r14>, __int64 a8@<r15>)\n{\n  unsigned __int64 *v8; // rbp\n  int *v9; // rbx\n  unsigned __int8 v10; // r14\n  const unsigned __int16 **v11; // rax\n  const unsigned __int16 **v12; // r13\n  const unsigned __int16 *v13; // rcx\n  char *v14; // rax\n  int v15; // eax\n  unsigned int v16; // ecx\n  unsigned __int64 v18; // rax\n  char *v19; // r14\n  int v20; // ecx\n  int v21; // er15\n  char v22; // al\n  struct lconv *v23; // rax\n  size_t v24; // rax\n  char *v25; // r8\n  __int64 i; // rax\n  signed int v27; // er13\n  int v28; // er14\n  char *v29; // rax\n  int v30; // edi\n  int v31; // ecx\n  int v32; // edi\n  int v33; // er8\n  unsigned __int64 v34; // r10\n  unsigned __int64 v35; // rdi\n  unsigned __int64 v36; // r8\n  int v37; // esi\n  char *v38; // ST08_8\n  unsigned __int64 v39; // rax\n  unsigned __int64 v40; // r9\n  signed __int64 v41; // r11\n  unsigned __int64 v42; // rsi\n  unsigned __int64 v43; // r13\n  unsigned __int64 v44; // r9\n  char *v45; // rax\n  size_t v46; // [rsp+0h] [rbp-70h]\n  char *s1; // [rsp+8h] [rbp-68h]\n  unsigned __int64 v48; // [rsp+10h] [rbp-60h]\n  unsigned __int64 v49; // [rsp+18h] [rbp-58h]\n  char *endptr; // [rsp+28h] [rbp-48h]\n  unsigned __int64 v51; // [rsp+30h] [rbp-40h]\n  __int64 v52; // [rsp+40h] [rbp-30h]\n  __int64 v53; // [rsp+48h] [rbp-28h]\n  __int64 v54; // [rsp+50h] [rbp-20h]\n  __int64 v55; // [rsp+58h] [rbp-18h]\n  __int64 v56; // [rsp+60h] [rbp-10h]\n  __int64 v57; // [rsp+68h] [rbp-8h]\n\n  v57 = a8;\n  v56 = a7;\n  v55 = a6;\n  v54 = a5;\n  v53 = a3;\n  v52 = a2;\n  v8 = a4;\n  *a4 = 0LL;\n  v51 = __readfsqword(0x28u);\n  v9 = __errno_location();\n  if ( !nptr )\n    goto LABEL_7;\n  v10 = *nptr;\n  if ( !*nptr )\n    goto LABEL_7;\n  v11 = __ctype_b_loc();\n  v12 = v11;\n  v13 = *v11;\n  v14 = nptr;\n  while ( v13[v10] & 0x2000 )\n    v10 = *++v14;\n  if ( v10 == 45 )\n    goto LABEL_7;\n  *v9 = 0;\n  endptr = 0LL;\n  v18 = __strtoul_internal(nptr, &endptr, 0, 0);\n  v19 = endptr;\n  v48 = v18;\n  v20 = *v9;\n  if ( endptr == nptr )\n  {\nLABEL_33:\n    if ( !v20 )\n    {\nLABEL_7:\n      v15 = 22;\n      v16 = -22;\n      goto LABEL_8;\n    }\nLABEL_13:\n    v16 = -v20;\n    goto LABEL_14;\n  }\n  if ( v20 && v18 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n    goto LABEL_13;\n  if ( !endptr || !*endptr )\n  {\n    v16 = 0;\n    *a4 = v18;\n    return v16;\n  }\n  v21 = 0;\n  v49 = 0LL;\n  while ( 1 )\n  {\n    v22 = v19[1];\n    if ( v22 == 105 )\n    {\n      if ( (v19[2] & 0xDF) == 66 && !v19[3] )\n      {\nLABEL_37:\n        v27 = 1024;\n        goto LABEL_38;\n      }\n      goto LABEL_23;\n    }\n    if ( (v22 & 0xDF) == 66 && !v19[2] )\n      break;\n    if ( !v22 )\n      goto LABEL_37;\nLABEL_23:\n    v23 = localeconv();\n    if ( !v23 )\n      goto LABEL_7;\n    if ( !v23->decimal_point )\n      goto LABEL_7;\n    s1 = v23->decimal_point;\n    v24 = strlen(v23->decimal_point);\n    if ( v49 )\n      goto LABEL_7;\n    if ( !*v19 )\n      goto LABEL_7;\n    v46 = v24;\n    if ( strncmp(s1, v19, v24) )\n      goto LABEL_7;\n    v25 = &v19[v46];\n    for ( i = v19[v46]; (_BYTE)i == 48; ++v21 )\n      i = *++v25;\n    if ( (*v12)[i] & 0x800 )\n    {\n      *v9 = 0;\n      v38 = v25;\n      endptr = 0LL;\n      v39 = __strtoul_internal(v25, &endptr, 0, 0);\n      v19 = endptr;\n      v49 = v39;\n      v20 = *v9;\n      if ( endptr == v38 )\n        goto LABEL_33;\n      if ( v20 )\n      {\n        if ( v39 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n          goto LABEL_13;\n        goto LABEL_62;\n      }\n      if ( v39 )\n      {\nLABEL_62:\n        if ( !endptr || !*endptr )\n          goto LABEL_7;\n      }\n    }\n    else\n    {\n      endptr = v25;\n      v19 = v25;\n    }\n  }\n  v27 = 1000;\nLABEL_38:\n  v28 = *v19;\n  v29 = strchr(\"KMGTPEZY\", v28);\n  if ( v29 )\n  {\n    v30 = (unsigned __int64)(v29 - \"KMGTPEZY\") + 1;\n    goto LABEL_40;\n  }\n  v45 = strchr(\"kmgtpezy\", v28);\n  if ( !v45 )\n    goto LABEL_7;\n  v30 = (unsigned __int64)(v45 - \"kmgtpezy\") + 1;\nLABEL_40:\n  if ( v30 )\n  {\n    if ( is_mul_ok(v27, v48) )\n    {\n      v31 = 0;\n      while ( 1 )\n      {\n        v48 *= v27;\n        if ( v30 - 1 == v31 )\n          break;\n        ++v31;\n        if ( !is_mul_ok(v27, v48) )\n          goto LABEL_77;\n      }\n      v16 = 0;\n    }\n    else\n    {\nLABEL_77:\n      v16 = -34;\n    }\n    if ( v49 )\n    {\n      v32 = v30 - 1;\n      v33 = 0;\n      v34 = 1LL;\n      do\n      {\n        v34 *= v27;\n        if ( v33 == v32 )\n          break;\n        ++v33;\n      }\n      while ( is_mul_ok(v27, v34) );\n      if ( v49 <= 0xA )\n      {\n        v36 = v49;\n        v35 = 10LL;\n      }\n      else\n      {\n        v35 = 10LL;\n        while ( 1 )\n        {\n          v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v49 >> 64) >> 3;\n          if ( v35 > 0x1999999999999999LL )\n            break;\n          v35 *= 10LL;\n          if ( v35 >= v49 )\n          {\n            v36 = v49;\n            break;\n          }\n        }\n      }\n      if ( v21 )\n      {\n        v37 = 0;\n        do\n        {\n          if ( v35 <= 0x1999999999999999LL )\n            v35 *= 10LL;\n          else\n            v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n          ++v37;\n        }\n        while ( v21 != v37 );\n      }\n      v40 = 1LL;\n      do\n      {\n        v41 = 10 * v40;\n        v42 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        v43 = v36 - 10 * v42;\n        v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        if ( v43 )\n        {\n          v44 = v35 / v40 / v43;\n          if ( v44 )\n            v48 += v34 / v44;\n        }\n        v40 = v41;\n      }\n      while ( v42 );\n    }\n    *v8 = v48;\nLABEL_14:\n    if ( (v16 & 0x80000000) != 0 )\n    {\n      v15 = -v16;\nLABEL_8:\n      *v9 = v15;\n    }\n  }\n  else\n  {\n    v16 = 0;\n    *a4 = v48;\n  }\n  return v16;\n}\n\n// write access to const memory has been detected, the output may be wrong!\n__int64 __usercall sub_8D30@<rax>(char *nptr@<rdi>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned __int64 *a4@<rsi>, __int64 a5@<r12>, __int64 a6@<r13>, __int64 a7@<r14>, __int64 a8@<r15>)\n{\n  unsigned __int64 *v8; // rbp\n  int *v9; // rbx\n  unsigned __int8 v10; // r14\n  const unsigned __int16 **v11; // rax\n  const unsigned __int16 **v12; // r13\n  const unsigned __int16 *v13; // rcx\n  char *v14; // rax\n  int v15; // eax\n  unsigned int v16; // ecx\n  unsigned __int64 v18; // rax\n  char *v19; // r14\n  int v20; // ecx\n  int v21; // er15\n  char v22; // al\n  struct lconv *v23; // rax\n  size_t v24; // rax\n  char *v25; // r8\n  __int64 i; // rax\n  signed int v27; // er13\n  int v28; // er14\n  char *v29; // rax\n  int v30; // edi\n  int v31; // ecx\n  int v32; // edi\n  int v33; // er8\n  unsigned __int64 v34; // r10\n  unsigned __int64 v35; // rdi\n  unsigned __int64 v36; // r8\n  int v37; // esi\n  char *v38; // ST08_8\n  unsigned __int64 v39; // rax\n  unsigned __int64 v40; // r9\n  signed __int64 v41; // r11\n  unsigned __int64 v42; // rsi\n  unsigned __int64 v43; // r13\n  unsigned __int64 v44; // r9\n  char *v45; // rax\n  size_t v46; // [rsp+0h] [rbp-70h]\n  char *s1; // [rsp+8h] [rbp-68h]\n  unsigned __int64 v48; // [rsp+10h] [rbp-60h]\n  unsigned __int64 v49; // [rsp+18h] [rbp-58h]\n  char *endptr; // [rsp+28h] [rbp-48h]\n  unsigned __int64 v51; // [rsp+30h] [rbp-40h]\n  __int64 v52; // [rsp+40h] [rbp-30h]\n  __int64 v53; // [rsp+48h] [rbp-28h]\n  __int64 v54; // [rsp+50h] [rbp-20h]\n  __int64 v55; // [rsp+58h] [rbp-18h]\n  __int64 v56; // [rsp+60h] [rbp-10h]\n  __int64 v57; // [rsp+68h] [rbp-8h]\n\n  v57 = a8;\n  v56 = a7;\n  v55 = a6;\n  v54 = a5;\n  v53 = a3;\n  v52 = a2;\n  v8 = a4;\n  *a4 = 0LL;\n  v51 = __readfsqword(0x28u);\n  v9 = __errno_location();\n  if ( !nptr )\n    goto LABEL_7;\n  v10 = *nptr;\n  if ( !*nptr )\n    goto LABEL_7;\n  v11 = __ctype_b_loc();\n  v12 = v11;\n  v13 = *v11;\n  v14 = nptr;\n  while ( v13[v10] & 0x2000 )\n    v10 = *++v14;\n  if ( v10 == 45 )\n    goto LABEL_7;\n  *v9 = 0;\n  endptr = 0LL;\n  v18 = __strtoul_internal(nptr, &endptr, 0, 0);\n  v19 = endptr;\n  v48 = v18;\n  v20 = *v9;\n  if ( endptr == nptr )\n  {\nLABEL_33:\n    if ( !v20 )\n    {\nLABEL_7:\n      v15 = 22;\n      v16 = -22;\n      goto LABEL_8;\n    }\nLABEL_13:\n    v16 = -v20;\n    goto LABEL_14;\n  }\n  if ( v20 && v18 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n    goto LABEL_13;\n  if ( !endptr || !*endptr )\n  {\n    v16 = 0;\n    *a4 = v18;\n    return v16;\n  }\n  v21 = 0;\n  v49 = 0LL;\n  while ( 1 )\n  {\n    v22 = v19[1];\n    if ( v22 == 105 )\n    {\n      if ( (v19[2] & 0xDF) == 66 && !v19[3] )\n      {\nLABEL_37:\n        v27 = 1024;\n        goto LABEL_38;\n      }\n      goto LABEL_23;\n    }\n    if ( (v22 & 0xDF) == 66 && !v19[2] )\n      break;\n    if ( !v22 )\n      goto LABEL_37;\nLABEL_23:\n    v23 = localeconv();\n    if ( !v23 )\n      goto LABEL_7;\n    if ( !v23->decimal_point )\n      goto LABEL_7;\n    s1 = v23->decimal_point;\n    v24 = strlen(v23->decimal_point);\n    if ( v49 )\n      goto LABEL_7;\n    if ( !*v19 )\n      goto LABEL_7;\n    v46 = v24;\n    if ( strncmp(s1, v19, v24) )\n      goto LABEL_7;\n    v25 = &v19[v46];\n    for ( i = v19[v46]; (_BYTE)i == 48; ++v21 )\n      i = *++v25;\n    if ( (*v12)[i] & 0x800 )\n    {\n      *v9 = 0;\n      v38 = v25;\n      endptr = 0LL;\n      v39 = __strtoul_internal(v25, &endptr, 0, 0);\n      v19 = endptr;\n      v49 = v39;\n      v20 = *v9;\n      if ( endptr == v38 )\n        goto LABEL_33;\n      if ( v20 )\n      {\n        if ( v39 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n          goto LABEL_13;\n        goto LABEL_62;\n      }\n      if ( v39 )\n      {\nLABEL_62:\n        if ( !endptr || !*endptr )\n          goto LABEL_7;\n      }\n    }\n    else\n    {\n      endptr = v25;\n      v19 = v25;\n    }\n  }\n  v27 = 1000;\nLABEL_38:\n  v28 = *v19;\n  v29 = strchr(\"KMGTPEZY\", v28);\n  if ( v29 )\n  {\n    v30 = (unsigned __int64)(v29 - \"KMGTPEZY\") + 1;\n    goto LABEL_40;\n  }\n  v45 = strchr(\"kmgtpezy\", v28);\n  if ( !v45 )\n    goto LABEL_7;\n  v30 = (unsigned __int64)(v45 - \"kmgtpezy\") + 1;\nLABEL_40:\n  if ( v30 )\n  {\n    if ( is_mul_ok(v27, v48) )\n    {\n      v31 = 0;\n      while ( 1 )\n      {\n        v48 *= v27;\n        if ( v30 - 1 == v31 )\n          break;\n        ++v31;\n        if ( !is_mul_ok(v27, v48) )\n          goto LABEL_77;\n      }\n      v16 = 0;\n    }\n    else\n    {\nLABEL_77:\n      v16 = -34;\n    }\n    if ( v49 )\n    {\n      v32 = v30 - 1;\n      v33 = 0;\n      v34 = 1LL;\n      do\n      {\n        v34 *= v27;\n        if ( v33 == v32 )\n          break;\n        ++v33;\n      }\n      while ( is_mul_ok(v27, v34) );\n      if ( v49 <= 0xA )\n      {\n        v36 = v49;\n        v35 = 10LL;\n      }\n      else\n      {\n        v35 = 10LL;\n        while ( 1 )\n        {\n          v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v49 >> 64) >> 3;\n          if ( v35 > 0x1999999999999999LL )\n            break;\n          v35 *= 10LL;\n          if ( v35 >= v49 )\n          {\n            v36 = v49;\n            break;\n          }\n        }\n      }\n      if ( v21 )\n      {\n        v37 = 0;\n        do\n        {\n          if ( v35 <= 0x1999999999999999LL )\n            v35 *= 10LL;\n          else\n            v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n          ++v37;\n        }\n        while ( v21 != v37 );\n      }\n      v40 = 1LL;\n      do\n      {\n        v41 = 10 * v40;\n        v42 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        v43 = v36 - 10 * v42;\n        v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        if ( v43 )\n        {\n          v44 = v35 / v40 / v43;\n          if ( v44 )\n            v48 += v34 / v44;\n        }\n        v40 = v41;\n      }\n      while ( v42 );\n    }\n    *v8 = v48;\nLABEL_14:\n    if ( (v16 & 0x80000000) != 0 )\n    {\n      v15 = -v16;\nLABEL_8:\n      *v9 = v15;\n    }\n  }\n  else\n  {\n    v16 = 0;\n    *a4 = v48;\n  }\n  return v16;\n}\n\n// write access to const memory has been detected, the output may be wrong!\n__int64 __usercall sub_8D30@<rax>(char *nptr@<rdi>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned __int64 *a4@<rsi>, __int64 a5@<r12>, __int64 a6@<r13>, __int64 a7@<r14>, __int64 a8@<r15>)\n{\n  unsigned __int64 *v8; // rbp\n  int *v9; // rbx\n  unsigned __int8 v10; // r14\n  const unsigned __int16 **v11; // rax\n  const unsigned __int16 **v12; // r13\n  const unsigned __int16 *v13; // rcx\n  char *v14; // rax\n  int v15; // eax\n  unsigned int v16; // ecx\n  unsigned __int64 v18; // rax\n  char *v19; // r14\n  int v20; // ecx\n  int v21; // er15\n  char v22; // al\n  struct lconv *v23; // rax\n  size_t v24; // rax\n  char *v25; // r8\n  __int64 i; // rax\n  signed int v27; // er13\n  int v28; // er14\n  char *v29; // rax\n  int v30; // edi\n  int v31; // ecx\n  int v32; // edi\n  int v33; // er8\n  unsigned __int64 v34; // r10\n  unsigned __int64 v35; // rdi\n  unsigned __int64 v36; // r8\n  int v37; // esi\n  char *v38; // ST08_8\n  unsigned __int64 v39; // rax\n  unsigned __int64 v40; // r9\n  signed __int64 v41; // r11\n  unsigned __int64 v42; // rsi\n  unsigned __int64 v43; // r13\n  unsigned __int64 v44; // r9\n  char *v45; // rax\n  size_t v46; // [rsp+0h] [rbp-70h]\n  char *s1; // [rsp+8h] [rbp-68h]\n  unsigned __int64 v48; // [rsp+10h] [rbp-60h]\n  unsigned __int64 v49; // [rsp+18h] [rbp-58h]\n  char *endptr; // [rsp+28h] [rbp-48h]\n  unsigned __int64 v51; // [rsp+30h] [rbp-40h]\n  __int64 v52; // [rsp+40h] [rbp-30h]\n  __int64 v53; // [rsp+48h] [rbp-28h]\n  __int64 v54; // [rsp+50h] [rbp-20h]\n  __int64 v55; // [rsp+58h] [rbp-18h]\n  __int64 v56; // [rsp+60h] [rbp-10h]\n  __int64 v57; // [rsp+68h] [rbp-8h]\n\n  v57 = a8;\n  v56 = a7;\n  v55 = a6;\n  v54 = a5;\n  v53 = a3;\n  v52 = a2;\n  v8 = a4;\n  *a4 = 0LL;\n  v51 = __readfsqword(0x28u);\n  v9 = __errno_location();\n  if ( !nptr )\n    goto LABEL_7;\n  v10 = *nptr;\n  if ( !*nptr )\n    goto LABEL_7;\n  v11 = __ctype_b_loc();\n  v12 = v11;\n  v13 = *v11;\n  v14 = nptr;\n  while ( v13[v10] & 0x2000 )\n    v10 = *++v14;\n  if ( v10 == 45 )\n    goto LABEL_7;\n  *v9 = 0;\n  endptr = 0LL;\n  v18 = __strtoul_internal(nptr, &endptr, 0, 0);\n  v19 = endptr;\n  v48 = v18;\n  v20 = *v9;\n  if ( endptr == nptr )\n  {\nLABEL_33:\n    if ( !v20 )\n    {\nLABEL_7:\n      v15 = 22;\n      v16 = -22;\n      goto LABEL_8;\n    }\nLABEL_13:\n    v16 = -v20;\n    goto LABEL_14;\n  }\n  if ( v20 && v18 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n    goto LABEL_13;\n  if ( !endptr || !*endptr )\n  {\n    v16 = 0;\n    *a4 = v18;\n    return v16;\n  }\n  v21 = 0;\n  v49 = 0LL;\n  while ( 1 )\n  {\n    v22 = v19[1];\n    if ( v22 == 105 )\n    {\n      if ( (v19[2] & 0xDF) == 66 && !v19[3] )\n      {\nLABEL_37:\n        v27 = 1024;\n        goto LABEL_38;\n      }\n      goto LABEL_23;\n    }\n    if ( (v22 & 0xDF) == 66 && !v19[2] )\n      break;\n    if ( !v22 )\n      goto LABEL_37;\nLABEL_23:\n    v23 = localeconv();\n    if ( !v23 )\n      goto LABEL_7;\n    if ( !v23->decimal_point )\n      goto LABEL_7;\n    s1 = v23->decimal_point;\n    v24 = strlen(v23->decimal_point);\n    if ( v49 )\n      goto LABEL_7;\n    if ( !*v19 )\n      goto LABEL_7;\n    v46 = v24;\n    if ( strncmp(s1, v19, v24) )\n      goto LABEL_7;\n    v25 = &v19[v46];\n    for ( i = v19[v46]; (_BYTE)i == 48; ++v21 )\n      i = *++v25;\n    if ( (*v12)[i] & 0x800 )\n    {\n      *v9 = 0;\n      v38 = v25;\n      endptr = 0LL;\n      v39 = __strtoul_internal(v25, &endptr, 0, 0);\n      v19 = endptr;\n      v49 = v39;\n      v20 = *v9;\n      if ( endptr == v38 )\n        goto LABEL_33;\n      if ( v20 )\n      {\n        if ( v39 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n          goto LABEL_13;\n        goto LABEL_62;\n      }\n      if ( v39 )\n      {\nLABEL_62:\n        if ( !endptr || !*endptr )\n          goto LABEL_7;\n      }\n    }\n    else\n    {\n      endptr = v25;\n      v19 = v25;\n    }\n  }\n  v27 = 1000;\nLABEL_38:\n  v28 = *v19;\n  v29 = strchr(\"KMGTPEZY\", v28);\n  if ( v29 )\n  {\n    v30 = (unsigned __int64)(v29 - \"KMGTPEZY\") + 1;\n    goto LABEL_40;\n  }\n  v45 = strchr(\"kmgtpezy\", v28);\n  if ( !v45 )\n    goto LABEL_7;\n  v30 = (unsigned __int64)(v45 - \"kmgtpezy\") + 1;\nLABEL_40:\n  if ( v30 )\n  {\n    if ( is_mul_ok(v27, v48) )\n    {\n      v31 = 0;\n      while ( 1 )\n      {\n        v48 *= v27;\n        if ( v30 - 1 == v31 )\n          break;\n        ++v31;\n        if ( !is_mul_ok(v27, v48) )\n          goto LABEL_77;\n      }\n      v16 = 0;\n    }\n    else\n    {\nLABEL_77:\n      v16 = -34;\n    }\n    if ( v49 )\n    {\n      v32 = v30 - 1;\n      v33 = 0;\n      v34 = 1LL;\n      do\n      {\n        v34 *= v27;\n        if ( v33 == v32 )\n          break;\n        ++v33;\n      }\n      while ( is_mul_ok(v27, v34) );\n      if ( v49 <= 0xA )\n      {\n        v36 = v49;\n        v35 = 10LL;\n      }\n      else\n      {\n        v35 = 10LL;\n        while ( 1 )\n        {\n          v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v49 >> 64) >> 3;\n          if ( v35 > 0x1999999999999999LL )\n            break;\n          v35 *= 10LL;\n          if ( v35 >= v49 )\n          {\n            v36 = v49;\n            break;\n          }\n        }\n      }\n      if ( v21 )\n      {\n        v37 = 0;\n        do\n        {\n          if ( v35 <= 0x1999999999999999LL )\n            v35 *= 10LL;\n          else\n            v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n          ++v37;\n        }\n        while ( v21 != v37 );\n      }\n      v40 = 1LL;\n      do\n      {\n        v41 = 10 * v40;\n        v42 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        v43 = v36 - 10 * v42;\n        v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        if ( v43 )\n        {\n          v44 = v35 / v40 / v43;\n          if ( v44 )\n            v48 += v34 / v44;\n        }\n        v40 = v41;\n      }\n      while ( v42 );\n    }\n    *v8 = v48;\nLABEL_14:\n    if ( (v16 & 0x80000000) != 0 )\n    {\n      v15 = -v16;\nLABEL_8:\n      *v9 = v15;\n    }\n  }\n  else\n  {\n    v16 = 0;\n    *a4 = v48;\n  }\n  return v16;\n}\n\n// write access to const memory has been detected, the output may be wrong!\n__int64 __usercall sub_8D30@<rax>(char *nptr@<rdi>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned __int64 *a4@<rsi>, __int64 a5@<r12>, __int64 a6@<r13>, __int64 a7@<r14>, __int64 a8@<r15>)\n{\n  unsigned __int64 *v8; // rbp\n  int *v9; // rbx\n  unsigned __int8 v10; // r14\n  const unsigned __int16 **v11; // rax\n  const unsigned __int16 **v12; // r13\n  const unsigned __int16 *v13; // rcx\n  char *v14; // rax\n  int v15; // eax\n  unsigned int v16; // ecx\n  unsigned __int64 v18; // rax\n  char *v19; // r14\n  int v20; // ecx\n  int v21; // er15\n  char v22; // al\n  struct lconv *v23; // rax\n  size_t v24; // rax\n  char *v25; // r8\n  __int64 i; // rax\n  signed int v27; // er13\n  int v28; // er14\n  char *v29; // rax\n  int v30; // edi\n  int v31; // ecx\n  int v32; // edi\n  int v33; // er8\n  unsigned __int64 v34; // r10\n  unsigned __int64 v35; // rdi\n  unsigned __int64 v36; // r8\n  int v37; // esi\n  char *v38; // ST08_8\n  unsigned __int64 v39; // rax\n  unsigned __int64 v40; // r9\n  signed __int64 v41; // r11\n  unsigned __int64 v42; // rsi\n  unsigned __int64 v43; // r13\n  unsigned __int64 v44; // r9\n  char *v45; // rax\n  size_t v46; // [rsp+0h] [rbp-70h]\n  char *s1; // [rsp+8h] [rbp-68h]\n  unsigned __int64 v48; // [rsp+10h] [rbp-60h]\n  unsigned __int64 v49; // [rsp+18h] [rbp-58h]\n  char *endptr; // [rsp+28h] [rbp-48h]\n  unsigned __int64 v51; // [rsp+30h] [rbp-40h]\n  __int64 v52; // [rsp+40h] [rbp-30h]\n  __int64 v53; // [rsp+48h] [rbp-28h]\n  __int64 v54; // [rsp+50h] [rbp-20h]\n  __int64 v55; // [rsp+58h] [rbp-18h]\n  __int64 v56; // [rsp+60h] [rbp-10h]\n  __int64 v57; // [rsp+68h] [rbp-8h]\n\n  v57 = a8;\n  v56 = a7;\n  v55 = a6;\n  v54 = a5;\n  v53 = a3;\n  v52 = a2;\n  v8 = a4;\n  *a4 = 0LL;\n  v51 = __readfsqword(0x28u);\n  v9 = __errno_location();\n  if ( !nptr )\n    goto LABEL_7;\n  v10 = *nptr;\n  if ( !*nptr )\n    goto LABEL_7;\n  v11 = __ctype_b_loc();\n  v12 = v11;\n  v13 = *v11;\n  v14 = nptr;\n  while ( v13[v10] & 0x2000 )\n    v10 = *++v14;\n  if ( v10 == 45 )\n    goto LABEL_7;\n  *v9 = 0;\n  endptr = 0LL;\n  v18 = __strtoul_internal(nptr, &endptr, 0, 0);\n  v19 = endptr;\n  v48 = v18;\n  v20 = *v9;\n  if ( endptr == nptr )\n  {\nLABEL_33:\n    if ( !v20 )\n    {\nLABEL_7:\n      v15 = 22;\n      v16 = -22;\n      goto LABEL_8;\n    }\nLABEL_13:\n    v16 = -v20;\n    goto LABEL_14;\n  }\n  if ( v20 && v18 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n    goto LABEL_13;\n  if ( !endptr || !*endptr )\n  {\n    v16 = 0;\n    *a4 = v18;\n    return v16;\n  }\n  v21 = 0;\n  v49 = 0LL;\n  while ( 1 )\n  {\n    v22 = v19[1];\n    if ( v22 == 105 )\n    {\n      if ( (v19[2] & 0xDF) == 66 && !v19[3] )\n      {\nLABEL_37:\n        v27 = 1024;\n        goto LABEL_38;\n      }\n      goto LABEL_23;\n    }\n    if ( (v22 & 0xDF) == 66 && !v19[2] )\n      break;\n    if ( !v22 )\n      goto LABEL_37;\nLABEL_23:\n    v23 = localeconv();\n    if ( !v23 )\n      goto LABEL_7;\n    if ( !v23->decimal_point )\n      goto LABEL_7;\n    s1 = v23->decimal_point;\n    v24 = strlen(v23->decimal_point);\n    if ( v49 )\n      goto LABEL_7;\n    if ( !*v19 )\n      goto LABEL_7;\n    v46 = v24;\n    if ( strncmp(s1, v19, v24) )\n      goto LABEL_7;\n    v25 = &v19[v46];\n    for ( i = v19[v46]; (_BYTE)i == 48; ++v21 )\n      i = *++v25;\n    if ( (*v12)[i] & 0x800 )\n    {\n      *v9 = 0;\n      v38 = v25;\n      endptr = 0LL;\n      v39 = __strtoul_internal(v25, &endptr, 0, 0);\n      v19 = endptr;\n      v49 = v39;\n      v20 = *v9;\n      if ( endptr == v38 )\n        goto LABEL_33;\n      if ( v20 )\n      {\n        if ( v39 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n          goto LABEL_13;\n        goto LABEL_62;\n      }\n      if ( v39 )\n      {\nLABEL_62:\n        if ( !endptr || !*endptr )\n          goto LABEL_7;\n      }\n    }\n    else\n    {\n      endptr = v25;\n      v19 = v25;\n    }\n  }\n  v27 = 1000;\nLABEL_38:\n  v28 = *v19;\n  v29 = strchr(\"KMGTPEZY\", v28);\n  if ( v29 )\n  {\n    v30 = (unsigned __int64)(v29 - \"KMGTPEZY\") + 1;\n    goto LABEL_40;\n  }\n  v45 = strchr(\"kmgtpezy\", v28);\n  if ( !v45 )\n    goto LABEL_7;\n  v30 = (unsigned __int64)(v45 - \"kmgtpezy\") + 1;\nLABEL_40:\n  if ( v30 )\n  {\n    if ( is_mul_ok(v27, v48) )\n    {\n      v31 = 0;\n      while ( 1 )\n      {\n        v48 *= v27;\n        if ( v30 - 1 == v31 )\n          break;\n        ++v31;\n        if ( !is_mul_ok(v27, v48) )\n          goto LABEL_77;\n      }\n      v16 = 0;\n    }\n    else\n    {\nLABEL_77:\n      v16 = -34;\n    }\n    if ( v49 )\n    {\n      v32 = v30 - 1;\n      v33 = 0;\n      v34 = 1LL;\n      do\n      {\n        v34 *= v27;\n        if ( v33 == v32 )\n          break;\n        ++v33;\n      }\n      while ( is_mul_ok(v27, v34) );\n      if ( v49 <= 0xA )\n      {\n        v36 = v49;\n        v35 = 10LL;\n      }\n      else\n      {\n        v35 = 10LL;\n        while ( 1 )\n        {\n          v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v49 >> 64) >> 3;\n          if ( v35 > 0x1999999999999999LL )\n            break;\n          v35 *= 10LL;\n          if ( v35 >= v49 )\n          {\n            v36 = v49;\n            break;\n          }\n        }\n      }\n      if ( v21 )\n      {\n        v37 = 0;\n        do\n        {\n          if ( v35 <= 0x1999999999999999LL )\n            v35 *= 10LL;\n          else\n            v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n          ++v37;\n        }\n        while ( v21 != v37 );\n      }\n      v40 = 1LL;\n      do\n      {\n        v41 = 10 * v40;\n        v42 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        v43 = v36 - 10 * v42;\n        v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        if ( v43 )\n        {\n          v44 = v35 / v40 / v43;\n          if ( v44 )\n            v48 += v34 / v44;\n        }\n        v40 = v41;\n      }\n      while ( v42 );\n    }\n    *v8 = v48;\nLABEL_14:\n    if ( (v16 & 0x80000000) != 0 )\n    {\n      v15 = -v16;\nLABEL_8:\n      *v9 = v15;\n    }\n  }\n  else\n  {\n    v16 = 0;\n    *a4 = v48;\n  }\n  return v16;\n}\n\n// write access to const memory has been detected, the output may be wrong!\n__int64 __usercall sub_8D30@<rax>(char *nptr@<rdi>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned __int64 *a4@<rsi>, __int64 a5@<r12>, __int64 a6@<r13>, __int64 a7@<r14>, __int64 a8@<r15>)\n{\n  unsigned __int64 *v8; // rbp\n  int *v9; // rbx\n  unsigned __int8 v10; // r14\n  const unsigned __int16 **v11; // rax\n  const unsigned __int16 **v12; // r13\n  const unsigned __int16 *v13; // rcx\n  char *v14; // rax\n  int v15; // eax\n  unsigned int v16; // ecx\n  unsigned __int64 v18; // rax\n  char *v19; // r14\n  int v20; // ecx\n  int v21; // er15\n  char v22; // al\n  struct lconv *v23; // rax\n  size_t v24; // rax\n  char *v25; // r8\n  __int64 i; // rax\n  signed int v27; // er13\n  int v28; // er14\n  char *v29; // rax\n  int v30; // edi\n  int v31; // ecx\n  int v32; // edi\n  int v33; // er8\n  unsigned __int64 v34; // r10\n  unsigned __int64 v35; // rdi\n  unsigned __int64 v36; // r8\n  int v37; // esi\n  char *v38; // ST08_8\n  unsigned __int64 v39; // rax\n  unsigned __int64 v40; // r9\n  signed __int64 v41; // r11\n  unsigned __int64 v42; // rsi\n  unsigned __int64 v43; // r13\n  unsigned __int64 v44; // r9\n  char *v45; // rax\n  size_t v46; // [rsp+0h] [rbp-70h]\n  char *s1; // [rsp+8h] [rbp-68h]\n  unsigned __int64 v48; // [rsp+10h] [rbp-60h]\n  unsigned __int64 v49; // [rsp+18h] [rbp-58h]\n  char *endptr; // [rsp+28h] [rbp-48h]\n  unsigned __int64 v51; // [rsp+30h] [rbp-40h]\n  __int64 v52; // [rsp+40h] [rbp-30h]\n  __int64 v53; // [rsp+48h] [rbp-28h]\n  __int64 v54; // [rsp+50h] [rbp-20h]\n  __int64 v55; // [rsp+58h] [rbp-18h]\n  __int64 v56; // [rsp+60h] [rbp-10h]\n  __int64 v57; // [rsp+68h] [rbp-8h]\n\n  v57 = a8;\n  v56 = a7;\n  v55 = a6;\n  v54 = a5;\n  v53 = a3;\n  v52 = a2;\n  v8 = a4;\n  *a4 = 0LL;\n  v51 = __readfsqword(0x28u);\n  v9 = __errno_location();\n  if ( !nptr )\n    goto LABEL_7;\n  v10 = *nptr;\n  if ( !*nptr )\n    goto LABEL_7;\n  v11 = __ctype_b_loc();\n  v12 = v11;\n  v13 = *v11;\n  v14 = nptr;\n  while ( v13[v10] & 0x2000 )\n    v10 = *++v14;\n  if ( v10 == 45 )\n    goto LABEL_7;\n  *v9 = 0;\n  endptr = 0LL;\n  v18 = __strtoul_internal(nptr, &endptr, 0, 0);\n  v19 = endptr;\n  v48 = v18;\n  v20 = *v9;\n  if ( endptr == nptr )\n  {\nLABEL_33:\n    if ( !v20 )\n    {\nLABEL_7:\n      v15 = 22;\n      v16 = -22;\n      goto LABEL_8;\n    }\nLABEL_13:\n    v16 = -v20;\n    goto LABEL_14;\n  }\n  if ( v20 && v18 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n    goto LABEL_13;\n  if ( !endptr || !*endptr )\n  {\n    v16 = 0;\n    *a4 = v18;\n    return v16;\n  }\n  v21 = 0;\n  v49 = 0LL;\n  while ( 1 )\n  {\n    v22 = v19[1];\n    if ( v22 == 105 )\n    {\n      if ( (v19[2] & 0xDF) == 66 && !v19[3] )\n      {\nLABEL_37:\n        v27 = 1024;\n        goto LABEL_38;\n      }\n      goto LABEL_23;\n    }\n    if ( (v22 & 0xDF) == 66 && !v19[2] )\n      break;\n    if ( !v22 )\n      goto LABEL_37;\nLABEL_23:\n    v23 = localeconv();\n    if ( !v23 )\n      goto LABEL_7;\n    if ( !v23->decimal_point )\n      goto LABEL_7;\n    s1 = v23->decimal_point;\n    v24 = strlen(v23->decimal_point);\n    if ( v49 )\n      goto LABEL_7;\n    if ( !*v19 )\n      goto LABEL_7;\n    v46 = v24;\n    if ( strncmp(s1, v19, v24) )\n      goto LABEL_7;\n    v25 = &v19[v46];\n    for ( i = v19[v46]; (_BYTE)i == 48; ++v21 )\n      i = *++v25;\n    if ( (*v12)[i] & 0x800 )\n    {\n      *v9 = 0;\n      v38 = v25;\n      endptr = 0LL;\n      v39 = __strtoul_internal(v25, &endptr, 0, 0);\n      v19 = endptr;\n      v49 = v39;\n      v20 = *v9;\n      if ( endptr == v38 )\n        goto LABEL_33;\n      if ( v20 )\n      {\n        if ( v39 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n          goto LABEL_13;\n        goto LABEL_62;\n      }\n      if ( v39 )\n      {\nLABEL_62:\n        if ( !endptr || !*endptr )\n          goto LABEL_7;\n      }\n    }\n    else\n    {\n      endptr = v25;\n      v19 = v25;\n    }\n  }\n  v27 = 1000;\nLABEL_38:\n  v28 = *v19;\n  v29 = strchr(\"KMGTPEZY\", v28);\n  if ( v29 )\n  {\n    v30 = (unsigned __int64)(v29 - \"KMGTPEZY\") + 1;\n    goto LABEL_40;\n  }\n  v45 = strchr(\"kmgtpezy\", v28);\n  if ( !v45 )\n    goto LABEL_7;\n  v30 = (unsigned __int64)(v45 - \"kmgtpezy\") + 1;\nLABEL_40:\n  if ( v30 )\n  {\n    if ( is_mul_ok(v27, v48) )\n    {\n      v31 = 0;\n      while ( 1 )\n      {\n        v48 *= v27;\n        if ( v30 - 1 == v31 )\n          break;\n        ++v31;\n        if ( !is_mul_ok(v27, v48) )\n          goto LABEL_77;\n      }\n      v16 = 0;\n    }\n    else\n    {\nLABEL_77:\n      v16 = -34;\n    }\n    if ( v49 )\n    {\n      v32 = v30 - 1;\n      v33 = 0;\n      v34 = 1LL;\n      do\n      {\n        v34 *= v27;\n        if ( v33 == v32 )\n          break;\n        ++v33;\n      }\n      while ( is_mul_ok(v27, v34) );\n      if ( v49 <= 0xA )\n      {\n        v36 = v49;\n        v35 = 10LL;\n      }\n      else\n      {\n        v35 = 10LL;\n        while ( 1 )\n        {\n          v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v49 >> 64) >> 3;\n          if ( v35 > 0x1999999999999999LL )\n            break;\n          v35 *= 10LL;\n          if ( v35 >= v49 )\n          {\n            v36 = v49;\n            break;\n          }\n        }\n      }\n      if ( v21 )\n      {\n        v37 = 0;\n        do\n        {\n          if ( v35 <= 0x1999999999999999LL )\n            v35 *= 10LL;\n          else\n            v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n          ++v37;\n        }\n        while ( v21 != v37 );\n      }\n      v40 = 1LL;\n      do\n      {\n        v41 = 10 * v40;\n        v42 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        v43 = v36 - 10 * v42;\n        v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        if ( v43 )\n        {\n          v44 = v35 / v40 / v43;\n          if ( v44 )\n            v48 += v34 / v44;\n        }\n        v40 = v41;\n      }\n      while ( v42 );\n    }\n    *v8 = v48;\nLABEL_14:\n    if ( (v16 & 0x80000000) != 0 )\n    {\n      v15 = -v16;\nLABEL_8:\n      *v9 = v15;\n    }\n  }\n  else\n  {\n    v16 = 0;\n    *a4 = v48;\n  }\n  return v16;\n}\n", 
            "funcStartAddr": "0x8c38L", 
            "funcEndAddr": "0x8d29L", 
            "funcName": "sub_8D30"
        }, 
        {
            "decompiledFuncCode": "// write access to const memory has been detected, the output may be wrong!\n__int64 __usercall sub_8D30@<rax>(char *nptr@<rdi>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned __int64 *a4@<rsi>, __int64 a5@<r12>, __int64 a6@<r13>, __int64 a7@<r14>, __int64 a8@<r15>)\n{\n  unsigned __int64 *v8; // rbp\n  int *v9; // rbx\n  unsigned __int8 v10; // r14\n  const unsigned __int16 **v11; // rax\n  const unsigned __int16 **v12; // r13\n  const unsigned __int16 *v13; // rcx\n  char *v14; // rax\n  int v15; // eax\n  unsigned int v16; // ecx\n  unsigned __int64 v18; // rax\n  char *v19; // r14\n  int v20; // ecx\n  int v21; // er15\n  char v22; // al\n  struct lconv *v23; // rax\n  size_t v24; // rax\n  char *v25; // r8\n  __int64 i; // rax\n  signed int v27; // er13\n  int v28; // er14\n  char *v29; // rax\n  int v30; // edi\n  int v31; // ecx\n  int v32; // edi\n  int v33; // er8\n  unsigned __int64 v34; // r10\n  unsigned __int64 v35; // rdi\n  unsigned __int64 v36; // r8\n  int v37; // esi\n  char *v38; // ST08_8\n  unsigned __int64 v39; // rax\n  unsigned __int64 v40; // r9\n  signed __int64 v41; // r11\n  unsigned __int64 v42; // rsi\n  unsigned __int64 v43; // r13\n  unsigned __int64 v44; // r9\n  char *v45; // rax\n  size_t v46; // [rsp+0h] [rbp-70h]\n  char *s1; // [rsp+8h] [rbp-68h]\n  unsigned __int64 v48; // [rsp+10h] [rbp-60h]\n  unsigned __int64 v49; // [rsp+18h] [rbp-58h]\n  char *endptr; // [rsp+28h] [rbp-48h]\n  unsigned __int64 v51; // [rsp+30h] [rbp-40h]\n  __int64 v52; // [rsp+40h] [rbp-30h]\n  __int64 v53; // [rsp+48h] [rbp-28h]\n  __int64 v54; // [rsp+50h] [rbp-20h]\n  __int64 v55; // [rsp+58h] [rbp-18h]\n  __int64 v56; // [rsp+60h] [rbp-10h]\n  __int64 v57; // [rsp+68h] [rbp-8h]\n\n  v57 = a8;\n  v56 = a7;\n  v55 = a6;\n  v54 = a5;\n  v53 = a3;\n  v52 = a2;\n  v8 = a4;\n  *a4 = 0LL;\n  v51 = __readfsqword(0x28u);\n  v9 = __errno_location();\n  if ( !nptr )\n    goto LABEL_7;\n  v10 = *nptr;\n  if ( !*nptr )\n    goto LABEL_7;\n  v11 = __ctype_b_loc();\n  v12 = v11;\n  v13 = *v11;\n  v14 = nptr;\n  while ( v13[v10] & 0x2000 )\n    v10 = *++v14;\n  if ( v10 == 45 )\n    goto LABEL_7;\n  *v9 = 0;\n  endptr = 0LL;\n  v18 = __strtoul_internal(nptr, &endptr, 0, 0);\n  v19 = endptr;\n  v48 = v18;\n  v20 = *v9;\n  if ( endptr == nptr )\n  {\nLABEL_33:\n    if ( !v20 )\n    {\nLABEL_7:\n      v15 = 22;\n      v16 = -22;\n      goto LABEL_8;\n    }\nLABEL_13:\n    v16 = -v20;\n    goto LABEL_14;\n  }\n  if ( v20 && v18 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n    goto LABEL_13;\n  if ( !endptr || !*endptr )\n  {\n    v16 = 0;\n    *a4 = v18;\n    return v16;\n  }\n  v21 = 0;\n  v49 = 0LL;\n  while ( 1 )\n  {\n    v22 = v19[1];\n    if ( v22 == 105 )\n    {\n      if ( (v19[2] & 0xDF) == 66 && !v19[3] )\n      {\nLABEL_37:\n        v27 = 1024;\n        goto LABEL_38;\n      }\n      goto LABEL_23;\n    }\n    if ( (v22 & 0xDF) == 66 && !v19[2] )\n      break;\n    if ( !v22 )\n      goto LABEL_37;\nLABEL_23:\n    v23 = localeconv();\n    if ( !v23 )\n      goto LABEL_7;\n    if ( !v23->decimal_point )\n      goto LABEL_7;\n    s1 = v23->decimal_point;\n    v24 = strlen(v23->decimal_point);\n    if ( v49 )\n      goto LABEL_7;\n    if ( !*v19 )\n      goto LABEL_7;\n    v46 = v24;\n    if ( strncmp(s1, v19, v24) )\n      goto LABEL_7;\n    v25 = &v19[v46];\n    for ( i = v19[v46]; (_BYTE)i == 48; ++v21 )\n      i = *++v25;\n    if ( (*v12)[i] & 0x800 )\n    {\n      *v9 = 0;\n      v38 = v25;\n      endptr = 0LL;\n      v39 = __strtoul_internal(v25, &endptr, 0, 0);\n      v19 = endptr;\n      v49 = v39;\n      v20 = *v9;\n      if ( endptr == v38 )\n        goto LABEL_33;\n      if ( v20 )\n      {\n        if ( v39 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n          goto LABEL_13;\n        goto LABEL_62;\n      }\n      if ( v39 )\n      {\nLABEL_62:\n        if ( !endptr || !*endptr )\n          goto LABEL_7;\n      }\n    }\n    else\n    {\n      endptr = v25;\n      v19 = v25;\n    }\n  }\n  v27 = 1000;\nLABEL_38:\n  v28 = *v19;\n  v29 = strchr(\"KMGTPEZY\", v28);\n  if ( v29 )\n  {\n    v30 = (unsigned __int64)(v29 - \"KMGTPEZY\") + 1;\n    goto LABEL_40;\n  }\n  v45 = strchr(\"kmgtpezy\", v28);\n  if ( !v45 )\n    goto LABEL_7;\n  v30 = (unsigned __int64)(v45 - \"kmgtpezy\") + 1;\nLABEL_40:\n  if ( v30 )\n  {\n    if ( is_mul_ok(v27, v48) )\n    {\n      v31 = 0;\n      while ( 1 )\n      {\n        v48 *= v27;\n        if ( v30 - 1 == v31 )\n          break;\n        ++v31;\n        if ( !is_mul_ok(v27, v48) )\n          goto LABEL_77;\n      }\n      v16 = 0;\n    }\n    else\n    {\nLABEL_77:\n      v16 = -34;\n    }\n    if ( v49 )\n    {\n      v32 = v30 - 1;\n      v33 = 0;\n      v34 = 1LL;\n      do\n      {\n        v34 *= v27;\n        if ( v33 == v32 )\n          break;\n        ++v33;\n      }\n      while ( is_mul_ok(v27, v34) );\n      if ( v49 <= 0xA )\n      {\n        v36 = v49;\n        v35 = 10LL;\n      }\n      else\n      {\n        v35 = 10LL;\n        while ( 1 )\n        {\n          v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v49 >> 64) >> 3;\n          if ( v35 > 0x1999999999999999LL )\n            break;\n          v35 *= 10LL;\n          if ( v35 >= v49 )\n          {\n            v36 = v49;\n            break;\n          }\n        }\n      }\n      if ( v21 )\n      {\n        v37 = 0;\n        do\n        {\n          if ( v35 <= 0x1999999999999999LL )\n            v35 *= 10LL;\n          else\n            v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n          ++v37;\n        }\n        while ( v21 != v37 );\n      }\n      v40 = 1LL;\n      do\n      {\n        v41 = 10 * v40;\n        v42 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        v43 = v36 - 10 * v42;\n        v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        if ( v43 )\n        {\n          v44 = v35 / v40 / v43;\n          if ( v44 )\n            v48 += v34 / v44;\n        }\n        v40 = v41;\n      }\n      while ( v42 );\n    }\n    *v8 = v48;\nLABEL_14:\n    if ( (v16 & 0x80000000) != 0 )\n    {\n      v15 = -v16;\nLABEL_8:\n      *v9 = v15;\n    }\n  }\n  else\n  {\n    v16 = 0;\n    *a4 = v48;\n  }\n  return v16;\n}\n\n// write access to const memory has been detected, the output may be wrong!\n__int64 __usercall sub_8D30@<rax>(char *nptr@<rdi>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned __int64 *a4@<rsi>, __int64 a5@<r12>, __int64 a6@<r13>, __int64 a7@<r14>, __int64 a8@<r15>)\n{\n  unsigned __int64 *v8; // rbp\n  int *v9; // rbx\n  unsigned __int8 v10; // r14\n  const unsigned __int16 **v11; // rax\n  const unsigned __int16 **v12; // r13\n  const unsigned __int16 *v13; // rcx\n  char *v14; // rax\n  int v15; // eax\n  unsigned int v16; // ecx\n  unsigned __int64 v18; // rax\n  char *v19; // r14\n  int v20; // ecx\n  int v21; // er15\n  char v22; // al\n  struct lconv *v23; // rax\n  size_t v24; // rax\n  char *v25; // r8\n  __int64 i; // rax\n  signed int v27; // er13\n  int v28; // er14\n  char *v29; // rax\n  int v30; // edi\n  int v31; // ecx\n  int v32; // edi\n  int v33; // er8\n  unsigned __int64 v34; // r10\n  unsigned __int64 v35; // rdi\n  unsigned __int64 v36; // r8\n  int v37; // esi\n  char *v38; // ST08_8\n  unsigned __int64 v39; // rax\n  unsigned __int64 v40; // r9\n  signed __int64 v41; // r11\n  unsigned __int64 v42; // rsi\n  unsigned __int64 v43; // r13\n  unsigned __int64 v44; // r9\n  char *v45; // rax\n  size_t v46; // [rsp+0h] [rbp-70h]\n  char *s1; // [rsp+8h] [rbp-68h]\n  unsigned __int64 v48; // [rsp+10h] [rbp-60h]\n  unsigned __int64 v49; // [rsp+18h] [rbp-58h]\n  char *endptr; // [rsp+28h] [rbp-48h]\n  unsigned __int64 v51; // [rsp+30h] [rbp-40h]\n  __int64 v52; // [rsp+40h] [rbp-30h]\n  __int64 v53; // [rsp+48h] [rbp-28h]\n  __int64 v54; // [rsp+50h] [rbp-20h]\n  __int64 v55; // [rsp+58h] [rbp-18h]\n  __int64 v56; // [rsp+60h] [rbp-10h]\n  __int64 v57; // [rsp+68h] [rbp-8h]\n\n  v57 = a8;\n  v56 = a7;\n  v55 = a6;\n  v54 = a5;\n  v53 = a3;\n  v52 = a2;\n  v8 = a4;\n  *a4 = 0LL;\n  v51 = __readfsqword(0x28u);\n  v9 = __errno_location();\n  if ( !nptr )\n    goto LABEL_7;\n  v10 = *nptr;\n  if ( !*nptr )\n    goto LABEL_7;\n  v11 = __ctype_b_loc();\n  v12 = v11;\n  v13 = *v11;\n  v14 = nptr;\n  while ( v13[v10] & 0x2000 )\n    v10 = *++v14;\n  if ( v10 == 45 )\n    goto LABEL_7;\n  *v9 = 0;\n  endptr = 0LL;\n  v18 = __strtoul_internal(nptr, &endptr, 0, 0);\n  v19 = endptr;\n  v48 = v18;\n  v20 = *v9;\n  if ( endptr == nptr )\n  {\nLABEL_33:\n    if ( !v20 )\n    {\nLABEL_7:\n      v15 = 22;\n      v16 = -22;\n      goto LABEL_8;\n    }\nLABEL_13:\n    v16 = -v20;\n    goto LABEL_14;\n  }\n  if ( v20 && v18 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n    goto LABEL_13;\n  if ( !endptr || !*endptr )\n  {\n    v16 = 0;\n    *a4 = v18;\n    return v16;\n  }\n  v21 = 0;\n  v49 = 0LL;\n  while ( 1 )\n  {\n    v22 = v19[1];\n    if ( v22 == 105 )\n    {\n      if ( (v19[2] & 0xDF) == 66 && !v19[3] )\n      {\nLABEL_37:\n        v27 = 1024;\n        goto LABEL_38;\n      }\n      goto LABEL_23;\n    }\n    if ( (v22 & 0xDF) == 66 && !v19[2] )\n      break;\n    if ( !v22 )\n      goto LABEL_37;\nLABEL_23:\n    v23 = localeconv();\n    if ( !v23 )\n      goto LABEL_7;\n    if ( !v23->decimal_point )\n      goto LABEL_7;\n    s1 = v23->decimal_point;\n    v24 = strlen(v23->decimal_point);\n    if ( v49 )\n      goto LABEL_7;\n    if ( !*v19 )\n      goto LABEL_7;\n    v46 = v24;\n    if ( strncmp(s1, v19, v24) )\n      goto LABEL_7;\n    v25 = &v19[v46];\n    for ( i = v19[v46]; (_BYTE)i == 48; ++v21 )\n      i = *++v25;\n    if ( (*v12)[i] & 0x800 )\n    {\n      *v9 = 0;\n      v38 = v25;\n      endptr = 0LL;\n      v39 = __strtoul_internal(v25, &endptr, 0, 0);\n      v19 = endptr;\n      v49 = v39;\n      v20 = *v9;\n      if ( endptr == v38 )\n        goto LABEL_33;\n      if ( v20 )\n      {\n        if ( v39 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n          goto LABEL_13;\n        goto LABEL_62;\n      }\n      if ( v39 )\n      {\nLABEL_62:\n        if ( !endptr || !*endptr )\n          goto LABEL_7;\n      }\n    }\n    else\n    {\n      endptr = v25;\n      v19 = v25;\n    }\n  }\n  v27 = 1000;\nLABEL_38:\n  v28 = *v19;\n  v29 = strchr(\"KMGTPEZY\", v28);\n  if ( v29 )\n  {\n    v30 = (unsigned __int64)(v29 - \"KMGTPEZY\") + 1;\n    goto LABEL_40;\n  }\n  v45 = strchr(\"kmgtpezy\", v28);\n  if ( !v45 )\n    goto LABEL_7;\n  v30 = (unsigned __int64)(v45 - \"kmgtpezy\") + 1;\nLABEL_40:\n  if ( v30 )\n  {\n    if ( is_mul_ok(v27, v48) )\n    {\n      v31 = 0;\n      while ( 1 )\n      {\n        v48 *= v27;\n        if ( v30 - 1 == v31 )\n          break;\n        ++v31;\n        if ( !is_mul_ok(v27, v48) )\n          goto LABEL_77;\n      }\n      v16 = 0;\n    }\n    else\n    {\nLABEL_77:\n      v16 = -34;\n    }\n    if ( v49 )\n    {\n      v32 = v30 - 1;\n      v33 = 0;\n      v34 = 1LL;\n      do\n      {\n        v34 *= v27;\n        if ( v33 == v32 )\n          break;\n        ++v33;\n      }\n      while ( is_mul_ok(v27, v34) );\n      if ( v49 <= 0xA )\n      {\n        v36 = v49;\n        v35 = 10LL;\n      }\n      else\n      {\n        v35 = 10LL;\n        while ( 1 )\n        {\n          v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v49 >> 64) >> 3;\n          if ( v35 > 0x1999999999999999LL )\n            break;\n          v35 *= 10LL;\n          if ( v35 >= v49 )\n          {\n            v36 = v49;\n            break;\n          }\n        }\n      }\n      if ( v21 )\n      {\n        v37 = 0;\n        do\n        {\n          if ( v35 <= 0x1999999999999999LL )\n            v35 *= 10LL;\n          else\n            v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n          ++v37;\n        }\n        while ( v21 != v37 );\n      }\n      v40 = 1LL;\n      do\n      {\n        v41 = 10 * v40;\n        v42 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        v43 = v36 - 10 * v42;\n        v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        if ( v43 )\n        {\n          v44 = v35 / v40 / v43;\n          if ( v44 )\n            v48 += v34 / v44;\n        }\n        v40 = v41;\n      }\n      while ( v42 );\n    }\n    *v8 = v48;\nLABEL_14:\n    if ( (v16 & 0x80000000) != 0 )\n    {\n      v15 = -v16;\nLABEL_8:\n      *v9 = v15;\n    }\n  }\n  else\n  {\n    v16 = 0;\n    *a4 = v48;\n  }\n  return v16;\n}\n\n// write access to const memory has been detected, the output may be wrong!\n__int64 __usercall sub_8D30@<rax>(char *nptr@<rdi>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned __int64 *a4@<rsi>, __int64 a5@<r12>, __int64 a6@<r13>, __int64 a7@<r14>, __int64 a8@<r15>)\n{\n  unsigned __int64 *v8; // rbp\n  int *v9; // rbx\n  unsigned __int8 v10; // r14\n  const unsigned __int16 **v11; // rax\n  const unsigned __int16 **v12; // r13\n  const unsigned __int16 *v13; // rcx\n  char *v14; // rax\n  int v15; // eax\n  unsigned int v16; // ecx\n  unsigned __int64 v18; // rax\n  char *v19; // r14\n  int v20; // ecx\n  int v21; // er15\n  char v22; // al\n  struct lconv *v23; // rax\n  size_t v24; // rax\n  char *v25; // r8\n  __int64 i; // rax\n  signed int v27; // er13\n  int v28; // er14\n  char *v29; // rax\n  int v30; // edi\n  int v31; // ecx\n  int v32; // edi\n  int v33; // er8\n  unsigned __int64 v34; // r10\n  unsigned __int64 v35; // rdi\n  unsigned __int64 v36; // r8\n  int v37; // esi\n  char *v38; // ST08_8\n  unsigned __int64 v39; // rax\n  unsigned __int64 v40; // r9\n  signed __int64 v41; // r11\n  unsigned __int64 v42; // rsi\n  unsigned __int64 v43; // r13\n  unsigned __int64 v44; // r9\n  char *v45; // rax\n  size_t v46; // [rsp+0h] [rbp-70h]\n  char *s1; // [rsp+8h] [rbp-68h]\n  unsigned __int64 v48; // [rsp+10h] [rbp-60h]\n  unsigned __int64 v49; // [rsp+18h] [rbp-58h]\n  char *endptr; // [rsp+28h] [rbp-48h]\n  unsigned __int64 v51; // [rsp+30h] [rbp-40h]\n  __int64 v52; // [rsp+40h] [rbp-30h]\n  __int64 v53; // [rsp+48h] [rbp-28h]\n  __int64 v54; // [rsp+50h] [rbp-20h]\n  __int64 v55; // [rsp+58h] [rbp-18h]\n  __int64 v56; // [rsp+60h] [rbp-10h]\n  __int64 v57; // [rsp+68h] [rbp-8h]\n\n  v57 = a8;\n  v56 = a7;\n  v55 = a6;\n  v54 = a5;\n  v53 = a3;\n  v52 = a2;\n  v8 = a4;\n  *a4 = 0LL;\n  v51 = __readfsqword(0x28u);\n  v9 = __errno_location();\n  if ( !nptr )\n    goto LABEL_7;\n  v10 = *nptr;\n  if ( !*nptr )\n    goto LABEL_7;\n  v11 = __ctype_b_loc();\n  v12 = v11;\n  v13 = *v11;\n  v14 = nptr;\n  while ( v13[v10] & 0x2000 )\n    v10 = *++v14;\n  if ( v10 == 45 )\n    goto LABEL_7;\n  *v9 = 0;\n  endptr = 0LL;\n  v18 = __strtoul_internal(nptr, &endptr, 0, 0);\n  v19 = endptr;\n  v48 = v18;\n  v20 = *v9;\n  if ( endptr == nptr )\n  {\nLABEL_33:\n    if ( !v20 )\n    {\nLABEL_7:\n      v15 = 22;\n      v16 = -22;\n      goto LABEL_8;\n    }\nLABEL_13:\n    v16 = -v20;\n    goto LABEL_14;\n  }\n  if ( v20 && v18 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n    goto LABEL_13;\n  if ( !endptr || !*endptr )\n  {\n    v16 = 0;\n    *a4 = v18;\n    return v16;\n  }\n  v21 = 0;\n  v49 = 0LL;\n  while ( 1 )\n  {\n    v22 = v19[1];\n    if ( v22 == 105 )\n    {\n      if ( (v19[2] & 0xDF) == 66 && !v19[3] )\n      {\nLABEL_37:\n        v27 = 1024;\n        goto LABEL_38;\n      }\n      goto LABEL_23;\n    }\n    if ( (v22 & 0xDF) == 66 && !v19[2] )\n      break;\n    if ( !v22 )\n      goto LABEL_37;\nLABEL_23:\n    v23 = localeconv();\n    if ( !v23 )\n      goto LABEL_7;\n    if ( !v23->decimal_point )\n      goto LABEL_7;\n    s1 = v23->decimal_point;\n    v24 = strlen(v23->decimal_point);\n    if ( v49 )\n      goto LABEL_7;\n    if ( !*v19 )\n      goto LABEL_7;\n    v46 = v24;\n    if ( strncmp(s1, v19, v24) )\n      goto LABEL_7;\n    v25 = &v19[v46];\n    for ( i = v19[v46]; (_BYTE)i == 48; ++v21 )\n      i = *++v25;\n    if ( (*v12)[i] & 0x800 )\n    {\n      *v9 = 0;\n      v38 = v25;\n      endptr = 0LL;\n      v39 = __strtoul_internal(v25, &endptr, 0, 0);\n      v19 = endptr;\n      v49 = v39;\n      v20 = *v9;\n      if ( endptr == v38 )\n        goto LABEL_33;\n      if ( v20 )\n      {\n        if ( v39 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n          goto LABEL_13;\n        goto LABEL_62;\n      }\n      if ( v39 )\n      {\nLABEL_62:\n        if ( !endptr || !*endptr )\n          goto LABEL_7;\n      }\n    }\n    else\n    {\n      endptr = v25;\n      v19 = v25;\n    }\n  }\n  v27 = 1000;\nLABEL_38:\n  v28 = *v19;\n  v29 = strchr(\"KMGTPEZY\", v28);\n  if ( v29 )\n  {\n    v30 = (unsigned __int64)(v29 - \"KMGTPEZY\") + 1;\n    goto LABEL_40;\n  }\n  v45 = strchr(\"kmgtpezy\", v28);\n  if ( !v45 )\n    goto LABEL_7;\n  v30 = (unsigned __int64)(v45 - \"kmgtpezy\") + 1;\nLABEL_40:\n  if ( v30 )\n  {\n    if ( is_mul_ok(v27, v48) )\n    {\n      v31 = 0;\n      while ( 1 )\n      {\n        v48 *= v27;\n        if ( v30 - 1 == v31 )\n          break;\n        ++v31;\n        if ( !is_mul_ok(v27, v48) )\n          goto LABEL_77;\n      }\n      v16 = 0;\n    }\n    else\n    {\nLABEL_77:\n      v16 = -34;\n    }\n    if ( v49 )\n    {\n      v32 = v30 - 1;\n      v33 = 0;\n      v34 = 1LL;\n      do\n      {\n        v34 *= v27;\n        if ( v33 == v32 )\n          break;\n        ++v33;\n      }\n      while ( is_mul_ok(v27, v34) );\n      if ( v49 <= 0xA )\n      {\n        v36 = v49;\n        v35 = 10LL;\n      }\n      else\n      {\n        v35 = 10LL;\n        while ( 1 )\n        {\n          v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v49 >> 64) >> 3;\n          if ( v35 > 0x1999999999999999LL )\n            break;\n          v35 *= 10LL;\n          if ( v35 >= v49 )\n          {\n            v36 = v49;\n            break;\n          }\n        }\n      }\n      if ( v21 )\n      {\n        v37 = 0;\n        do\n        {\n          if ( v35 <= 0x1999999999999999LL )\n            v35 *= 10LL;\n          else\n            v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n          ++v37;\n        }\n        while ( v21 != v37 );\n      }\n      v40 = 1LL;\n      do\n      {\n        v41 = 10 * v40;\n        v42 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        v43 = v36 - 10 * v42;\n        v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        if ( v43 )\n        {\n          v44 = v35 / v40 / v43;\n          if ( v44 )\n            v48 += v34 / v44;\n        }\n        v40 = v41;\n      }\n      while ( v42 );\n    }\n    *v8 = v48;\nLABEL_14:\n    if ( (v16 & 0x80000000) != 0 )\n    {\n      v15 = -v16;\nLABEL_8:\n      *v9 = v15;\n    }\n  }\n  else\n  {\n    v16 = 0;\n    *a4 = v48;\n  }\n  return v16;\n}\n\n// write access to const memory has been detected, the output may be wrong!\n__int64 __usercall sub_8D30@<rax>(char *nptr@<rdi>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned __int64 *a4@<rsi>, __int64 a5@<r12>, __int64 a6@<r13>, __int64 a7@<r14>, __int64 a8@<r15>)\n{\n  unsigned __int64 *v8; // rbp\n  int *v9; // rbx\n  unsigned __int8 v10; // r14\n  const unsigned __int16 **v11; // rax\n  const unsigned __int16 **v12; // r13\n  const unsigned __int16 *v13; // rcx\n  char *v14; // rax\n  int v15; // eax\n  unsigned int v16; // ecx\n  unsigned __int64 v18; // rax\n  char *v19; // r14\n  int v20; // ecx\n  int v21; // er15\n  char v22; // al\n  struct lconv *v23; // rax\n  size_t v24; // rax\n  char *v25; // r8\n  __int64 i; // rax\n  signed int v27; // er13\n  int v28; // er14\n  char *v29; // rax\n  int v30; // edi\n  int v31; // ecx\n  int v32; // edi\n  int v33; // er8\n  unsigned __int64 v34; // r10\n  unsigned __int64 v35; // rdi\n  unsigned __int64 v36; // r8\n  int v37; // esi\n  char *v38; // ST08_8\n  unsigned __int64 v39; // rax\n  unsigned __int64 v40; // r9\n  signed __int64 v41; // r11\n  unsigned __int64 v42; // rsi\n  unsigned __int64 v43; // r13\n  unsigned __int64 v44; // r9\n  char *v45; // rax\n  size_t v46; // [rsp+0h] [rbp-70h]\n  char *s1; // [rsp+8h] [rbp-68h]\n  unsigned __int64 v48; // [rsp+10h] [rbp-60h]\n  unsigned __int64 v49; // [rsp+18h] [rbp-58h]\n  char *endptr; // [rsp+28h] [rbp-48h]\n  unsigned __int64 v51; // [rsp+30h] [rbp-40h]\n  __int64 v52; // [rsp+40h] [rbp-30h]\n  __int64 v53; // [rsp+48h] [rbp-28h]\n  __int64 v54; // [rsp+50h] [rbp-20h]\n  __int64 v55; // [rsp+58h] [rbp-18h]\n  __int64 v56; // [rsp+60h] [rbp-10h]\n  __int64 v57; // [rsp+68h] [rbp-8h]\n\n  v57 = a8;\n  v56 = a7;\n  v55 = a6;\n  v54 = a5;\n  v53 = a3;\n  v52 = a2;\n  v8 = a4;\n  *a4 = 0LL;\n  v51 = __readfsqword(0x28u);\n  v9 = __errno_location();\n  if ( !nptr )\n    goto LABEL_7;\n  v10 = *nptr;\n  if ( !*nptr )\n    goto LABEL_7;\n  v11 = __ctype_b_loc();\n  v12 = v11;\n  v13 = *v11;\n  v14 = nptr;\n  while ( v13[v10] & 0x2000 )\n    v10 = *++v14;\n  if ( v10 == 45 )\n    goto LABEL_7;\n  *v9 = 0;\n  endptr = 0LL;\n  v18 = __strtoul_internal(nptr, &endptr, 0, 0);\n  v19 = endptr;\n  v48 = v18;\n  v20 = *v9;\n  if ( endptr == nptr )\n  {\nLABEL_33:\n    if ( !v20 )\n    {\nLABEL_7:\n      v15 = 22;\n      v16 = -22;\n      goto LABEL_8;\n    }\nLABEL_13:\n    v16 = -v20;\n    goto LABEL_14;\n  }\n  if ( v20 && v18 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n    goto LABEL_13;\n  if ( !endptr || !*endptr )\n  {\n    v16 = 0;\n    *a4 = v18;\n    return v16;\n  }\n  v21 = 0;\n  v49 = 0LL;\n  while ( 1 )\n  {\n    v22 = v19[1];\n    if ( v22 == 105 )\n    {\n      if ( (v19[2] & 0xDF) == 66 && !v19[3] )\n      {\nLABEL_37:\n        v27 = 1024;\n        goto LABEL_38;\n      }\n      goto LABEL_23;\n    }\n    if ( (v22 & 0xDF) == 66 && !v19[2] )\n      break;\n    if ( !v22 )\n      goto LABEL_37;\nLABEL_23:\n    v23 = localeconv();\n    if ( !v23 )\n      goto LABEL_7;\n    if ( !v23->decimal_point )\n      goto LABEL_7;\n    s1 = v23->decimal_point;\n    v24 = strlen(v23->decimal_point);\n    if ( v49 )\n      goto LABEL_7;\n    if ( !*v19 )\n      goto LABEL_7;\n    v46 = v24;\n    if ( strncmp(s1, v19, v24) )\n      goto LABEL_7;\n    v25 = &v19[v46];\n    for ( i = v19[v46]; (_BYTE)i == 48; ++v21 )\n      i = *++v25;\n    if ( (*v12)[i] & 0x800 )\n    {\n      *v9 = 0;\n      v38 = v25;\n      endptr = 0LL;\n      v39 = __strtoul_internal(v25, &endptr, 0, 0);\n      v19 = endptr;\n      v49 = v39;\n      v20 = *v9;\n      if ( endptr == v38 )\n        goto LABEL_33;\n      if ( v20 )\n      {\n        if ( v39 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n          goto LABEL_13;\n        goto LABEL_62;\n      }\n      if ( v39 )\n      {\nLABEL_62:\n        if ( !endptr || !*endptr )\n          goto LABEL_7;\n      }\n    }\n    else\n    {\n      endptr = v25;\n      v19 = v25;\n    }\n  }\n  v27 = 1000;\nLABEL_38:\n  v28 = *v19;\n  v29 = strchr(\"KMGTPEZY\", v28);\n  if ( v29 )\n  {\n    v30 = (unsigned __int64)(v29 - \"KMGTPEZY\") + 1;\n    goto LABEL_40;\n  }\n  v45 = strchr(\"kmgtpezy\", v28);\n  if ( !v45 )\n    goto LABEL_7;\n  v30 = (unsigned __int64)(v45 - \"kmgtpezy\") + 1;\nLABEL_40:\n  if ( v30 )\n  {\n    if ( is_mul_ok(v27, v48) )\n    {\n      v31 = 0;\n      while ( 1 )\n      {\n        v48 *= v27;\n        if ( v30 - 1 == v31 )\n          break;\n        ++v31;\n        if ( !is_mul_ok(v27, v48) )\n          goto LABEL_77;\n      }\n      v16 = 0;\n    }\n    else\n    {\nLABEL_77:\n      v16 = -34;\n    }\n    if ( v49 )\n    {\n      v32 = v30 - 1;\n      v33 = 0;\n      v34 = 1LL;\n      do\n      {\n        v34 *= v27;\n        if ( v33 == v32 )\n          break;\n        ++v33;\n      }\n      while ( is_mul_ok(v27, v34) );\n      if ( v49 <= 0xA )\n      {\n        v36 = v49;\n        v35 = 10LL;\n      }\n      else\n      {\n        v35 = 10LL;\n        while ( 1 )\n        {\n          v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v49 >> 64) >> 3;\n          if ( v35 > 0x1999999999999999LL )\n            break;\n          v35 *= 10LL;\n          if ( v35 >= v49 )\n          {\n            v36 = v49;\n            break;\n          }\n        }\n      }\n      if ( v21 )\n      {\n        v37 = 0;\n        do\n        {\n          if ( v35 <= 0x1999999999999999LL )\n            v35 *= 10LL;\n          else\n            v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n          ++v37;\n        }\n        while ( v21 != v37 );\n      }\n      v40 = 1LL;\n      do\n      {\n        v41 = 10 * v40;\n        v42 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        v43 = v36 - 10 * v42;\n        v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        if ( v43 )\n        {\n          v44 = v35 / v40 / v43;\n          if ( v44 )\n            v48 += v34 / v44;\n        }\n        v40 = v41;\n      }\n      while ( v42 );\n    }\n    *v8 = v48;\nLABEL_14:\n    if ( (v16 & 0x80000000) != 0 )\n    {\n      v15 = -v16;\nLABEL_8:\n      *v9 = v15;\n    }\n  }\n  else\n  {\n    v16 = 0;\n    *a4 = v48;\n  }\n  return v16;\n}\n\n// write access to const memory has been detected, the output may be wrong!\n__int64 __usercall sub_8D30@<rax>(char *nptr@<rdi>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned __int64 *a4@<rsi>, __int64 a5@<r12>, __int64 a6@<r13>, __int64 a7@<r14>, __int64 a8@<r15>)\n{\n  unsigned __int64 *v8; // rbp\n  int *v9; // rbx\n  unsigned __int8 v10; // r14\n  const unsigned __int16 **v11; // rax\n  const unsigned __int16 **v12; // r13\n  const unsigned __int16 *v13; // rcx\n  char *v14; // rax\n  int v15; // eax\n  unsigned int v16; // ecx\n  unsigned __int64 v18; // rax\n  char *v19; // r14\n  int v20; // ecx\n  int v21; // er15\n  char v22; // al\n  struct lconv *v23; // rax\n  size_t v24; // rax\n  char *v25; // r8\n  __int64 i; // rax\n  signed int v27; // er13\n  int v28; // er14\n  char *v29; // rax\n  int v30; // edi\n  int v31; // ecx\n  int v32; // edi\n  int v33; // er8\n  unsigned __int64 v34; // r10\n  unsigned __int64 v35; // rdi\n  unsigned __int64 v36; // r8\n  int v37; // esi\n  char *v38; // ST08_8\n  unsigned __int64 v39; // rax\n  unsigned __int64 v40; // r9\n  signed __int64 v41; // r11\n  unsigned __int64 v42; // rsi\n  unsigned __int64 v43; // r13\n  unsigned __int64 v44; // r9\n  char *v45; // rax\n  size_t v46; // [rsp+0h] [rbp-70h]\n  char *s1; // [rsp+8h] [rbp-68h]\n  unsigned __int64 v48; // [rsp+10h] [rbp-60h]\n  unsigned __int64 v49; // [rsp+18h] [rbp-58h]\n  char *endptr; // [rsp+28h] [rbp-48h]\n  unsigned __int64 v51; // [rsp+30h] [rbp-40h]\n  __int64 v52; // [rsp+40h] [rbp-30h]\n  __int64 v53; // [rsp+48h] [rbp-28h]\n  __int64 v54; // [rsp+50h] [rbp-20h]\n  __int64 v55; // [rsp+58h] [rbp-18h]\n  __int64 v56; // [rsp+60h] [rbp-10h]\n  __int64 v57; // [rsp+68h] [rbp-8h]\n\n  v57 = a8;\n  v56 = a7;\n  v55 = a6;\n  v54 = a5;\n  v53 = a3;\n  v52 = a2;\n  v8 = a4;\n  *a4 = 0LL;\n  v51 = __readfsqword(0x28u);\n  v9 = __errno_location();\n  if ( !nptr )\n    goto LABEL_7;\n  v10 = *nptr;\n  if ( !*nptr )\n    goto LABEL_7;\n  v11 = __ctype_b_loc();\n  v12 = v11;\n  v13 = *v11;\n  v14 = nptr;\n  while ( v13[v10] & 0x2000 )\n    v10 = *++v14;\n  if ( v10 == 45 )\n    goto LABEL_7;\n  *v9 = 0;\n  endptr = 0LL;\n  v18 = __strtoul_internal(nptr, &endptr, 0, 0);\n  v19 = endptr;\n  v48 = v18;\n  v20 = *v9;\n  if ( endptr == nptr )\n  {\nLABEL_33:\n    if ( !v20 )\n    {\nLABEL_7:\n      v15 = 22;\n      v16 = -22;\n      goto LABEL_8;\n    }\nLABEL_13:\n    v16 = -v20;\n    goto LABEL_14;\n  }\n  if ( v20 && v18 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n    goto LABEL_13;\n  if ( !endptr || !*endptr )\n  {\n    v16 = 0;\n    *a4 = v18;\n    return v16;\n  }\n  v21 = 0;\n  v49 = 0LL;\n  while ( 1 )\n  {\n    v22 = v19[1];\n    if ( v22 == 105 )\n    {\n      if ( (v19[2] & 0xDF) == 66 && !v19[3] )\n      {\nLABEL_37:\n        v27 = 1024;\n        goto LABEL_38;\n      }\n      goto LABEL_23;\n    }\n    if ( (v22 & 0xDF) == 66 && !v19[2] )\n      break;\n    if ( !v22 )\n      goto LABEL_37;\nLABEL_23:\n    v23 = localeconv();\n    if ( !v23 )\n      goto LABEL_7;\n    if ( !v23->decimal_point )\n      goto LABEL_7;\n    s1 = v23->decimal_point;\n    v24 = strlen(v23->decimal_point);\n    if ( v49 )\n      goto LABEL_7;\n    if ( !*v19 )\n      goto LABEL_7;\n    v46 = v24;\n    if ( strncmp(s1, v19, v24) )\n      goto LABEL_7;\n    v25 = &v19[v46];\n    for ( i = v19[v46]; (_BYTE)i == 48; ++v21 )\n      i = *++v25;\n    if ( (*v12)[i] & 0x800 )\n    {\n      *v9 = 0;\n      v38 = v25;\n      endptr = 0LL;\n      v39 = __strtoul_internal(v25, &endptr, 0, 0);\n      v19 = endptr;\n      v49 = v39;\n      v20 = *v9;\n      if ( endptr == v38 )\n        goto LABEL_33;\n      if ( v20 )\n      {\n        if ( v39 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n          goto LABEL_13;\n        goto LABEL_62;\n      }\n      if ( v39 )\n      {\nLABEL_62:\n        if ( !endptr || !*endptr )\n          goto LABEL_7;\n      }\n    }\n    else\n    {\n      endptr = v25;\n      v19 = v25;\n    }\n  }\n  v27 = 1000;\nLABEL_38:\n  v28 = *v19;\n  v29 = strchr(\"KMGTPEZY\", v28);\n  if ( v29 )\n  {\n    v30 = (unsigned __int64)(v29 - \"KMGTPEZY\") + 1;\n    goto LABEL_40;\n  }\n  v45 = strchr(\"kmgtpezy\", v28);\n  if ( !v45 )\n    goto LABEL_7;\n  v30 = (unsigned __int64)(v45 - \"kmgtpezy\") + 1;\nLABEL_40:\n  if ( v30 )\n  {\n    if ( is_mul_ok(v27, v48) )\n    {\n      v31 = 0;\n      while ( 1 )\n      {\n        v48 *= v27;\n        if ( v30 - 1 == v31 )\n          break;\n        ++v31;\n        if ( !is_mul_ok(v27, v48) )\n          goto LABEL_77;\n      }\n      v16 = 0;\n    }\n    else\n    {\nLABEL_77:\n      v16 = -34;\n    }\n    if ( v49 )\n    {\n      v32 = v30 - 1;\n      v33 = 0;\n      v34 = 1LL;\n      do\n      {\n        v34 *= v27;\n        if ( v33 == v32 )\n          break;\n        ++v33;\n      }\n      while ( is_mul_ok(v27, v34) );\n      if ( v49 <= 0xA )\n      {\n        v36 = v49;\n        v35 = 10LL;\n      }\n      else\n      {\n        v35 = 10LL;\n        while ( 1 )\n        {\n          v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v49 >> 64) >> 3;\n          if ( v35 > 0x1999999999999999LL )\n            break;\n          v35 *= 10LL;\n          if ( v35 >= v49 )\n          {\n            v36 = v49;\n            break;\n          }\n        }\n      }\n      if ( v21 )\n      {\n        v37 = 0;\n        do\n        {\n          if ( v35 <= 0x1999999999999999LL )\n            v35 *= 10LL;\n          else\n            v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n          ++v37;\n        }\n        while ( v21 != v37 );\n      }\n      v40 = 1LL;\n      do\n      {\n        v41 = 10 * v40;\n        v42 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        v43 = v36 - 10 * v42;\n        v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        if ( v43 )\n        {\n          v44 = v35 / v40 / v43;\n          if ( v44 )\n            v48 += v34 / v44;\n        }\n        v40 = v41;\n      }\n      while ( v42 );\n    }\n    *v8 = v48;\nLABEL_14:\n    if ( (v16 & 0x80000000) != 0 )\n    {\n      v15 = -v16;\nLABEL_8:\n      *v9 = v15;\n    }\n  }\n  else\n  {\n    v16 = 0;\n    *a4 = v48;\n  }\n  return v16;\n}\n\n// write access to const memory has been detected, the output may be wrong!\n__int64 __usercall sub_8D30@<rax>(char *nptr@<rdi>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned __int64 *a4@<rsi>, __int64 a5@<r12>, __int64 a6@<r13>, __int64 a7@<r14>, __int64 a8@<r15>)\n{\n  unsigned __int64 *v8; // rbp\n  int *v9; // rbx\n  unsigned __int8 v10; // r14\n  const unsigned __int16 **v11; // rax\n  const unsigned __int16 **v12; // r13\n  const unsigned __int16 *v13; // rcx\n  char *v14; // rax\n  int v15; // eax\n  unsigned int v16; // ecx\n  unsigned __int64 v18; // rax\n  char *v19; // r14\n  int v20; // ecx\n  int v21; // er15\n  char v22; // al\n  struct lconv *v23; // rax\n  size_t v24; // rax\n  char *v25; // r8\n  __int64 i; // rax\n  signed int v27; // er13\n  int v28; // er14\n  char *v29; // rax\n  int v30; // edi\n  int v31; // ecx\n  int v32; // edi\n  int v33; // er8\n  unsigned __int64 v34; // r10\n  unsigned __int64 v35; // rdi\n  unsigned __int64 v36; // r8\n  int v37; // esi\n  char *v38; // ST08_8\n  unsigned __int64 v39; // rax\n  unsigned __int64 v40; // r9\n  signed __int64 v41; // r11\n  unsigned __int64 v42; // rsi\n  unsigned __int64 v43; // r13\n  unsigned __int64 v44; // r9\n  char *v45; // rax\n  size_t v46; // [rsp+0h] [rbp-70h]\n  char *s1; // [rsp+8h] [rbp-68h]\n  unsigned __int64 v48; // [rsp+10h] [rbp-60h]\n  unsigned __int64 v49; // [rsp+18h] [rbp-58h]\n  char *endptr; // [rsp+28h] [rbp-48h]\n  unsigned __int64 v51; // [rsp+30h] [rbp-40h]\n  __int64 v52; // [rsp+40h] [rbp-30h]\n  __int64 v53; // [rsp+48h] [rbp-28h]\n  __int64 v54; // [rsp+50h] [rbp-20h]\n  __int64 v55; // [rsp+58h] [rbp-18h]\n  __int64 v56; // [rsp+60h] [rbp-10h]\n  __int64 v57; // [rsp+68h] [rbp-8h]\n\n  v57 = a8;\n  v56 = a7;\n  v55 = a6;\n  v54 = a5;\n  v53 = a3;\n  v52 = a2;\n  v8 = a4;\n  *a4 = 0LL;\n  v51 = __readfsqword(0x28u);\n  v9 = __errno_location();\n  if ( !nptr )\n    goto LABEL_7;\n  v10 = *nptr;\n  if ( !*nptr )\n    goto LABEL_7;\n  v11 = __ctype_b_loc();\n  v12 = v11;\n  v13 = *v11;\n  v14 = nptr;\n  while ( v13[v10] & 0x2000 )\n    v10 = *++v14;\n  if ( v10 == 45 )\n    goto LABEL_7;\n  *v9 = 0;\n  endptr = 0LL;\n  v18 = __strtoul_internal(nptr, &endptr, 0, 0);\n  v19 = endptr;\n  v48 = v18;\n  v20 = *v9;\n  if ( endptr == nptr )\n  {\nLABEL_33:\n    if ( !v20 )\n    {\nLABEL_7:\n      v15 = 22;\n      v16 = -22;\n      goto LABEL_8;\n    }\nLABEL_13:\n    v16 = -v20;\n    goto LABEL_14;\n  }\n  if ( v20 && v18 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n    goto LABEL_13;\n  if ( !endptr || !*endptr )\n  {\n    v16 = 0;\n    *a4 = v18;\n    return v16;\n  }\n  v21 = 0;\n  v49 = 0LL;\n  while ( 1 )\n  {\n    v22 = v19[1];\n    if ( v22 == 105 )\n    {\n      if ( (v19[2] & 0xDF) == 66 && !v19[3] )\n      {\nLABEL_37:\n        v27 = 1024;\n        goto LABEL_38;\n      }\n      goto LABEL_23;\n    }\n    if ( (v22 & 0xDF) == 66 && !v19[2] )\n      break;\n    if ( !v22 )\n      goto LABEL_37;\nLABEL_23:\n    v23 = localeconv();\n    if ( !v23 )\n      goto LABEL_7;\n    if ( !v23->decimal_point )\n      goto LABEL_7;\n    s1 = v23->decimal_point;\n    v24 = strlen(v23->decimal_point);\n    if ( v49 )\n      goto LABEL_7;\n    if ( !*v19 )\n      goto LABEL_7;\n    v46 = v24;\n    if ( strncmp(s1, v19, v24) )\n      goto LABEL_7;\n    v25 = &v19[v46];\n    for ( i = v19[v46]; (_BYTE)i == 48; ++v21 )\n      i = *++v25;\n    if ( (*v12)[i] & 0x800 )\n    {\n      *v9 = 0;\n      v38 = v25;\n      endptr = 0LL;\n      v39 = __strtoul_internal(v25, &endptr, 0, 0);\n      v19 = endptr;\n      v49 = v39;\n      v20 = *v9;\n      if ( endptr == v38 )\n        goto LABEL_33;\n      if ( v20 )\n      {\n        if ( v39 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n          goto LABEL_13;\n        goto LABEL_62;\n      }\n      if ( v39 )\n      {\nLABEL_62:\n        if ( !endptr || !*endptr )\n          goto LABEL_7;\n      }\n    }\n    else\n    {\n      endptr = v25;\n      v19 = v25;\n    }\n  }\n  v27 = 1000;\nLABEL_38:\n  v28 = *v19;\n  v29 = strchr(\"KMGTPEZY\", v28);\n  if ( v29 )\n  {\n    v30 = (unsigned __int64)(v29 - \"KMGTPEZY\") + 1;\n    goto LABEL_40;\n  }\n  v45 = strchr(\"kmgtpezy\", v28);\n  if ( !v45 )\n    goto LABEL_7;\n  v30 = (unsigned __int64)(v45 - \"kmgtpezy\") + 1;\nLABEL_40:\n  if ( v30 )\n  {\n    if ( is_mul_ok(v27, v48) )\n    {\n      v31 = 0;\n      while ( 1 )\n      {\n        v48 *= v27;\n        if ( v30 - 1 == v31 )\n          break;\n        ++v31;\n        if ( !is_mul_ok(v27, v48) )\n          goto LABEL_77;\n      }\n      v16 = 0;\n    }\n    else\n    {\nLABEL_77:\n      v16 = -34;\n    }\n    if ( v49 )\n    {\n      v32 = v30 - 1;\n      v33 = 0;\n      v34 = 1LL;\n      do\n      {\n        v34 *= v27;\n        if ( v33 == v32 )\n          break;\n        ++v33;\n      }\n      while ( is_mul_ok(v27, v34) );\n      if ( v49 <= 0xA )\n      {\n        v36 = v49;\n        v35 = 10LL;\n      }\n      else\n      {\n        v35 = 10LL;\n        while ( 1 )\n        {\n          v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v49 >> 64) >> 3;\n          if ( v35 > 0x1999999999999999LL )\n            break;\n          v35 *= 10LL;\n          if ( v35 >= v49 )\n          {\n            v36 = v49;\n            break;\n          }\n        }\n      }\n      if ( v21 )\n      {\n        v37 = 0;\n        do\n        {\n          if ( v35 <= 0x1999999999999999LL )\n            v35 *= 10LL;\n          else\n            v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n          ++v37;\n        }\n        while ( v21 != v37 );\n      }\n      v40 = 1LL;\n      do\n      {\n        v41 = 10 * v40;\n        v42 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        v43 = v36 - 10 * v42;\n        v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        if ( v43 )\n        {\n          v44 = v35 / v40 / v43;\n          if ( v44 )\n            v48 += v34 / v44;\n        }\n        v40 = v41;\n      }\n      while ( v42 );\n    }\n    *v8 = v48;\nLABEL_14:\n    if ( (v16 & 0x80000000) != 0 )\n    {\n      v15 = -v16;\nLABEL_8:\n      *v9 = v15;\n    }\n  }\n  else\n  {\n    v16 = 0;\n    *a4 = v48;\n  }\n  return v16;\n}\n\n// write access to const memory has been detected, the output may be wrong!\n__int64 __usercall sub_8D30@<rax>(char *nptr@<rdi>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned __int64 *a4@<rsi>, __int64 a5@<r12>, __int64 a6@<r13>, __int64 a7@<r14>, __int64 a8@<r15>)\n{\n  unsigned __int64 *v8; // rbp\n  int *v9; // rbx\n  unsigned __int8 v10; // r14\n  const unsigned __int16 **v11; // rax\n  const unsigned __int16 **v12; // r13\n  const unsigned __int16 *v13; // rcx\n  char *v14; // rax\n  int v15; // eax\n  unsigned int v16; // ecx\n  unsigned __int64 v18; // rax\n  char *v19; // r14\n  int v20; // ecx\n  int v21; // er15\n  char v22; // al\n  struct lconv *v23; // rax\n  size_t v24; // rax\n  char *v25; // r8\n  __int64 i; // rax\n  signed int v27; // er13\n  int v28; // er14\n  char *v29; // rax\n  int v30; // edi\n  int v31; // ecx\n  int v32; // edi\n  int v33; // er8\n  unsigned __int64 v34; // r10\n  unsigned __int64 v35; // rdi\n  unsigned __int64 v36; // r8\n  int v37; // esi\n  char *v38; // ST08_8\n  unsigned __int64 v39; // rax\n  unsigned __int64 v40; // r9\n  signed __int64 v41; // r11\n  unsigned __int64 v42; // rsi\n  unsigned __int64 v43; // r13\n  unsigned __int64 v44; // r9\n  char *v45; // rax\n  size_t v46; // [rsp+0h] [rbp-70h]\n  char *s1; // [rsp+8h] [rbp-68h]\n  unsigned __int64 v48; // [rsp+10h] [rbp-60h]\n  unsigned __int64 v49; // [rsp+18h] [rbp-58h]\n  char *endptr; // [rsp+28h] [rbp-48h]\n  unsigned __int64 v51; // [rsp+30h] [rbp-40h]\n  __int64 v52; // [rsp+40h] [rbp-30h]\n  __int64 v53; // [rsp+48h] [rbp-28h]\n  __int64 v54; // [rsp+50h] [rbp-20h]\n  __int64 v55; // [rsp+58h] [rbp-18h]\n  __int64 v56; // [rsp+60h] [rbp-10h]\n  __int64 v57; // [rsp+68h] [rbp-8h]\n\n  v57 = a8;\n  v56 = a7;\n  v55 = a6;\n  v54 = a5;\n  v53 = a3;\n  v52 = a2;\n  v8 = a4;\n  *a4 = 0LL;\n  v51 = __readfsqword(0x28u);\n  v9 = __errno_location();\n  if ( !nptr )\n    goto LABEL_7;\n  v10 = *nptr;\n  if ( !*nptr )\n    goto LABEL_7;\n  v11 = __ctype_b_loc();\n  v12 = v11;\n  v13 = *v11;\n  v14 = nptr;\n  while ( v13[v10] & 0x2000 )\n    v10 = *++v14;\n  if ( v10 == 45 )\n    goto LABEL_7;\n  *v9 = 0;\n  endptr = 0LL;\n  v18 = __strtoul_internal(nptr, &endptr, 0, 0);\n  v19 = endptr;\n  v48 = v18;\n  v20 = *v9;\n  if ( endptr == nptr )\n  {\nLABEL_33:\n    if ( !v20 )\n    {\nLABEL_7:\n      v15 = 22;\n      v16 = -22;\n      goto LABEL_8;\n    }\nLABEL_13:\n    v16 = -v20;\n    goto LABEL_14;\n  }\n  if ( v20 && v18 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n    goto LABEL_13;\n  if ( !endptr || !*endptr )\n  {\n    v16 = 0;\n    *a4 = v18;\n    return v16;\n  }\n  v21 = 0;\n  v49 = 0LL;\n  while ( 1 )\n  {\n    v22 = v19[1];\n    if ( v22 == 105 )\n    {\n      if ( (v19[2] & 0xDF) == 66 && !v19[3] )\n      {\nLABEL_37:\n        v27 = 1024;\n        goto LABEL_38;\n      }\n      goto LABEL_23;\n    }\n    if ( (v22 & 0xDF) == 66 && !v19[2] )\n      break;\n    if ( !v22 )\n      goto LABEL_37;\nLABEL_23:\n    v23 = localeconv();\n    if ( !v23 )\n      goto LABEL_7;\n    if ( !v23->decimal_point )\n      goto LABEL_7;\n    s1 = v23->decimal_point;\n    v24 = strlen(v23->decimal_point);\n    if ( v49 )\n      goto LABEL_7;\n    if ( !*v19 )\n      goto LABEL_7;\n    v46 = v24;\n    if ( strncmp(s1, v19, v24) )\n      goto LABEL_7;\n    v25 = &v19[v46];\n    for ( i = v19[v46]; (_BYTE)i == 48; ++v21 )\n      i = *++v25;\n    if ( (*v12)[i] & 0x800 )\n    {\n      *v9 = 0;\n      v38 = v25;\n      endptr = 0LL;\n      v39 = __strtoul_internal(v25, &endptr, 0, 0);\n      v19 = endptr;\n      v49 = v39;\n      v20 = *v9;\n      if ( endptr == v38 )\n        goto LABEL_33;\n      if ( v20 )\n      {\n        if ( v39 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n          goto LABEL_13;\n        goto LABEL_62;\n      }\n      if ( v39 )\n      {\nLABEL_62:\n        if ( !endptr || !*endptr )\n          goto LABEL_7;\n      }\n    }\n    else\n    {\n      endptr = v25;\n      v19 = v25;\n    }\n  }\n  v27 = 1000;\nLABEL_38:\n  v28 = *v19;\n  v29 = strchr(\"KMGTPEZY\", v28);\n  if ( v29 )\n  {\n    v30 = (unsigned __int64)(v29 - \"KMGTPEZY\") + 1;\n    goto LABEL_40;\n  }\n  v45 = strchr(\"kmgtpezy\", v28);\n  if ( !v45 )\n    goto LABEL_7;\n  v30 = (unsigned __int64)(v45 - \"kmgtpezy\") + 1;\nLABEL_40:\n  if ( v30 )\n  {\n    if ( is_mul_ok(v27, v48) )\n    {\n      v31 = 0;\n      while ( 1 )\n      {\n        v48 *= v27;\n        if ( v30 - 1 == v31 )\n          break;\n        ++v31;\n        if ( !is_mul_ok(v27, v48) )\n          goto LABEL_77;\n      }\n      v16 = 0;\n    }\n    else\n    {\nLABEL_77:\n      v16 = -34;\n    }\n    if ( v49 )\n    {\n      v32 = v30 - 1;\n      v33 = 0;\n      v34 = 1LL;\n      do\n      {\n        v34 *= v27;\n        if ( v33 == v32 )\n          break;\n        ++v33;\n      }\n      while ( is_mul_ok(v27, v34) );\n      if ( v49 <= 0xA )\n      {\n        v36 = v49;\n        v35 = 10LL;\n      }\n      else\n      {\n        v35 = 10LL;\n        while ( 1 )\n        {\n          v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v49 >> 64) >> 3;\n          if ( v35 > 0x1999999999999999LL )\n            break;\n          v35 *= 10LL;\n          if ( v35 >= v49 )\n          {\n            v36 = v49;\n            break;\n          }\n        }\n      }\n      if ( v21 )\n      {\n        v37 = 0;\n        do\n        {\n          if ( v35 <= 0x1999999999999999LL )\n            v35 *= 10LL;\n          else\n            v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n          ++v37;\n        }\n        while ( v21 != v37 );\n      }\n      v40 = 1LL;\n      do\n      {\n        v41 = 10 * v40;\n        v42 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        v43 = v36 - 10 * v42;\n        v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        if ( v43 )\n        {\n          v44 = v35 / v40 / v43;\n          if ( v44 )\n            v48 += v34 / v44;\n        }\n        v40 = v41;\n      }\n      while ( v42 );\n    }\n    *v8 = v48;\nLABEL_14:\n    if ( (v16 & 0x80000000) != 0 )\n    {\n      v15 = -v16;\nLABEL_8:\n      *v9 = v15;\n    }\n  }\n  else\n  {\n    v16 = 0;\n    *a4 = v48;\n  }\n  return v16;\n}\n\n// write access to const memory has been detected, the output may be wrong!\n__int64 __usercall sub_8D30@<rax>(char *nptr@<rdi>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned __int64 *a4@<rsi>, __int64 a5@<r12>, __int64 a6@<r13>, __int64 a7@<r14>, __int64 a8@<r15>)\n{\n  unsigned __int64 *v8; // rbp\n  int *v9; // rbx\n  unsigned __int8 v10; // r14\n  const unsigned __int16 **v11; // rax\n  const unsigned __int16 **v12; // r13\n  const unsigned __int16 *v13; // rcx\n  char *v14; // rax\n  int v15; // eax\n  unsigned int v16; // ecx\n  unsigned __int64 v18; // rax\n  char *v19; // r14\n  int v20; // ecx\n  int v21; // er15\n  char v22; // al\n  struct lconv *v23; // rax\n  size_t v24; // rax\n  char *v25; // r8\n  __int64 i; // rax\n  signed int v27; // er13\n  int v28; // er14\n  char *v29; // rax\n  int v30; // edi\n  int v31; // ecx\n  int v32; // edi\n  int v33; // er8\n  unsigned __int64 v34; // r10\n  unsigned __int64 v35; // rdi\n  unsigned __int64 v36; // r8\n  int v37; // esi\n  char *v38; // ST08_8\n  unsigned __int64 v39; // rax\n  unsigned __int64 v40; // r9\n  signed __int64 v41; // r11\n  unsigned __int64 v42; // rsi\n  unsigned __int64 v43; // r13\n  unsigned __int64 v44; // r9\n  char *v45; // rax\n  size_t v46; // [rsp+0h] [rbp-70h]\n  char *s1; // [rsp+8h] [rbp-68h]\n  unsigned __int64 v48; // [rsp+10h] [rbp-60h]\n  unsigned __int64 v49; // [rsp+18h] [rbp-58h]\n  char *endptr; // [rsp+28h] [rbp-48h]\n  unsigned __int64 v51; // [rsp+30h] [rbp-40h]\n  __int64 v52; // [rsp+40h] [rbp-30h]\n  __int64 v53; // [rsp+48h] [rbp-28h]\n  __int64 v54; // [rsp+50h] [rbp-20h]\n  __int64 v55; // [rsp+58h] [rbp-18h]\n  __int64 v56; // [rsp+60h] [rbp-10h]\n  __int64 v57; // [rsp+68h] [rbp-8h]\n\n  v57 = a8;\n  v56 = a7;\n  v55 = a6;\n  v54 = a5;\n  v53 = a3;\n  v52 = a2;\n  v8 = a4;\n  *a4 = 0LL;\n  v51 = __readfsqword(0x28u);\n  v9 = __errno_location();\n  if ( !nptr )\n    goto LABEL_7;\n  v10 = *nptr;\n  if ( !*nptr )\n    goto LABEL_7;\n  v11 = __ctype_b_loc();\n  v12 = v11;\n  v13 = *v11;\n  v14 = nptr;\n  while ( v13[v10] & 0x2000 )\n    v10 = *++v14;\n  if ( v10 == 45 )\n    goto LABEL_7;\n  *v9 = 0;\n  endptr = 0LL;\n  v18 = __strtoul_internal(nptr, &endptr, 0, 0);\n  v19 = endptr;\n  v48 = v18;\n  v20 = *v9;\n  if ( endptr == nptr )\n  {\nLABEL_33:\n    if ( !v20 )\n    {\nLABEL_7:\n      v15 = 22;\n      v16 = -22;\n      goto LABEL_8;\n    }\nLABEL_13:\n    v16 = -v20;\n    goto LABEL_14;\n  }\n  if ( v20 && v18 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n    goto LABEL_13;\n  if ( !endptr || !*endptr )\n  {\n    v16 = 0;\n    *a4 = v18;\n    return v16;\n  }\n  v21 = 0;\n  v49 = 0LL;\n  while ( 1 )\n  {\n    v22 = v19[1];\n    if ( v22 == 105 )\n    {\n      if ( (v19[2] & 0xDF) == 66 && !v19[3] )\n      {\nLABEL_37:\n        v27 = 1024;\n        goto LABEL_38;\n      }\n      goto LABEL_23;\n    }\n    if ( (v22 & 0xDF) == 66 && !v19[2] )\n      break;\n    if ( !v22 )\n      goto LABEL_37;\nLABEL_23:\n    v23 = localeconv();\n    if ( !v23 )\n      goto LABEL_7;\n    if ( !v23->decimal_point )\n      goto LABEL_7;\n    s1 = v23->decimal_point;\n    v24 = strlen(v23->decimal_point);\n    if ( v49 )\n      goto LABEL_7;\n    if ( !*v19 )\n      goto LABEL_7;\n    v46 = v24;\n    if ( strncmp(s1, v19, v24) )\n      goto LABEL_7;\n    v25 = &v19[v46];\n    for ( i = v19[v46]; (_BYTE)i == 48; ++v21 )\n      i = *++v25;\n    if ( (*v12)[i] & 0x800 )\n    {\n      *v9 = 0;\n      v38 = v25;\n      endptr = 0LL;\n      v39 = __strtoul_internal(v25, &endptr, 0, 0);\n      v19 = endptr;\n      v49 = v39;\n      v20 = *v9;\n      if ( endptr == v38 )\n        goto LABEL_33;\n      if ( v20 )\n      {\n        if ( v39 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n          goto LABEL_13;\n        goto LABEL_62;\n      }\n      if ( v39 )\n      {\nLABEL_62:\n        if ( !endptr || !*endptr )\n          goto LABEL_7;\n      }\n    }\n    else\n    {\n      endptr = v25;\n      v19 = v25;\n    }\n  }\n  v27 = 1000;\nLABEL_38:\n  v28 = *v19;\n  v29 = strchr(\"KMGTPEZY\", v28);\n  if ( v29 )\n  {\n    v30 = (unsigned __int64)(v29 - \"KMGTPEZY\") + 1;\n    goto LABEL_40;\n  }\n  v45 = strchr(\"kmgtpezy\", v28);\n  if ( !v45 )\n    goto LABEL_7;\n  v30 = (unsigned __int64)(v45 - \"kmgtpezy\") + 1;\nLABEL_40:\n  if ( v30 )\n  {\n    if ( is_mul_ok(v27, v48) )\n    {\n      v31 = 0;\n      while ( 1 )\n      {\n        v48 *= v27;\n        if ( v30 - 1 == v31 )\n          break;\n        ++v31;\n        if ( !is_mul_ok(v27, v48) )\n          goto LABEL_77;\n      }\n      v16 = 0;\n    }\n    else\n    {\nLABEL_77:\n      v16 = -34;\n    }\n    if ( v49 )\n    {\n      v32 = v30 - 1;\n      v33 = 0;\n      v34 = 1LL;\n      do\n      {\n        v34 *= v27;\n        if ( v33 == v32 )\n          break;\n        ++v33;\n      }\n      while ( is_mul_ok(v27, v34) );\n      if ( v49 <= 0xA )\n      {\n        v36 = v49;\n        v35 = 10LL;\n      }\n      else\n      {\n        v35 = 10LL;\n        while ( 1 )\n        {\n          v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v49 >> 64) >> 3;\n          if ( v35 > 0x1999999999999999LL )\n            break;\n          v35 *= 10LL;\n          if ( v35 >= v49 )\n          {\n            v36 = v49;\n            break;\n          }\n        }\n      }\n      if ( v21 )\n      {\n        v37 = 0;\n        do\n        {\n          if ( v35 <= 0x1999999999999999LL )\n            v35 *= 10LL;\n          else\n            v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n          ++v37;\n        }\n        while ( v21 != v37 );\n      }\n      v40 = 1LL;\n      do\n      {\n        v41 = 10 * v40;\n        v42 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        v43 = v36 - 10 * v42;\n        v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        if ( v43 )\n        {\n          v44 = v35 / v40 / v43;\n          if ( v44 )\n            v48 += v34 / v44;\n        }\n        v40 = v41;\n      }\n      while ( v42 );\n    }\n    *v8 = v48;\nLABEL_14:\n    if ( (v16 & 0x80000000) != 0 )\n    {\n      v15 = -v16;\nLABEL_8:\n      *v9 = v15;\n    }\n  }\n  else\n  {\n    v16 = 0;\n    *a4 = v48;\n  }\n  return v16;\n}\n\n// write access to const memory has been detected, the output may be wrong!\n__int64 __usercall sub_8D30@<rax>(char *nptr@<rdi>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned __int64 *a4@<rsi>, __int64 a5@<r12>, __int64 a6@<r13>, __int64 a7@<r14>, __int64 a8@<r15>)\n{\n  unsigned __int64 *v8; // rbp\n  int *v9; // rbx\n  unsigned __int8 v10; // r14\n  const unsigned __int16 **v11; // rax\n  const unsigned __int16 **v12; // r13\n  const unsigned __int16 *v13; // rcx\n  char *v14; // rax\n  int v15; // eax\n  unsigned int v16; // ecx\n  unsigned __int64 v18; // rax\n  char *v19; // r14\n  int v20; // ecx\n  int v21; // er15\n  char v22; // al\n  struct lconv *v23; // rax\n  size_t v24; // rax\n  char *v25; // r8\n  __int64 i; // rax\n  signed int v27; // er13\n  int v28; // er14\n  char *v29; // rax\n  int v30; // edi\n  int v31; // ecx\n  int v32; // edi\n  int v33; // er8\n  unsigned __int64 v34; // r10\n  unsigned __int64 v35; // rdi\n  unsigned __int64 v36; // r8\n  int v37; // esi\n  char *v38; // ST08_8\n  unsigned __int64 v39; // rax\n  unsigned __int64 v40; // r9\n  signed __int64 v41; // r11\n  unsigned __int64 v42; // rsi\n  unsigned __int64 v43; // r13\n  unsigned __int64 v44; // r9\n  char *v45; // rax\n  size_t v46; // [rsp+0h] [rbp-70h]\n  char *s1; // [rsp+8h] [rbp-68h]\n  unsigned __int64 v48; // [rsp+10h] [rbp-60h]\n  unsigned __int64 v49; // [rsp+18h] [rbp-58h]\n  char *endptr; // [rsp+28h] [rbp-48h]\n  unsigned __int64 v51; // [rsp+30h] [rbp-40h]\n  __int64 v52; // [rsp+40h] [rbp-30h]\n  __int64 v53; // [rsp+48h] [rbp-28h]\n  __int64 v54; // [rsp+50h] [rbp-20h]\n  __int64 v55; // [rsp+58h] [rbp-18h]\n  __int64 v56; // [rsp+60h] [rbp-10h]\n  __int64 v57; // [rsp+68h] [rbp-8h]\n\n  v57 = a8;\n  v56 = a7;\n  v55 = a6;\n  v54 = a5;\n  v53 = a3;\n  v52 = a2;\n  v8 = a4;\n  *a4 = 0LL;\n  v51 = __readfsqword(0x28u);\n  v9 = __errno_location();\n  if ( !nptr )\n    goto LABEL_7;\n  v10 = *nptr;\n  if ( !*nptr )\n    goto LABEL_7;\n  v11 = __ctype_b_loc();\n  v12 = v11;\n  v13 = *v11;\n  v14 = nptr;\n  while ( v13[v10] & 0x2000 )\n    v10 = *++v14;\n  if ( v10 == 45 )\n    goto LABEL_7;\n  *v9 = 0;\n  endptr = 0LL;\n  v18 = __strtoul_internal(nptr, &endptr, 0, 0);\n  v19 = endptr;\n  v48 = v18;\n  v20 = *v9;\n  if ( endptr == nptr )\n  {\nLABEL_33:\n    if ( !v20 )\n    {\nLABEL_7:\n      v15 = 22;\n      v16 = -22;\n      goto LABEL_8;\n    }\nLABEL_13:\n    v16 = -v20;\n    goto LABEL_14;\n  }\n  if ( v20 && v18 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n    goto LABEL_13;\n  if ( !endptr || !*endptr )\n  {\n    v16 = 0;\n    *a4 = v18;\n    return v16;\n  }\n  v21 = 0;\n  v49 = 0LL;\n  while ( 1 )\n  {\n    v22 = v19[1];\n    if ( v22 == 105 )\n    {\n      if ( (v19[2] & 0xDF) == 66 && !v19[3] )\n      {\nLABEL_37:\n        v27 = 1024;\n        goto LABEL_38;\n      }\n      goto LABEL_23;\n    }\n    if ( (v22 & 0xDF) == 66 && !v19[2] )\n      break;\n    if ( !v22 )\n      goto LABEL_37;\nLABEL_23:\n    v23 = localeconv();\n    if ( !v23 )\n      goto LABEL_7;\n    if ( !v23->decimal_point )\n      goto LABEL_7;\n    s1 = v23->decimal_point;\n    v24 = strlen(v23->decimal_point);\n    if ( v49 )\n      goto LABEL_7;\n    if ( !*v19 )\n      goto LABEL_7;\n    v46 = v24;\n    if ( strncmp(s1, v19, v24) )\n      goto LABEL_7;\n    v25 = &v19[v46];\n    for ( i = v19[v46]; (_BYTE)i == 48; ++v21 )\n      i = *++v25;\n    if ( (*v12)[i] & 0x800 )\n    {\n      *v9 = 0;\n      v38 = v25;\n      endptr = 0LL;\n      v39 = __strtoul_internal(v25, &endptr, 0, 0);\n      v19 = endptr;\n      v49 = v39;\n      v20 = *v9;\n      if ( endptr == v38 )\n        goto LABEL_33;\n      if ( v20 )\n      {\n        if ( v39 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n          goto LABEL_13;\n        goto LABEL_62;\n      }\n      if ( v39 )\n      {\nLABEL_62:\n        if ( !endptr || !*endptr )\n          goto LABEL_7;\n      }\n    }\n    else\n    {\n      endptr = v25;\n      v19 = v25;\n    }\n  }\n  v27 = 1000;\nLABEL_38:\n  v28 = *v19;\n  v29 = strchr(\"KMGTPEZY\", v28);\n  if ( v29 )\n  {\n    v30 = (unsigned __int64)(v29 - \"KMGTPEZY\") + 1;\n    goto LABEL_40;\n  }\n  v45 = strchr(\"kmgtpezy\", v28);\n  if ( !v45 )\n    goto LABEL_7;\n  v30 = (unsigned __int64)(v45 - \"kmgtpezy\") + 1;\nLABEL_40:\n  if ( v30 )\n  {\n    if ( is_mul_ok(v27, v48) )\n    {\n      v31 = 0;\n      while ( 1 )\n      {\n        v48 *= v27;\n        if ( v30 - 1 == v31 )\n          break;\n        ++v31;\n        if ( !is_mul_ok(v27, v48) )\n          goto LABEL_77;\n      }\n      v16 = 0;\n    }\n    else\n    {\nLABEL_77:\n      v16 = -34;\n    }\n    if ( v49 )\n    {\n      v32 = v30 - 1;\n      v33 = 0;\n      v34 = 1LL;\n      do\n      {\n        v34 *= v27;\n        if ( v33 == v32 )\n          break;\n        ++v33;\n      }\n      while ( is_mul_ok(v27, v34) );\n      if ( v49 <= 0xA )\n      {\n        v36 = v49;\n        v35 = 10LL;\n      }\n      else\n      {\n        v35 = 10LL;\n        while ( 1 )\n        {\n          v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v49 >> 64) >> 3;\n          if ( v35 > 0x1999999999999999LL )\n            break;\n          v35 *= 10LL;\n          if ( v35 >= v49 )\n          {\n            v36 = v49;\n            break;\n          }\n        }\n      }\n      if ( v21 )\n      {\n        v37 = 0;\n        do\n        {\n          if ( v35 <= 0x1999999999999999LL )\n            v35 *= 10LL;\n          else\n            v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n          ++v37;\n        }\n        while ( v21 != v37 );\n      }\n      v40 = 1LL;\n      do\n      {\n        v41 = 10 * v40;\n        v42 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        v43 = v36 - 10 * v42;\n        v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        if ( v43 )\n        {\n          v44 = v35 / v40 / v43;\n          if ( v44 )\n            v48 += v34 / v44;\n        }\n        v40 = v41;\n      }\n      while ( v42 );\n    }\n    *v8 = v48;\nLABEL_14:\n    if ( (v16 & 0x80000000) != 0 )\n    {\n      v15 = -v16;\nLABEL_8:\n      *v9 = v15;\n    }\n  }\n  else\n  {\n    v16 = 0;\n    *a4 = v48;\n  }\n  return v16;\n}\n\n// write access to const memory has been detected, the output may be wrong!\n__int64 __usercall sub_8D30@<rax>(char *nptr@<rdi>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned __int64 *a4@<rsi>, __int64 a5@<r12>, __int64 a6@<r13>, __int64 a7@<r14>, __int64 a8@<r15>)\n{\n  unsigned __int64 *v8; // rbp\n  int *v9; // rbx\n  unsigned __int8 v10; // r14\n  const unsigned __int16 **v11; // rax\n  const unsigned __int16 **v12; // r13\n  const unsigned __int16 *v13; // rcx\n  char *v14; // rax\n  int v15; // eax\n  unsigned int v16; // ecx\n  unsigned __int64 v18; // rax\n  char *v19; // r14\n  int v20; // ecx\n  int v21; // er15\n  char v22; // al\n  struct lconv *v23; // rax\n  size_t v24; // rax\n  char *v25; // r8\n  __int64 i; // rax\n  signed int v27; // er13\n  int v28; // er14\n  char *v29; // rax\n  int v30; // edi\n  int v31; // ecx\n  int v32; // edi\n  int v33; // er8\n  unsigned __int64 v34; // r10\n  unsigned __int64 v35; // rdi\n  unsigned __int64 v36; // r8\n  int v37; // esi\n  char *v38; // ST08_8\n  unsigned __int64 v39; // rax\n  unsigned __int64 v40; // r9\n  signed __int64 v41; // r11\n  unsigned __int64 v42; // rsi\n  unsigned __int64 v43; // r13\n  unsigned __int64 v44; // r9\n  char *v45; // rax\n  size_t v46; // [rsp+0h] [rbp-70h]\n  char *s1; // [rsp+8h] [rbp-68h]\n  unsigned __int64 v48; // [rsp+10h] [rbp-60h]\n  unsigned __int64 v49; // [rsp+18h] [rbp-58h]\n  char *endptr; // [rsp+28h] [rbp-48h]\n  unsigned __int64 v51; // [rsp+30h] [rbp-40h]\n  __int64 v52; // [rsp+40h] [rbp-30h]\n  __int64 v53; // [rsp+48h] [rbp-28h]\n  __int64 v54; // [rsp+50h] [rbp-20h]\n  __int64 v55; // [rsp+58h] [rbp-18h]\n  __int64 v56; // [rsp+60h] [rbp-10h]\n  __int64 v57; // [rsp+68h] [rbp-8h]\n\n  v57 = a8;\n  v56 = a7;\n  v55 = a6;\n  v54 = a5;\n  v53 = a3;\n  v52 = a2;\n  v8 = a4;\n  *a4 = 0LL;\n  v51 = __readfsqword(0x28u);\n  v9 = __errno_location();\n  if ( !nptr )\n    goto LABEL_7;\n  v10 = *nptr;\n  if ( !*nptr )\n    goto LABEL_7;\n  v11 = __ctype_b_loc();\n  v12 = v11;\n  v13 = *v11;\n  v14 = nptr;\n  while ( v13[v10] & 0x2000 )\n    v10 = *++v14;\n  if ( v10 == 45 )\n    goto LABEL_7;\n  *v9 = 0;\n  endptr = 0LL;\n  v18 = __strtoul_internal(nptr, &endptr, 0, 0);\n  v19 = endptr;\n  v48 = v18;\n  v20 = *v9;\n  if ( endptr == nptr )\n  {\nLABEL_33:\n    if ( !v20 )\n    {\nLABEL_7:\n      v15 = 22;\n      v16 = -22;\n      goto LABEL_8;\n    }\nLABEL_13:\n    v16 = -v20;\n    goto LABEL_14;\n  }\n  if ( v20 && v18 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n    goto LABEL_13;\n  if ( !endptr || !*endptr )\n  {\n    v16 = 0;\n    *a4 = v18;\n    return v16;\n  }\n  v21 = 0;\n  v49 = 0LL;\n  while ( 1 )\n  {\n    v22 = v19[1];\n    if ( v22 == 105 )\n    {\n      if ( (v19[2] & 0xDF) == 66 && !v19[3] )\n      {\nLABEL_37:\n        v27 = 1024;\n        goto LABEL_38;\n      }\n      goto LABEL_23;\n    }\n    if ( (v22 & 0xDF) == 66 && !v19[2] )\n      break;\n    if ( !v22 )\n      goto LABEL_37;\nLABEL_23:\n    v23 = localeconv();\n    if ( !v23 )\n      goto LABEL_7;\n    if ( !v23->decimal_point )\n      goto LABEL_7;\n    s1 = v23->decimal_point;\n    v24 = strlen(v23->decimal_point);\n    if ( v49 )\n      goto LABEL_7;\n    if ( !*v19 )\n      goto LABEL_7;\n    v46 = v24;\n    if ( strncmp(s1, v19, v24) )\n      goto LABEL_7;\n    v25 = &v19[v46];\n    for ( i = v19[v46]; (_BYTE)i == 48; ++v21 )\n      i = *++v25;\n    if ( (*v12)[i] & 0x800 )\n    {\n      *v9 = 0;\n      v38 = v25;\n      endptr = 0LL;\n      v39 = __strtoul_internal(v25, &endptr, 0, 0);\n      v19 = endptr;\n      v49 = v39;\n      v20 = *v9;\n      if ( endptr == v38 )\n        goto LABEL_33;\n      if ( v20 )\n      {\n        if ( v39 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n          goto LABEL_13;\n        goto LABEL_62;\n      }\n      if ( v39 )\n      {\nLABEL_62:\n        if ( !endptr || !*endptr )\n          goto LABEL_7;\n      }\n    }\n    else\n    {\n      endptr = v25;\n      v19 = v25;\n    }\n  }\n  v27 = 1000;\nLABEL_38:\n  v28 = *v19;\n  v29 = strchr(\"KMGTPEZY\", v28);\n  if ( v29 )\n  {\n    v30 = (unsigned __int64)(v29 - \"KMGTPEZY\") + 1;\n    goto LABEL_40;\n  }\n  v45 = strchr(\"kmgtpezy\", v28);\n  if ( !v45 )\n    goto LABEL_7;\n  v30 = (unsigned __int64)(v45 - \"kmgtpezy\") + 1;\nLABEL_40:\n  if ( v30 )\n  {\n    if ( is_mul_ok(v27, v48) )\n    {\n      v31 = 0;\n      while ( 1 )\n      {\n        v48 *= v27;\n        if ( v30 - 1 == v31 )\n          break;\n        ++v31;\n        if ( !is_mul_ok(v27, v48) )\n          goto LABEL_77;\n      }\n      v16 = 0;\n    }\n    else\n    {\nLABEL_77:\n      v16 = -34;\n    }\n    if ( v49 )\n    {\n      v32 = v30 - 1;\n      v33 = 0;\n      v34 = 1LL;\n      do\n      {\n        v34 *= v27;\n        if ( v33 == v32 )\n          break;\n        ++v33;\n      }\n      while ( is_mul_ok(v27, v34) );\n      if ( v49 <= 0xA )\n      {\n        v36 = v49;\n        v35 = 10LL;\n      }\n      else\n      {\n        v35 = 10LL;\n        while ( 1 )\n        {\n          v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v49 >> 64) >> 3;\n          if ( v35 > 0x1999999999999999LL )\n            break;\n          v35 *= 10LL;\n          if ( v35 >= v49 )\n          {\n            v36 = v49;\n            break;\n          }\n        }\n      }\n      if ( v21 )\n      {\n        v37 = 0;\n        do\n        {\n          if ( v35 <= 0x1999999999999999LL )\n            v35 *= 10LL;\n          else\n            v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n          ++v37;\n        }\n        while ( v21 != v37 );\n      }\n      v40 = 1LL;\n      do\n      {\n        v41 = 10 * v40;\n        v42 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        v43 = v36 - 10 * v42;\n        v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        if ( v43 )\n        {\n          v44 = v35 / v40 / v43;\n          if ( v44 )\n            v48 += v34 / v44;\n        }\n        v40 = v41;\n      }\n      while ( v42 );\n    }\n    *v8 = v48;\nLABEL_14:\n    if ( (v16 & 0x80000000) != 0 )\n    {\n      v15 = -v16;\nLABEL_8:\n      *v9 = v15;\n    }\n  }\n  else\n  {\n    v16 = 0;\n    *a4 = v48;\n  }\n  return v16;\n}\n\n// write access to const memory has been detected, the output may be wrong!\n__int64 __usercall sub_8D30@<rax>(char *nptr@<rdi>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned __int64 *a4@<rsi>, __int64 a5@<r12>, __int64 a6@<r13>, __int64 a7@<r14>, __int64 a8@<r15>)\n{\n  unsigned __int64 *v8; // rbp\n  int *v9; // rbx\n  unsigned __int8 v10; // r14\n  const unsigned __int16 **v11; // rax\n  const unsigned __int16 **v12; // r13\n  const unsigned __int16 *v13; // rcx\n  char *v14; // rax\n  int v15; // eax\n  unsigned int v16; // ecx\n  unsigned __int64 v18; // rax\n  char *v19; // r14\n  int v20; // ecx\n  int v21; // er15\n  char v22; // al\n  struct lconv *v23; // rax\n  size_t v24; // rax\n  char *v25; // r8\n  __int64 i; // rax\n  signed int v27; // er13\n  int v28; // er14\n  char *v29; // rax\n  int v30; // edi\n  int v31; // ecx\n  int v32; // edi\n  int v33; // er8\n  unsigned __int64 v34; // r10\n  unsigned __int64 v35; // rdi\n  unsigned __int64 v36; // r8\n  int v37; // esi\n  char *v38; // ST08_8\n  unsigned __int64 v39; // rax\n  unsigned __int64 v40; // r9\n  signed __int64 v41; // r11\n  unsigned __int64 v42; // rsi\n  unsigned __int64 v43; // r13\n  unsigned __int64 v44; // r9\n  char *v45; // rax\n  size_t v46; // [rsp+0h] [rbp-70h]\n  char *s1; // [rsp+8h] [rbp-68h]\n  unsigned __int64 v48; // [rsp+10h] [rbp-60h]\n  unsigned __int64 v49; // [rsp+18h] [rbp-58h]\n  char *endptr; // [rsp+28h] [rbp-48h]\n  unsigned __int64 v51; // [rsp+30h] [rbp-40h]\n  __int64 v52; // [rsp+40h] [rbp-30h]\n  __int64 v53; // [rsp+48h] [rbp-28h]\n  __int64 v54; // [rsp+50h] [rbp-20h]\n  __int64 v55; // [rsp+58h] [rbp-18h]\n  __int64 v56; // [rsp+60h] [rbp-10h]\n  __int64 v57; // [rsp+68h] [rbp-8h]\n\n  v57 = a8;\n  v56 = a7;\n  v55 = a6;\n  v54 = a5;\n  v53 = a3;\n  v52 = a2;\n  v8 = a4;\n  *a4 = 0LL;\n  v51 = __readfsqword(0x28u);\n  v9 = __errno_location();\n  if ( !nptr )\n    goto LABEL_7;\n  v10 = *nptr;\n  if ( !*nptr )\n    goto LABEL_7;\n  v11 = __ctype_b_loc();\n  v12 = v11;\n  v13 = *v11;\n  v14 = nptr;\n  while ( v13[v10] & 0x2000 )\n    v10 = *++v14;\n  if ( v10 == 45 )\n    goto LABEL_7;\n  *v9 = 0;\n  endptr = 0LL;\n  v18 = __strtoul_internal(nptr, &endptr, 0, 0);\n  v19 = endptr;\n  v48 = v18;\n  v20 = *v9;\n  if ( endptr == nptr )\n  {\nLABEL_33:\n    if ( !v20 )\n    {\nLABEL_7:\n      v15 = 22;\n      v16 = -22;\n      goto LABEL_8;\n    }\nLABEL_13:\n    v16 = -v20;\n    goto LABEL_14;\n  }\n  if ( v20 && v18 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n    goto LABEL_13;\n  if ( !endptr || !*endptr )\n  {\n    v16 = 0;\n    *a4 = v18;\n    return v16;\n  }\n  v21 = 0;\n  v49 = 0LL;\n  while ( 1 )\n  {\n    v22 = v19[1];\n    if ( v22 == 105 )\n    {\n      if ( (v19[2] & 0xDF) == 66 && !v19[3] )\n      {\nLABEL_37:\n        v27 = 1024;\n        goto LABEL_38;\n      }\n      goto LABEL_23;\n    }\n    if ( (v22 & 0xDF) == 66 && !v19[2] )\n      break;\n    if ( !v22 )\n      goto LABEL_37;\nLABEL_23:\n    v23 = localeconv();\n    if ( !v23 )\n      goto LABEL_7;\n    if ( !v23->decimal_point )\n      goto LABEL_7;\n    s1 = v23->decimal_point;\n    v24 = strlen(v23->decimal_point);\n    if ( v49 )\n      goto LABEL_7;\n    if ( !*v19 )\n      goto LABEL_7;\n    v46 = v24;\n    if ( strncmp(s1, v19, v24) )\n      goto LABEL_7;\n    v25 = &v19[v46];\n    for ( i = v19[v46]; (_BYTE)i == 48; ++v21 )\n      i = *++v25;\n    if ( (*v12)[i] & 0x800 )\n    {\n      *v9 = 0;\n      v38 = v25;\n      endptr = 0LL;\n      v39 = __strtoul_internal(v25, &endptr, 0, 0);\n      v19 = endptr;\n      v49 = v39;\n      v20 = *v9;\n      if ( endptr == v38 )\n        goto LABEL_33;\n      if ( v20 )\n      {\n        if ( v39 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n          goto LABEL_13;\n        goto LABEL_62;\n      }\n      if ( v39 )\n      {\nLABEL_62:\n        if ( !endptr || !*endptr )\n          goto LABEL_7;\n      }\n    }\n    else\n    {\n      endptr = v25;\n      v19 = v25;\n    }\n  }\n  v27 = 1000;\nLABEL_38:\n  v28 = *v19;\n  v29 = strchr(\"KMGTPEZY\", v28);\n  if ( v29 )\n  {\n    v30 = (unsigned __int64)(v29 - \"KMGTPEZY\") + 1;\n    goto LABEL_40;\n  }\n  v45 = strchr(\"kmgtpezy\", v28);\n  if ( !v45 )\n    goto LABEL_7;\n  v30 = (unsigned __int64)(v45 - \"kmgtpezy\") + 1;\nLABEL_40:\n  if ( v30 )\n  {\n    if ( is_mul_ok(v27, v48) )\n    {\n      v31 = 0;\n      while ( 1 )\n      {\n        v48 *= v27;\n        if ( v30 - 1 == v31 )\n          break;\n        ++v31;\n        if ( !is_mul_ok(v27, v48) )\n          goto LABEL_77;\n      }\n      v16 = 0;\n    }\n    else\n    {\nLABEL_77:\n      v16 = -34;\n    }\n    if ( v49 )\n    {\n      v32 = v30 - 1;\n      v33 = 0;\n      v34 = 1LL;\n      do\n      {\n        v34 *= v27;\n        if ( v33 == v32 )\n          break;\n        ++v33;\n      }\n      while ( is_mul_ok(v27, v34) );\n      if ( v49 <= 0xA )\n      {\n        v36 = v49;\n        v35 = 10LL;\n      }\n      else\n      {\n        v35 = 10LL;\n        while ( 1 )\n        {\n          v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v49 >> 64) >> 3;\n          if ( v35 > 0x1999999999999999LL )\n            break;\n          v35 *= 10LL;\n          if ( v35 >= v49 )\n          {\n            v36 = v49;\n            break;\n          }\n        }\n      }\n      if ( v21 )\n      {\n        v37 = 0;\n        do\n        {\n          if ( v35 <= 0x1999999999999999LL )\n            v35 *= 10LL;\n          else\n            v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n          ++v37;\n        }\n        while ( v21 != v37 );\n      }\n      v40 = 1LL;\n      do\n      {\n        v41 = 10 * v40;\n        v42 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        v43 = v36 - 10 * v42;\n        v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        if ( v43 )\n        {\n          v44 = v35 / v40 / v43;\n          if ( v44 )\n            v48 += v34 / v44;\n        }\n        v40 = v41;\n      }\n      while ( v42 );\n    }\n    *v8 = v48;\nLABEL_14:\n    if ( (v16 & 0x80000000) != 0 )\n    {\n      v15 = -v16;\nLABEL_8:\n      *v9 = v15;\n    }\n  }\n  else\n  {\n    v16 = 0;\n    *a4 = v48;\n  }\n  return v16;\n}\n", 
            "funcStartAddr": "0x8c38L", 
            "funcEndAddr": "0x8d29L", 
            "funcName": "sub_8D30"
        }, 
        {
            "decompiledFuncCode": "// write access to const memory has been detected, the output may be wrong!\n__int64 __usercall sub_8D30@<rax>(char *nptr@<rdi>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned __int64 *a4@<rsi>, __int64 a5@<r12>, __int64 a6@<r13>, __int64 a7@<r14>, __int64 a8@<r15>)\n{\n  unsigned __int64 *v8; // rbp\n  int *v9; // rbx\n  unsigned __int8 v10; // r14\n  const unsigned __int16 **v11; // rax\n  const unsigned __int16 **v12; // r13\n  const unsigned __int16 *v13; // rcx\n  char *v14; // rax\n  int v15; // eax\n  unsigned int v16; // ecx\n  unsigned __int64 v18; // rax\n  char *v19; // r14\n  int v20; // ecx\n  int v21; // er15\n  char v22; // al\n  struct lconv *v23; // rax\n  size_t v24; // rax\n  char *v25; // r8\n  __int64 i; // rax\n  signed int v27; // er13\n  int v28; // er14\n  char *v29; // rax\n  int v30; // edi\n  int v31; // ecx\n  int v32; // edi\n  int v33; // er8\n  unsigned __int64 v34; // r10\n  unsigned __int64 v35; // rdi\n  unsigned __int64 v36; // r8\n  int v37; // esi\n  char *v38; // ST08_8\n  unsigned __int64 v39; // rax\n  unsigned __int64 v40; // r9\n  signed __int64 v41; // r11\n  unsigned __int64 v42; // rsi\n  unsigned __int64 v43; // r13\n  unsigned __int64 v44; // r9\n  char *v45; // rax\n  size_t v46; // [rsp+0h] [rbp-70h]\n  char *s1; // [rsp+8h] [rbp-68h]\n  unsigned __int64 v48; // [rsp+10h] [rbp-60h]\n  unsigned __int64 v49; // [rsp+18h] [rbp-58h]\n  char *endptr; // [rsp+28h] [rbp-48h]\n  unsigned __int64 v51; // [rsp+30h] [rbp-40h]\n  __int64 v52; // [rsp+40h] [rbp-30h]\n  __int64 v53; // [rsp+48h] [rbp-28h]\n  __int64 v54; // [rsp+50h] [rbp-20h]\n  __int64 v55; // [rsp+58h] [rbp-18h]\n  __int64 v56; // [rsp+60h] [rbp-10h]\n  __int64 v57; // [rsp+68h] [rbp-8h]\n\n  v57 = a8;\n  v56 = a7;\n  v55 = a6;\n  v54 = a5;\n  v53 = a3;\n  v52 = a2;\n  v8 = a4;\n  *a4 = 0LL;\n  v51 = __readfsqword(0x28u);\n  v9 = __errno_location();\n  if ( !nptr )\n    goto LABEL_7;\n  v10 = *nptr;\n  if ( !*nptr )\n    goto LABEL_7;\n  v11 = __ctype_b_loc();\n  v12 = v11;\n  v13 = *v11;\n  v14 = nptr;\n  while ( v13[v10] & 0x2000 )\n    v10 = *++v14;\n  if ( v10 == 45 )\n    goto LABEL_7;\n  *v9 = 0;\n  endptr = 0LL;\n  v18 = __strtoul_internal(nptr, &endptr, 0, 0);\n  v19 = endptr;\n  v48 = v18;\n  v20 = *v9;\n  if ( endptr == nptr )\n  {\nLABEL_33:\n    if ( !v20 )\n    {\nLABEL_7:\n      v15 = 22;\n      v16 = -22;\n      goto LABEL_8;\n    }\nLABEL_13:\n    v16 = -v20;\n    goto LABEL_14;\n  }\n  if ( v20 && v18 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n    goto LABEL_13;\n  if ( !endptr || !*endptr )\n  {\n    v16 = 0;\n    *a4 = v18;\n    return v16;\n  }\n  v21 = 0;\n  v49 = 0LL;\n  while ( 1 )\n  {\n    v22 = v19[1];\n    if ( v22 == 105 )\n    {\n      if ( (v19[2] & 0xDF) == 66 && !v19[3] )\n      {\nLABEL_37:\n        v27 = 1024;\n        goto LABEL_38;\n      }\n      goto LABEL_23;\n    }\n    if ( (v22 & 0xDF) == 66 && !v19[2] )\n      break;\n    if ( !v22 )\n      goto LABEL_37;\nLABEL_23:\n    v23 = localeconv();\n    if ( !v23 )\n      goto LABEL_7;\n    if ( !v23->decimal_point )\n      goto LABEL_7;\n    s1 = v23->decimal_point;\n    v24 = strlen(v23->decimal_point);\n    if ( v49 )\n      goto LABEL_7;\n    if ( !*v19 )\n      goto LABEL_7;\n    v46 = v24;\n    if ( strncmp(s1, v19, v24) )\n      goto LABEL_7;\n    v25 = &v19[v46];\n    for ( i = v19[v46]; (_BYTE)i == 48; ++v21 )\n      i = *++v25;\n    if ( (*v12)[i] & 0x800 )\n    {\n      *v9 = 0;\n      v38 = v25;\n      endptr = 0LL;\n      v39 = __strtoul_internal(v25, &endptr, 0, 0);\n      v19 = endptr;\n      v49 = v39;\n      v20 = *v9;\n      if ( endptr == v38 )\n        goto LABEL_33;\n      if ( v20 )\n      {\n        if ( v39 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n          goto LABEL_13;\n        goto LABEL_62;\n      }\n      if ( v39 )\n      {\nLABEL_62:\n        if ( !endptr || !*endptr )\n          goto LABEL_7;\n      }\n    }\n    else\n    {\n      endptr = v25;\n      v19 = v25;\n    }\n  }\n  v27 = 1000;\nLABEL_38:\n  v28 = *v19;\n  v29 = strchr(\"KMGTPEZY\", v28);\n  if ( v29 )\n  {\n    v30 = (unsigned __int64)(v29 - \"KMGTPEZY\") + 1;\n    goto LABEL_40;\n  }\n  v45 = strchr(\"kmgtpezy\", v28);\n  if ( !v45 )\n    goto LABEL_7;\n  v30 = (unsigned __int64)(v45 - \"kmgtpezy\") + 1;\nLABEL_40:\n  if ( v30 )\n  {\n    if ( is_mul_ok(v27, v48) )\n    {\n      v31 = 0;\n      while ( 1 )\n      {\n        v48 *= v27;\n        if ( v30 - 1 == v31 )\n          break;\n        ++v31;\n        if ( !is_mul_ok(v27, v48) )\n          goto LABEL_77;\n      }\n      v16 = 0;\n    }\n    else\n    {\nLABEL_77:\n      v16 = -34;\n    }\n    if ( v49 )\n    {\n      v32 = v30 - 1;\n      v33 = 0;\n      v34 = 1LL;\n      do\n      {\n        v34 *= v27;\n        if ( v33 == v32 )\n          break;\n        ++v33;\n      }\n      while ( is_mul_ok(v27, v34) );\n      if ( v49 <= 0xA )\n      {\n        v36 = v49;\n        v35 = 10LL;\n      }\n      else\n      {\n        v35 = 10LL;\n        while ( 1 )\n        {\n          v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v49 >> 64) >> 3;\n          if ( v35 > 0x1999999999999999LL )\n            break;\n          v35 *= 10LL;\n          if ( v35 >= v49 )\n          {\n            v36 = v49;\n            break;\n          }\n        }\n      }\n      if ( v21 )\n      {\n        v37 = 0;\n        do\n        {\n          if ( v35 <= 0x1999999999999999LL )\n            v35 *= 10LL;\n          else\n            v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n          ++v37;\n        }\n        while ( v21 != v37 );\n      }\n      v40 = 1LL;\n      do\n      {\n        v41 = 10 * v40;\n        v42 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        v43 = v36 - 10 * v42;\n        v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        if ( v43 )\n        {\n          v44 = v35 / v40 / v43;\n          if ( v44 )\n            v48 += v34 / v44;\n        }\n        v40 = v41;\n      }\n      while ( v42 );\n    }\n    *v8 = v48;\nLABEL_14:\n    if ( (v16 & 0x80000000) != 0 )\n    {\n      v15 = -v16;\nLABEL_8:\n      *v9 = v15;\n    }\n  }\n  else\n  {\n    v16 = 0;\n    *a4 = v48;\n  }\n  return v16;\n}\n\n// write access to const memory has been detected, the output may be wrong!\n__int64 __usercall sub_8D30@<rax>(char *nptr@<rdi>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned __int64 *a4@<rsi>, __int64 a5@<r12>, __int64 a6@<r13>, __int64 a7@<r14>, __int64 a8@<r15>)\n{\n  unsigned __int64 *v8; // rbp\n  int *v9; // rbx\n  unsigned __int8 v10; // r14\n  const unsigned __int16 **v11; // rax\n  const unsigned __int16 **v12; // r13\n  const unsigned __int16 *v13; // rcx\n  char *v14; // rax\n  int v15; // eax\n  unsigned int v16; // ecx\n  unsigned __int64 v18; // rax\n  char *v19; // r14\n  int v20; // ecx\n  int v21; // er15\n  char v22; // al\n  struct lconv *v23; // rax\n  size_t v24; // rax\n  char *v25; // r8\n  __int64 i; // rax\n  signed int v27; // er13\n  int v28; // er14\n  char *v29; // rax\n  int v30; // edi\n  int v31; // ecx\n  int v32; // edi\n  int v33; // er8\n  unsigned __int64 v34; // r10\n  unsigned __int64 v35; // rdi\n  unsigned __int64 v36; // r8\n  int v37; // esi\n  char *v38; // ST08_8\n  unsigned __int64 v39; // rax\n  unsigned __int64 v40; // r9\n  signed __int64 v41; // r11\n  unsigned __int64 v42; // rsi\n  unsigned __int64 v43; // r13\n  unsigned __int64 v44; // r9\n  char *v45; // rax\n  size_t v46; // [rsp+0h] [rbp-70h]\n  char *s1; // [rsp+8h] [rbp-68h]\n  unsigned __int64 v48; // [rsp+10h] [rbp-60h]\n  unsigned __int64 v49; // [rsp+18h] [rbp-58h]\n  char *endptr; // [rsp+28h] [rbp-48h]\n  unsigned __int64 v51; // [rsp+30h] [rbp-40h]\n  __int64 v52; // [rsp+40h] [rbp-30h]\n  __int64 v53; // [rsp+48h] [rbp-28h]\n  __int64 v54; // [rsp+50h] [rbp-20h]\n  __int64 v55; // [rsp+58h] [rbp-18h]\n  __int64 v56; // [rsp+60h] [rbp-10h]\n  __int64 v57; // [rsp+68h] [rbp-8h]\n\n  v57 = a8;\n  v56 = a7;\n  v55 = a6;\n  v54 = a5;\n  v53 = a3;\n  v52 = a2;\n  v8 = a4;\n  *a4 = 0LL;\n  v51 = __readfsqword(0x28u);\n  v9 = __errno_location();\n  if ( !nptr )\n    goto LABEL_7;\n  v10 = *nptr;\n  if ( !*nptr )\n    goto LABEL_7;\n  v11 = __ctype_b_loc();\n  v12 = v11;\n  v13 = *v11;\n  v14 = nptr;\n  while ( v13[v10] & 0x2000 )\n    v10 = *++v14;\n  if ( v10 == 45 )\n    goto LABEL_7;\n  *v9 = 0;\n  endptr = 0LL;\n  v18 = __strtoul_internal(nptr, &endptr, 0, 0);\n  v19 = endptr;\n  v48 = v18;\n  v20 = *v9;\n  if ( endptr == nptr )\n  {\nLABEL_33:\n    if ( !v20 )\n    {\nLABEL_7:\n      v15 = 22;\n      v16 = -22;\n      goto LABEL_8;\n    }\nLABEL_13:\n    v16 = -v20;\n    goto LABEL_14;\n  }\n  if ( v20 && v18 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n    goto LABEL_13;\n  if ( !endptr || !*endptr )\n  {\n    v16 = 0;\n    *a4 = v18;\n    return v16;\n  }\n  v21 = 0;\n  v49 = 0LL;\n  while ( 1 )\n  {\n    v22 = v19[1];\n    if ( v22 == 105 )\n    {\n      if ( (v19[2] & 0xDF) == 66 && !v19[3] )\n      {\nLABEL_37:\n        v27 = 1024;\n        goto LABEL_38;\n      }\n      goto LABEL_23;\n    }\n    if ( (v22 & 0xDF) == 66 && !v19[2] )\n      break;\n    if ( !v22 )\n      goto LABEL_37;\nLABEL_23:\n    v23 = localeconv();\n    if ( !v23 )\n      goto LABEL_7;\n    if ( !v23->decimal_point )\n      goto LABEL_7;\n    s1 = v23->decimal_point;\n    v24 = strlen(v23->decimal_point);\n    if ( v49 )\n      goto LABEL_7;\n    if ( !*v19 )\n      goto LABEL_7;\n    v46 = v24;\n    if ( strncmp(s1, v19, v24) )\n      goto LABEL_7;\n    v25 = &v19[v46];\n    for ( i = v19[v46]; (_BYTE)i == 48; ++v21 )\n      i = *++v25;\n    if ( (*v12)[i] & 0x800 )\n    {\n      *v9 = 0;\n      v38 = v25;\n      endptr = 0LL;\n      v39 = __strtoul_internal(v25, &endptr, 0, 0);\n      v19 = endptr;\n      v49 = v39;\n      v20 = *v9;\n      if ( endptr == v38 )\n        goto LABEL_33;\n      if ( v20 )\n      {\n        if ( v39 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n          goto LABEL_13;\n        goto LABEL_62;\n      }\n      if ( v39 )\n      {\nLABEL_62:\n        if ( !endptr || !*endptr )\n          goto LABEL_7;\n      }\n    }\n    else\n    {\n      endptr = v25;\n      v19 = v25;\n    }\n  }\n  v27 = 1000;\nLABEL_38:\n  v28 = *v19;\n  v29 = strchr(\"KMGTPEZY\", v28);\n  if ( v29 )\n  {\n    v30 = (unsigned __int64)(v29 - \"KMGTPEZY\") + 1;\n    goto LABEL_40;\n  }\n  v45 = strchr(\"kmgtpezy\", v28);\n  if ( !v45 )\n    goto LABEL_7;\n  v30 = (unsigned __int64)(v45 - \"kmgtpezy\") + 1;\nLABEL_40:\n  if ( v30 )\n  {\n    if ( is_mul_ok(v27, v48) )\n    {\n      v31 = 0;\n      while ( 1 )\n      {\n        v48 *= v27;\n        if ( v30 - 1 == v31 )\n          break;\n        ++v31;\n        if ( !is_mul_ok(v27, v48) )\n          goto LABEL_77;\n      }\n      v16 = 0;\n    }\n    else\n    {\nLABEL_77:\n      v16 = -34;\n    }\n    if ( v49 )\n    {\n      v32 = v30 - 1;\n      v33 = 0;\n      v34 = 1LL;\n      do\n      {\n        v34 *= v27;\n        if ( v33 == v32 )\n          break;\n        ++v33;\n      }\n      while ( is_mul_ok(v27, v34) );\n      if ( v49 <= 0xA )\n      {\n        v36 = v49;\n        v35 = 10LL;\n      }\n      else\n      {\n        v35 = 10LL;\n        while ( 1 )\n        {\n          v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v49 >> 64) >> 3;\n          if ( v35 > 0x1999999999999999LL )\n            break;\n          v35 *= 10LL;\n          if ( v35 >= v49 )\n          {\n            v36 = v49;\n            break;\n          }\n        }\n      }\n      if ( v21 )\n      {\n        v37 = 0;\n        do\n        {\n          if ( v35 <= 0x1999999999999999LL )\n            v35 *= 10LL;\n          else\n            v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n          ++v37;\n        }\n        while ( v21 != v37 );\n      }\n      v40 = 1LL;\n      do\n      {\n        v41 = 10 * v40;\n        v42 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        v43 = v36 - 10 * v42;\n        v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        if ( v43 )\n        {\n          v44 = v35 / v40 / v43;\n          if ( v44 )\n            v48 += v34 / v44;\n        }\n        v40 = v41;\n      }\n      while ( v42 );\n    }\n    *v8 = v48;\nLABEL_14:\n    if ( (v16 & 0x80000000) != 0 )\n    {\n      v15 = -v16;\nLABEL_8:\n      *v9 = v15;\n    }\n  }\n  else\n  {\n    v16 = 0;\n    *a4 = v48;\n  }\n  return v16;\n}\n\n// write access to const memory has been detected, the output may be wrong!\n__int64 __usercall sub_8D30@<rax>(char *nptr@<rdi>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned __int64 *a4@<rsi>, __int64 a5@<r12>, __int64 a6@<r13>, __int64 a7@<r14>, __int64 a8@<r15>)\n{\n  unsigned __int64 *v8; // rbp\n  int *v9; // rbx\n  unsigned __int8 v10; // r14\n  const unsigned __int16 **v11; // rax\n  const unsigned __int16 **v12; // r13\n  const unsigned __int16 *v13; // rcx\n  char *v14; // rax\n  int v15; // eax\n  unsigned int v16; // ecx\n  unsigned __int64 v18; // rax\n  char *v19; // r14\n  int v20; // ecx\n  int v21; // er15\n  char v22; // al\n  struct lconv *v23; // rax\n  size_t v24; // rax\n  char *v25; // r8\n  __int64 i; // rax\n  signed int v27; // er13\n  int v28; // er14\n  char *v29; // rax\n  int v30; // edi\n  int v31; // ecx\n  int v32; // edi\n  int v33; // er8\n  unsigned __int64 v34; // r10\n  unsigned __int64 v35; // rdi\n  unsigned __int64 v36; // r8\n  int v37; // esi\n  char *v38; // ST08_8\n  unsigned __int64 v39; // rax\n  unsigned __int64 v40; // r9\n  signed __int64 v41; // r11\n  unsigned __int64 v42; // rsi\n  unsigned __int64 v43; // r13\n  unsigned __int64 v44; // r9\n  char *v45; // rax\n  size_t v46; // [rsp+0h] [rbp-70h]\n  char *s1; // [rsp+8h] [rbp-68h]\n  unsigned __int64 v48; // [rsp+10h] [rbp-60h]\n  unsigned __int64 v49; // [rsp+18h] [rbp-58h]\n  char *endptr; // [rsp+28h] [rbp-48h]\n  unsigned __int64 v51; // [rsp+30h] [rbp-40h]\n  __int64 v52; // [rsp+40h] [rbp-30h]\n  __int64 v53; // [rsp+48h] [rbp-28h]\n  __int64 v54; // [rsp+50h] [rbp-20h]\n  __int64 v55; // [rsp+58h] [rbp-18h]\n  __int64 v56; // [rsp+60h] [rbp-10h]\n  __int64 v57; // [rsp+68h] [rbp-8h]\n\n  v57 = a8;\n  v56 = a7;\n  v55 = a6;\n  v54 = a5;\n  v53 = a3;\n  v52 = a2;\n  v8 = a4;\n  *a4 = 0LL;\n  v51 = __readfsqword(0x28u);\n  v9 = __errno_location();\n  if ( !nptr )\n    goto LABEL_7;\n  v10 = *nptr;\n  if ( !*nptr )\n    goto LABEL_7;\n  v11 = __ctype_b_loc();\n  v12 = v11;\n  v13 = *v11;\n  v14 = nptr;\n  while ( v13[v10] & 0x2000 )\n    v10 = *++v14;\n  if ( v10 == 45 )\n    goto LABEL_7;\n  *v9 = 0;\n  endptr = 0LL;\n  v18 = __strtoul_internal(nptr, &endptr, 0, 0);\n  v19 = endptr;\n  v48 = v18;\n  v20 = *v9;\n  if ( endptr == nptr )\n  {\nLABEL_33:\n    if ( !v20 )\n    {\nLABEL_7:\n      v15 = 22;\n      v16 = -22;\n      goto LABEL_8;\n    }\nLABEL_13:\n    v16 = -v20;\n    goto LABEL_14;\n  }\n  if ( v20 && v18 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n    goto LABEL_13;\n  if ( !endptr || !*endptr )\n  {\n    v16 = 0;\n    *a4 = v18;\n    return v16;\n  }\n  v21 = 0;\n  v49 = 0LL;\n  while ( 1 )\n  {\n    v22 = v19[1];\n    if ( v22 == 105 )\n    {\n      if ( (v19[2] & 0xDF) == 66 && !v19[3] )\n      {\nLABEL_37:\n        v27 = 1024;\n        goto LABEL_38;\n      }\n      goto LABEL_23;\n    }\n    if ( (v22 & 0xDF) == 66 && !v19[2] )\n      break;\n    if ( !v22 )\n      goto LABEL_37;\nLABEL_23:\n    v23 = localeconv();\n    if ( !v23 )\n      goto LABEL_7;\n    if ( !v23->decimal_point )\n      goto LABEL_7;\n    s1 = v23->decimal_point;\n    v24 = strlen(v23->decimal_point);\n    if ( v49 )\n      goto LABEL_7;\n    if ( !*v19 )\n      goto LABEL_7;\n    v46 = v24;\n    if ( strncmp(s1, v19, v24) )\n      goto LABEL_7;\n    v25 = &v19[v46];\n    for ( i = v19[v46]; (_BYTE)i == 48; ++v21 )\n      i = *++v25;\n    if ( (*v12)[i] & 0x800 )\n    {\n      *v9 = 0;\n      v38 = v25;\n      endptr = 0LL;\n      v39 = __strtoul_internal(v25, &endptr, 0, 0);\n      v19 = endptr;\n      v49 = v39;\n      v20 = *v9;\n      if ( endptr == v38 )\n        goto LABEL_33;\n      if ( v20 )\n      {\n        if ( v39 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n          goto LABEL_13;\n        goto LABEL_62;\n      }\n      if ( v39 )\n      {\nLABEL_62:\n        if ( !endptr || !*endptr )\n          goto LABEL_7;\n      }\n    }\n    else\n    {\n      endptr = v25;\n      v19 = v25;\n    }\n  }\n  v27 = 1000;\nLABEL_38:\n  v28 = *v19;\n  v29 = strchr(\"KMGTPEZY\", v28);\n  if ( v29 )\n  {\n    v30 = (unsigned __int64)(v29 - \"KMGTPEZY\") + 1;\n    goto LABEL_40;\n  }\n  v45 = strchr(\"kmgtpezy\", v28);\n  if ( !v45 )\n    goto LABEL_7;\n  v30 = (unsigned __int64)(v45 - \"kmgtpezy\") + 1;\nLABEL_40:\n  if ( v30 )\n  {\n    if ( is_mul_ok(v27, v48) )\n    {\n      v31 = 0;\n      while ( 1 )\n      {\n        v48 *= v27;\n        if ( v30 - 1 == v31 )\n          break;\n        ++v31;\n        if ( !is_mul_ok(v27, v48) )\n          goto LABEL_77;\n      }\n      v16 = 0;\n    }\n    else\n    {\nLABEL_77:\n      v16 = -34;\n    }\n    if ( v49 )\n    {\n      v32 = v30 - 1;\n      v33 = 0;\n      v34 = 1LL;\n      do\n      {\n        v34 *= v27;\n        if ( v33 == v32 )\n          break;\n        ++v33;\n      }\n      while ( is_mul_ok(v27, v34) );\n      if ( v49 <= 0xA )\n      {\n        v36 = v49;\n        v35 = 10LL;\n      }\n      else\n      {\n        v35 = 10LL;\n        while ( 1 )\n        {\n          v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v49 >> 64) >> 3;\n          if ( v35 > 0x1999999999999999LL )\n            break;\n          v35 *= 10LL;\n          if ( v35 >= v49 )\n          {\n            v36 = v49;\n            break;\n          }\n        }\n      }\n      if ( v21 )\n      {\n        v37 = 0;\n        do\n        {\n          if ( v35 <= 0x1999999999999999LL )\n            v35 *= 10LL;\n          else\n            v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n          ++v37;\n        }\n        while ( v21 != v37 );\n      }\n      v40 = 1LL;\n      do\n      {\n        v41 = 10 * v40;\n        v42 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        v43 = v36 - 10 * v42;\n        v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        if ( v43 )\n        {\n          v44 = v35 / v40 / v43;\n          if ( v44 )\n            v48 += v34 / v44;\n        }\n        v40 = v41;\n      }\n      while ( v42 );\n    }\n    *v8 = v48;\nLABEL_14:\n    if ( (v16 & 0x80000000) != 0 )\n    {\n      v15 = -v16;\nLABEL_8:\n      *v9 = v15;\n    }\n  }\n  else\n  {\n    v16 = 0;\n    *a4 = v48;\n  }\n  return v16;\n}\n\n// write access to const memory has been detected, the output may be wrong!\n__int64 __usercall sub_8D30@<rax>(char *nptr@<rdi>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned __int64 *a4@<rsi>, __int64 a5@<r12>, __int64 a6@<r13>, __int64 a7@<r14>, __int64 a8@<r15>)\n{\n  unsigned __int64 *v8; // rbp\n  int *v9; // rbx\n  unsigned __int8 v10; // r14\n  const unsigned __int16 **v11; // rax\n  const unsigned __int16 **v12; // r13\n  const unsigned __int16 *v13; // rcx\n  char *v14; // rax\n  int v15; // eax\n  unsigned int v16; // ecx\n  unsigned __int64 v18; // rax\n  char *v19; // r14\n  int v20; // ecx\n  int v21; // er15\n  char v22; // al\n  struct lconv *v23; // rax\n  size_t v24; // rax\n  char *v25; // r8\n  __int64 i; // rax\n  signed int v27; // er13\n  int v28; // er14\n  char *v29; // rax\n  int v30; // edi\n  int v31; // ecx\n  int v32; // edi\n  int v33; // er8\n  unsigned __int64 v34; // r10\n  unsigned __int64 v35; // rdi\n  unsigned __int64 v36; // r8\n  int v37; // esi\n  char *v38; // ST08_8\n  unsigned __int64 v39; // rax\n  unsigned __int64 v40; // r9\n  signed __int64 v41; // r11\n  unsigned __int64 v42; // rsi\n  unsigned __int64 v43; // r13\n  unsigned __int64 v44; // r9\n  char *v45; // rax\n  size_t v46; // [rsp+0h] [rbp-70h]\n  char *s1; // [rsp+8h] [rbp-68h]\n  unsigned __int64 v48; // [rsp+10h] [rbp-60h]\n  unsigned __int64 v49; // [rsp+18h] [rbp-58h]\n  char *endptr; // [rsp+28h] [rbp-48h]\n  unsigned __int64 v51; // [rsp+30h] [rbp-40h]\n  __int64 v52; // [rsp+40h] [rbp-30h]\n  __int64 v53; // [rsp+48h] [rbp-28h]\n  __int64 v54; // [rsp+50h] [rbp-20h]\n  __int64 v55; // [rsp+58h] [rbp-18h]\n  __int64 v56; // [rsp+60h] [rbp-10h]\n  __int64 v57; // [rsp+68h] [rbp-8h]\n\n  v57 = a8;\n  v56 = a7;\n  v55 = a6;\n  v54 = a5;\n  v53 = a3;\n  v52 = a2;\n  v8 = a4;\n  *a4 = 0LL;\n  v51 = __readfsqword(0x28u);\n  v9 = __errno_location();\n  if ( !nptr )\n    goto LABEL_7;\n  v10 = *nptr;\n  if ( !*nptr )\n    goto LABEL_7;\n  v11 = __ctype_b_loc();\n  v12 = v11;\n  v13 = *v11;\n  v14 = nptr;\n  while ( v13[v10] & 0x2000 )\n    v10 = *++v14;\n  if ( v10 == 45 )\n    goto LABEL_7;\n  *v9 = 0;\n  endptr = 0LL;\n  v18 = __strtoul_internal(nptr, &endptr, 0, 0);\n  v19 = endptr;\n  v48 = v18;\n  v20 = *v9;\n  if ( endptr == nptr )\n  {\nLABEL_33:\n    if ( !v20 )\n    {\nLABEL_7:\n      v15 = 22;\n      v16 = -22;\n      goto LABEL_8;\n    }\nLABEL_13:\n    v16 = -v20;\n    goto LABEL_14;\n  }\n  if ( v20 && v18 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n    goto LABEL_13;\n  if ( !endptr || !*endptr )\n  {\n    v16 = 0;\n    *a4 = v18;\n    return v16;\n  }\n  v21 = 0;\n  v49 = 0LL;\n  while ( 1 )\n  {\n    v22 = v19[1];\n    if ( v22 == 105 )\n    {\n      if ( (v19[2] & 0xDF) == 66 && !v19[3] )\n      {\nLABEL_37:\n        v27 = 1024;\n        goto LABEL_38;\n      }\n      goto LABEL_23;\n    }\n    if ( (v22 & 0xDF) == 66 && !v19[2] )\n      break;\n    if ( !v22 )\n      goto LABEL_37;\nLABEL_23:\n    v23 = localeconv();\n    if ( !v23 )\n      goto LABEL_7;\n    if ( !v23->decimal_point )\n      goto LABEL_7;\n    s1 = v23->decimal_point;\n    v24 = strlen(v23->decimal_point);\n    if ( v49 )\n      goto LABEL_7;\n    if ( !*v19 )\n      goto LABEL_7;\n    v46 = v24;\n    if ( strncmp(s1, v19, v24) )\n      goto LABEL_7;\n    v25 = &v19[v46];\n    for ( i = v19[v46]; (_BYTE)i == 48; ++v21 )\n      i = *++v25;\n    if ( (*v12)[i] & 0x800 )\n    {\n      *v9 = 0;\n      v38 = v25;\n      endptr = 0LL;\n      v39 = __strtoul_internal(v25, &endptr, 0, 0);\n      v19 = endptr;\n      v49 = v39;\n      v20 = *v9;\n      if ( endptr == v38 )\n        goto LABEL_33;\n      if ( v20 )\n      {\n        if ( v39 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n          goto LABEL_13;\n        goto LABEL_62;\n      }\n      if ( v39 )\n      {\nLABEL_62:\n        if ( !endptr || !*endptr )\n          goto LABEL_7;\n      }\n    }\n    else\n    {\n      endptr = v25;\n      v19 = v25;\n    }\n  }\n  v27 = 1000;\nLABEL_38:\n  v28 = *v19;\n  v29 = strchr(\"KMGTPEZY\", v28);\n  if ( v29 )\n  {\n    v30 = (unsigned __int64)(v29 - \"KMGTPEZY\") + 1;\n    goto LABEL_40;\n  }\n  v45 = strchr(\"kmgtpezy\", v28);\n  if ( !v45 )\n    goto LABEL_7;\n  v30 = (unsigned __int64)(v45 - \"kmgtpezy\") + 1;\nLABEL_40:\n  if ( v30 )\n  {\n    if ( is_mul_ok(v27, v48) )\n    {\n      v31 = 0;\n      while ( 1 )\n      {\n        v48 *= v27;\n        if ( v30 - 1 == v31 )\n          break;\n        ++v31;\n        if ( !is_mul_ok(v27, v48) )\n          goto LABEL_77;\n      }\n      v16 = 0;\n    }\n    else\n    {\nLABEL_77:\n      v16 = -34;\n    }\n    if ( v49 )\n    {\n      v32 = v30 - 1;\n      v33 = 0;\n      v34 = 1LL;\n      do\n      {\n        v34 *= v27;\n        if ( v33 == v32 )\n          break;\n        ++v33;\n      }\n      while ( is_mul_ok(v27, v34) );\n      if ( v49 <= 0xA )\n      {\n        v36 = v49;\n        v35 = 10LL;\n      }\n      else\n      {\n        v35 = 10LL;\n        while ( 1 )\n        {\n          v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v49 >> 64) >> 3;\n          if ( v35 > 0x1999999999999999LL )\n            break;\n          v35 *= 10LL;\n          if ( v35 >= v49 )\n          {\n            v36 = v49;\n            break;\n          }\n        }\n      }\n      if ( v21 )\n      {\n        v37 = 0;\n        do\n        {\n          if ( v35 <= 0x1999999999999999LL )\n            v35 *= 10LL;\n          else\n            v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n          ++v37;\n        }\n        while ( v21 != v37 );\n      }\n      v40 = 1LL;\n      do\n      {\n        v41 = 10 * v40;\n        v42 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        v43 = v36 - 10 * v42;\n        v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        if ( v43 )\n        {\n          v44 = v35 / v40 / v43;\n          if ( v44 )\n            v48 += v34 / v44;\n        }\n        v40 = v41;\n      }\n      while ( v42 );\n    }\n    *v8 = v48;\nLABEL_14:\n    if ( (v16 & 0x80000000) != 0 )\n    {\n      v15 = -v16;\nLABEL_8:\n      *v9 = v15;\n    }\n  }\n  else\n  {\n    v16 = 0;\n    *a4 = v48;\n  }\n  return v16;\n}\n\n// write access to const memory has been detected, the output may be wrong!\n__int64 __usercall sub_8D30@<rax>(char *nptr@<rdi>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned __int64 *a4@<rsi>, __int64 a5@<r12>, __int64 a6@<r13>, __int64 a7@<r14>, __int64 a8@<r15>)\n{\n  unsigned __int64 *v8; // rbp\n  int *v9; // rbx\n  unsigned __int8 v10; // r14\n  const unsigned __int16 **v11; // rax\n  const unsigned __int16 **v12; // r13\n  const unsigned __int16 *v13; // rcx\n  char *v14; // rax\n  int v15; // eax\n  unsigned int v16; // ecx\n  unsigned __int64 v18; // rax\n  char *v19; // r14\n  int v20; // ecx\n  int v21; // er15\n  char v22; // al\n  struct lconv *v23; // rax\n  size_t v24; // rax\n  char *v25; // r8\n  __int64 i; // rax\n  signed int v27; // er13\n  int v28; // er14\n  char *v29; // rax\n  int v30; // edi\n  int v31; // ecx\n  int v32; // edi\n  int v33; // er8\n  unsigned __int64 v34; // r10\n  unsigned __int64 v35; // rdi\n  unsigned __int64 v36; // r8\n  int v37; // esi\n  char *v38; // ST08_8\n  unsigned __int64 v39; // rax\n  unsigned __int64 v40; // r9\n  signed __int64 v41; // r11\n  unsigned __int64 v42; // rsi\n  unsigned __int64 v43; // r13\n  unsigned __int64 v44; // r9\n  char *v45; // rax\n  size_t v46; // [rsp+0h] [rbp-70h]\n  char *s1; // [rsp+8h] [rbp-68h]\n  unsigned __int64 v48; // [rsp+10h] [rbp-60h]\n  unsigned __int64 v49; // [rsp+18h] [rbp-58h]\n  char *endptr; // [rsp+28h] [rbp-48h]\n  unsigned __int64 v51; // [rsp+30h] [rbp-40h]\n  __int64 v52; // [rsp+40h] [rbp-30h]\n  __int64 v53; // [rsp+48h] [rbp-28h]\n  __int64 v54; // [rsp+50h] [rbp-20h]\n  __int64 v55; // [rsp+58h] [rbp-18h]\n  __int64 v56; // [rsp+60h] [rbp-10h]\n  __int64 v57; // [rsp+68h] [rbp-8h]\n\n  v57 = a8;\n  v56 = a7;\n  v55 = a6;\n  v54 = a5;\n  v53 = a3;\n  v52 = a2;\n  v8 = a4;\n  *a4 = 0LL;\n  v51 = __readfsqword(0x28u);\n  v9 = __errno_location();\n  if ( !nptr )\n    goto LABEL_7;\n  v10 = *nptr;\n  if ( !*nptr )\n    goto LABEL_7;\n  v11 = __ctype_b_loc();\n  v12 = v11;\n  v13 = *v11;\n  v14 = nptr;\n  while ( v13[v10] & 0x2000 )\n    v10 = *++v14;\n  if ( v10 == 45 )\n    goto LABEL_7;\n  *v9 = 0;\n  endptr = 0LL;\n  v18 = __strtoul_internal(nptr, &endptr, 0, 0);\n  v19 = endptr;\n  v48 = v18;\n  v20 = *v9;\n  if ( endptr == nptr )\n  {\nLABEL_33:\n    if ( !v20 )\n    {\nLABEL_7:\n      v15 = 22;\n      v16 = -22;\n      goto LABEL_8;\n    }\nLABEL_13:\n    v16 = -v20;\n    goto LABEL_14;\n  }\n  if ( v20 && v18 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n    goto LABEL_13;\n  if ( !endptr || !*endptr )\n  {\n    v16 = 0;\n    *a4 = v18;\n    return v16;\n  }\n  v21 = 0;\n  v49 = 0LL;\n  while ( 1 )\n  {\n    v22 = v19[1];\n    if ( v22 == 105 )\n    {\n      if ( (v19[2] & 0xDF) == 66 && !v19[3] )\n      {\nLABEL_37:\n        v27 = 1024;\n        goto LABEL_38;\n      }\n      goto LABEL_23;\n    }\n    if ( (v22 & 0xDF) == 66 && !v19[2] )\n      break;\n    if ( !v22 )\n      goto LABEL_37;\nLABEL_23:\n    v23 = localeconv();\n    if ( !v23 )\n      goto LABEL_7;\n    if ( !v23->decimal_point )\n      goto LABEL_7;\n    s1 = v23->decimal_point;\n    v24 = strlen(v23->decimal_point);\n    if ( v49 )\n      goto LABEL_7;\n    if ( !*v19 )\n      goto LABEL_7;\n    v46 = v24;\n    if ( strncmp(s1, v19, v24) )\n      goto LABEL_7;\n    v25 = &v19[v46];\n    for ( i = v19[v46]; (_BYTE)i == 48; ++v21 )\n      i = *++v25;\n    if ( (*v12)[i] & 0x800 )\n    {\n      *v9 = 0;\n      v38 = v25;\n      endptr = 0LL;\n      v39 = __strtoul_internal(v25, &endptr, 0, 0);\n      v19 = endptr;\n      v49 = v39;\n      v20 = *v9;\n      if ( endptr == v38 )\n        goto LABEL_33;\n      if ( v20 )\n      {\n        if ( v39 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n          goto LABEL_13;\n        goto LABEL_62;\n      }\n      if ( v39 )\n      {\nLABEL_62:\n        if ( !endptr || !*endptr )\n          goto LABEL_7;\n      }\n    }\n    else\n    {\n      endptr = v25;\n      v19 = v25;\n    }\n  }\n  v27 = 1000;\nLABEL_38:\n  v28 = *v19;\n  v29 = strchr(\"KMGTPEZY\", v28);\n  if ( v29 )\n  {\n    v30 = (unsigned __int64)(v29 - \"KMGTPEZY\") + 1;\n    goto LABEL_40;\n  }\n  v45 = strchr(\"kmgtpezy\", v28);\n  if ( !v45 )\n    goto LABEL_7;\n  v30 = (unsigned __int64)(v45 - \"kmgtpezy\") + 1;\nLABEL_40:\n  if ( v30 )\n  {\n    if ( is_mul_ok(v27, v48) )\n    {\n      v31 = 0;\n      while ( 1 )\n      {\n        v48 *= v27;\n        if ( v30 - 1 == v31 )\n          break;\n        ++v31;\n        if ( !is_mul_ok(v27, v48) )\n          goto LABEL_77;\n      }\n      v16 = 0;\n    }\n    else\n    {\nLABEL_77:\n      v16 = -34;\n    }\n    if ( v49 )\n    {\n      v32 = v30 - 1;\n      v33 = 0;\n      v34 = 1LL;\n      do\n      {\n        v34 *= v27;\n        if ( v33 == v32 )\n          break;\n        ++v33;\n      }\n      while ( is_mul_ok(v27, v34) );\n      if ( v49 <= 0xA )\n      {\n        v36 = v49;\n        v35 = 10LL;\n      }\n      else\n      {\n        v35 = 10LL;\n        while ( 1 )\n        {\n          v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v49 >> 64) >> 3;\n          if ( v35 > 0x1999999999999999LL )\n            break;\n          v35 *= 10LL;\n          if ( v35 >= v49 )\n          {\n            v36 = v49;\n            break;\n          }\n        }\n      }\n      if ( v21 )\n      {\n        v37 = 0;\n        do\n        {\n          if ( v35 <= 0x1999999999999999LL )\n            v35 *= 10LL;\n          else\n            v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n          ++v37;\n        }\n        while ( v21 != v37 );\n      }\n      v40 = 1LL;\n      do\n      {\n        v41 = 10 * v40;\n        v42 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        v43 = v36 - 10 * v42;\n        v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        if ( v43 )\n        {\n          v44 = v35 / v40 / v43;\n          if ( v44 )\n            v48 += v34 / v44;\n        }\n        v40 = v41;\n      }\n      while ( v42 );\n    }\n    *v8 = v48;\nLABEL_14:\n    if ( (v16 & 0x80000000) != 0 )\n    {\n      v15 = -v16;\nLABEL_8:\n      *v9 = v15;\n    }\n  }\n  else\n  {\n    v16 = 0;\n    *a4 = v48;\n  }\n  return v16;\n}\n\n// write access to const memory has been detected, the output may be wrong!\n__int64 __usercall sub_8D30@<rax>(char *nptr@<rdi>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned __int64 *a4@<rsi>, __int64 a5@<r12>, __int64 a6@<r13>, __int64 a7@<r14>, __int64 a8@<r15>)\n{\n  unsigned __int64 *v8; // rbp\n  int *v9; // rbx\n  unsigned __int8 v10; // r14\n  const unsigned __int16 **v11; // rax\n  const unsigned __int16 **v12; // r13\n  const unsigned __int16 *v13; // rcx\n  char *v14; // rax\n  int v15; // eax\n  unsigned int v16; // ecx\n  unsigned __int64 v18; // rax\n  char *v19; // r14\n  int v20; // ecx\n  int v21; // er15\n  char v22; // al\n  struct lconv *v23; // rax\n  size_t v24; // rax\n  char *v25; // r8\n  __int64 i; // rax\n  signed int v27; // er13\n  int v28; // er14\n  char *v29; // rax\n  int v30; // edi\n  int v31; // ecx\n  int v32; // edi\n  int v33; // er8\n  unsigned __int64 v34; // r10\n  unsigned __int64 v35; // rdi\n  unsigned __int64 v36; // r8\n  int v37; // esi\n  char *v38; // ST08_8\n  unsigned __int64 v39; // rax\n  unsigned __int64 v40; // r9\n  signed __int64 v41; // r11\n  unsigned __int64 v42; // rsi\n  unsigned __int64 v43; // r13\n  unsigned __int64 v44; // r9\n  char *v45; // rax\n  size_t v46; // [rsp+0h] [rbp-70h]\n  char *s1; // [rsp+8h] [rbp-68h]\n  unsigned __int64 v48; // [rsp+10h] [rbp-60h]\n  unsigned __int64 v49; // [rsp+18h] [rbp-58h]\n  char *endptr; // [rsp+28h] [rbp-48h]\n  unsigned __int64 v51; // [rsp+30h] [rbp-40h]\n  __int64 v52; // [rsp+40h] [rbp-30h]\n  __int64 v53; // [rsp+48h] [rbp-28h]\n  __int64 v54; // [rsp+50h] [rbp-20h]\n  __int64 v55; // [rsp+58h] [rbp-18h]\n  __int64 v56; // [rsp+60h] [rbp-10h]\n  __int64 v57; // [rsp+68h] [rbp-8h]\n\n  v57 = a8;\n  v56 = a7;\n  v55 = a6;\n  v54 = a5;\n  v53 = a3;\n  v52 = a2;\n  v8 = a4;\n  *a4 = 0LL;\n  v51 = __readfsqword(0x28u);\n  v9 = __errno_location();\n  if ( !nptr )\n    goto LABEL_7;\n  v10 = *nptr;\n  if ( !*nptr )\n    goto LABEL_7;\n  v11 = __ctype_b_loc();\n  v12 = v11;\n  v13 = *v11;\n  v14 = nptr;\n  while ( v13[v10] & 0x2000 )\n    v10 = *++v14;\n  if ( v10 == 45 )\n    goto LABEL_7;\n  *v9 = 0;\n  endptr = 0LL;\n  v18 = __strtoul_internal(nptr, &endptr, 0, 0);\n  v19 = endptr;\n  v48 = v18;\n  v20 = *v9;\n  if ( endptr == nptr )\n  {\nLABEL_33:\n    if ( !v20 )\n    {\nLABEL_7:\n      v15 = 22;\n      v16 = -22;\n      goto LABEL_8;\n    }\nLABEL_13:\n    v16 = -v20;\n    goto LABEL_14;\n  }\n  if ( v20 && v18 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n    goto LABEL_13;\n  if ( !endptr || !*endptr )\n  {\n    v16 = 0;\n    *a4 = v18;\n    return v16;\n  }\n  v21 = 0;\n  v49 = 0LL;\n  while ( 1 )\n  {\n    v22 = v19[1];\n    if ( v22 == 105 )\n    {\n      if ( (v19[2] & 0xDF) == 66 && !v19[3] )\n      {\nLABEL_37:\n        v27 = 1024;\n        goto LABEL_38;\n      }\n      goto LABEL_23;\n    }\n    if ( (v22 & 0xDF) == 66 && !v19[2] )\n      break;\n    if ( !v22 )\n      goto LABEL_37;\nLABEL_23:\n    v23 = localeconv();\n    if ( !v23 )\n      goto LABEL_7;\n    if ( !v23->decimal_point )\n      goto LABEL_7;\n    s1 = v23->decimal_point;\n    v24 = strlen(v23->decimal_point);\n    if ( v49 )\n      goto LABEL_7;\n    if ( !*v19 )\n      goto LABEL_7;\n    v46 = v24;\n    if ( strncmp(s1, v19, v24) )\n      goto LABEL_7;\n    v25 = &v19[v46];\n    for ( i = v19[v46]; (_BYTE)i == 48; ++v21 )\n      i = *++v25;\n    if ( (*v12)[i] & 0x800 )\n    {\n      *v9 = 0;\n      v38 = v25;\n      endptr = 0LL;\n      v39 = __strtoul_internal(v25, &endptr, 0, 0);\n      v19 = endptr;\n      v49 = v39;\n      v20 = *v9;\n      if ( endptr == v38 )\n        goto LABEL_33;\n      if ( v20 )\n      {\n        if ( v39 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n          goto LABEL_13;\n        goto LABEL_62;\n      }\n      if ( v39 )\n      {\nLABEL_62:\n        if ( !endptr || !*endptr )\n          goto LABEL_7;\n      }\n    }\n    else\n    {\n      endptr = v25;\n      v19 = v25;\n    }\n  }\n  v27 = 1000;\nLABEL_38:\n  v28 = *v19;\n  v29 = strchr(\"KMGTPEZY\", v28);\n  if ( v29 )\n  {\n    v30 = (unsigned __int64)(v29 - \"KMGTPEZY\") + 1;\n    goto LABEL_40;\n  }\n  v45 = strchr(\"kmgtpezy\", v28);\n  if ( !v45 )\n    goto LABEL_7;\n  v30 = (unsigned __int64)(v45 - \"kmgtpezy\") + 1;\nLABEL_40:\n  if ( v30 )\n  {\n    if ( is_mul_ok(v27, v48) )\n    {\n      v31 = 0;\n      while ( 1 )\n      {\n        v48 *= v27;\n        if ( v30 - 1 == v31 )\n          break;\n        ++v31;\n        if ( !is_mul_ok(v27, v48) )\n          goto LABEL_77;\n      }\n      v16 = 0;\n    }\n    else\n    {\nLABEL_77:\n      v16 = -34;\n    }\n    if ( v49 )\n    {\n      v32 = v30 - 1;\n      v33 = 0;\n      v34 = 1LL;\n      do\n      {\n        v34 *= v27;\n        if ( v33 == v32 )\n          break;\n        ++v33;\n      }\n      while ( is_mul_ok(v27, v34) );\n      if ( v49 <= 0xA )\n      {\n        v36 = v49;\n        v35 = 10LL;\n      }\n      else\n      {\n        v35 = 10LL;\n        while ( 1 )\n        {\n          v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v49 >> 64) >> 3;\n          if ( v35 > 0x1999999999999999LL )\n            break;\n          v35 *= 10LL;\n          if ( v35 >= v49 )\n          {\n            v36 = v49;\n            break;\n          }\n        }\n      }\n      if ( v21 )\n      {\n        v37 = 0;\n        do\n        {\n          if ( v35 <= 0x1999999999999999LL )\n            v35 *= 10LL;\n          else\n            v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n          ++v37;\n        }\n        while ( v21 != v37 );\n      }\n      v40 = 1LL;\n      do\n      {\n        v41 = 10 * v40;\n        v42 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        v43 = v36 - 10 * v42;\n        v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        if ( v43 )\n        {\n          v44 = v35 / v40 / v43;\n          if ( v44 )\n            v48 += v34 / v44;\n        }\n        v40 = v41;\n      }\n      while ( v42 );\n    }\n    *v8 = v48;\nLABEL_14:\n    if ( (v16 & 0x80000000) != 0 )\n    {\n      v15 = -v16;\nLABEL_8:\n      *v9 = v15;\n    }\n  }\n  else\n  {\n    v16 = 0;\n    *a4 = v48;\n  }\n  return v16;\n}\n\n// write access to const memory has been detected, the output may be wrong!\n__int64 __usercall sub_8D30@<rax>(char *nptr@<rdi>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned __int64 *a4@<rsi>, __int64 a5@<r12>, __int64 a6@<r13>, __int64 a7@<r14>, __int64 a8@<r15>)\n{\n  unsigned __int64 *v8; // rbp\n  int *v9; // rbx\n  unsigned __int8 v10; // r14\n  const unsigned __int16 **v11; // rax\n  const unsigned __int16 **v12; // r13\n  const unsigned __int16 *v13; // rcx\n  char *v14; // rax\n  int v15; // eax\n  unsigned int v16; // ecx\n  unsigned __int64 v18; // rax\n  char *v19; // r14\n  int v20; // ecx\n  int v21; // er15\n  char v22; // al\n  struct lconv *v23; // rax\n  size_t v24; // rax\n  char *v25; // r8\n  __int64 i; // rax\n  signed int v27; // er13\n  int v28; // er14\n  char *v29; // rax\n  int v30; // edi\n  int v31; // ecx\n  int v32; // edi\n  int v33; // er8\n  unsigned __int64 v34; // r10\n  unsigned __int64 v35; // rdi\n  unsigned __int64 v36; // r8\n  int v37; // esi\n  char *v38; // ST08_8\n  unsigned __int64 v39; // rax\n  unsigned __int64 v40; // r9\n  signed __int64 v41; // r11\n  unsigned __int64 v42; // rsi\n  unsigned __int64 v43; // r13\n  unsigned __int64 v44; // r9\n  char *v45; // rax\n  size_t v46; // [rsp+0h] [rbp-70h]\n  char *s1; // [rsp+8h] [rbp-68h]\n  unsigned __int64 v48; // [rsp+10h] [rbp-60h]\n  unsigned __int64 v49; // [rsp+18h] [rbp-58h]\n  char *endptr; // [rsp+28h] [rbp-48h]\n  unsigned __int64 v51; // [rsp+30h] [rbp-40h]\n  __int64 v52; // [rsp+40h] [rbp-30h]\n  __int64 v53; // [rsp+48h] [rbp-28h]\n  __int64 v54; // [rsp+50h] [rbp-20h]\n  __int64 v55; // [rsp+58h] [rbp-18h]\n  __int64 v56; // [rsp+60h] [rbp-10h]\n  __int64 v57; // [rsp+68h] [rbp-8h]\n\n  v57 = a8;\n  v56 = a7;\n  v55 = a6;\n  v54 = a5;\n  v53 = a3;\n  v52 = a2;\n  v8 = a4;\n  *a4 = 0LL;\n  v51 = __readfsqword(0x28u);\n  v9 = __errno_location();\n  if ( !nptr )\n    goto LABEL_7;\n  v10 = *nptr;\n  if ( !*nptr )\n    goto LABEL_7;\n  v11 = __ctype_b_loc();\n  v12 = v11;\n  v13 = *v11;\n  v14 = nptr;\n  while ( v13[v10] & 0x2000 )\n    v10 = *++v14;\n  if ( v10 == 45 )\n    goto LABEL_7;\n  *v9 = 0;\n  endptr = 0LL;\n  v18 = __strtoul_internal(nptr, &endptr, 0, 0);\n  v19 = endptr;\n  v48 = v18;\n  v20 = *v9;\n  if ( endptr == nptr )\n  {\nLABEL_33:\n    if ( !v20 )\n    {\nLABEL_7:\n      v15 = 22;\n      v16 = -22;\n      goto LABEL_8;\n    }\nLABEL_13:\n    v16 = -v20;\n    goto LABEL_14;\n  }\n  if ( v20 && v18 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n    goto LABEL_13;\n  if ( !endptr || !*endptr )\n  {\n    v16 = 0;\n    *a4 = v18;\n    return v16;\n  }\n  v21 = 0;\n  v49 = 0LL;\n  while ( 1 )\n  {\n    v22 = v19[1];\n    if ( v22 == 105 )\n    {\n      if ( (v19[2] & 0xDF) == 66 && !v19[3] )\n      {\nLABEL_37:\n        v27 = 1024;\n        goto LABEL_38;\n      }\n      goto LABEL_23;\n    }\n    if ( (v22 & 0xDF) == 66 && !v19[2] )\n      break;\n    if ( !v22 )\n      goto LABEL_37;\nLABEL_23:\n    v23 = localeconv();\n    if ( !v23 )\n      goto LABEL_7;\n    if ( !v23->decimal_point )\n      goto LABEL_7;\n    s1 = v23->decimal_point;\n    v24 = strlen(v23->decimal_point);\n    if ( v49 )\n      goto LABEL_7;\n    if ( !*v19 )\n      goto LABEL_7;\n    v46 = v24;\n    if ( strncmp(s1, v19, v24) )\n      goto LABEL_7;\n    v25 = &v19[v46];\n    for ( i = v19[v46]; (_BYTE)i == 48; ++v21 )\n      i = *++v25;\n    if ( (*v12)[i] & 0x800 )\n    {\n      *v9 = 0;\n      v38 = v25;\n      endptr = 0LL;\n      v39 = __strtoul_internal(v25, &endptr, 0, 0);\n      v19 = endptr;\n      v49 = v39;\n      v20 = *v9;\n      if ( endptr == v38 )\n        goto LABEL_33;\n      if ( v20 )\n      {\n        if ( v39 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n          goto LABEL_13;\n        goto LABEL_62;\n      }\n      if ( v39 )\n      {\nLABEL_62:\n        if ( !endptr || !*endptr )\n          goto LABEL_7;\n      }\n    }\n    else\n    {\n      endptr = v25;\n      v19 = v25;\n    }\n  }\n  v27 = 1000;\nLABEL_38:\n  v28 = *v19;\n  v29 = strchr(\"KMGTPEZY\", v28);\n  if ( v29 )\n  {\n    v30 = (unsigned __int64)(v29 - \"KMGTPEZY\") + 1;\n    goto LABEL_40;\n  }\n  v45 = strchr(\"kmgtpezy\", v28);\n  if ( !v45 )\n    goto LABEL_7;\n  v30 = (unsigned __int64)(v45 - \"kmgtpezy\") + 1;\nLABEL_40:\n  if ( v30 )\n  {\n    if ( is_mul_ok(v27, v48) )\n    {\n      v31 = 0;\n      while ( 1 )\n      {\n        v48 *= v27;\n        if ( v30 - 1 == v31 )\n          break;\n        ++v31;\n        if ( !is_mul_ok(v27, v48) )\n          goto LABEL_77;\n      }\n      v16 = 0;\n    }\n    else\n    {\nLABEL_77:\n      v16 = -34;\n    }\n    if ( v49 )\n    {\n      v32 = v30 - 1;\n      v33 = 0;\n      v34 = 1LL;\n      do\n      {\n        v34 *= v27;\n        if ( v33 == v32 )\n          break;\n        ++v33;\n      }\n      while ( is_mul_ok(v27, v34) );\n      if ( v49 <= 0xA )\n      {\n        v36 = v49;\n        v35 = 10LL;\n      }\n      else\n      {\n        v35 = 10LL;\n        while ( 1 )\n        {\n          v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v49 >> 64) >> 3;\n          if ( v35 > 0x1999999999999999LL )\n            break;\n          v35 *= 10LL;\n          if ( v35 >= v49 )\n          {\n            v36 = v49;\n            break;\n          }\n        }\n      }\n      if ( v21 )\n      {\n        v37 = 0;\n        do\n        {\n          if ( v35 <= 0x1999999999999999LL )\n            v35 *= 10LL;\n          else\n            v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n          ++v37;\n        }\n        while ( v21 != v37 );\n      }\n      v40 = 1LL;\n      do\n      {\n        v41 = 10 * v40;\n        v42 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        v43 = v36 - 10 * v42;\n        v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        if ( v43 )\n        {\n          v44 = v35 / v40 / v43;\n          if ( v44 )\n            v48 += v34 / v44;\n        }\n        v40 = v41;\n      }\n      while ( v42 );\n    }\n    *v8 = v48;\nLABEL_14:\n    if ( (v16 & 0x80000000) != 0 )\n    {\n      v15 = -v16;\nLABEL_8:\n      *v9 = v15;\n    }\n  }\n  else\n  {\n    v16 = 0;\n    *a4 = v48;\n  }\n  return v16;\n}\n\n// write access to const memory has been detected, the output may be wrong!\n__int64 __usercall sub_8D30@<rax>(char *nptr@<rdi>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned __int64 *a4@<rsi>, __int64 a5@<r12>, __int64 a6@<r13>, __int64 a7@<r14>, __int64 a8@<r15>)\n{\n  unsigned __int64 *v8; // rbp\n  int *v9; // rbx\n  unsigned __int8 v10; // r14\n  const unsigned __int16 **v11; // rax\n  const unsigned __int16 **v12; // r13\n  const unsigned __int16 *v13; // rcx\n  char *v14; // rax\n  int v15; // eax\n  unsigned int v16; // ecx\n  unsigned __int64 v18; // rax\n  char *v19; // r14\n  int v20; // ecx\n  int v21; // er15\n  char v22; // al\n  struct lconv *v23; // rax\n  size_t v24; // rax\n  char *v25; // r8\n  __int64 i; // rax\n  signed int v27; // er13\n  int v28; // er14\n  char *v29; // rax\n  int v30; // edi\n  int v31; // ecx\n  int v32; // edi\n  int v33; // er8\n  unsigned __int64 v34; // r10\n  unsigned __int64 v35; // rdi\n  unsigned __int64 v36; // r8\n  int v37; // esi\n  char *v38; // ST08_8\n  unsigned __int64 v39; // rax\n  unsigned __int64 v40; // r9\n  signed __int64 v41; // r11\n  unsigned __int64 v42; // rsi\n  unsigned __int64 v43; // r13\n  unsigned __int64 v44; // r9\n  char *v45; // rax\n  size_t v46; // [rsp+0h] [rbp-70h]\n  char *s1; // [rsp+8h] [rbp-68h]\n  unsigned __int64 v48; // [rsp+10h] [rbp-60h]\n  unsigned __int64 v49; // [rsp+18h] [rbp-58h]\n  char *endptr; // [rsp+28h] [rbp-48h]\n  unsigned __int64 v51; // [rsp+30h] [rbp-40h]\n  __int64 v52; // [rsp+40h] [rbp-30h]\n  __int64 v53; // [rsp+48h] [rbp-28h]\n  __int64 v54; // [rsp+50h] [rbp-20h]\n  __int64 v55; // [rsp+58h] [rbp-18h]\n  __int64 v56; // [rsp+60h] [rbp-10h]\n  __int64 v57; // [rsp+68h] [rbp-8h]\n\n  v57 = a8;\n  v56 = a7;\n  v55 = a6;\n  v54 = a5;\n  v53 = a3;\n  v52 = a2;\n  v8 = a4;\n  *a4 = 0LL;\n  v51 = __readfsqword(0x28u);\n  v9 = __errno_location();\n  if ( !nptr )\n    goto LABEL_7;\n  v10 = *nptr;\n  if ( !*nptr )\n    goto LABEL_7;\n  v11 = __ctype_b_loc();\n  v12 = v11;\n  v13 = *v11;\n  v14 = nptr;\n  while ( v13[v10] & 0x2000 )\n    v10 = *++v14;\n  if ( v10 == 45 )\n    goto LABEL_7;\n  *v9 = 0;\n  endptr = 0LL;\n  v18 = __strtoul_internal(nptr, &endptr, 0, 0);\n  v19 = endptr;\n  v48 = v18;\n  v20 = *v9;\n  if ( endptr == nptr )\n  {\nLABEL_33:\n    if ( !v20 )\n    {\nLABEL_7:\n      v15 = 22;\n      v16 = -22;\n      goto LABEL_8;\n    }\nLABEL_13:\n    v16 = -v20;\n    goto LABEL_14;\n  }\n  if ( v20 && v18 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n    goto LABEL_13;\n  if ( !endptr || !*endptr )\n  {\n    v16 = 0;\n    *a4 = v18;\n    return v16;\n  }\n  v21 = 0;\n  v49 = 0LL;\n  while ( 1 )\n  {\n    v22 = v19[1];\n    if ( v22 == 105 )\n    {\n      if ( (v19[2] & 0xDF) == 66 && !v19[3] )\n      {\nLABEL_37:\n        v27 = 1024;\n        goto LABEL_38;\n      }\n      goto LABEL_23;\n    }\n    if ( (v22 & 0xDF) == 66 && !v19[2] )\n      break;\n    if ( !v22 )\n      goto LABEL_37;\nLABEL_23:\n    v23 = localeconv();\n    if ( !v23 )\n      goto LABEL_7;\n    if ( !v23->decimal_point )\n      goto LABEL_7;\n    s1 = v23->decimal_point;\n    v24 = strlen(v23->decimal_point);\n    if ( v49 )\n      goto LABEL_7;\n    if ( !*v19 )\n      goto LABEL_7;\n    v46 = v24;\n    if ( strncmp(s1, v19, v24) )\n      goto LABEL_7;\n    v25 = &v19[v46];\n    for ( i = v19[v46]; (_BYTE)i == 48; ++v21 )\n      i = *++v25;\n    if ( (*v12)[i] & 0x800 )\n    {\n      *v9 = 0;\n      v38 = v25;\n      endptr = 0LL;\n      v39 = __strtoul_internal(v25, &endptr, 0, 0);\n      v19 = endptr;\n      v49 = v39;\n      v20 = *v9;\n      if ( endptr == v38 )\n        goto LABEL_33;\n      if ( v20 )\n      {\n        if ( v39 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n          goto LABEL_13;\n        goto LABEL_62;\n      }\n      if ( v39 )\n      {\nLABEL_62:\n        if ( !endptr || !*endptr )\n          goto LABEL_7;\n      }\n    }\n    else\n    {\n      endptr = v25;\n      v19 = v25;\n    }\n  }\n  v27 = 1000;\nLABEL_38:\n  v28 = *v19;\n  v29 = strchr(\"KMGTPEZY\", v28);\n  if ( v29 )\n  {\n    v30 = (unsigned __int64)(v29 - \"KMGTPEZY\") + 1;\n    goto LABEL_40;\n  }\n  v45 = strchr(\"kmgtpezy\", v28);\n  if ( !v45 )\n    goto LABEL_7;\n  v30 = (unsigned __int64)(v45 - \"kmgtpezy\") + 1;\nLABEL_40:\n  if ( v30 )\n  {\n    if ( is_mul_ok(v27, v48) )\n    {\n      v31 = 0;\n      while ( 1 )\n      {\n        v48 *= v27;\n        if ( v30 - 1 == v31 )\n          break;\n        ++v31;\n        if ( !is_mul_ok(v27, v48) )\n          goto LABEL_77;\n      }\n      v16 = 0;\n    }\n    else\n    {\nLABEL_77:\n      v16 = -34;\n    }\n    if ( v49 )\n    {\n      v32 = v30 - 1;\n      v33 = 0;\n      v34 = 1LL;\n      do\n      {\n        v34 *= v27;\n        if ( v33 == v32 )\n          break;\n        ++v33;\n      }\n      while ( is_mul_ok(v27, v34) );\n      if ( v49 <= 0xA )\n      {\n        v36 = v49;\n        v35 = 10LL;\n      }\n      else\n      {\n        v35 = 10LL;\n        while ( 1 )\n        {\n          v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v49 >> 64) >> 3;\n          if ( v35 > 0x1999999999999999LL )\n            break;\n          v35 *= 10LL;\n          if ( v35 >= v49 )\n          {\n            v36 = v49;\n            break;\n          }\n        }\n      }\n      if ( v21 )\n      {\n        v37 = 0;\n        do\n        {\n          if ( v35 <= 0x1999999999999999LL )\n            v35 *= 10LL;\n          else\n            v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n          ++v37;\n        }\n        while ( v21 != v37 );\n      }\n      v40 = 1LL;\n      do\n      {\n        v41 = 10 * v40;\n        v42 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        v43 = v36 - 10 * v42;\n        v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        if ( v43 )\n        {\n          v44 = v35 / v40 / v43;\n          if ( v44 )\n            v48 += v34 / v44;\n        }\n        v40 = v41;\n      }\n      while ( v42 );\n    }\n    *v8 = v48;\nLABEL_14:\n    if ( (v16 & 0x80000000) != 0 )\n    {\n      v15 = -v16;\nLABEL_8:\n      *v9 = v15;\n    }\n  }\n  else\n  {\n    v16 = 0;\n    *a4 = v48;\n  }\n  return v16;\n}\n\n// write access to const memory has been detected, the output may be wrong!\n__int64 __usercall sub_8D30@<rax>(char *nptr@<rdi>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned __int64 *a4@<rsi>, __int64 a5@<r12>, __int64 a6@<r13>, __int64 a7@<r14>, __int64 a8@<r15>)\n{\n  unsigned __int64 *v8; // rbp\n  int *v9; // rbx\n  unsigned __int8 v10; // r14\n  const unsigned __int16 **v11; // rax\n  const unsigned __int16 **v12; // r13\n  const unsigned __int16 *v13; // rcx\n  char *v14; // rax\n  int v15; // eax\n  unsigned int v16; // ecx\n  unsigned __int64 v18; // rax\n  char *v19; // r14\n  int v20; // ecx\n  int v21; // er15\n  char v22; // al\n  struct lconv *v23; // rax\n  size_t v24; // rax\n  char *v25; // r8\n  __int64 i; // rax\n  signed int v27; // er13\n  int v28; // er14\n  char *v29; // rax\n  int v30; // edi\n  int v31; // ecx\n  int v32; // edi\n  int v33; // er8\n  unsigned __int64 v34; // r10\n  unsigned __int64 v35; // rdi\n  unsigned __int64 v36; // r8\n  int v37; // esi\n  char *v38; // ST08_8\n  unsigned __int64 v39; // rax\n  unsigned __int64 v40; // r9\n  signed __int64 v41; // r11\n  unsigned __int64 v42; // rsi\n  unsigned __int64 v43; // r13\n  unsigned __int64 v44; // r9\n  char *v45; // rax\n  size_t v46; // [rsp+0h] [rbp-70h]\n  char *s1; // [rsp+8h] [rbp-68h]\n  unsigned __int64 v48; // [rsp+10h] [rbp-60h]\n  unsigned __int64 v49; // [rsp+18h] [rbp-58h]\n  char *endptr; // [rsp+28h] [rbp-48h]\n  unsigned __int64 v51; // [rsp+30h] [rbp-40h]\n  __int64 v52; // [rsp+40h] [rbp-30h]\n  __int64 v53; // [rsp+48h] [rbp-28h]\n  __int64 v54; // [rsp+50h] [rbp-20h]\n  __int64 v55; // [rsp+58h] [rbp-18h]\n  __int64 v56; // [rsp+60h] [rbp-10h]\n  __int64 v57; // [rsp+68h] [rbp-8h]\n\n  v57 = a8;\n  v56 = a7;\n  v55 = a6;\n  v54 = a5;\n  v53 = a3;\n  v52 = a2;\n  v8 = a4;\n  *a4 = 0LL;\n  v51 = __readfsqword(0x28u);\n  v9 = __errno_location();\n  if ( !nptr )\n    goto LABEL_7;\n  v10 = *nptr;\n  if ( !*nptr )\n    goto LABEL_7;\n  v11 = __ctype_b_loc();\n  v12 = v11;\n  v13 = *v11;\n  v14 = nptr;\n  while ( v13[v10] & 0x2000 )\n    v10 = *++v14;\n  if ( v10 == 45 )\n    goto LABEL_7;\n  *v9 = 0;\n  endptr = 0LL;\n  v18 = __strtoul_internal(nptr, &endptr, 0, 0);\n  v19 = endptr;\n  v48 = v18;\n  v20 = *v9;\n  if ( endptr == nptr )\n  {\nLABEL_33:\n    if ( !v20 )\n    {\nLABEL_7:\n      v15 = 22;\n      v16 = -22;\n      goto LABEL_8;\n    }\nLABEL_13:\n    v16 = -v20;\n    goto LABEL_14;\n  }\n  if ( v20 && v18 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n    goto LABEL_13;\n  if ( !endptr || !*endptr )\n  {\n    v16 = 0;\n    *a4 = v18;\n    return v16;\n  }\n  v21 = 0;\n  v49 = 0LL;\n  while ( 1 )\n  {\n    v22 = v19[1];\n    if ( v22 == 105 )\n    {\n      if ( (v19[2] & 0xDF) == 66 && !v19[3] )\n      {\nLABEL_37:\n        v27 = 1024;\n        goto LABEL_38;\n      }\n      goto LABEL_23;\n    }\n    if ( (v22 & 0xDF) == 66 && !v19[2] )\n      break;\n    if ( !v22 )\n      goto LABEL_37;\nLABEL_23:\n    v23 = localeconv();\n    if ( !v23 )\n      goto LABEL_7;\n    if ( !v23->decimal_point )\n      goto LABEL_7;\n    s1 = v23->decimal_point;\n    v24 = strlen(v23->decimal_point);\n    if ( v49 )\n      goto LABEL_7;\n    if ( !*v19 )\n      goto LABEL_7;\n    v46 = v24;\n    if ( strncmp(s1, v19, v24) )\n      goto LABEL_7;\n    v25 = &v19[v46];\n    for ( i = v19[v46]; (_BYTE)i == 48; ++v21 )\n      i = *++v25;\n    if ( (*v12)[i] & 0x800 )\n    {\n      *v9 = 0;\n      v38 = v25;\n      endptr = 0LL;\n      v39 = __strtoul_internal(v25, &endptr, 0, 0);\n      v19 = endptr;\n      v49 = v39;\n      v20 = *v9;\n      if ( endptr == v38 )\n        goto LABEL_33;\n      if ( v20 )\n      {\n        if ( v39 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n          goto LABEL_13;\n        goto LABEL_62;\n      }\n      if ( v39 )\n      {\nLABEL_62:\n        if ( !endptr || !*endptr )\n          goto LABEL_7;\n      }\n    }\n    else\n    {\n      endptr = v25;\n      v19 = v25;\n    }\n  }\n  v27 = 1000;\nLABEL_38:\n  v28 = *v19;\n  v29 = strchr(\"KMGTPEZY\", v28);\n  if ( v29 )\n  {\n    v30 = (unsigned __int64)(v29 - \"KMGTPEZY\") + 1;\n    goto LABEL_40;\n  }\n  v45 = strchr(\"kmgtpezy\", v28);\n  if ( !v45 )\n    goto LABEL_7;\n  v30 = (unsigned __int64)(v45 - \"kmgtpezy\") + 1;\nLABEL_40:\n  if ( v30 )\n  {\n    if ( is_mul_ok(v27, v48) )\n    {\n      v31 = 0;\n      while ( 1 )\n      {\n        v48 *= v27;\n        if ( v30 - 1 == v31 )\n          break;\n        ++v31;\n        if ( !is_mul_ok(v27, v48) )\n          goto LABEL_77;\n      }\n      v16 = 0;\n    }\n    else\n    {\nLABEL_77:\n      v16 = -34;\n    }\n    if ( v49 )\n    {\n      v32 = v30 - 1;\n      v33 = 0;\n      v34 = 1LL;\n      do\n      {\n        v34 *= v27;\n        if ( v33 == v32 )\n          break;\n        ++v33;\n      }\n      while ( is_mul_ok(v27, v34) );\n      if ( v49 <= 0xA )\n      {\n        v36 = v49;\n        v35 = 10LL;\n      }\n      else\n      {\n        v35 = 10LL;\n        while ( 1 )\n        {\n          v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v49 >> 64) >> 3;\n          if ( v35 > 0x1999999999999999LL )\n            break;\n          v35 *= 10LL;\n          if ( v35 >= v49 )\n          {\n            v36 = v49;\n            break;\n          }\n        }\n      }\n      if ( v21 )\n      {\n        v37 = 0;\n        do\n        {\n          if ( v35 <= 0x1999999999999999LL )\n            v35 *= 10LL;\n          else\n            v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n          ++v37;\n        }\n        while ( v21 != v37 );\n      }\n      v40 = 1LL;\n      do\n      {\n        v41 = 10 * v40;\n        v42 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        v43 = v36 - 10 * v42;\n        v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        if ( v43 )\n        {\n          v44 = v35 / v40 / v43;\n          if ( v44 )\n            v48 += v34 / v44;\n        }\n        v40 = v41;\n      }\n      while ( v42 );\n    }\n    *v8 = v48;\nLABEL_14:\n    if ( (v16 & 0x80000000) != 0 )\n    {\n      v15 = -v16;\nLABEL_8:\n      *v9 = v15;\n    }\n  }\n  else\n  {\n    v16 = 0;\n    *a4 = v48;\n  }\n  return v16;\n}\n\n// write access to const memory has been detected, the output may be wrong!\n__int64 __usercall sub_8D30@<rax>(char *nptr@<rdi>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned __int64 *a4@<rsi>, __int64 a5@<r12>, __int64 a6@<r13>, __int64 a7@<r14>, __int64 a8@<r15>)\n{\n  unsigned __int64 *v8; // rbp\n  int *v9; // rbx\n  unsigned __int8 v10; // r14\n  const unsigned __int16 **v11; // rax\n  const unsigned __int16 **v12; // r13\n  const unsigned __int16 *v13; // rcx\n  char *v14; // rax\n  int v15; // eax\n  unsigned int v16; // ecx\n  unsigned __int64 v18; // rax\n  char *v19; // r14\n  int v20; // ecx\n  int v21; // er15\n  char v22; // al\n  struct lconv *v23; // rax\n  size_t v24; // rax\n  char *v25; // r8\n  __int64 i; // rax\n  signed int v27; // er13\n  int v28; // er14\n  char *v29; // rax\n  int v30; // edi\n  int v31; // ecx\n  int v32; // edi\n  int v33; // er8\n  unsigned __int64 v34; // r10\n  unsigned __int64 v35; // rdi\n  unsigned __int64 v36; // r8\n  int v37; // esi\n  char *v38; // ST08_8\n  unsigned __int64 v39; // rax\n  unsigned __int64 v40; // r9\n  signed __int64 v41; // r11\n  unsigned __int64 v42; // rsi\n  unsigned __int64 v43; // r13\n  unsigned __int64 v44; // r9\n  char *v45; // rax\n  size_t v46; // [rsp+0h] [rbp-70h]\n  char *s1; // [rsp+8h] [rbp-68h]\n  unsigned __int64 v48; // [rsp+10h] [rbp-60h]\n  unsigned __int64 v49; // [rsp+18h] [rbp-58h]\n  char *endptr; // [rsp+28h] [rbp-48h]\n  unsigned __int64 v51; // [rsp+30h] [rbp-40h]\n  __int64 v52; // [rsp+40h] [rbp-30h]\n  __int64 v53; // [rsp+48h] [rbp-28h]\n  __int64 v54; // [rsp+50h] [rbp-20h]\n  __int64 v55; // [rsp+58h] [rbp-18h]\n  __int64 v56; // [rsp+60h] [rbp-10h]\n  __int64 v57; // [rsp+68h] [rbp-8h]\n\n  v57 = a8;\n  v56 = a7;\n  v55 = a6;\n  v54 = a5;\n  v53 = a3;\n  v52 = a2;\n  v8 = a4;\n  *a4 = 0LL;\n  v51 = __readfsqword(0x28u);\n  v9 = __errno_location();\n  if ( !nptr )\n    goto LABEL_7;\n  v10 = *nptr;\n  if ( !*nptr )\n    goto LABEL_7;\n  v11 = __ctype_b_loc();\n  v12 = v11;\n  v13 = *v11;\n  v14 = nptr;\n  while ( v13[v10] & 0x2000 )\n    v10 = *++v14;\n  if ( v10 == 45 )\n    goto LABEL_7;\n  *v9 = 0;\n  endptr = 0LL;\n  v18 = __strtoul_internal(nptr, &endptr, 0, 0);\n  v19 = endptr;\n  v48 = v18;\n  v20 = *v9;\n  if ( endptr == nptr )\n  {\nLABEL_33:\n    if ( !v20 )\n    {\nLABEL_7:\n      v15 = 22;\n      v16 = -22;\n      goto LABEL_8;\n    }\nLABEL_13:\n    v16 = -v20;\n    goto LABEL_14;\n  }\n  if ( v20 && v18 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n    goto LABEL_13;\n  if ( !endptr || !*endptr )\n  {\n    v16 = 0;\n    *a4 = v18;\n    return v16;\n  }\n  v21 = 0;\n  v49 = 0LL;\n  while ( 1 )\n  {\n    v22 = v19[1];\n    if ( v22 == 105 )\n    {\n      if ( (v19[2] & 0xDF) == 66 && !v19[3] )\n      {\nLABEL_37:\n        v27 = 1024;\n        goto LABEL_38;\n      }\n      goto LABEL_23;\n    }\n    if ( (v22 & 0xDF) == 66 && !v19[2] )\n      break;\n    if ( !v22 )\n      goto LABEL_37;\nLABEL_23:\n    v23 = localeconv();\n    if ( !v23 )\n      goto LABEL_7;\n    if ( !v23->decimal_point )\n      goto LABEL_7;\n    s1 = v23->decimal_point;\n    v24 = strlen(v23->decimal_point);\n    if ( v49 )\n      goto LABEL_7;\n    if ( !*v19 )\n      goto LABEL_7;\n    v46 = v24;\n    if ( strncmp(s1, v19, v24) )\n      goto LABEL_7;\n    v25 = &v19[v46];\n    for ( i = v19[v46]; (_BYTE)i == 48; ++v21 )\n      i = *++v25;\n    if ( (*v12)[i] & 0x800 )\n    {\n      *v9 = 0;\n      v38 = v25;\n      endptr = 0LL;\n      v39 = __strtoul_internal(v25, &endptr, 0, 0);\n      v19 = endptr;\n      v49 = v39;\n      v20 = *v9;\n      if ( endptr == v38 )\n        goto LABEL_33;\n      if ( v20 )\n      {\n        if ( v39 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n          goto LABEL_13;\n        goto LABEL_62;\n      }\n      if ( v39 )\n      {\nLABEL_62:\n        if ( !endptr || !*endptr )\n          goto LABEL_7;\n      }\n    }\n    else\n    {\n      endptr = v25;\n      v19 = v25;\n    }\n  }\n  v27 = 1000;\nLABEL_38:\n  v28 = *v19;\n  v29 = strchr(\"KMGTPEZY\", v28);\n  if ( v29 )\n  {\n    v30 = (unsigned __int64)(v29 - \"KMGTPEZY\") + 1;\n    goto LABEL_40;\n  }\n  v45 = strchr(\"kmgtpezy\", v28);\n  if ( !v45 )\n    goto LABEL_7;\n  v30 = (unsigned __int64)(v45 - \"kmgtpezy\") + 1;\nLABEL_40:\n  if ( v30 )\n  {\n    if ( is_mul_ok(v27, v48) )\n    {\n      v31 = 0;\n      while ( 1 )\n      {\n        v48 *= v27;\n        if ( v30 - 1 == v31 )\n          break;\n        ++v31;\n        if ( !is_mul_ok(v27, v48) )\n          goto LABEL_77;\n      }\n      v16 = 0;\n    }\n    else\n    {\nLABEL_77:\n      v16 = -34;\n    }\n    if ( v49 )\n    {\n      v32 = v30 - 1;\n      v33 = 0;\n      v34 = 1LL;\n      do\n      {\n        v34 *= v27;\n        if ( v33 == v32 )\n          break;\n        ++v33;\n      }\n      while ( is_mul_ok(v27, v34) );\n      if ( v49 <= 0xA )\n      {\n        v36 = v49;\n        v35 = 10LL;\n      }\n      else\n      {\n        v35 = 10LL;\n        while ( 1 )\n        {\n          v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v49 >> 64) >> 3;\n          if ( v35 > 0x1999999999999999LL )\n            break;\n          v35 *= 10LL;\n          if ( v35 >= v49 )\n          {\n            v36 = v49;\n            break;\n          }\n        }\n      }\n      if ( v21 )\n      {\n        v37 = 0;\n        do\n        {\n          if ( v35 <= 0x1999999999999999LL )\n            v35 *= 10LL;\n          else\n            v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n          ++v37;\n        }\n        while ( v21 != v37 );\n      }\n      v40 = 1LL;\n      do\n      {\n        v41 = 10 * v40;\n        v42 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        v43 = v36 - 10 * v42;\n        v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        if ( v43 )\n        {\n          v44 = v35 / v40 / v43;\n          if ( v44 )\n            v48 += v34 / v44;\n        }\n        v40 = v41;\n      }\n      while ( v42 );\n    }\n    *v8 = v48;\nLABEL_14:\n    if ( (v16 & 0x80000000) != 0 )\n    {\n      v15 = -v16;\nLABEL_8:\n      *v9 = v15;\n    }\n  }\n  else\n  {\n    v16 = 0;\n    *a4 = v48;\n  }\n  return v16;\n}\n\n// write access to const memory has been detected, the output may be wrong!\n__int64 __usercall sub_8D30@<rax>(char *nptr@<rdi>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned __int64 *a4@<rsi>, __int64 a5@<r12>, __int64 a6@<r13>, __int64 a7@<r14>, __int64 a8@<r15>)\n{\n  unsigned __int64 *v8; // rbp\n  int *v9; // rbx\n  unsigned __int8 v10; // r14\n  const unsigned __int16 **v11; // rax\n  const unsigned __int16 **v12; // r13\n  const unsigned __int16 *v13; // rcx\n  char *v14; // rax\n  int v15; // eax\n  unsigned int v16; // ecx\n  unsigned __int64 v18; // rax\n  char *v19; // r14\n  int v20; // ecx\n  int v21; // er15\n  char v22; // al\n  struct lconv *v23; // rax\n  size_t v24; // rax\n  char *v25; // r8\n  __int64 i; // rax\n  signed int v27; // er13\n  int v28; // er14\n  char *v29; // rax\n  int v30; // edi\n  int v31; // ecx\n  int v32; // edi\n  int v33; // er8\n  unsigned __int64 v34; // r10\n  unsigned __int64 v35; // rdi\n  unsigned __int64 v36; // r8\n  int v37; // esi\n  char *v38; // ST08_8\n  unsigned __int64 v39; // rax\n  unsigned __int64 v40; // r9\n  signed __int64 v41; // r11\n  unsigned __int64 v42; // rsi\n  unsigned __int64 v43; // r13\n  unsigned __int64 v44; // r9\n  char *v45; // rax\n  size_t v46; // [rsp+0h] [rbp-70h]\n  char *s1; // [rsp+8h] [rbp-68h]\n  unsigned __int64 v48; // [rsp+10h] [rbp-60h]\n  unsigned __int64 v49; // [rsp+18h] [rbp-58h]\n  char *endptr; // [rsp+28h] [rbp-48h]\n  unsigned __int64 v51; // [rsp+30h] [rbp-40h]\n  __int64 v52; // [rsp+40h] [rbp-30h]\n  __int64 v53; // [rsp+48h] [rbp-28h]\n  __int64 v54; // [rsp+50h] [rbp-20h]\n  __int64 v55; // [rsp+58h] [rbp-18h]\n  __int64 v56; // [rsp+60h] [rbp-10h]\n  __int64 v57; // [rsp+68h] [rbp-8h]\n\n  v57 = a8;\n  v56 = a7;\n  v55 = a6;\n  v54 = a5;\n  v53 = a3;\n  v52 = a2;\n  v8 = a4;\n  *a4 = 0LL;\n  v51 = __readfsqword(0x28u);\n  v9 = __errno_location();\n  if ( !nptr )\n    goto LABEL_7;\n  v10 = *nptr;\n  if ( !*nptr )\n    goto LABEL_7;\n  v11 = __ctype_b_loc();\n  v12 = v11;\n  v13 = *v11;\n  v14 = nptr;\n  while ( v13[v10] & 0x2000 )\n    v10 = *++v14;\n  if ( v10 == 45 )\n    goto LABEL_7;\n  *v9 = 0;\n  endptr = 0LL;\n  v18 = __strtoul_internal(nptr, &endptr, 0, 0);\n  v19 = endptr;\n  v48 = v18;\n  v20 = *v9;\n  if ( endptr == nptr )\n  {\nLABEL_33:\n    if ( !v20 )\n    {\nLABEL_7:\n      v15 = 22;\n      v16 = -22;\n      goto LABEL_8;\n    }\nLABEL_13:\n    v16 = -v20;\n    goto LABEL_14;\n  }\n  if ( v20 && v18 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n    goto LABEL_13;\n  if ( !endptr || !*endptr )\n  {\n    v16 = 0;\n    *a4 = v18;\n    return v16;\n  }\n  v21 = 0;\n  v49 = 0LL;\n  while ( 1 )\n  {\n    v22 = v19[1];\n    if ( v22 == 105 )\n    {\n      if ( (v19[2] & 0xDF) == 66 && !v19[3] )\n      {\nLABEL_37:\n        v27 = 1024;\n        goto LABEL_38;\n      }\n      goto LABEL_23;\n    }\n    if ( (v22 & 0xDF) == 66 && !v19[2] )\n      break;\n    if ( !v22 )\n      goto LABEL_37;\nLABEL_23:\n    v23 = localeconv();\n    if ( !v23 )\n      goto LABEL_7;\n    if ( !v23->decimal_point )\n      goto LABEL_7;\n    s1 = v23->decimal_point;\n    v24 = strlen(v23->decimal_point);\n    if ( v49 )\n      goto LABEL_7;\n    if ( !*v19 )\n      goto LABEL_7;\n    v46 = v24;\n    if ( strncmp(s1, v19, v24) )\n      goto LABEL_7;\n    v25 = &v19[v46];\n    for ( i = v19[v46]; (_BYTE)i == 48; ++v21 )\n      i = *++v25;\n    if ( (*v12)[i] & 0x800 )\n    {\n      *v9 = 0;\n      v38 = v25;\n      endptr = 0LL;\n      v39 = __strtoul_internal(v25, &endptr, 0, 0);\n      v19 = endptr;\n      v49 = v39;\n      v20 = *v9;\n      if ( endptr == v38 )\n        goto LABEL_33;\n      if ( v20 )\n      {\n        if ( v39 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n          goto LABEL_13;\n        goto LABEL_62;\n      }\n      if ( v39 )\n      {\nLABEL_62:\n        if ( !endptr || !*endptr )\n          goto LABEL_7;\n      }\n    }\n    else\n    {\n      endptr = v25;\n      v19 = v25;\n    }\n  }\n  v27 = 1000;\nLABEL_38:\n  v28 = *v19;\n  v29 = strchr(\"KMGTPEZY\", v28);\n  if ( v29 )\n  {\n    v30 = (unsigned __int64)(v29 - \"KMGTPEZY\") + 1;\n    goto LABEL_40;\n  }\n  v45 = strchr(\"kmgtpezy\", v28);\n  if ( !v45 )\n    goto LABEL_7;\n  v30 = (unsigned __int64)(v45 - \"kmgtpezy\") + 1;\nLABEL_40:\n  if ( v30 )\n  {\n    if ( is_mul_ok(v27, v48) )\n    {\n      v31 = 0;\n      while ( 1 )\n      {\n        v48 *= v27;\n        if ( v30 - 1 == v31 )\n          break;\n        ++v31;\n        if ( !is_mul_ok(v27, v48) )\n          goto LABEL_77;\n      }\n      v16 = 0;\n    }\n    else\n    {\nLABEL_77:\n      v16 = -34;\n    }\n    if ( v49 )\n    {\n      v32 = v30 - 1;\n      v33 = 0;\n      v34 = 1LL;\n      do\n      {\n        v34 *= v27;\n        if ( v33 == v32 )\n          break;\n        ++v33;\n      }\n      while ( is_mul_ok(v27, v34) );\n      if ( v49 <= 0xA )\n      {\n        v36 = v49;\n        v35 = 10LL;\n      }\n      else\n      {\n        v35 = 10LL;\n        while ( 1 )\n        {\n          v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v49 >> 64) >> 3;\n          if ( v35 > 0x1999999999999999LL )\n            break;\n          v35 *= 10LL;\n          if ( v35 >= v49 )\n          {\n            v36 = v49;\n            break;\n          }\n        }\n      }\n      if ( v21 )\n      {\n        v37 = 0;\n        do\n        {\n          if ( v35 <= 0x1999999999999999LL )\n            v35 *= 10LL;\n          else\n            v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n          ++v37;\n        }\n        while ( v21 != v37 );\n      }\n      v40 = 1LL;\n      do\n      {\n        v41 = 10 * v40;\n        v42 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        v43 = v36 - 10 * v42;\n        v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        if ( v43 )\n        {\n          v44 = v35 / v40 / v43;\n          if ( v44 )\n            v48 += v34 / v44;\n        }\n        v40 = v41;\n      }\n      while ( v42 );\n    }\n    *v8 = v48;\nLABEL_14:\n    if ( (v16 & 0x80000000) != 0 )\n    {\n      v15 = -v16;\nLABEL_8:\n      *v9 = v15;\n    }\n  }\n  else\n  {\n    v16 = 0;\n    *a4 = v48;\n  }\n  return v16;\n}\n", 
            "funcStartAddr": "0x8c38L", 
            "funcEndAddr": "0x8d29L", 
            "funcName": "sub_8D30"
        }, 
        {
            "decompiledFuncCode": "// write access to const memory has been detected, the output may be wrong!\n__int64 __usercall sub_8D30@<rax>(char *nptr@<rdi>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned __int64 *a4@<rsi>, __int64 a5@<r12>, __int64 a6@<r13>, __int64 a7@<r14>, __int64 a8@<r15>)\n{\n  unsigned __int64 *v8; // rbp\n  int *v9; // rbx\n  unsigned __int8 v10; // r14\n  const unsigned __int16 **v11; // rax\n  const unsigned __int16 **v12; // r13\n  const unsigned __int16 *v13; // rcx\n  char *v14; // rax\n  int v15; // eax\n  unsigned int v16; // ecx\n  unsigned __int64 v18; // rax\n  char *v19; // r14\n  int v20; // ecx\n  int v21; // er15\n  char v22; // al\n  struct lconv *v23; // rax\n  size_t v24; // rax\n  char *v25; // r8\n  __int64 i; // rax\n  signed int v27; // er13\n  int v28; // er14\n  char *v29; // rax\n  int v30; // edi\n  int v31; // ecx\n  int v32; // edi\n  int v33; // er8\n  unsigned __int64 v34; // r10\n  unsigned __int64 v35; // rdi\n  unsigned __int64 v36; // r8\n  int v37; // esi\n  char *v38; // ST08_8\n  unsigned __int64 v39; // rax\n  unsigned __int64 v40; // r9\n  signed __int64 v41; // r11\n  unsigned __int64 v42; // rsi\n  unsigned __int64 v43; // r13\n  unsigned __int64 v44; // r9\n  char *v45; // rax\n  size_t v46; // [rsp+0h] [rbp-70h]\n  char *s1; // [rsp+8h] [rbp-68h]\n  unsigned __int64 v48; // [rsp+10h] [rbp-60h]\n  unsigned __int64 v49; // [rsp+18h] [rbp-58h]\n  char *endptr; // [rsp+28h] [rbp-48h]\n  unsigned __int64 v51; // [rsp+30h] [rbp-40h]\n  __int64 v52; // [rsp+40h] [rbp-30h]\n  __int64 v53; // [rsp+48h] [rbp-28h]\n  __int64 v54; // [rsp+50h] [rbp-20h]\n  __int64 v55; // [rsp+58h] [rbp-18h]\n  __int64 v56; // [rsp+60h] [rbp-10h]\n  __int64 v57; // [rsp+68h] [rbp-8h]\n\n  v57 = a8;\n  v56 = a7;\n  v55 = a6;\n  v54 = a5;\n  v53 = a3;\n  v52 = a2;\n  v8 = a4;\n  *a4 = 0LL;\n  v51 = __readfsqword(0x28u);\n  v9 = __errno_location();\n  if ( !nptr )\n    goto LABEL_7;\n  v10 = *nptr;\n  if ( !*nptr )\n    goto LABEL_7;\n  v11 = __ctype_b_loc();\n  v12 = v11;\n  v13 = *v11;\n  v14 = nptr;\n  while ( v13[v10] & 0x2000 )\n    v10 = *++v14;\n  if ( v10 == 45 )\n    goto LABEL_7;\n  *v9 = 0;\n  endptr = 0LL;\n  v18 = __strtoul_internal(nptr, &endptr, 0, 0);\n  v19 = endptr;\n  v48 = v18;\n  v20 = *v9;\n  if ( endptr == nptr )\n  {\nLABEL_33:\n    if ( !v20 )\n    {\nLABEL_7:\n      v15 = 22;\n      v16 = -22;\n      goto LABEL_8;\n    }\nLABEL_13:\n    v16 = -v20;\n    goto LABEL_14;\n  }\n  if ( v20 && v18 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n    goto LABEL_13;\n  if ( !endptr || !*endptr )\n  {\n    v16 = 0;\n    *a4 = v18;\n    return v16;\n  }\n  v21 = 0;\n  v49 = 0LL;\n  while ( 1 )\n  {\n    v22 = v19[1];\n    if ( v22 == 105 )\n    {\n      if ( (v19[2] & 0xDF) == 66 && !v19[3] )\n      {\nLABEL_37:\n        v27 = 1024;\n        goto LABEL_38;\n      }\n      goto LABEL_23;\n    }\n    if ( (v22 & 0xDF) == 66 && !v19[2] )\n      break;\n    if ( !v22 )\n      goto LABEL_37;\nLABEL_23:\n    v23 = localeconv();\n    if ( !v23 )\n      goto LABEL_7;\n    if ( !v23->decimal_point )\n      goto LABEL_7;\n    s1 = v23->decimal_point;\n    v24 = strlen(v23->decimal_point);\n    if ( v49 )\n      goto LABEL_7;\n    if ( !*v19 )\n      goto LABEL_7;\n    v46 = v24;\n    if ( strncmp(s1, v19, v24) )\n      goto LABEL_7;\n    v25 = &v19[v46];\n    for ( i = v19[v46]; (_BYTE)i == 48; ++v21 )\n      i = *++v25;\n    if ( (*v12)[i] & 0x800 )\n    {\n      *v9 = 0;\n      v38 = v25;\n      endptr = 0LL;\n      v39 = __strtoul_internal(v25, &endptr, 0, 0);\n      v19 = endptr;\n      v49 = v39;\n      v20 = *v9;\n      if ( endptr == v38 )\n        goto LABEL_33;\n      if ( v20 )\n      {\n        if ( v39 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n          goto LABEL_13;\n        goto LABEL_62;\n      }\n      if ( v39 )\n      {\nLABEL_62:\n        if ( !endptr || !*endptr )\n          goto LABEL_7;\n      }\n    }\n    else\n    {\n      endptr = v25;\n      v19 = v25;\n    }\n  }\n  v27 = 1000;\nLABEL_38:\n  v28 = *v19;\n  v29 = strchr(\"KMGTPEZY\", v28);\n  if ( v29 )\n  {\n    v30 = (unsigned __int64)(v29 - \"KMGTPEZY\") + 1;\n    goto LABEL_40;\n  }\n  v45 = strchr(\"kmgtpezy\", v28);\n  if ( !v45 )\n    goto LABEL_7;\n  v30 = (unsigned __int64)(v45 - \"kmgtpezy\") + 1;\nLABEL_40:\n  if ( v30 )\n  {\n    if ( is_mul_ok(v27, v48) )\n    {\n      v31 = 0;\n      while ( 1 )\n      {\n        v48 *= v27;\n        if ( v30 - 1 == v31 )\n          break;\n        ++v31;\n        if ( !is_mul_ok(v27, v48) )\n          goto LABEL_77;\n      }\n      v16 = 0;\n    }\n    else\n    {\nLABEL_77:\n      v16 = -34;\n    }\n    if ( v49 )\n    {\n      v32 = v30 - 1;\n      v33 = 0;\n      v34 = 1LL;\n      do\n      {\n        v34 *= v27;\n        if ( v33 == v32 )\n          break;\n        ++v33;\n      }\n      while ( is_mul_ok(v27, v34) );\n      if ( v49 <= 0xA )\n      {\n        v36 = v49;\n        v35 = 10LL;\n      }\n      else\n      {\n        v35 = 10LL;\n        while ( 1 )\n        {\n          v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v49 >> 64) >> 3;\n          if ( v35 > 0x1999999999999999LL )\n            break;\n          v35 *= 10LL;\n          if ( v35 >= v49 )\n          {\n            v36 = v49;\n            break;\n          }\n        }\n      }\n      if ( v21 )\n      {\n        v37 = 0;\n        do\n        {\n          if ( v35 <= 0x1999999999999999LL )\n            v35 *= 10LL;\n          else\n            v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n          ++v37;\n        }\n        while ( v21 != v37 );\n      }\n      v40 = 1LL;\n      do\n      {\n        v41 = 10 * v40;\n        v42 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        v43 = v36 - 10 * v42;\n        v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        if ( v43 )\n        {\n          v44 = v35 / v40 / v43;\n          if ( v44 )\n            v48 += v34 / v44;\n        }\n        v40 = v41;\n      }\n      while ( v42 );\n    }\n    *v8 = v48;\nLABEL_14:\n    if ( (v16 & 0x80000000) != 0 )\n    {\n      v15 = -v16;\nLABEL_8:\n      *v9 = v15;\n    }\n  }\n  else\n  {\n    v16 = 0;\n    *a4 = v48;\n  }\n  return v16;\n}\n\n// write access to const memory has been detected, the output may be wrong!\n__int64 __usercall sub_8D30@<rax>(char *nptr@<rdi>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned __int64 *a4@<rsi>, __int64 a5@<r12>, __int64 a6@<r13>, __int64 a7@<r14>, __int64 a8@<r15>)\n{\n  unsigned __int64 *v8; // rbp\n  int *v9; // rbx\n  unsigned __int8 v10; // r14\n  const unsigned __int16 **v11; // rax\n  const unsigned __int16 **v12; // r13\n  const unsigned __int16 *v13; // rcx\n  char *v14; // rax\n  int v15; // eax\n  unsigned int v16; // ecx\n  unsigned __int64 v18; // rax\n  char *v19; // r14\n  int v20; // ecx\n  int v21; // er15\n  char v22; // al\n  struct lconv *v23; // rax\n  size_t v24; // rax\n  char *v25; // r8\n  __int64 i; // rax\n  signed int v27; // er13\n  int v28; // er14\n  char *v29; // rax\n  int v30; // edi\n  int v31; // ecx\n  int v32; // edi\n  int v33; // er8\n  unsigned __int64 v34; // r10\n  unsigned __int64 v35; // rdi\n  unsigned __int64 v36; // r8\n  int v37; // esi\n  char *v38; // ST08_8\n  unsigned __int64 v39; // rax\n  unsigned __int64 v40; // r9\n  signed __int64 v41; // r11\n  unsigned __int64 v42; // rsi\n  unsigned __int64 v43; // r13\n  unsigned __int64 v44; // r9\n  char *v45; // rax\n  size_t v46; // [rsp+0h] [rbp-70h]\n  char *s1; // [rsp+8h] [rbp-68h]\n  unsigned __int64 v48; // [rsp+10h] [rbp-60h]\n  unsigned __int64 v49; // [rsp+18h] [rbp-58h]\n  char *endptr; // [rsp+28h] [rbp-48h]\n  unsigned __int64 v51; // [rsp+30h] [rbp-40h]\n  __int64 v52; // [rsp+40h] [rbp-30h]\n  __int64 v53; // [rsp+48h] [rbp-28h]\n  __int64 v54; // [rsp+50h] [rbp-20h]\n  __int64 v55; // [rsp+58h] [rbp-18h]\n  __int64 v56; // [rsp+60h] [rbp-10h]\n  __int64 v57; // [rsp+68h] [rbp-8h]\n\n  v57 = a8;\n  v56 = a7;\n  v55 = a6;\n  v54 = a5;\n  v53 = a3;\n  v52 = a2;\n  v8 = a4;\n  *a4 = 0LL;\n  v51 = __readfsqword(0x28u);\n  v9 = __errno_location();\n  if ( !nptr )\n    goto LABEL_7;\n  v10 = *nptr;\n  if ( !*nptr )\n    goto LABEL_7;\n  v11 = __ctype_b_loc();\n  v12 = v11;\n  v13 = *v11;\n  v14 = nptr;\n  while ( v13[v10] & 0x2000 )\n    v10 = *++v14;\n  if ( v10 == 45 )\n    goto LABEL_7;\n  *v9 = 0;\n  endptr = 0LL;\n  v18 = __strtoul_internal(nptr, &endptr, 0, 0);\n  v19 = endptr;\n  v48 = v18;\n  v20 = *v9;\n  if ( endptr == nptr )\n  {\nLABEL_33:\n    if ( !v20 )\n    {\nLABEL_7:\n      v15 = 22;\n      v16 = -22;\n      goto LABEL_8;\n    }\nLABEL_13:\n    v16 = -v20;\n    goto LABEL_14;\n  }\n  if ( v20 && v18 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n    goto LABEL_13;\n  if ( !endptr || !*endptr )\n  {\n    v16 = 0;\n    *a4 = v18;\n    return v16;\n  }\n  v21 = 0;\n  v49 = 0LL;\n  while ( 1 )\n  {\n    v22 = v19[1];\n    if ( v22 == 105 )\n    {\n      if ( (v19[2] & 0xDF) == 66 && !v19[3] )\n      {\nLABEL_37:\n        v27 = 1024;\n        goto LABEL_38;\n      }\n      goto LABEL_23;\n    }\n    if ( (v22 & 0xDF) == 66 && !v19[2] )\n      break;\n    if ( !v22 )\n      goto LABEL_37;\nLABEL_23:\n    v23 = localeconv();\n    if ( !v23 )\n      goto LABEL_7;\n    if ( !v23->decimal_point )\n      goto LABEL_7;\n    s1 = v23->decimal_point;\n    v24 = strlen(v23->decimal_point);\n    if ( v49 )\n      goto LABEL_7;\n    if ( !*v19 )\n      goto LABEL_7;\n    v46 = v24;\n    if ( strncmp(s1, v19, v24) )\n      goto LABEL_7;\n    v25 = &v19[v46];\n    for ( i = v19[v46]; (_BYTE)i == 48; ++v21 )\n      i = *++v25;\n    if ( (*v12)[i] & 0x800 )\n    {\n      *v9 = 0;\n      v38 = v25;\n      endptr = 0LL;\n      v39 = __strtoul_internal(v25, &endptr, 0, 0);\n      v19 = endptr;\n      v49 = v39;\n      v20 = *v9;\n      if ( endptr == v38 )\n        goto LABEL_33;\n      if ( v20 )\n      {\n        if ( v39 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n          goto LABEL_13;\n        goto LABEL_62;\n      }\n      if ( v39 )\n      {\nLABEL_62:\n        if ( !endptr || !*endptr )\n          goto LABEL_7;\n      }\n    }\n    else\n    {\n      endptr = v25;\n      v19 = v25;\n    }\n  }\n  v27 = 1000;\nLABEL_38:\n  v28 = *v19;\n  v29 = strchr(\"KMGTPEZY\", v28);\n  if ( v29 )\n  {\n    v30 = (unsigned __int64)(v29 - \"KMGTPEZY\") + 1;\n    goto LABEL_40;\n  }\n  v45 = strchr(\"kmgtpezy\", v28);\n  if ( !v45 )\n    goto LABEL_7;\n  v30 = (unsigned __int64)(v45 - \"kmgtpezy\") + 1;\nLABEL_40:\n  if ( v30 )\n  {\n    if ( is_mul_ok(v27, v48) )\n    {\n      v31 = 0;\n      while ( 1 )\n      {\n        v48 *= v27;\n        if ( v30 - 1 == v31 )\n          break;\n        ++v31;\n        if ( !is_mul_ok(v27, v48) )\n          goto LABEL_77;\n      }\n      v16 = 0;\n    }\n    else\n    {\nLABEL_77:\n      v16 = -34;\n    }\n    if ( v49 )\n    {\n      v32 = v30 - 1;\n      v33 = 0;\n      v34 = 1LL;\n      do\n      {\n        v34 *= v27;\n        if ( v33 == v32 )\n          break;\n        ++v33;\n      }\n      while ( is_mul_ok(v27, v34) );\n      if ( v49 <= 0xA )\n      {\n        v36 = v49;\n        v35 = 10LL;\n      }\n      else\n      {\n        v35 = 10LL;\n        while ( 1 )\n        {\n          v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v49 >> 64) >> 3;\n          if ( v35 > 0x1999999999999999LL )\n            break;\n          v35 *= 10LL;\n          if ( v35 >= v49 )\n          {\n            v36 = v49;\n            break;\n          }\n        }\n      }\n      if ( v21 )\n      {\n        v37 = 0;\n        do\n        {\n          if ( v35 <= 0x1999999999999999LL )\n            v35 *= 10LL;\n          else\n            v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n          ++v37;\n        }\n        while ( v21 != v37 );\n      }\n      v40 = 1LL;\n      do\n      {\n        v41 = 10 * v40;\n        v42 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        v43 = v36 - 10 * v42;\n        v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        if ( v43 )\n        {\n          v44 = v35 / v40 / v43;\n          if ( v44 )\n            v48 += v34 / v44;\n        }\n        v40 = v41;\n      }\n      while ( v42 );\n    }\n    *v8 = v48;\nLABEL_14:\n    if ( (v16 & 0x80000000) != 0 )\n    {\n      v15 = -v16;\nLABEL_8:\n      *v9 = v15;\n    }\n  }\n  else\n  {\n    v16 = 0;\n    *a4 = v48;\n  }\n  return v16;\n}\n\n// write access to const memory has been detected, the output may be wrong!\n__int64 __usercall sub_8D30@<rax>(char *nptr@<rdi>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned __int64 *a4@<rsi>, __int64 a5@<r12>, __int64 a6@<r13>, __int64 a7@<r14>, __int64 a8@<r15>)\n{\n  unsigned __int64 *v8; // rbp\n  int *v9; // rbx\n  unsigned __int8 v10; // r14\n  const unsigned __int16 **v11; // rax\n  const unsigned __int16 **v12; // r13\n  const unsigned __int16 *v13; // rcx\n  char *v14; // rax\n  int v15; // eax\n  unsigned int v16; // ecx\n  unsigned __int64 v18; // rax\n  char *v19; // r14\n  int v20; // ecx\n  int v21; // er15\n  char v22; // al\n  struct lconv *v23; // rax\n  size_t v24; // rax\n  char *v25; // r8\n  __int64 i; // rax\n  signed int v27; // er13\n  int v28; // er14\n  char *v29; // rax\n  int v30; // edi\n  int v31; // ecx\n  int v32; // edi\n  int v33; // er8\n  unsigned __int64 v34; // r10\n  unsigned __int64 v35; // rdi\n  unsigned __int64 v36; // r8\n  int v37; // esi\n  char *v38; // ST08_8\n  unsigned __int64 v39; // rax\n  unsigned __int64 v40; // r9\n  signed __int64 v41; // r11\n  unsigned __int64 v42; // rsi\n  unsigned __int64 v43; // r13\n  unsigned __int64 v44; // r9\n  char *v45; // rax\n  size_t v46; // [rsp+0h] [rbp-70h]\n  char *s1; // [rsp+8h] [rbp-68h]\n  unsigned __int64 v48; // [rsp+10h] [rbp-60h]\n  unsigned __int64 v49; // [rsp+18h] [rbp-58h]\n  char *endptr; // [rsp+28h] [rbp-48h]\n  unsigned __int64 v51; // [rsp+30h] [rbp-40h]\n  __int64 v52; // [rsp+40h] [rbp-30h]\n  __int64 v53; // [rsp+48h] [rbp-28h]\n  __int64 v54; // [rsp+50h] [rbp-20h]\n  __int64 v55; // [rsp+58h] [rbp-18h]\n  __int64 v56; // [rsp+60h] [rbp-10h]\n  __int64 v57; // [rsp+68h] [rbp-8h]\n\n  v57 = a8;\n  v56 = a7;\n  v55 = a6;\n  v54 = a5;\n  v53 = a3;\n  v52 = a2;\n  v8 = a4;\n  *a4 = 0LL;\n  v51 = __readfsqword(0x28u);\n  v9 = __errno_location();\n  if ( !nptr )\n    goto LABEL_7;\n  v10 = *nptr;\n  if ( !*nptr )\n    goto LABEL_7;\n  v11 = __ctype_b_loc();\n  v12 = v11;\n  v13 = *v11;\n  v14 = nptr;\n  while ( v13[v10] & 0x2000 )\n    v10 = *++v14;\n  if ( v10 == 45 )\n    goto LABEL_7;\n  *v9 = 0;\n  endptr = 0LL;\n  v18 = __strtoul_internal(nptr, &endptr, 0, 0);\n  v19 = endptr;\n  v48 = v18;\n  v20 = *v9;\n  if ( endptr == nptr )\n  {\nLABEL_33:\n    if ( !v20 )\n    {\nLABEL_7:\n      v15 = 22;\n      v16 = -22;\n      goto LABEL_8;\n    }\nLABEL_13:\n    v16 = -v20;\n    goto LABEL_14;\n  }\n  if ( v20 && v18 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n    goto LABEL_13;\n  if ( !endptr || !*endptr )\n  {\n    v16 = 0;\n    *a4 = v18;\n    return v16;\n  }\n  v21 = 0;\n  v49 = 0LL;\n  while ( 1 )\n  {\n    v22 = v19[1];\n    if ( v22 == 105 )\n    {\n      if ( (v19[2] & 0xDF) == 66 && !v19[3] )\n      {\nLABEL_37:\n        v27 = 1024;\n        goto LABEL_38;\n      }\n      goto LABEL_23;\n    }\n    if ( (v22 & 0xDF) == 66 && !v19[2] )\n      break;\n    if ( !v22 )\n      goto LABEL_37;\nLABEL_23:\n    v23 = localeconv();\n    if ( !v23 )\n      goto LABEL_7;\n    if ( !v23->decimal_point )\n      goto LABEL_7;\n    s1 = v23->decimal_point;\n    v24 = strlen(v23->decimal_point);\n    if ( v49 )\n      goto LABEL_7;\n    if ( !*v19 )\n      goto LABEL_7;\n    v46 = v24;\n    if ( strncmp(s1, v19, v24) )\n      goto LABEL_7;\n    v25 = &v19[v46];\n    for ( i = v19[v46]; (_BYTE)i == 48; ++v21 )\n      i = *++v25;\n    if ( (*v12)[i] & 0x800 )\n    {\n      *v9 = 0;\n      v38 = v25;\n      endptr = 0LL;\n      v39 = __strtoul_internal(v25, &endptr, 0, 0);\n      v19 = endptr;\n      v49 = v39;\n      v20 = *v9;\n      if ( endptr == v38 )\n        goto LABEL_33;\n      if ( v20 )\n      {\n        if ( v39 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n          goto LABEL_13;\n        goto LABEL_62;\n      }\n      if ( v39 )\n      {\nLABEL_62:\n        if ( !endptr || !*endptr )\n          goto LABEL_7;\n      }\n    }\n    else\n    {\n      endptr = v25;\n      v19 = v25;\n    }\n  }\n  v27 = 1000;\nLABEL_38:\n  v28 = *v19;\n  v29 = strchr(\"KMGTPEZY\", v28);\n  if ( v29 )\n  {\n    v30 = (unsigned __int64)(v29 - \"KMGTPEZY\") + 1;\n    goto LABEL_40;\n  }\n  v45 = strchr(\"kmgtpezy\", v28);\n  if ( !v45 )\n    goto LABEL_7;\n  v30 = (unsigned __int64)(v45 - \"kmgtpezy\") + 1;\nLABEL_40:\n  if ( v30 )\n  {\n    if ( is_mul_ok(v27, v48) )\n    {\n      v31 = 0;\n      while ( 1 )\n      {\n        v48 *= v27;\n        if ( v30 - 1 == v31 )\n          break;\n        ++v31;\n        if ( !is_mul_ok(v27, v48) )\n          goto LABEL_77;\n      }\n      v16 = 0;\n    }\n    else\n    {\nLABEL_77:\n      v16 = -34;\n    }\n    if ( v49 )\n    {\n      v32 = v30 - 1;\n      v33 = 0;\n      v34 = 1LL;\n      do\n      {\n        v34 *= v27;\n        if ( v33 == v32 )\n          break;\n        ++v33;\n      }\n      while ( is_mul_ok(v27, v34) );\n      if ( v49 <= 0xA )\n      {\n        v36 = v49;\n        v35 = 10LL;\n      }\n      else\n      {\n        v35 = 10LL;\n        while ( 1 )\n        {\n          v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v49 >> 64) >> 3;\n          if ( v35 > 0x1999999999999999LL )\n            break;\n          v35 *= 10LL;\n          if ( v35 >= v49 )\n          {\n            v36 = v49;\n            break;\n          }\n        }\n      }\n      if ( v21 )\n      {\n        v37 = 0;\n        do\n        {\n          if ( v35 <= 0x1999999999999999LL )\n            v35 *= 10LL;\n          else\n            v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n          ++v37;\n        }\n        while ( v21 != v37 );\n      }\n      v40 = 1LL;\n      do\n      {\n        v41 = 10 * v40;\n        v42 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        v43 = v36 - 10 * v42;\n        v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        if ( v43 )\n        {\n          v44 = v35 / v40 / v43;\n          if ( v44 )\n            v48 += v34 / v44;\n        }\n        v40 = v41;\n      }\n      while ( v42 );\n    }\n    *v8 = v48;\nLABEL_14:\n    if ( (v16 & 0x80000000) != 0 )\n    {\n      v15 = -v16;\nLABEL_8:\n      *v9 = v15;\n    }\n  }\n  else\n  {\n    v16 = 0;\n    *a4 = v48;\n  }\n  return v16;\n}\n\n// write access to const memory has been detected, the output may be wrong!\n__int64 __usercall sub_8D30@<rax>(char *nptr@<rdi>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned __int64 *a4@<rsi>, __int64 a5@<r12>, __int64 a6@<r13>, __int64 a7@<r14>, __int64 a8@<r15>)\n{\n  unsigned __int64 *v8; // rbp\n  int *v9; // rbx\n  unsigned __int8 v10; // r14\n  const unsigned __int16 **v11; // rax\n  const unsigned __int16 **v12; // r13\n  const unsigned __int16 *v13; // rcx\n  char *v14; // rax\n  int v15; // eax\n  unsigned int v16; // ecx\n  unsigned __int64 v18; // rax\n  char *v19; // r14\n  int v20; // ecx\n  int v21; // er15\n  char v22; // al\n  struct lconv *v23; // rax\n  size_t v24; // rax\n  char *v25; // r8\n  __int64 i; // rax\n  signed int v27; // er13\n  int v28; // er14\n  char *v29; // rax\n  int v30; // edi\n  int v31; // ecx\n  int v32; // edi\n  int v33; // er8\n  unsigned __int64 v34; // r10\n  unsigned __int64 v35; // rdi\n  unsigned __int64 v36; // r8\n  int v37; // esi\n  char *v38; // ST08_8\n  unsigned __int64 v39; // rax\n  unsigned __int64 v40; // r9\n  signed __int64 v41; // r11\n  unsigned __int64 v42; // rsi\n  unsigned __int64 v43; // r13\n  unsigned __int64 v44; // r9\n  char *v45; // rax\n  size_t v46; // [rsp+0h] [rbp-70h]\n  char *s1; // [rsp+8h] [rbp-68h]\n  unsigned __int64 v48; // [rsp+10h] [rbp-60h]\n  unsigned __int64 v49; // [rsp+18h] [rbp-58h]\n  char *endptr; // [rsp+28h] [rbp-48h]\n  unsigned __int64 v51; // [rsp+30h] [rbp-40h]\n  __int64 v52; // [rsp+40h] [rbp-30h]\n  __int64 v53; // [rsp+48h] [rbp-28h]\n  __int64 v54; // [rsp+50h] [rbp-20h]\n  __int64 v55; // [rsp+58h] [rbp-18h]\n  __int64 v56; // [rsp+60h] [rbp-10h]\n  __int64 v57; // [rsp+68h] [rbp-8h]\n\n  v57 = a8;\n  v56 = a7;\n  v55 = a6;\n  v54 = a5;\n  v53 = a3;\n  v52 = a2;\n  v8 = a4;\n  *a4 = 0LL;\n  v51 = __readfsqword(0x28u);\n  v9 = __errno_location();\n  if ( !nptr )\n    goto LABEL_7;\n  v10 = *nptr;\n  if ( !*nptr )\n    goto LABEL_7;\n  v11 = __ctype_b_loc();\n  v12 = v11;\n  v13 = *v11;\n  v14 = nptr;\n  while ( v13[v10] & 0x2000 )\n    v10 = *++v14;\n  if ( v10 == 45 )\n    goto LABEL_7;\n  *v9 = 0;\n  endptr = 0LL;\n  v18 = __strtoul_internal(nptr, &endptr, 0, 0);\n  v19 = endptr;\n  v48 = v18;\n  v20 = *v9;\n  if ( endptr == nptr )\n  {\nLABEL_33:\n    if ( !v20 )\n    {\nLABEL_7:\n      v15 = 22;\n      v16 = -22;\n      goto LABEL_8;\n    }\nLABEL_13:\n    v16 = -v20;\n    goto LABEL_14;\n  }\n  if ( v20 && v18 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n    goto LABEL_13;\n  if ( !endptr || !*endptr )\n  {\n    v16 = 0;\n    *a4 = v18;\n    return v16;\n  }\n  v21 = 0;\n  v49 = 0LL;\n  while ( 1 )\n  {\n    v22 = v19[1];\n    if ( v22 == 105 )\n    {\n      if ( (v19[2] & 0xDF) == 66 && !v19[3] )\n      {\nLABEL_37:\n        v27 = 1024;\n        goto LABEL_38;\n      }\n      goto LABEL_23;\n    }\n    if ( (v22 & 0xDF) == 66 && !v19[2] )\n      break;\n    if ( !v22 )\n      goto LABEL_37;\nLABEL_23:\n    v23 = localeconv();\n    if ( !v23 )\n      goto LABEL_7;\n    if ( !v23->decimal_point )\n      goto LABEL_7;\n    s1 = v23->decimal_point;\n    v24 = strlen(v23->decimal_point);\n    if ( v49 )\n      goto LABEL_7;\n    if ( !*v19 )\n      goto LABEL_7;\n    v46 = v24;\n    if ( strncmp(s1, v19, v24) )\n      goto LABEL_7;\n    v25 = &v19[v46];\n    for ( i = v19[v46]; (_BYTE)i == 48; ++v21 )\n      i = *++v25;\n    if ( (*v12)[i] & 0x800 )\n    {\n      *v9 = 0;\n      v38 = v25;\n      endptr = 0LL;\n      v39 = __strtoul_internal(v25, &endptr, 0, 0);\n      v19 = endptr;\n      v49 = v39;\n      v20 = *v9;\n      if ( endptr == v38 )\n        goto LABEL_33;\n      if ( v20 )\n      {\n        if ( v39 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n          goto LABEL_13;\n        goto LABEL_62;\n      }\n      if ( v39 )\n      {\nLABEL_62:\n        if ( !endptr || !*endptr )\n          goto LABEL_7;\n      }\n    }\n    else\n    {\n      endptr = v25;\n      v19 = v25;\n    }\n  }\n  v27 = 1000;\nLABEL_38:\n  v28 = *v19;\n  v29 = strchr(\"KMGTPEZY\", v28);\n  if ( v29 )\n  {\n    v30 = (unsigned __int64)(v29 - \"KMGTPEZY\") + 1;\n    goto LABEL_40;\n  }\n  v45 = strchr(\"kmgtpezy\", v28);\n  if ( !v45 )\n    goto LABEL_7;\n  v30 = (unsigned __int64)(v45 - \"kmgtpezy\") + 1;\nLABEL_40:\n  if ( v30 )\n  {\n    if ( is_mul_ok(v27, v48) )\n    {\n      v31 = 0;\n      while ( 1 )\n      {\n        v48 *= v27;\n        if ( v30 - 1 == v31 )\n          break;\n        ++v31;\n        if ( !is_mul_ok(v27, v48) )\n          goto LABEL_77;\n      }\n      v16 = 0;\n    }\n    else\n    {\nLABEL_77:\n      v16 = -34;\n    }\n    if ( v49 )\n    {\n      v32 = v30 - 1;\n      v33 = 0;\n      v34 = 1LL;\n      do\n      {\n        v34 *= v27;\n        if ( v33 == v32 )\n          break;\n        ++v33;\n      }\n      while ( is_mul_ok(v27, v34) );\n      if ( v49 <= 0xA )\n      {\n        v36 = v49;\n        v35 = 10LL;\n      }\n      else\n      {\n        v35 = 10LL;\n        while ( 1 )\n        {\n          v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v49 >> 64) >> 3;\n          if ( v35 > 0x1999999999999999LL )\n            break;\n          v35 *= 10LL;\n          if ( v35 >= v49 )\n          {\n            v36 = v49;\n            break;\n          }\n        }\n      }\n      if ( v21 )\n      {\n        v37 = 0;\n        do\n        {\n          if ( v35 <= 0x1999999999999999LL )\n            v35 *= 10LL;\n          else\n            v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n          ++v37;\n        }\n        while ( v21 != v37 );\n      }\n      v40 = 1LL;\n      do\n      {\n        v41 = 10 * v40;\n        v42 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        v43 = v36 - 10 * v42;\n        v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        if ( v43 )\n        {\n          v44 = v35 / v40 / v43;\n          if ( v44 )\n            v48 += v34 / v44;\n        }\n        v40 = v41;\n      }\n      while ( v42 );\n    }\n    *v8 = v48;\nLABEL_14:\n    if ( (v16 & 0x80000000) != 0 )\n    {\n      v15 = -v16;\nLABEL_8:\n      *v9 = v15;\n    }\n  }\n  else\n  {\n    v16 = 0;\n    *a4 = v48;\n  }\n  return v16;\n}\n\n// write access to const memory has been detected, the output may be wrong!\n__int64 __usercall sub_8D30@<rax>(char *nptr@<rdi>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned __int64 *a4@<rsi>, __int64 a5@<r12>, __int64 a6@<r13>, __int64 a7@<r14>, __int64 a8@<r15>)\n{\n  unsigned __int64 *v8; // rbp\n  int *v9; // rbx\n  unsigned __int8 v10; // r14\n  const unsigned __int16 **v11; // rax\n  const unsigned __int16 **v12; // r13\n  const unsigned __int16 *v13; // rcx\n  char *v14; // rax\n  int v15; // eax\n  unsigned int v16; // ecx\n  unsigned __int64 v18; // rax\n  char *v19; // r14\n  int v20; // ecx\n  int v21; // er15\n  char v22; // al\n  struct lconv *v23; // rax\n  size_t v24; // rax\n  char *v25; // r8\n  __int64 i; // rax\n  signed int v27; // er13\n  int v28; // er14\n  char *v29; // rax\n  int v30; // edi\n  int v31; // ecx\n  int v32; // edi\n  int v33; // er8\n  unsigned __int64 v34; // r10\n  unsigned __int64 v35; // rdi\n  unsigned __int64 v36; // r8\n  int v37; // esi\n  char *v38; // ST08_8\n  unsigned __int64 v39; // rax\n  unsigned __int64 v40; // r9\n  signed __int64 v41; // r11\n  unsigned __int64 v42; // rsi\n  unsigned __int64 v43; // r13\n  unsigned __int64 v44; // r9\n  char *v45; // rax\n  size_t v46; // [rsp+0h] [rbp-70h]\n  char *s1; // [rsp+8h] [rbp-68h]\n  unsigned __int64 v48; // [rsp+10h] [rbp-60h]\n  unsigned __int64 v49; // [rsp+18h] [rbp-58h]\n  char *endptr; // [rsp+28h] [rbp-48h]\n  unsigned __int64 v51; // [rsp+30h] [rbp-40h]\n  __int64 v52; // [rsp+40h] [rbp-30h]\n  __int64 v53; // [rsp+48h] [rbp-28h]\n  __int64 v54; // [rsp+50h] [rbp-20h]\n  __int64 v55; // [rsp+58h] [rbp-18h]\n  __int64 v56; // [rsp+60h] [rbp-10h]\n  __int64 v57; // [rsp+68h] [rbp-8h]\n\n  v57 = a8;\n  v56 = a7;\n  v55 = a6;\n  v54 = a5;\n  v53 = a3;\n  v52 = a2;\n  v8 = a4;\n  *a4 = 0LL;\n  v51 = __readfsqword(0x28u);\n  v9 = __errno_location();\n  if ( !nptr )\n    goto LABEL_7;\n  v10 = *nptr;\n  if ( !*nptr )\n    goto LABEL_7;\n  v11 = __ctype_b_loc();\n  v12 = v11;\n  v13 = *v11;\n  v14 = nptr;\n  while ( v13[v10] & 0x2000 )\n    v10 = *++v14;\n  if ( v10 == 45 )\n    goto LABEL_7;\n  *v9 = 0;\n  endptr = 0LL;\n  v18 = __strtoul_internal(nptr, &endptr, 0, 0);\n  v19 = endptr;\n  v48 = v18;\n  v20 = *v9;\n  if ( endptr == nptr )\n  {\nLABEL_33:\n    if ( !v20 )\n    {\nLABEL_7:\n      v15 = 22;\n      v16 = -22;\n      goto LABEL_8;\n    }\nLABEL_13:\n    v16 = -v20;\n    goto LABEL_14;\n  }\n  if ( v20 && v18 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n    goto LABEL_13;\n  if ( !endptr || !*endptr )\n  {\n    v16 = 0;\n    *a4 = v18;\n    return v16;\n  }\n  v21 = 0;\n  v49 = 0LL;\n  while ( 1 )\n  {\n    v22 = v19[1];\n    if ( v22 == 105 )\n    {\n      if ( (v19[2] & 0xDF) == 66 && !v19[3] )\n      {\nLABEL_37:\n        v27 = 1024;\n        goto LABEL_38;\n      }\n      goto LABEL_23;\n    }\n    if ( (v22 & 0xDF) == 66 && !v19[2] )\n      break;\n    if ( !v22 )\n      goto LABEL_37;\nLABEL_23:\n    v23 = localeconv();\n    if ( !v23 )\n      goto LABEL_7;\n    if ( !v23->decimal_point )\n      goto LABEL_7;\n    s1 = v23->decimal_point;\n    v24 = strlen(v23->decimal_point);\n    if ( v49 )\n      goto LABEL_7;\n    if ( !*v19 )\n      goto LABEL_7;\n    v46 = v24;\n    if ( strncmp(s1, v19, v24) )\n      goto LABEL_7;\n    v25 = &v19[v46];\n    for ( i = v19[v46]; (_BYTE)i == 48; ++v21 )\n      i = *++v25;\n    if ( (*v12)[i] & 0x800 )\n    {\n      *v9 = 0;\n      v38 = v25;\n      endptr = 0LL;\n      v39 = __strtoul_internal(v25, &endptr, 0, 0);\n      v19 = endptr;\n      v49 = v39;\n      v20 = *v9;\n      if ( endptr == v38 )\n        goto LABEL_33;\n      if ( v20 )\n      {\n        if ( v39 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n          goto LABEL_13;\n        goto LABEL_62;\n      }\n      if ( v39 )\n      {\nLABEL_62:\n        if ( !endptr || !*endptr )\n          goto LABEL_7;\n      }\n    }\n    else\n    {\n      endptr = v25;\n      v19 = v25;\n    }\n  }\n  v27 = 1000;\nLABEL_38:\n  v28 = *v19;\n  v29 = strchr(\"KMGTPEZY\", v28);\n  if ( v29 )\n  {\n    v30 = (unsigned __int64)(v29 - \"KMGTPEZY\") + 1;\n    goto LABEL_40;\n  }\n  v45 = strchr(\"kmgtpezy\", v28);\n  if ( !v45 )\n    goto LABEL_7;\n  v30 = (unsigned __int64)(v45 - \"kmgtpezy\") + 1;\nLABEL_40:\n  if ( v30 )\n  {\n    if ( is_mul_ok(v27, v48) )\n    {\n      v31 = 0;\n      while ( 1 )\n      {\n        v48 *= v27;\n        if ( v30 - 1 == v31 )\n          break;\n        ++v31;\n        if ( !is_mul_ok(v27, v48) )\n          goto LABEL_77;\n      }\n      v16 = 0;\n    }\n    else\n    {\nLABEL_77:\n      v16 = -34;\n    }\n    if ( v49 )\n    {\n      v32 = v30 - 1;\n      v33 = 0;\n      v34 = 1LL;\n      do\n      {\n        v34 *= v27;\n        if ( v33 == v32 )\n          break;\n        ++v33;\n      }\n      while ( is_mul_ok(v27, v34) );\n      if ( v49 <= 0xA )\n      {\n        v36 = v49;\n        v35 = 10LL;\n      }\n      else\n      {\n        v35 = 10LL;\n        while ( 1 )\n        {\n          v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v49 >> 64) >> 3;\n          if ( v35 > 0x1999999999999999LL )\n            break;\n          v35 *= 10LL;\n          if ( v35 >= v49 )\n          {\n            v36 = v49;\n            break;\n          }\n        }\n      }\n      if ( v21 )\n      {\n        v37 = 0;\n        do\n        {\n          if ( v35 <= 0x1999999999999999LL )\n            v35 *= 10LL;\n          else\n            v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n          ++v37;\n        }\n        while ( v21 != v37 );\n      }\n      v40 = 1LL;\n      do\n      {\n        v41 = 10 * v40;\n        v42 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        v43 = v36 - 10 * v42;\n        v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        if ( v43 )\n        {\n          v44 = v35 / v40 / v43;\n          if ( v44 )\n            v48 += v34 / v44;\n        }\n        v40 = v41;\n      }\n      while ( v42 );\n    }\n    *v8 = v48;\nLABEL_14:\n    if ( (v16 & 0x80000000) != 0 )\n    {\n      v15 = -v16;\nLABEL_8:\n      *v9 = v15;\n    }\n  }\n  else\n  {\n    v16 = 0;\n    *a4 = v48;\n  }\n  return v16;\n}\n\n// write access to const memory has been detected, the output may be wrong!\n__int64 __usercall sub_8D30@<rax>(char *nptr@<rdi>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned __int64 *a4@<rsi>, __int64 a5@<r12>, __int64 a6@<r13>, __int64 a7@<r14>, __int64 a8@<r15>)\n{\n  unsigned __int64 *v8; // rbp\n  int *v9; // rbx\n  unsigned __int8 v10; // r14\n  const unsigned __int16 **v11; // rax\n  const unsigned __int16 **v12; // r13\n  const unsigned __int16 *v13; // rcx\n  char *v14; // rax\n  int v15; // eax\n  unsigned int v16; // ecx\n  unsigned __int64 v18; // rax\n  char *v19; // r14\n  int v20; // ecx\n  int v21; // er15\n  char v22; // al\n  struct lconv *v23; // rax\n  size_t v24; // rax\n  char *v25; // r8\n  __int64 i; // rax\n  signed int v27; // er13\n  int v28; // er14\n  char *v29; // rax\n  int v30; // edi\n  int v31; // ecx\n  int v32; // edi\n  int v33; // er8\n  unsigned __int64 v34; // r10\n  unsigned __int64 v35; // rdi\n  unsigned __int64 v36; // r8\n  int v37; // esi\n  char *v38; // ST08_8\n  unsigned __int64 v39; // rax\n  unsigned __int64 v40; // r9\n  signed __int64 v41; // r11\n  unsigned __int64 v42; // rsi\n  unsigned __int64 v43; // r13\n  unsigned __int64 v44; // r9\n  char *v45; // rax\n  size_t v46; // [rsp+0h] [rbp-70h]\n  char *s1; // [rsp+8h] [rbp-68h]\n  unsigned __int64 v48; // [rsp+10h] [rbp-60h]\n  unsigned __int64 v49; // [rsp+18h] [rbp-58h]\n  char *endptr; // [rsp+28h] [rbp-48h]\n  unsigned __int64 v51; // [rsp+30h] [rbp-40h]\n  __int64 v52; // [rsp+40h] [rbp-30h]\n  __int64 v53; // [rsp+48h] [rbp-28h]\n  __int64 v54; // [rsp+50h] [rbp-20h]\n  __int64 v55; // [rsp+58h] [rbp-18h]\n  __int64 v56; // [rsp+60h] [rbp-10h]\n  __int64 v57; // [rsp+68h] [rbp-8h]\n\n  v57 = a8;\n  v56 = a7;\n  v55 = a6;\n  v54 = a5;\n  v53 = a3;\n  v52 = a2;\n  v8 = a4;\n  *a4 = 0LL;\n  v51 = __readfsqword(0x28u);\n  v9 = __errno_location();\n  if ( !nptr )\n    goto LABEL_7;\n  v10 = *nptr;\n  if ( !*nptr )\n    goto LABEL_7;\n  v11 = __ctype_b_loc();\n  v12 = v11;\n  v13 = *v11;\n  v14 = nptr;\n  while ( v13[v10] & 0x2000 )\n    v10 = *++v14;\n  if ( v10 == 45 )\n    goto LABEL_7;\n  *v9 = 0;\n  endptr = 0LL;\n  v18 = __strtoul_internal(nptr, &endptr, 0, 0);\n  v19 = endptr;\n  v48 = v18;\n  v20 = *v9;\n  if ( endptr == nptr )\n  {\nLABEL_33:\n    if ( !v20 )\n    {\nLABEL_7:\n      v15 = 22;\n      v16 = -22;\n      goto LABEL_8;\n    }\nLABEL_13:\n    v16 = -v20;\n    goto LABEL_14;\n  }\n  if ( v20 && v18 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n    goto LABEL_13;\n  if ( !endptr || !*endptr )\n  {\n    v16 = 0;\n    *a4 = v18;\n    return v16;\n  }\n  v21 = 0;\n  v49 = 0LL;\n  while ( 1 )\n  {\n    v22 = v19[1];\n    if ( v22 == 105 )\n    {\n      if ( (v19[2] & 0xDF) == 66 && !v19[3] )\n      {\nLABEL_37:\n        v27 = 1024;\n        goto LABEL_38;\n      }\n      goto LABEL_23;\n    }\n    if ( (v22 & 0xDF) == 66 && !v19[2] )\n      break;\n    if ( !v22 )\n      goto LABEL_37;\nLABEL_23:\n    v23 = localeconv();\n    if ( !v23 )\n      goto LABEL_7;\n    if ( !v23->decimal_point )\n      goto LABEL_7;\n    s1 = v23->decimal_point;\n    v24 = strlen(v23->decimal_point);\n    if ( v49 )\n      goto LABEL_7;\n    if ( !*v19 )\n      goto LABEL_7;\n    v46 = v24;\n    if ( strncmp(s1, v19, v24) )\n      goto LABEL_7;\n    v25 = &v19[v46];\n    for ( i = v19[v46]; (_BYTE)i == 48; ++v21 )\n      i = *++v25;\n    if ( (*v12)[i] & 0x800 )\n    {\n      *v9 = 0;\n      v38 = v25;\n      endptr = 0LL;\n      v39 = __strtoul_internal(v25, &endptr, 0, 0);\n      v19 = endptr;\n      v49 = v39;\n      v20 = *v9;\n      if ( endptr == v38 )\n        goto LABEL_33;\n      if ( v20 )\n      {\n        if ( v39 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n          goto LABEL_13;\n        goto LABEL_62;\n      }\n      if ( v39 )\n      {\nLABEL_62:\n        if ( !endptr || !*endptr )\n          goto LABEL_7;\n      }\n    }\n    else\n    {\n      endptr = v25;\n      v19 = v25;\n    }\n  }\n  v27 = 1000;\nLABEL_38:\n  v28 = *v19;\n  v29 = strchr(\"KMGTPEZY\", v28);\n  if ( v29 )\n  {\n    v30 = (unsigned __int64)(v29 - \"KMGTPEZY\") + 1;\n    goto LABEL_40;\n  }\n  v45 = strchr(\"kmgtpezy\", v28);\n  if ( !v45 )\n    goto LABEL_7;\n  v30 = (unsigned __int64)(v45 - \"kmgtpezy\") + 1;\nLABEL_40:\n  if ( v30 )\n  {\n    if ( is_mul_ok(v27, v48) )\n    {\n      v31 = 0;\n      while ( 1 )\n      {\n        v48 *= v27;\n        if ( v30 - 1 == v31 )\n          break;\n        ++v31;\n        if ( !is_mul_ok(v27, v48) )\n          goto LABEL_77;\n      }\n      v16 = 0;\n    }\n    else\n    {\nLABEL_77:\n      v16 = -34;\n    }\n    if ( v49 )\n    {\n      v32 = v30 - 1;\n      v33 = 0;\n      v34 = 1LL;\n      do\n      {\n        v34 *= v27;\n        if ( v33 == v32 )\n          break;\n        ++v33;\n      }\n      while ( is_mul_ok(v27, v34) );\n      if ( v49 <= 0xA )\n      {\n        v36 = v49;\n        v35 = 10LL;\n      }\n      else\n      {\n        v35 = 10LL;\n        while ( 1 )\n        {\n          v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v49 >> 64) >> 3;\n          if ( v35 > 0x1999999999999999LL )\n            break;\n          v35 *= 10LL;\n          if ( v35 >= v49 )\n          {\n            v36 = v49;\n            break;\n          }\n        }\n      }\n      if ( v21 )\n      {\n        v37 = 0;\n        do\n        {\n          if ( v35 <= 0x1999999999999999LL )\n            v35 *= 10LL;\n          else\n            v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n          ++v37;\n        }\n        while ( v21 != v37 );\n      }\n      v40 = 1LL;\n      do\n      {\n        v41 = 10 * v40;\n        v42 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        v43 = v36 - 10 * v42;\n        v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        if ( v43 )\n        {\n          v44 = v35 / v40 / v43;\n          if ( v44 )\n            v48 += v34 / v44;\n        }\n        v40 = v41;\n      }\n      while ( v42 );\n    }\n    *v8 = v48;\nLABEL_14:\n    if ( (v16 & 0x80000000) != 0 )\n    {\n      v15 = -v16;\nLABEL_8:\n      *v9 = v15;\n    }\n  }\n  else\n  {\n    v16 = 0;\n    *a4 = v48;\n  }\n  return v16;\n}\n\n// write access to const memory has been detected, the output may be wrong!\n__int64 __usercall sub_8D30@<rax>(char *nptr@<rdi>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned __int64 *a4@<rsi>, __int64 a5@<r12>, __int64 a6@<r13>, __int64 a7@<r14>, __int64 a8@<r15>)\n{\n  unsigned __int64 *v8; // rbp\n  int *v9; // rbx\n  unsigned __int8 v10; // r14\n  const unsigned __int16 **v11; // rax\n  const unsigned __int16 **v12; // r13\n  const unsigned __int16 *v13; // rcx\n  char *v14; // rax\n  int v15; // eax\n  unsigned int v16; // ecx\n  unsigned __int64 v18; // rax\n  char *v19; // r14\n  int v20; // ecx\n  int v21; // er15\n  char v22; // al\n  struct lconv *v23; // rax\n  size_t v24; // rax\n  char *v25; // r8\n  __int64 i; // rax\n  signed int v27; // er13\n  int v28; // er14\n  char *v29; // rax\n  int v30; // edi\n  int v31; // ecx\n  int v32; // edi\n  int v33; // er8\n  unsigned __int64 v34; // r10\n  unsigned __int64 v35; // rdi\n  unsigned __int64 v36; // r8\n  int v37; // esi\n  char *v38; // ST08_8\n  unsigned __int64 v39; // rax\n  unsigned __int64 v40; // r9\n  signed __int64 v41; // r11\n  unsigned __int64 v42; // rsi\n  unsigned __int64 v43; // r13\n  unsigned __int64 v44; // r9\n  char *v45; // rax\n  size_t v46; // [rsp+0h] [rbp-70h]\n  char *s1; // [rsp+8h] [rbp-68h]\n  unsigned __int64 v48; // [rsp+10h] [rbp-60h]\n  unsigned __int64 v49; // [rsp+18h] [rbp-58h]\n  char *endptr; // [rsp+28h] [rbp-48h]\n  unsigned __int64 v51; // [rsp+30h] [rbp-40h]\n  __int64 v52; // [rsp+40h] [rbp-30h]\n  __int64 v53; // [rsp+48h] [rbp-28h]\n  __int64 v54; // [rsp+50h] [rbp-20h]\n  __int64 v55; // [rsp+58h] [rbp-18h]\n  __int64 v56; // [rsp+60h] [rbp-10h]\n  __int64 v57; // [rsp+68h] [rbp-8h]\n\n  v57 = a8;\n  v56 = a7;\n  v55 = a6;\n  v54 = a5;\n  v53 = a3;\n  v52 = a2;\n  v8 = a4;\n  *a4 = 0LL;\n  v51 = __readfsqword(0x28u);\n  v9 = __errno_location();\n  if ( !nptr )\n    goto LABEL_7;\n  v10 = *nptr;\n  if ( !*nptr )\n    goto LABEL_7;\n  v11 = __ctype_b_loc();\n  v12 = v11;\n  v13 = *v11;\n  v14 = nptr;\n  while ( v13[v10] & 0x2000 )\n    v10 = *++v14;\n  if ( v10 == 45 )\n    goto LABEL_7;\n  *v9 = 0;\n  endptr = 0LL;\n  v18 = __strtoul_internal(nptr, &endptr, 0, 0);\n  v19 = endptr;\n  v48 = v18;\n  v20 = *v9;\n  if ( endptr == nptr )\n  {\nLABEL_33:\n    if ( !v20 )\n    {\nLABEL_7:\n      v15 = 22;\n      v16 = -22;\n      goto LABEL_8;\n    }\nLABEL_13:\n    v16 = -v20;\n    goto LABEL_14;\n  }\n  if ( v20 && v18 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n    goto LABEL_13;\n  if ( !endptr || !*endptr )\n  {\n    v16 = 0;\n    *a4 = v18;\n    return v16;\n  }\n  v21 = 0;\n  v49 = 0LL;\n  while ( 1 )\n  {\n    v22 = v19[1];\n    if ( v22 == 105 )\n    {\n      if ( (v19[2] & 0xDF) == 66 && !v19[3] )\n      {\nLABEL_37:\n        v27 = 1024;\n        goto LABEL_38;\n      }\n      goto LABEL_23;\n    }\n    if ( (v22 & 0xDF) == 66 && !v19[2] )\n      break;\n    if ( !v22 )\n      goto LABEL_37;\nLABEL_23:\n    v23 = localeconv();\n    if ( !v23 )\n      goto LABEL_7;\n    if ( !v23->decimal_point )\n      goto LABEL_7;\n    s1 = v23->decimal_point;\n    v24 = strlen(v23->decimal_point);\n    if ( v49 )\n      goto LABEL_7;\n    if ( !*v19 )\n      goto LABEL_7;\n    v46 = v24;\n    if ( strncmp(s1, v19, v24) )\n      goto LABEL_7;\n    v25 = &v19[v46];\n    for ( i = v19[v46]; (_BYTE)i == 48; ++v21 )\n      i = *++v25;\n    if ( (*v12)[i] & 0x800 )\n    {\n      *v9 = 0;\n      v38 = v25;\n      endptr = 0LL;\n      v39 = __strtoul_internal(v25, &endptr, 0, 0);\n      v19 = endptr;\n      v49 = v39;\n      v20 = *v9;\n      if ( endptr == v38 )\n        goto LABEL_33;\n      if ( v20 )\n      {\n        if ( v39 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n          goto LABEL_13;\n        goto LABEL_62;\n      }\n      if ( v39 )\n      {\nLABEL_62:\n        if ( !endptr || !*endptr )\n          goto LABEL_7;\n      }\n    }\n    else\n    {\n      endptr = v25;\n      v19 = v25;\n    }\n  }\n  v27 = 1000;\nLABEL_38:\n  v28 = *v19;\n  v29 = strchr(\"KMGTPEZY\", v28);\n  if ( v29 )\n  {\n    v30 = (unsigned __int64)(v29 - \"KMGTPEZY\") + 1;\n    goto LABEL_40;\n  }\n  v45 = strchr(\"kmgtpezy\", v28);\n  if ( !v45 )\n    goto LABEL_7;\n  v30 = (unsigned __int64)(v45 - \"kmgtpezy\") + 1;\nLABEL_40:\n  if ( v30 )\n  {\n    if ( is_mul_ok(v27, v48) )\n    {\n      v31 = 0;\n      while ( 1 )\n      {\n        v48 *= v27;\n        if ( v30 - 1 == v31 )\n          break;\n        ++v31;\n        if ( !is_mul_ok(v27, v48) )\n          goto LABEL_77;\n      }\n      v16 = 0;\n    }\n    else\n    {\nLABEL_77:\n      v16 = -34;\n    }\n    if ( v49 )\n    {\n      v32 = v30 - 1;\n      v33 = 0;\n      v34 = 1LL;\n      do\n      {\n        v34 *= v27;\n        if ( v33 == v32 )\n          break;\n        ++v33;\n      }\n      while ( is_mul_ok(v27, v34) );\n      if ( v49 <= 0xA )\n      {\n        v36 = v49;\n        v35 = 10LL;\n      }\n      else\n      {\n        v35 = 10LL;\n        while ( 1 )\n        {\n          v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v49 >> 64) >> 3;\n          if ( v35 > 0x1999999999999999LL )\n            break;\n          v35 *= 10LL;\n          if ( v35 >= v49 )\n          {\n            v36 = v49;\n            break;\n          }\n        }\n      }\n      if ( v21 )\n      {\n        v37 = 0;\n        do\n        {\n          if ( v35 <= 0x1999999999999999LL )\n            v35 *= 10LL;\n          else\n            v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n          ++v37;\n        }\n        while ( v21 != v37 );\n      }\n      v40 = 1LL;\n      do\n      {\n        v41 = 10 * v40;\n        v42 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        v43 = v36 - 10 * v42;\n        v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        if ( v43 )\n        {\n          v44 = v35 / v40 / v43;\n          if ( v44 )\n            v48 += v34 / v44;\n        }\n        v40 = v41;\n      }\n      while ( v42 );\n    }\n    *v8 = v48;\nLABEL_14:\n    if ( (v16 & 0x80000000) != 0 )\n    {\n      v15 = -v16;\nLABEL_8:\n      *v9 = v15;\n    }\n  }\n  else\n  {\n    v16 = 0;\n    *a4 = v48;\n  }\n  return v16;\n}\n\n// write access to const memory has been detected, the output may be wrong!\n__int64 __usercall sub_8D30@<rax>(char *nptr@<rdi>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned __int64 *a4@<rsi>, __int64 a5@<r12>, __int64 a6@<r13>, __int64 a7@<r14>, __int64 a8@<r15>)\n{\n  unsigned __int64 *v8; // rbp\n  int *v9; // rbx\n  unsigned __int8 v10; // r14\n  const unsigned __int16 **v11; // rax\n  const unsigned __int16 **v12; // r13\n  const unsigned __int16 *v13; // rcx\n  char *v14; // rax\n  int v15; // eax\n  unsigned int v16; // ecx\n  unsigned __int64 v18; // rax\n  char *v19; // r14\n  int v20; // ecx\n  int v21; // er15\n  char v22; // al\n  struct lconv *v23; // rax\n  size_t v24; // rax\n  char *v25; // r8\n  __int64 i; // rax\n  signed int v27; // er13\n  int v28; // er14\n  char *v29; // rax\n  int v30; // edi\n  int v31; // ecx\n  int v32; // edi\n  int v33; // er8\n  unsigned __int64 v34; // r10\n  unsigned __int64 v35; // rdi\n  unsigned __int64 v36; // r8\n  int v37; // esi\n  char *v38; // ST08_8\n  unsigned __int64 v39; // rax\n  unsigned __int64 v40; // r9\n  signed __int64 v41; // r11\n  unsigned __int64 v42; // rsi\n  unsigned __int64 v43; // r13\n  unsigned __int64 v44; // r9\n  char *v45; // rax\n  size_t v46; // [rsp+0h] [rbp-70h]\n  char *s1; // [rsp+8h] [rbp-68h]\n  unsigned __int64 v48; // [rsp+10h] [rbp-60h]\n  unsigned __int64 v49; // [rsp+18h] [rbp-58h]\n  char *endptr; // [rsp+28h] [rbp-48h]\n  unsigned __int64 v51; // [rsp+30h] [rbp-40h]\n  __int64 v52; // [rsp+40h] [rbp-30h]\n  __int64 v53; // [rsp+48h] [rbp-28h]\n  __int64 v54; // [rsp+50h] [rbp-20h]\n  __int64 v55; // [rsp+58h] [rbp-18h]\n  __int64 v56; // [rsp+60h] [rbp-10h]\n  __int64 v57; // [rsp+68h] [rbp-8h]\n\n  v57 = a8;\n  v56 = a7;\n  v55 = a6;\n  v54 = a5;\n  v53 = a3;\n  v52 = a2;\n  v8 = a4;\n  *a4 = 0LL;\n  v51 = __readfsqword(0x28u);\n  v9 = __errno_location();\n  if ( !nptr )\n    goto LABEL_7;\n  v10 = *nptr;\n  if ( !*nptr )\n    goto LABEL_7;\n  v11 = __ctype_b_loc();\n  v12 = v11;\n  v13 = *v11;\n  v14 = nptr;\n  while ( v13[v10] & 0x2000 )\n    v10 = *++v14;\n  if ( v10 == 45 )\n    goto LABEL_7;\n  *v9 = 0;\n  endptr = 0LL;\n  v18 = __strtoul_internal(nptr, &endptr, 0, 0);\n  v19 = endptr;\n  v48 = v18;\n  v20 = *v9;\n  if ( endptr == nptr )\n  {\nLABEL_33:\n    if ( !v20 )\n    {\nLABEL_7:\n      v15 = 22;\n      v16 = -22;\n      goto LABEL_8;\n    }\nLABEL_13:\n    v16 = -v20;\n    goto LABEL_14;\n  }\n  if ( v20 && v18 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n    goto LABEL_13;\n  if ( !endptr || !*endptr )\n  {\n    v16 = 0;\n    *a4 = v18;\n    return v16;\n  }\n  v21 = 0;\n  v49 = 0LL;\n  while ( 1 )\n  {\n    v22 = v19[1];\n    if ( v22 == 105 )\n    {\n      if ( (v19[2] & 0xDF) == 66 && !v19[3] )\n      {\nLABEL_37:\n        v27 = 1024;\n        goto LABEL_38;\n      }\n      goto LABEL_23;\n    }\n    if ( (v22 & 0xDF) == 66 && !v19[2] )\n      break;\n    if ( !v22 )\n      goto LABEL_37;\nLABEL_23:\n    v23 = localeconv();\n    if ( !v23 )\n      goto LABEL_7;\n    if ( !v23->decimal_point )\n      goto LABEL_7;\n    s1 = v23->decimal_point;\n    v24 = strlen(v23->decimal_point);\n    if ( v49 )\n      goto LABEL_7;\n    if ( !*v19 )\n      goto LABEL_7;\n    v46 = v24;\n    if ( strncmp(s1, v19, v24) )\n      goto LABEL_7;\n    v25 = &v19[v46];\n    for ( i = v19[v46]; (_BYTE)i == 48; ++v21 )\n      i = *++v25;\n    if ( (*v12)[i] & 0x800 )\n    {\n      *v9 = 0;\n      v38 = v25;\n      endptr = 0LL;\n      v39 = __strtoul_internal(v25, &endptr, 0, 0);\n      v19 = endptr;\n      v49 = v39;\n      v20 = *v9;\n      if ( endptr == v38 )\n        goto LABEL_33;\n      if ( v20 )\n      {\n        if ( v39 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n          goto LABEL_13;\n        goto LABEL_62;\n      }\n      if ( v39 )\n      {\nLABEL_62:\n        if ( !endptr || !*endptr )\n          goto LABEL_7;\n      }\n    }\n    else\n    {\n      endptr = v25;\n      v19 = v25;\n    }\n  }\n  v27 = 1000;\nLABEL_38:\n  v28 = *v19;\n  v29 = strchr(\"KMGTPEZY\", v28);\n  if ( v29 )\n  {\n    v30 = (unsigned __int64)(v29 - \"KMGTPEZY\") + 1;\n    goto LABEL_40;\n  }\n  v45 = strchr(\"kmgtpezy\", v28);\n  if ( !v45 )\n    goto LABEL_7;\n  v30 = (unsigned __int64)(v45 - \"kmgtpezy\") + 1;\nLABEL_40:\n  if ( v30 )\n  {\n    if ( is_mul_ok(v27, v48) )\n    {\n      v31 = 0;\n      while ( 1 )\n      {\n        v48 *= v27;\n        if ( v30 - 1 == v31 )\n          break;\n        ++v31;\n        if ( !is_mul_ok(v27, v48) )\n          goto LABEL_77;\n      }\n      v16 = 0;\n    }\n    else\n    {\nLABEL_77:\n      v16 = -34;\n    }\n    if ( v49 )\n    {\n      v32 = v30 - 1;\n      v33 = 0;\n      v34 = 1LL;\n      do\n      {\n        v34 *= v27;\n        if ( v33 == v32 )\n          break;\n        ++v33;\n      }\n      while ( is_mul_ok(v27, v34) );\n      if ( v49 <= 0xA )\n      {\n        v36 = v49;\n        v35 = 10LL;\n      }\n      else\n      {\n        v35 = 10LL;\n        while ( 1 )\n        {\n          v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v49 >> 64) >> 3;\n          if ( v35 > 0x1999999999999999LL )\n            break;\n          v35 *= 10LL;\n          if ( v35 >= v49 )\n          {\n            v36 = v49;\n            break;\n          }\n        }\n      }\n      if ( v21 )\n      {\n        v37 = 0;\n        do\n        {\n          if ( v35 <= 0x1999999999999999LL )\n            v35 *= 10LL;\n          else\n            v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n          ++v37;\n        }\n        while ( v21 != v37 );\n      }\n      v40 = 1LL;\n      do\n      {\n        v41 = 10 * v40;\n        v42 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        v43 = v36 - 10 * v42;\n        v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        if ( v43 )\n        {\n          v44 = v35 / v40 / v43;\n          if ( v44 )\n            v48 += v34 / v44;\n        }\n        v40 = v41;\n      }\n      while ( v42 );\n    }\n    *v8 = v48;\nLABEL_14:\n    if ( (v16 & 0x80000000) != 0 )\n    {\n      v15 = -v16;\nLABEL_8:\n      *v9 = v15;\n    }\n  }\n  else\n  {\n    v16 = 0;\n    *a4 = v48;\n  }\n  return v16;\n}\n\n// write access to const memory has been detected, the output may be wrong!\n__int64 __usercall sub_8D30@<rax>(char *nptr@<rdi>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned __int64 *a4@<rsi>, __int64 a5@<r12>, __int64 a6@<r13>, __int64 a7@<r14>, __int64 a8@<r15>)\n{\n  unsigned __int64 *v8; // rbp\n  int *v9; // rbx\n  unsigned __int8 v10; // r14\n  const unsigned __int16 **v11; // rax\n  const unsigned __int16 **v12; // r13\n  const unsigned __int16 *v13; // rcx\n  char *v14; // rax\n  int v15; // eax\n  unsigned int v16; // ecx\n  unsigned __int64 v18; // rax\n  char *v19; // r14\n  int v20; // ecx\n  int v21; // er15\n  char v22; // al\n  struct lconv *v23; // rax\n  size_t v24; // rax\n  char *v25; // r8\n  __int64 i; // rax\n  signed int v27; // er13\n  int v28; // er14\n  char *v29; // rax\n  int v30; // edi\n  int v31; // ecx\n  int v32; // edi\n  int v33; // er8\n  unsigned __int64 v34; // r10\n  unsigned __int64 v35; // rdi\n  unsigned __int64 v36; // r8\n  int v37; // esi\n  char *v38; // ST08_8\n  unsigned __int64 v39; // rax\n  unsigned __int64 v40; // r9\n  signed __int64 v41; // r11\n  unsigned __int64 v42; // rsi\n  unsigned __int64 v43; // r13\n  unsigned __int64 v44; // r9\n  char *v45; // rax\n  size_t v46; // [rsp+0h] [rbp-70h]\n  char *s1; // [rsp+8h] [rbp-68h]\n  unsigned __int64 v48; // [rsp+10h] [rbp-60h]\n  unsigned __int64 v49; // [rsp+18h] [rbp-58h]\n  char *endptr; // [rsp+28h] [rbp-48h]\n  unsigned __int64 v51; // [rsp+30h] [rbp-40h]\n  __int64 v52; // [rsp+40h] [rbp-30h]\n  __int64 v53; // [rsp+48h] [rbp-28h]\n  __int64 v54; // [rsp+50h] [rbp-20h]\n  __int64 v55; // [rsp+58h] [rbp-18h]\n  __int64 v56; // [rsp+60h] [rbp-10h]\n  __int64 v57; // [rsp+68h] [rbp-8h]\n\n  v57 = a8;\n  v56 = a7;\n  v55 = a6;\n  v54 = a5;\n  v53 = a3;\n  v52 = a2;\n  v8 = a4;\n  *a4 = 0LL;\n  v51 = __readfsqword(0x28u);\n  v9 = __errno_location();\n  if ( !nptr )\n    goto LABEL_7;\n  v10 = *nptr;\n  if ( !*nptr )\n    goto LABEL_7;\n  v11 = __ctype_b_loc();\n  v12 = v11;\n  v13 = *v11;\n  v14 = nptr;\n  while ( v13[v10] & 0x2000 )\n    v10 = *++v14;\n  if ( v10 == 45 )\n    goto LABEL_7;\n  *v9 = 0;\n  endptr = 0LL;\n  v18 = __strtoul_internal(nptr, &endptr, 0, 0);\n  v19 = endptr;\n  v48 = v18;\n  v20 = *v9;\n  if ( endptr == nptr )\n  {\nLABEL_33:\n    if ( !v20 )\n    {\nLABEL_7:\n      v15 = 22;\n      v16 = -22;\n      goto LABEL_8;\n    }\nLABEL_13:\n    v16 = -v20;\n    goto LABEL_14;\n  }\n  if ( v20 && v18 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n    goto LABEL_13;\n  if ( !endptr || !*endptr )\n  {\n    v16 = 0;\n    *a4 = v18;\n    return v16;\n  }\n  v21 = 0;\n  v49 = 0LL;\n  while ( 1 )\n  {\n    v22 = v19[1];\n    if ( v22 == 105 )\n    {\n      if ( (v19[2] & 0xDF) == 66 && !v19[3] )\n      {\nLABEL_37:\n        v27 = 1024;\n        goto LABEL_38;\n      }\n      goto LABEL_23;\n    }\n    if ( (v22 & 0xDF) == 66 && !v19[2] )\n      break;\n    if ( !v22 )\n      goto LABEL_37;\nLABEL_23:\n    v23 = localeconv();\n    if ( !v23 )\n      goto LABEL_7;\n    if ( !v23->decimal_point )\n      goto LABEL_7;\n    s1 = v23->decimal_point;\n    v24 = strlen(v23->decimal_point);\n    if ( v49 )\n      goto LABEL_7;\n    if ( !*v19 )\n      goto LABEL_7;\n    v46 = v24;\n    if ( strncmp(s1, v19, v24) )\n      goto LABEL_7;\n    v25 = &v19[v46];\n    for ( i = v19[v46]; (_BYTE)i == 48; ++v21 )\n      i = *++v25;\n    if ( (*v12)[i] & 0x800 )\n    {\n      *v9 = 0;\n      v38 = v25;\n      endptr = 0LL;\n      v39 = __strtoul_internal(v25, &endptr, 0, 0);\n      v19 = endptr;\n      v49 = v39;\n      v20 = *v9;\n      if ( endptr == v38 )\n        goto LABEL_33;\n      if ( v20 )\n      {\n        if ( v39 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n          goto LABEL_13;\n        goto LABEL_62;\n      }\n      if ( v39 )\n      {\nLABEL_62:\n        if ( !endptr || !*endptr )\n          goto LABEL_7;\n      }\n    }\n    else\n    {\n      endptr = v25;\n      v19 = v25;\n    }\n  }\n  v27 = 1000;\nLABEL_38:\n  v28 = *v19;\n  v29 = strchr(\"KMGTPEZY\", v28);\n  if ( v29 )\n  {\n    v30 = (unsigned __int64)(v29 - \"KMGTPEZY\") + 1;\n    goto LABEL_40;\n  }\n  v45 = strchr(\"kmgtpezy\", v28);\n  if ( !v45 )\n    goto LABEL_7;\n  v30 = (unsigned __int64)(v45 - \"kmgtpezy\") + 1;\nLABEL_40:\n  if ( v30 )\n  {\n    if ( is_mul_ok(v27, v48) )\n    {\n      v31 = 0;\n      while ( 1 )\n      {\n        v48 *= v27;\n        if ( v30 - 1 == v31 )\n          break;\n        ++v31;\n        if ( !is_mul_ok(v27, v48) )\n          goto LABEL_77;\n      }\n      v16 = 0;\n    }\n    else\n    {\nLABEL_77:\n      v16 = -34;\n    }\n    if ( v49 )\n    {\n      v32 = v30 - 1;\n      v33 = 0;\n      v34 = 1LL;\n      do\n      {\n        v34 *= v27;\n        if ( v33 == v32 )\n          break;\n        ++v33;\n      }\n      while ( is_mul_ok(v27, v34) );\n      if ( v49 <= 0xA )\n      {\n        v36 = v49;\n        v35 = 10LL;\n      }\n      else\n      {\n        v35 = 10LL;\n        while ( 1 )\n        {\n          v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v49 >> 64) >> 3;\n          if ( v35 > 0x1999999999999999LL )\n            break;\n          v35 *= 10LL;\n          if ( v35 >= v49 )\n          {\n            v36 = v49;\n            break;\n          }\n        }\n      }\n      if ( v21 )\n      {\n        v37 = 0;\n        do\n        {\n          if ( v35 <= 0x1999999999999999LL )\n            v35 *= 10LL;\n          else\n            v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n          ++v37;\n        }\n        while ( v21 != v37 );\n      }\n      v40 = 1LL;\n      do\n      {\n        v41 = 10 * v40;\n        v42 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        v43 = v36 - 10 * v42;\n        v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        if ( v43 )\n        {\n          v44 = v35 / v40 / v43;\n          if ( v44 )\n            v48 += v34 / v44;\n        }\n        v40 = v41;\n      }\n      while ( v42 );\n    }\n    *v8 = v48;\nLABEL_14:\n    if ( (v16 & 0x80000000) != 0 )\n    {\n      v15 = -v16;\nLABEL_8:\n      *v9 = v15;\n    }\n  }\n  else\n  {\n    v16 = 0;\n    *a4 = v48;\n  }\n  return v16;\n}\n\n// write access to const memory has been detected, the output may be wrong!\n__int64 __usercall sub_8D30@<rax>(char *nptr@<rdi>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned __int64 *a4@<rsi>, __int64 a5@<r12>, __int64 a6@<r13>, __int64 a7@<r14>, __int64 a8@<r15>)\n{\n  unsigned __int64 *v8; // rbp\n  int *v9; // rbx\n  unsigned __int8 v10; // r14\n  const unsigned __int16 **v11; // rax\n  const unsigned __int16 **v12; // r13\n  const unsigned __int16 *v13; // rcx\n  char *v14; // rax\n  int v15; // eax\n  unsigned int v16; // ecx\n  unsigned __int64 v18; // rax\n  char *v19; // r14\n  int v20; // ecx\n  int v21; // er15\n  char v22; // al\n  struct lconv *v23; // rax\n  size_t v24; // rax\n  char *v25; // r8\n  __int64 i; // rax\n  signed int v27; // er13\n  int v28; // er14\n  char *v29; // rax\n  int v30; // edi\n  int v31; // ecx\n  int v32; // edi\n  int v33; // er8\n  unsigned __int64 v34; // r10\n  unsigned __int64 v35; // rdi\n  unsigned __int64 v36; // r8\n  int v37; // esi\n  char *v38; // ST08_8\n  unsigned __int64 v39; // rax\n  unsigned __int64 v40; // r9\n  signed __int64 v41; // r11\n  unsigned __int64 v42; // rsi\n  unsigned __int64 v43; // r13\n  unsigned __int64 v44; // r9\n  char *v45; // rax\n  size_t v46; // [rsp+0h] [rbp-70h]\n  char *s1; // [rsp+8h] [rbp-68h]\n  unsigned __int64 v48; // [rsp+10h] [rbp-60h]\n  unsigned __int64 v49; // [rsp+18h] [rbp-58h]\n  char *endptr; // [rsp+28h] [rbp-48h]\n  unsigned __int64 v51; // [rsp+30h] [rbp-40h]\n  __int64 v52; // [rsp+40h] [rbp-30h]\n  __int64 v53; // [rsp+48h] [rbp-28h]\n  __int64 v54; // [rsp+50h] [rbp-20h]\n  __int64 v55; // [rsp+58h] [rbp-18h]\n  __int64 v56; // [rsp+60h] [rbp-10h]\n  __int64 v57; // [rsp+68h] [rbp-8h]\n\n  v57 = a8;\n  v56 = a7;\n  v55 = a6;\n  v54 = a5;\n  v53 = a3;\n  v52 = a2;\n  v8 = a4;\n  *a4 = 0LL;\n  v51 = __readfsqword(0x28u);\n  v9 = __errno_location();\n  if ( !nptr )\n    goto LABEL_7;\n  v10 = *nptr;\n  if ( !*nptr )\n    goto LABEL_7;\n  v11 = __ctype_b_loc();\n  v12 = v11;\n  v13 = *v11;\n  v14 = nptr;\n  while ( v13[v10] & 0x2000 )\n    v10 = *++v14;\n  if ( v10 == 45 )\n    goto LABEL_7;\n  *v9 = 0;\n  endptr = 0LL;\n  v18 = __strtoul_internal(nptr, &endptr, 0, 0);\n  v19 = endptr;\n  v48 = v18;\n  v20 = *v9;\n  if ( endptr == nptr )\n  {\nLABEL_33:\n    if ( !v20 )\n    {\nLABEL_7:\n      v15 = 22;\n      v16 = -22;\n      goto LABEL_8;\n    }\nLABEL_13:\n    v16 = -v20;\n    goto LABEL_14;\n  }\n  if ( v20 && v18 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n    goto LABEL_13;\n  if ( !endptr || !*endptr )\n  {\n    v16 = 0;\n    *a4 = v18;\n    return v16;\n  }\n  v21 = 0;\n  v49 = 0LL;\n  while ( 1 )\n  {\n    v22 = v19[1];\n    if ( v22 == 105 )\n    {\n      if ( (v19[2] & 0xDF) == 66 && !v19[3] )\n      {\nLABEL_37:\n        v27 = 1024;\n        goto LABEL_38;\n      }\n      goto LABEL_23;\n    }\n    if ( (v22 & 0xDF) == 66 && !v19[2] )\n      break;\n    if ( !v22 )\n      goto LABEL_37;\nLABEL_23:\n    v23 = localeconv();\n    if ( !v23 )\n      goto LABEL_7;\n    if ( !v23->decimal_point )\n      goto LABEL_7;\n    s1 = v23->decimal_point;\n    v24 = strlen(v23->decimal_point);\n    if ( v49 )\n      goto LABEL_7;\n    if ( !*v19 )\n      goto LABEL_7;\n    v46 = v24;\n    if ( strncmp(s1, v19, v24) )\n      goto LABEL_7;\n    v25 = &v19[v46];\n    for ( i = v19[v46]; (_BYTE)i == 48; ++v21 )\n      i = *++v25;\n    if ( (*v12)[i] & 0x800 )\n    {\n      *v9 = 0;\n      v38 = v25;\n      endptr = 0LL;\n      v39 = __strtoul_internal(v25, &endptr, 0, 0);\n      v19 = endptr;\n      v49 = v39;\n      v20 = *v9;\n      if ( endptr == v38 )\n        goto LABEL_33;\n      if ( v20 )\n      {\n        if ( v39 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n          goto LABEL_13;\n        goto LABEL_62;\n      }\n      if ( v39 )\n      {\nLABEL_62:\n        if ( !endptr || !*endptr )\n          goto LABEL_7;\n      }\n    }\n    else\n    {\n      endptr = v25;\n      v19 = v25;\n    }\n  }\n  v27 = 1000;\nLABEL_38:\n  v28 = *v19;\n  v29 = strchr(\"KMGTPEZY\", v28);\n  if ( v29 )\n  {\n    v30 = (unsigned __int64)(v29 - \"KMGTPEZY\") + 1;\n    goto LABEL_40;\n  }\n  v45 = strchr(\"kmgtpezy\", v28);\n  if ( !v45 )\n    goto LABEL_7;\n  v30 = (unsigned __int64)(v45 - \"kmgtpezy\") + 1;\nLABEL_40:\n  if ( v30 )\n  {\n    if ( is_mul_ok(v27, v48) )\n    {\n      v31 = 0;\n      while ( 1 )\n      {\n        v48 *= v27;\n        if ( v30 - 1 == v31 )\n          break;\n        ++v31;\n        if ( !is_mul_ok(v27, v48) )\n          goto LABEL_77;\n      }\n      v16 = 0;\n    }\n    else\n    {\nLABEL_77:\n      v16 = -34;\n    }\n    if ( v49 )\n    {\n      v32 = v30 - 1;\n      v33 = 0;\n      v34 = 1LL;\n      do\n      {\n        v34 *= v27;\n        if ( v33 == v32 )\n          break;\n        ++v33;\n      }\n      while ( is_mul_ok(v27, v34) );\n      if ( v49 <= 0xA )\n      {\n        v36 = v49;\n        v35 = 10LL;\n      }\n      else\n      {\n        v35 = 10LL;\n        while ( 1 )\n        {\n          v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v49 >> 64) >> 3;\n          if ( v35 > 0x1999999999999999LL )\n            break;\n          v35 *= 10LL;\n          if ( v35 >= v49 )\n          {\n            v36 = v49;\n            break;\n          }\n        }\n      }\n      if ( v21 )\n      {\n        v37 = 0;\n        do\n        {\n          if ( v35 <= 0x1999999999999999LL )\n            v35 *= 10LL;\n          else\n            v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n          ++v37;\n        }\n        while ( v21 != v37 );\n      }\n      v40 = 1LL;\n      do\n      {\n        v41 = 10 * v40;\n        v42 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        v43 = v36 - 10 * v42;\n        v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        if ( v43 )\n        {\n          v44 = v35 / v40 / v43;\n          if ( v44 )\n            v48 += v34 / v44;\n        }\n        v40 = v41;\n      }\n      while ( v42 );\n    }\n    *v8 = v48;\nLABEL_14:\n    if ( (v16 & 0x80000000) != 0 )\n    {\n      v15 = -v16;\nLABEL_8:\n      *v9 = v15;\n    }\n  }\n  else\n  {\n    v16 = 0;\n    *a4 = v48;\n  }\n  return v16;\n}\n\n// write access to const memory has been detected, the output may be wrong!\n__int64 __usercall sub_8D30@<rax>(char *nptr@<rdi>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned __int64 *a4@<rsi>, __int64 a5@<r12>, __int64 a6@<r13>, __int64 a7@<r14>, __int64 a8@<r15>)\n{\n  unsigned __int64 *v8; // rbp\n  int *v9; // rbx\n  unsigned __int8 v10; // r14\n  const unsigned __int16 **v11; // rax\n  const unsigned __int16 **v12; // r13\n  const unsigned __int16 *v13; // rcx\n  char *v14; // rax\n  int v15; // eax\n  unsigned int v16; // ecx\n  unsigned __int64 v18; // rax\n  char *v19; // r14\n  int v20; // ecx\n  int v21; // er15\n  char v22; // al\n  struct lconv *v23; // rax\n  size_t v24; // rax\n  char *v25; // r8\n  __int64 i; // rax\n  signed int v27; // er13\n  int v28; // er14\n  char *v29; // rax\n  int v30; // edi\n  int v31; // ecx\n  int v32; // edi\n  int v33; // er8\n  unsigned __int64 v34; // r10\n  unsigned __int64 v35; // rdi\n  unsigned __int64 v36; // r8\n  int v37; // esi\n  char *v38; // ST08_8\n  unsigned __int64 v39; // rax\n  unsigned __int64 v40; // r9\n  signed __int64 v41; // r11\n  unsigned __int64 v42; // rsi\n  unsigned __int64 v43; // r13\n  unsigned __int64 v44; // r9\n  char *v45; // rax\n  size_t v46; // [rsp+0h] [rbp-70h]\n  char *s1; // [rsp+8h] [rbp-68h]\n  unsigned __int64 v48; // [rsp+10h] [rbp-60h]\n  unsigned __int64 v49; // [rsp+18h] [rbp-58h]\n  char *endptr; // [rsp+28h] [rbp-48h]\n  unsigned __int64 v51; // [rsp+30h] [rbp-40h]\n  __int64 v52; // [rsp+40h] [rbp-30h]\n  __int64 v53; // [rsp+48h] [rbp-28h]\n  __int64 v54; // [rsp+50h] [rbp-20h]\n  __int64 v55; // [rsp+58h] [rbp-18h]\n  __int64 v56; // [rsp+60h] [rbp-10h]\n  __int64 v57; // [rsp+68h] [rbp-8h]\n\n  v57 = a8;\n  v56 = a7;\n  v55 = a6;\n  v54 = a5;\n  v53 = a3;\n  v52 = a2;\n  v8 = a4;\n  *a4 = 0LL;\n  v51 = __readfsqword(0x28u);\n  v9 = __errno_location();\n  if ( !nptr )\n    goto LABEL_7;\n  v10 = *nptr;\n  if ( !*nptr )\n    goto LABEL_7;\n  v11 = __ctype_b_loc();\n  v12 = v11;\n  v13 = *v11;\n  v14 = nptr;\n  while ( v13[v10] & 0x2000 )\n    v10 = *++v14;\n  if ( v10 == 45 )\n    goto LABEL_7;\n  *v9 = 0;\n  endptr = 0LL;\n  v18 = __strtoul_internal(nptr, &endptr, 0, 0);\n  v19 = endptr;\n  v48 = v18;\n  v20 = *v9;\n  if ( endptr == nptr )\n  {\nLABEL_33:\n    if ( !v20 )\n    {\nLABEL_7:\n      v15 = 22;\n      v16 = -22;\n      goto LABEL_8;\n    }\nLABEL_13:\n    v16 = -v20;\n    goto LABEL_14;\n  }\n  if ( v20 && v18 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n    goto LABEL_13;\n  if ( !endptr || !*endptr )\n  {\n    v16 = 0;\n    *a4 = v18;\n    return v16;\n  }\n  v21 = 0;\n  v49 = 0LL;\n  while ( 1 )\n  {\n    v22 = v19[1];\n    if ( v22 == 105 )\n    {\n      if ( (v19[2] & 0xDF) == 66 && !v19[3] )\n      {\nLABEL_37:\n        v27 = 1024;\n        goto LABEL_38;\n      }\n      goto LABEL_23;\n    }\n    if ( (v22 & 0xDF) == 66 && !v19[2] )\n      break;\n    if ( !v22 )\n      goto LABEL_37;\nLABEL_23:\n    v23 = localeconv();\n    if ( !v23 )\n      goto LABEL_7;\n    if ( !v23->decimal_point )\n      goto LABEL_7;\n    s1 = v23->decimal_point;\n    v24 = strlen(v23->decimal_point);\n    if ( v49 )\n      goto LABEL_7;\n    if ( !*v19 )\n      goto LABEL_7;\n    v46 = v24;\n    if ( strncmp(s1, v19, v24) )\n      goto LABEL_7;\n    v25 = &v19[v46];\n    for ( i = v19[v46]; (_BYTE)i == 48; ++v21 )\n      i = *++v25;\n    if ( (*v12)[i] & 0x800 )\n    {\n      *v9 = 0;\n      v38 = v25;\n      endptr = 0LL;\n      v39 = __strtoul_internal(v25, &endptr, 0, 0);\n      v19 = endptr;\n      v49 = v39;\n      v20 = *v9;\n      if ( endptr == v38 )\n        goto LABEL_33;\n      if ( v20 )\n      {\n        if ( v39 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n          goto LABEL_13;\n        goto LABEL_62;\n      }\n      if ( v39 )\n      {\nLABEL_62:\n        if ( !endptr || !*endptr )\n          goto LABEL_7;\n      }\n    }\n    else\n    {\n      endptr = v25;\n      v19 = v25;\n    }\n  }\n  v27 = 1000;\nLABEL_38:\n  v28 = *v19;\n  v29 = strchr(\"KMGTPEZY\", v28);\n  if ( v29 )\n  {\n    v30 = (unsigned __int64)(v29 - \"KMGTPEZY\") + 1;\n    goto LABEL_40;\n  }\n  v45 = strchr(\"kmgtpezy\", v28);\n  if ( !v45 )\n    goto LABEL_7;\n  v30 = (unsigned __int64)(v45 - \"kmgtpezy\") + 1;\nLABEL_40:\n  if ( v30 )\n  {\n    if ( is_mul_ok(v27, v48) )\n    {\n      v31 = 0;\n      while ( 1 )\n      {\n        v48 *= v27;\n        if ( v30 - 1 == v31 )\n          break;\n        ++v31;\n        if ( !is_mul_ok(v27, v48) )\n          goto LABEL_77;\n      }\n      v16 = 0;\n    }\n    else\n    {\nLABEL_77:\n      v16 = -34;\n    }\n    if ( v49 )\n    {\n      v32 = v30 - 1;\n      v33 = 0;\n      v34 = 1LL;\n      do\n      {\n        v34 *= v27;\n        if ( v33 == v32 )\n          break;\n        ++v33;\n      }\n      while ( is_mul_ok(v27, v34) );\n      if ( v49 <= 0xA )\n      {\n        v36 = v49;\n        v35 = 10LL;\n      }\n      else\n      {\n        v35 = 10LL;\n        while ( 1 )\n        {\n          v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v49 >> 64) >> 3;\n          if ( v35 > 0x1999999999999999LL )\n            break;\n          v35 *= 10LL;\n          if ( v35 >= v49 )\n          {\n            v36 = v49;\n            break;\n          }\n        }\n      }\n      if ( v21 )\n      {\n        v37 = 0;\n        do\n        {\n          if ( v35 <= 0x1999999999999999LL )\n            v35 *= 10LL;\n          else\n            v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n          ++v37;\n        }\n        while ( v21 != v37 );\n      }\n      v40 = 1LL;\n      do\n      {\n        v41 = 10 * v40;\n        v42 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        v43 = v36 - 10 * v42;\n        v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        if ( v43 )\n        {\n          v44 = v35 / v40 / v43;\n          if ( v44 )\n            v48 += v34 / v44;\n        }\n        v40 = v41;\n      }\n      while ( v42 );\n    }\n    *v8 = v48;\nLABEL_14:\n    if ( (v16 & 0x80000000) != 0 )\n    {\n      v15 = -v16;\nLABEL_8:\n      *v9 = v15;\n    }\n  }\n  else\n  {\n    v16 = 0;\n    *a4 = v48;\n  }\n  return v16;\n}\n", 
            "funcStartAddr": "0x8c38L", 
            "funcEndAddr": "0x8d29L", 
            "funcName": "sub_8D30"
        }, 
        {
            "decompiledFuncCode": "// write access to const memory has been detected, the output may be wrong!\n__int64 __usercall sub_8D30@<rax>(char *nptr@<rdi>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned __int64 *a4@<rsi>, __int64 a5@<r12>, __int64 a6@<r13>, __int64 a7@<r14>, __int64 a8@<r15>)\n{\n  unsigned __int64 *v8; // rbp\n  int *v9; // rbx\n  unsigned __int8 v10; // r14\n  const unsigned __int16 **v11; // rax\n  const unsigned __int16 **v12; // r13\n  const unsigned __int16 *v13; // rcx\n  char *v14; // rax\n  int v15; // eax\n  unsigned int v16; // ecx\n  unsigned __int64 v18; // rax\n  char *v19; // r14\n  int v20; // ecx\n  int v21; // er15\n  char v22; // al\n  struct lconv *v23; // rax\n  size_t v24; // rax\n  char *v25; // r8\n  __int64 i; // rax\n  signed int v27; // er13\n  int v28; // er14\n  char *v29; // rax\n  int v30; // edi\n  int v31; // ecx\n  int v32; // edi\n  int v33; // er8\n  unsigned __int64 v34; // r10\n  unsigned __int64 v35; // rdi\n  unsigned __int64 v36; // r8\n  int v37; // esi\n  char *v38; // ST08_8\n  unsigned __int64 v39; // rax\n  unsigned __int64 v40; // r9\n  signed __int64 v41; // r11\n  unsigned __int64 v42; // rsi\n  unsigned __int64 v43; // r13\n  unsigned __int64 v44; // r9\n  char *v45; // rax\n  size_t v46; // [rsp+0h] [rbp-70h]\n  char *s1; // [rsp+8h] [rbp-68h]\n  unsigned __int64 v48; // [rsp+10h] [rbp-60h]\n  unsigned __int64 v49; // [rsp+18h] [rbp-58h]\n  char *endptr; // [rsp+28h] [rbp-48h]\n  unsigned __int64 v51; // [rsp+30h] [rbp-40h]\n  __int64 v52; // [rsp+40h] [rbp-30h]\n  __int64 v53; // [rsp+48h] [rbp-28h]\n  __int64 v54; // [rsp+50h] [rbp-20h]\n  __int64 v55; // [rsp+58h] [rbp-18h]\n  __int64 v56; // [rsp+60h] [rbp-10h]\n  __int64 v57; // [rsp+68h] [rbp-8h]\n\n  v57 = a8;\n  v56 = a7;\n  v55 = a6;\n  v54 = a5;\n  v53 = a3;\n  v52 = a2;\n  v8 = a4;\n  *a4 = 0LL;\n  v51 = __readfsqword(0x28u);\n  v9 = __errno_location();\n  if ( !nptr )\n    goto LABEL_7;\n  v10 = *nptr;\n  if ( !*nptr )\n    goto LABEL_7;\n  v11 = __ctype_b_loc();\n  v12 = v11;\n  v13 = *v11;\n  v14 = nptr;\n  while ( v13[v10] & 0x2000 )\n    v10 = *++v14;\n  if ( v10 == 45 )\n    goto LABEL_7;\n  *v9 = 0;\n  endptr = 0LL;\n  v18 = __strtoul_internal(nptr, &endptr, 0, 0);\n  v19 = endptr;\n  v48 = v18;\n  v20 = *v9;\n  if ( endptr == nptr )\n  {\nLABEL_33:\n    if ( !v20 )\n    {\nLABEL_7:\n      v15 = 22;\n      v16 = -22;\n      goto LABEL_8;\n    }\nLABEL_13:\n    v16 = -v20;\n    goto LABEL_14;\n  }\n  if ( v20 && v18 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n    goto LABEL_13;\n  if ( !endptr || !*endptr )\n  {\n    v16 = 0;\n    *a4 = v18;\n    return v16;\n  }\n  v21 = 0;\n  v49 = 0LL;\n  while ( 1 )\n  {\n    v22 = v19[1];\n    if ( v22 == 105 )\n    {\n      if ( (v19[2] & 0xDF) == 66 && !v19[3] )\n      {\nLABEL_37:\n        v27 = 1024;\n        goto LABEL_38;\n      }\n      goto LABEL_23;\n    }\n    if ( (v22 & 0xDF) == 66 && !v19[2] )\n      break;\n    if ( !v22 )\n      goto LABEL_37;\nLABEL_23:\n    v23 = localeconv();\n    if ( !v23 )\n      goto LABEL_7;\n    if ( !v23->decimal_point )\n      goto LABEL_7;\n    s1 = v23->decimal_point;\n    v24 = strlen(v23->decimal_point);\n    if ( v49 )\n      goto LABEL_7;\n    if ( !*v19 )\n      goto LABEL_7;\n    v46 = v24;\n    if ( strncmp(s1, v19, v24) )\n      goto LABEL_7;\n    v25 = &v19[v46];\n    for ( i = v19[v46]; (_BYTE)i == 48; ++v21 )\n      i = *++v25;\n    if ( (*v12)[i] & 0x800 )\n    {\n      *v9 = 0;\n      v38 = v25;\n      endptr = 0LL;\n      v39 = __strtoul_internal(v25, &endptr, 0, 0);\n      v19 = endptr;\n      v49 = v39;\n      v20 = *v9;\n      if ( endptr == v38 )\n        goto LABEL_33;\n      if ( v20 )\n      {\n        if ( v39 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n          goto LABEL_13;\n        goto LABEL_62;\n      }\n      if ( v39 )\n      {\nLABEL_62:\n        if ( !endptr || !*endptr )\n          goto LABEL_7;\n      }\n    }\n    else\n    {\n      endptr = v25;\n      v19 = v25;\n    }\n  }\n  v27 = 1000;\nLABEL_38:\n  v28 = *v19;\n  v29 = strchr(\"KMGTPEZY\", v28);\n  if ( v29 )\n  {\n    v30 = (unsigned __int64)(v29 - \"KMGTPEZY\") + 1;\n    goto LABEL_40;\n  }\n  v45 = strchr(\"kmgtpezy\", v28);\n  if ( !v45 )\n    goto LABEL_7;\n  v30 = (unsigned __int64)(v45 - \"kmgtpezy\") + 1;\nLABEL_40:\n  if ( v30 )\n  {\n    if ( is_mul_ok(v27, v48) )\n    {\n      v31 = 0;\n      while ( 1 )\n      {\n        v48 *= v27;\n        if ( v30 - 1 == v31 )\n          break;\n        ++v31;\n        if ( !is_mul_ok(v27, v48) )\n          goto LABEL_77;\n      }\n      v16 = 0;\n    }\n    else\n    {\nLABEL_77:\n      v16 = -34;\n    }\n    if ( v49 )\n    {\n      v32 = v30 - 1;\n      v33 = 0;\n      v34 = 1LL;\n      do\n      {\n        v34 *= v27;\n        if ( v33 == v32 )\n          break;\n        ++v33;\n      }\n      while ( is_mul_ok(v27, v34) );\n      if ( v49 <= 0xA )\n      {\n        v36 = v49;\n        v35 = 10LL;\n      }\n      else\n      {\n        v35 = 10LL;\n        while ( 1 )\n        {\n          v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v49 >> 64) >> 3;\n          if ( v35 > 0x1999999999999999LL )\n            break;\n          v35 *= 10LL;\n          if ( v35 >= v49 )\n          {\n            v36 = v49;\n            break;\n          }\n        }\n      }\n      if ( v21 )\n      {\n        v37 = 0;\n        do\n        {\n          if ( v35 <= 0x1999999999999999LL )\n            v35 *= 10LL;\n          else\n            v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n          ++v37;\n        }\n        while ( v21 != v37 );\n      }\n      v40 = 1LL;\n      do\n      {\n        v41 = 10 * v40;\n        v42 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        v43 = v36 - 10 * v42;\n        v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        if ( v43 )\n        {\n          v44 = v35 / v40 / v43;\n          if ( v44 )\n            v48 += v34 / v44;\n        }\n        v40 = v41;\n      }\n      while ( v42 );\n    }\n    *v8 = v48;\nLABEL_14:\n    if ( (v16 & 0x80000000) != 0 )\n    {\n      v15 = -v16;\nLABEL_8:\n      *v9 = v15;\n    }\n  }\n  else\n  {\n    v16 = 0;\n    *a4 = v48;\n  }\n  return v16;\n}\n\n// write access to const memory has been detected, the output may be wrong!\n__int64 __usercall sub_8D30@<rax>(char *nptr@<rdi>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned __int64 *a4@<rsi>, __int64 a5@<r12>, __int64 a6@<r13>, __int64 a7@<r14>, __int64 a8@<r15>)\n{\n  unsigned __int64 *v8; // rbp\n  int *v9; // rbx\n  unsigned __int8 v10; // r14\n  const unsigned __int16 **v11; // rax\n  const unsigned __int16 **v12; // r13\n  const unsigned __int16 *v13; // rcx\n  char *v14; // rax\n  int v15; // eax\n  unsigned int v16; // ecx\n  unsigned __int64 v18; // rax\n  char *v19; // r14\n  int v20; // ecx\n  int v21; // er15\n  char v22; // al\n  struct lconv *v23; // rax\n  size_t v24; // rax\n  char *v25; // r8\n  __int64 i; // rax\n  signed int v27; // er13\n  int v28; // er14\n  char *v29; // rax\n  int v30; // edi\n  int v31; // ecx\n  int v32; // edi\n  int v33; // er8\n  unsigned __int64 v34; // r10\n  unsigned __int64 v35; // rdi\n  unsigned __int64 v36; // r8\n  int v37; // esi\n  char *v38; // ST08_8\n  unsigned __int64 v39; // rax\n  unsigned __int64 v40; // r9\n  signed __int64 v41; // r11\n  unsigned __int64 v42; // rsi\n  unsigned __int64 v43; // r13\n  unsigned __int64 v44; // r9\n  char *v45; // rax\n  size_t v46; // [rsp+0h] [rbp-70h]\n  char *s1; // [rsp+8h] [rbp-68h]\n  unsigned __int64 v48; // [rsp+10h] [rbp-60h]\n  unsigned __int64 v49; // [rsp+18h] [rbp-58h]\n  char *endptr; // [rsp+28h] [rbp-48h]\n  unsigned __int64 v51; // [rsp+30h] [rbp-40h]\n  __int64 v52; // [rsp+40h] [rbp-30h]\n  __int64 v53; // [rsp+48h] [rbp-28h]\n  __int64 v54; // [rsp+50h] [rbp-20h]\n  __int64 v55; // [rsp+58h] [rbp-18h]\n  __int64 v56; // [rsp+60h] [rbp-10h]\n  __int64 v57; // [rsp+68h] [rbp-8h]\n\n  v57 = a8;\n  v56 = a7;\n  v55 = a6;\n  v54 = a5;\n  v53 = a3;\n  v52 = a2;\n  v8 = a4;\n  *a4 = 0LL;\n  v51 = __readfsqword(0x28u);\n  v9 = __errno_location();\n  if ( !nptr )\n    goto LABEL_7;\n  v10 = *nptr;\n  if ( !*nptr )\n    goto LABEL_7;\n  v11 = __ctype_b_loc();\n  v12 = v11;\n  v13 = *v11;\n  v14 = nptr;\n  while ( v13[v10] & 0x2000 )\n    v10 = *++v14;\n  if ( v10 == 45 )\n    goto LABEL_7;\n  *v9 = 0;\n  endptr = 0LL;\n  v18 = __strtoul_internal(nptr, &endptr, 0, 0);\n  v19 = endptr;\n  v48 = v18;\n  v20 = *v9;\n  if ( endptr == nptr )\n  {\nLABEL_33:\n    if ( !v20 )\n    {\nLABEL_7:\n      v15 = 22;\n      v16 = -22;\n      goto LABEL_8;\n    }\nLABEL_13:\n    v16 = -v20;\n    goto LABEL_14;\n  }\n  if ( v20 && v18 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n    goto LABEL_13;\n  if ( !endptr || !*endptr )\n  {\n    v16 = 0;\n    *a4 = v18;\n    return v16;\n  }\n  v21 = 0;\n  v49 = 0LL;\n  while ( 1 )\n  {\n    v22 = v19[1];\n    if ( v22 == 105 )\n    {\n      if ( (v19[2] & 0xDF) == 66 && !v19[3] )\n      {\nLABEL_37:\n        v27 = 1024;\n        goto LABEL_38;\n      }\n      goto LABEL_23;\n    }\n    if ( (v22 & 0xDF) == 66 && !v19[2] )\n      break;\n    if ( !v22 )\n      goto LABEL_37;\nLABEL_23:\n    v23 = localeconv();\n    if ( !v23 )\n      goto LABEL_7;\n    if ( !v23->decimal_point )\n      goto LABEL_7;\n    s1 = v23->decimal_point;\n    v24 = strlen(v23->decimal_point);\n    if ( v49 )\n      goto LABEL_7;\n    if ( !*v19 )\n      goto LABEL_7;\n    v46 = v24;\n    if ( strncmp(s1, v19, v24) )\n      goto LABEL_7;\n    v25 = &v19[v46];\n    for ( i = v19[v46]; (_BYTE)i == 48; ++v21 )\n      i = *++v25;\n    if ( (*v12)[i] & 0x800 )\n    {\n      *v9 = 0;\n      v38 = v25;\n      endptr = 0LL;\n      v39 = __strtoul_internal(v25, &endptr, 0, 0);\n      v19 = endptr;\n      v49 = v39;\n      v20 = *v9;\n      if ( endptr == v38 )\n        goto LABEL_33;\n      if ( v20 )\n      {\n        if ( v39 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n          goto LABEL_13;\n        goto LABEL_62;\n      }\n      if ( v39 )\n      {\nLABEL_62:\n        if ( !endptr || !*endptr )\n          goto LABEL_7;\n      }\n    }\n    else\n    {\n      endptr = v25;\n      v19 = v25;\n    }\n  }\n  v27 = 1000;\nLABEL_38:\n  v28 = *v19;\n  v29 = strchr(\"KMGTPEZY\", v28);\n  if ( v29 )\n  {\n    v30 = (unsigned __int64)(v29 - \"KMGTPEZY\") + 1;\n    goto LABEL_40;\n  }\n  v45 = strchr(\"kmgtpezy\", v28);\n  if ( !v45 )\n    goto LABEL_7;\n  v30 = (unsigned __int64)(v45 - \"kmgtpezy\") + 1;\nLABEL_40:\n  if ( v30 )\n  {\n    if ( is_mul_ok(v27, v48) )\n    {\n      v31 = 0;\n      while ( 1 )\n      {\n        v48 *= v27;\n        if ( v30 - 1 == v31 )\n          break;\n        ++v31;\n        if ( !is_mul_ok(v27, v48) )\n          goto LABEL_77;\n      }\n      v16 = 0;\n    }\n    else\n    {\nLABEL_77:\n      v16 = -34;\n    }\n    if ( v49 )\n    {\n      v32 = v30 - 1;\n      v33 = 0;\n      v34 = 1LL;\n      do\n      {\n        v34 *= v27;\n        if ( v33 == v32 )\n          break;\n        ++v33;\n      }\n      while ( is_mul_ok(v27, v34) );\n      if ( v49 <= 0xA )\n      {\n        v36 = v49;\n        v35 = 10LL;\n      }\n      else\n      {\n        v35 = 10LL;\n        while ( 1 )\n        {\n          v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v49 >> 64) >> 3;\n          if ( v35 > 0x1999999999999999LL )\n            break;\n          v35 *= 10LL;\n          if ( v35 >= v49 )\n          {\n            v36 = v49;\n            break;\n          }\n        }\n      }\n      if ( v21 )\n      {\n        v37 = 0;\n        do\n        {\n          if ( v35 <= 0x1999999999999999LL )\n            v35 *= 10LL;\n          else\n            v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n          ++v37;\n        }\n        while ( v21 != v37 );\n      }\n      v40 = 1LL;\n      do\n      {\n        v41 = 10 * v40;\n        v42 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        v43 = v36 - 10 * v42;\n        v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        if ( v43 )\n        {\n          v44 = v35 / v40 / v43;\n          if ( v44 )\n            v48 += v34 / v44;\n        }\n        v40 = v41;\n      }\n      while ( v42 );\n    }\n    *v8 = v48;\nLABEL_14:\n    if ( (v16 & 0x80000000) != 0 )\n    {\n      v15 = -v16;\nLABEL_8:\n      *v9 = v15;\n    }\n  }\n  else\n  {\n    v16 = 0;\n    *a4 = v48;\n  }\n  return v16;\n}\n\n// write access to const memory has been detected, the output may be wrong!\n__int64 __usercall sub_8D30@<rax>(char *nptr@<rdi>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned __int64 *a4@<rsi>, __int64 a5@<r12>, __int64 a6@<r13>, __int64 a7@<r14>, __int64 a8@<r15>)\n{\n  unsigned __int64 *v8; // rbp\n  int *v9; // rbx\n  unsigned __int8 v10; // r14\n  const unsigned __int16 **v11; // rax\n  const unsigned __int16 **v12; // r13\n  const unsigned __int16 *v13; // rcx\n  char *v14; // rax\n  int v15; // eax\n  unsigned int v16; // ecx\n  unsigned __int64 v18; // rax\n  char *v19; // r14\n  int v20; // ecx\n  int v21; // er15\n  char v22; // al\n  struct lconv *v23; // rax\n  size_t v24; // rax\n  char *v25; // r8\n  __int64 i; // rax\n  signed int v27; // er13\n  int v28; // er14\n  char *v29; // rax\n  int v30; // edi\n  int v31; // ecx\n  int v32; // edi\n  int v33; // er8\n  unsigned __int64 v34; // r10\n  unsigned __int64 v35; // rdi\n  unsigned __int64 v36; // r8\n  int v37; // esi\n  char *v38; // ST08_8\n  unsigned __int64 v39; // rax\n  unsigned __int64 v40; // r9\n  signed __int64 v41; // r11\n  unsigned __int64 v42; // rsi\n  unsigned __int64 v43; // r13\n  unsigned __int64 v44; // r9\n  char *v45; // rax\n  size_t v46; // [rsp+0h] [rbp-70h]\n  char *s1; // [rsp+8h] [rbp-68h]\n  unsigned __int64 v48; // [rsp+10h] [rbp-60h]\n  unsigned __int64 v49; // [rsp+18h] [rbp-58h]\n  char *endptr; // [rsp+28h] [rbp-48h]\n  unsigned __int64 v51; // [rsp+30h] [rbp-40h]\n  __int64 v52; // [rsp+40h] [rbp-30h]\n  __int64 v53; // [rsp+48h] [rbp-28h]\n  __int64 v54; // [rsp+50h] [rbp-20h]\n  __int64 v55; // [rsp+58h] [rbp-18h]\n  __int64 v56; // [rsp+60h] [rbp-10h]\n  __int64 v57; // [rsp+68h] [rbp-8h]\n\n  v57 = a8;\n  v56 = a7;\n  v55 = a6;\n  v54 = a5;\n  v53 = a3;\n  v52 = a2;\n  v8 = a4;\n  *a4 = 0LL;\n  v51 = __readfsqword(0x28u);\n  v9 = __errno_location();\n  if ( !nptr )\n    goto LABEL_7;\n  v10 = *nptr;\n  if ( !*nptr )\n    goto LABEL_7;\n  v11 = __ctype_b_loc();\n  v12 = v11;\n  v13 = *v11;\n  v14 = nptr;\n  while ( v13[v10] & 0x2000 )\n    v10 = *++v14;\n  if ( v10 == 45 )\n    goto LABEL_7;\n  *v9 = 0;\n  endptr = 0LL;\n  v18 = __strtoul_internal(nptr, &endptr, 0, 0);\n  v19 = endptr;\n  v48 = v18;\n  v20 = *v9;\n  if ( endptr == nptr )\n  {\nLABEL_33:\n    if ( !v20 )\n    {\nLABEL_7:\n      v15 = 22;\n      v16 = -22;\n      goto LABEL_8;\n    }\nLABEL_13:\n    v16 = -v20;\n    goto LABEL_14;\n  }\n  if ( v20 && v18 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n    goto LABEL_13;\n  if ( !endptr || !*endptr )\n  {\n    v16 = 0;\n    *a4 = v18;\n    return v16;\n  }\n  v21 = 0;\n  v49 = 0LL;\n  while ( 1 )\n  {\n    v22 = v19[1];\n    if ( v22 == 105 )\n    {\n      if ( (v19[2] & 0xDF) == 66 && !v19[3] )\n      {\nLABEL_37:\n        v27 = 1024;\n        goto LABEL_38;\n      }\n      goto LABEL_23;\n    }\n    if ( (v22 & 0xDF) == 66 && !v19[2] )\n      break;\n    if ( !v22 )\n      goto LABEL_37;\nLABEL_23:\n    v23 = localeconv();\n    if ( !v23 )\n      goto LABEL_7;\n    if ( !v23->decimal_point )\n      goto LABEL_7;\n    s1 = v23->decimal_point;\n    v24 = strlen(v23->decimal_point);\n    if ( v49 )\n      goto LABEL_7;\n    if ( !*v19 )\n      goto LABEL_7;\n    v46 = v24;\n    if ( strncmp(s1, v19, v24) )\n      goto LABEL_7;\n    v25 = &v19[v46];\n    for ( i = v19[v46]; (_BYTE)i == 48; ++v21 )\n      i = *++v25;\n    if ( (*v12)[i] & 0x800 )\n    {\n      *v9 = 0;\n      v38 = v25;\n      endptr = 0LL;\n      v39 = __strtoul_internal(v25, &endptr, 0, 0);\n      v19 = endptr;\n      v49 = v39;\n      v20 = *v9;\n      if ( endptr == v38 )\n        goto LABEL_33;\n      if ( v20 )\n      {\n        if ( v39 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n          goto LABEL_13;\n        goto LABEL_62;\n      }\n      if ( v39 )\n      {\nLABEL_62:\n        if ( !endptr || !*endptr )\n          goto LABEL_7;\n      }\n    }\n    else\n    {\n      endptr = v25;\n      v19 = v25;\n    }\n  }\n  v27 = 1000;\nLABEL_38:\n  v28 = *v19;\n  v29 = strchr(\"KMGTPEZY\", v28);\n  if ( v29 )\n  {\n    v30 = (unsigned __int64)(v29 - \"KMGTPEZY\") + 1;\n    goto LABEL_40;\n  }\n  v45 = strchr(\"kmgtpezy\", v28);\n  if ( !v45 )\n    goto LABEL_7;\n  v30 = (unsigned __int64)(v45 - \"kmgtpezy\") + 1;\nLABEL_40:\n  if ( v30 )\n  {\n    if ( is_mul_ok(v27, v48) )\n    {\n      v31 = 0;\n      while ( 1 )\n      {\n        v48 *= v27;\n        if ( v30 - 1 == v31 )\n          break;\n        ++v31;\n        if ( !is_mul_ok(v27, v48) )\n          goto LABEL_77;\n      }\n      v16 = 0;\n    }\n    else\n    {\nLABEL_77:\n      v16 = -34;\n    }\n    if ( v49 )\n    {\n      v32 = v30 - 1;\n      v33 = 0;\n      v34 = 1LL;\n      do\n      {\n        v34 *= v27;\n        if ( v33 == v32 )\n          break;\n        ++v33;\n      }\n      while ( is_mul_ok(v27, v34) );\n      if ( v49 <= 0xA )\n      {\n        v36 = v49;\n        v35 = 10LL;\n      }\n      else\n      {\n        v35 = 10LL;\n        while ( 1 )\n        {\n          v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v49 >> 64) >> 3;\n          if ( v35 > 0x1999999999999999LL )\n            break;\n          v35 *= 10LL;\n          if ( v35 >= v49 )\n          {\n            v36 = v49;\n            break;\n          }\n        }\n      }\n      if ( v21 )\n      {\n        v37 = 0;\n        do\n        {\n          if ( v35 <= 0x1999999999999999LL )\n            v35 *= 10LL;\n          else\n            v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n          ++v37;\n        }\n        while ( v21 != v37 );\n      }\n      v40 = 1LL;\n      do\n      {\n        v41 = 10 * v40;\n        v42 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        v43 = v36 - 10 * v42;\n        v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        if ( v43 )\n        {\n          v44 = v35 / v40 / v43;\n          if ( v44 )\n            v48 += v34 / v44;\n        }\n        v40 = v41;\n      }\n      while ( v42 );\n    }\n    *v8 = v48;\nLABEL_14:\n    if ( (v16 & 0x80000000) != 0 )\n    {\n      v15 = -v16;\nLABEL_8:\n      *v9 = v15;\n    }\n  }\n  else\n  {\n    v16 = 0;\n    *a4 = v48;\n  }\n  return v16;\n}\n\n// write access to const memory has been detected, the output may be wrong!\n__int64 __usercall sub_8D30@<rax>(char *nptr@<rdi>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned __int64 *a4@<rsi>, __int64 a5@<r12>, __int64 a6@<r13>, __int64 a7@<r14>, __int64 a8@<r15>)\n{\n  unsigned __int64 *v8; // rbp\n  int *v9; // rbx\n  unsigned __int8 v10; // r14\n  const unsigned __int16 **v11; // rax\n  const unsigned __int16 **v12; // r13\n  const unsigned __int16 *v13; // rcx\n  char *v14; // rax\n  int v15; // eax\n  unsigned int v16; // ecx\n  unsigned __int64 v18; // rax\n  char *v19; // r14\n  int v20; // ecx\n  int v21; // er15\n  char v22; // al\n  struct lconv *v23; // rax\n  size_t v24; // rax\n  char *v25; // r8\n  __int64 i; // rax\n  signed int v27; // er13\n  int v28; // er14\n  char *v29; // rax\n  int v30; // edi\n  int v31; // ecx\n  int v32; // edi\n  int v33; // er8\n  unsigned __int64 v34; // r10\n  unsigned __int64 v35; // rdi\n  unsigned __int64 v36; // r8\n  int v37; // esi\n  char *v38; // ST08_8\n  unsigned __int64 v39; // rax\n  unsigned __int64 v40; // r9\n  signed __int64 v41; // r11\n  unsigned __int64 v42; // rsi\n  unsigned __int64 v43; // r13\n  unsigned __int64 v44; // r9\n  char *v45; // rax\n  size_t v46; // [rsp+0h] [rbp-70h]\n  char *s1; // [rsp+8h] [rbp-68h]\n  unsigned __int64 v48; // [rsp+10h] [rbp-60h]\n  unsigned __int64 v49; // [rsp+18h] [rbp-58h]\n  char *endptr; // [rsp+28h] [rbp-48h]\n  unsigned __int64 v51; // [rsp+30h] [rbp-40h]\n  __int64 v52; // [rsp+40h] [rbp-30h]\n  __int64 v53; // [rsp+48h] [rbp-28h]\n  __int64 v54; // [rsp+50h] [rbp-20h]\n  __int64 v55; // [rsp+58h] [rbp-18h]\n  __int64 v56; // [rsp+60h] [rbp-10h]\n  __int64 v57; // [rsp+68h] [rbp-8h]\n\n  v57 = a8;\n  v56 = a7;\n  v55 = a6;\n  v54 = a5;\n  v53 = a3;\n  v52 = a2;\n  v8 = a4;\n  *a4 = 0LL;\n  v51 = __readfsqword(0x28u);\n  v9 = __errno_location();\n  if ( !nptr )\n    goto LABEL_7;\n  v10 = *nptr;\n  if ( !*nptr )\n    goto LABEL_7;\n  v11 = __ctype_b_loc();\n  v12 = v11;\n  v13 = *v11;\n  v14 = nptr;\n  while ( v13[v10] & 0x2000 )\n    v10 = *++v14;\n  if ( v10 == 45 )\n    goto LABEL_7;\n  *v9 = 0;\n  endptr = 0LL;\n  v18 = __strtoul_internal(nptr, &endptr, 0, 0);\n  v19 = endptr;\n  v48 = v18;\n  v20 = *v9;\n  if ( endptr == nptr )\n  {\nLABEL_33:\n    if ( !v20 )\n    {\nLABEL_7:\n      v15 = 22;\n      v16 = -22;\n      goto LABEL_8;\n    }\nLABEL_13:\n    v16 = -v20;\n    goto LABEL_14;\n  }\n  if ( v20 && v18 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n    goto LABEL_13;\n  if ( !endptr || !*endptr )\n  {\n    v16 = 0;\n    *a4 = v18;\n    return v16;\n  }\n  v21 = 0;\n  v49 = 0LL;\n  while ( 1 )\n  {\n    v22 = v19[1];\n    if ( v22 == 105 )\n    {\n      if ( (v19[2] & 0xDF) == 66 && !v19[3] )\n      {\nLABEL_37:\n        v27 = 1024;\n        goto LABEL_38;\n      }\n      goto LABEL_23;\n    }\n    if ( (v22 & 0xDF) == 66 && !v19[2] )\n      break;\n    if ( !v22 )\n      goto LABEL_37;\nLABEL_23:\n    v23 = localeconv();\n    if ( !v23 )\n      goto LABEL_7;\n    if ( !v23->decimal_point )\n      goto LABEL_7;\n    s1 = v23->decimal_point;\n    v24 = strlen(v23->decimal_point);\n    if ( v49 )\n      goto LABEL_7;\n    if ( !*v19 )\n      goto LABEL_7;\n    v46 = v24;\n    if ( strncmp(s1, v19, v24) )\n      goto LABEL_7;\n    v25 = &v19[v46];\n    for ( i = v19[v46]; (_BYTE)i == 48; ++v21 )\n      i = *++v25;\n    if ( (*v12)[i] & 0x800 )\n    {\n      *v9 = 0;\n      v38 = v25;\n      endptr = 0LL;\n      v39 = __strtoul_internal(v25, &endptr, 0, 0);\n      v19 = endptr;\n      v49 = v39;\n      v20 = *v9;\n      if ( endptr == v38 )\n        goto LABEL_33;\n      if ( v20 )\n      {\n        if ( v39 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n          goto LABEL_13;\n        goto LABEL_62;\n      }\n      if ( v39 )\n      {\nLABEL_62:\n        if ( !endptr || !*endptr )\n          goto LABEL_7;\n      }\n    }\n    else\n    {\n      endptr = v25;\n      v19 = v25;\n    }\n  }\n  v27 = 1000;\nLABEL_38:\n  v28 = *v19;\n  v29 = strchr(\"KMGTPEZY\", v28);\n  if ( v29 )\n  {\n    v30 = (unsigned __int64)(v29 - \"KMGTPEZY\") + 1;\n    goto LABEL_40;\n  }\n  v45 = strchr(\"kmgtpezy\", v28);\n  if ( !v45 )\n    goto LABEL_7;\n  v30 = (unsigned __int64)(v45 - \"kmgtpezy\") + 1;\nLABEL_40:\n  if ( v30 )\n  {\n    if ( is_mul_ok(v27, v48) )\n    {\n      v31 = 0;\n      while ( 1 )\n      {\n        v48 *= v27;\n        if ( v30 - 1 == v31 )\n          break;\n        ++v31;\n        if ( !is_mul_ok(v27, v48) )\n          goto LABEL_77;\n      }\n      v16 = 0;\n    }\n    else\n    {\nLABEL_77:\n      v16 = -34;\n    }\n    if ( v49 )\n    {\n      v32 = v30 - 1;\n      v33 = 0;\n      v34 = 1LL;\n      do\n      {\n        v34 *= v27;\n        if ( v33 == v32 )\n          break;\n        ++v33;\n      }\n      while ( is_mul_ok(v27, v34) );\n      if ( v49 <= 0xA )\n      {\n        v36 = v49;\n        v35 = 10LL;\n      }\n      else\n      {\n        v35 = 10LL;\n        while ( 1 )\n        {\n          v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v49 >> 64) >> 3;\n          if ( v35 > 0x1999999999999999LL )\n            break;\n          v35 *= 10LL;\n          if ( v35 >= v49 )\n          {\n            v36 = v49;\n            break;\n          }\n        }\n      }\n      if ( v21 )\n      {\n        v37 = 0;\n        do\n        {\n          if ( v35 <= 0x1999999999999999LL )\n            v35 *= 10LL;\n          else\n            v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n          ++v37;\n        }\n        while ( v21 != v37 );\n      }\n      v40 = 1LL;\n      do\n      {\n        v41 = 10 * v40;\n        v42 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        v43 = v36 - 10 * v42;\n        v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        if ( v43 )\n        {\n          v44 = v35 / v40 / v43;\n          if ( v44 )\n            v48 += v34 / v44;\n        }\n        v40 = v41;\n      }\n      while ( v42 );\n    }\n    *v8 = v48;\nLABEL_14:\n    if ( (v16 & 0x80000000) != 0 )\n    {\n      v15 = -v16;\nLABEL_8:\n      *v9 = v15;\n    }\n  }\n  else\n  {\n    v16 = 0;\n    *a4 = v48;\n  }\n  return v16;\n}\n\n// write access to const memory has been detected, the output may be wrong!\n__int64 __usercall sub_8D30@<rax>(char *nptr@<rdi>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned __int64 *a4@<rsi>, __int64 a5@<r12>, __int64 a6@<r13>, __int64 a7@<r14>, __int64 a8@<r15>)\n{\n  unsigned __int64 *v8; // rbp\n  int *v9; // rbx\n  unsigned __int8 v10; // r14\n  const unsigned __int16 **v11; // rax\n  const unsigned __int16 **v12; // r13\n  const unsigned __int16 *v13; // rcx\n  char *v14; // rax\n  int v15; // eax\n  unsigned int v16; // ecx\n  unsigned __int64 v18; // rax\n  char *v19; // r14\n  int v20; // ecx\n  int v21; // er15\n  char v22; // al\n  struct lconv *v23; // rax\n  size_t v24; // rax\n  char *v25; // r8\n  __int64 i; // rax\n  signed int v27; // er13\n  int v28; // er14\n  char *v29; // rax\n  int v30; // edi\n  int v31; // ecx\n  int v32; // edi\n  int v33; // er8\n  unsigned __int64 v34; // r10\n  unsigned __int64 v35; // rdi\n  unsigned __int64 v36; // r8\n  int v37; // esi\n  char *v38; // ST08_8\n  unsigned __int64 v39; // rax\n  unsigned __int64 v40; // r9\n  signed __int64 v41; // r11\n  unsigned __int64 v42; // rsi\n  unsigned __int64 v43; // r13\n  unsigned __int64 v44; // r9\n  char *v45; // rax\n  size_t v46; // [rsp+0h] [rbp-70h]\n  char *s1; // [rsp+8h] [rbp-68h]\n  unsigned __int64 v48; // [rsp+10h] [rbp-60h]\n  unsigned __int64 v49; // [rsp+18h] [rbp-58h]\n  char *endptr; // [rsp+28h] [rbp-48h]\n  unsigned __int64 v51; // [rsp+30h] [rbp-40h]\n  __int64 v52; // [rsp+40h] [rbp-30h]\n  __int64 v53; // [rsp+48h] [rbp-28h]\n  __int64 v54; // [rsp+50h] [rbp-20h]\n  __int64 v55; // [rsp+58h] [rbp-18h]\n  __int64 v56; // [rsp+60h] [rbp-10h]\n  __int64 v57; // [rsp+68h] [rbp-8h]\n\n  v57 = a8;\n  v56 = a7;\n  v55 = a6;\n  v54 = a5;\n  v53 = a3;\n  v52 = a2;\n  v8 = a4;\n  *a4 = 0LL;\n  v51 = __readfsqword(0x28u);\n  v9 = __errno_location();\n  if ( !nptr )\n    goto LABEL_7;\n  v10 = *nptr;\n  if ( !*nptr )\n    goto LABEL_7;\n  v11 = __ctype_b_loc();\n  v12 = v11;\n  v13 = *v11;\n  v14 = nptr;\n  while ( v13[v10] & 0x2000 )\n    v10 = *++v14;\n  if ( v10 == 45 )\n    goto LABEL_7;\n  *v9 = 0;\n  endptr = 0LL;\n  v18 = __strtoul_internal(nptr, &endptr, 0, 0);\n  v19 = endptr;\n  v48 = v18;\n  v20 = *v9;\n  if ( endptr == nptr )\n  {\nLABEL_33:\n    if ( !v20 )\n    {\nLABEL_7:\n      v15 = 22;\n      v16 = -22;\n      goto LABEL_8;\n    }\nLABEL_13:\n    v16 = -v20;\n    goto LABEL_14;\n  }\n  if ( v20 && v18 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n    goto LABEL_13;\n  if ( !endptr || !*endptr )\n  {\n    v16 = 0;\n    *a4 = v18;\n    return v16;\n  }\n  v21 = 0;\n  v49 = 0LL;\n  while ( 1 )\n  {\n    v22 = v19[1];\n    if ( v22 == 105 )\n    {\n      if ( (v19[2] & 0xDF) == 66 && !v19[3] )\n      {\nLABEL_37:\n        v27 = 1024;\n        goto LABEL_38;\n      }\n      goto LABEL_23;\n    }\n    if ( (v22 & 0xDF) == 66 && !v19[2] )\n      break;\n    if ( !v22 )\n      goto LABEL_37;\nLABEL_23:\n    v23 = localeconv();\n    if ( !v23 )\n      goto LABEL_7;\n    if ( !v23->decimal_point )\n      goto LABEL_7;\n    s1 = v23->decimal_point;\n    v24 = strlen(v23->decimal_point);\n    if ( v49 )\n      goto LABEL_7;\n    if ( !*v19 )\n      goto LABEL_7;\n    v46 = v24;\n    if ( strncmp(s1, v19, v24) )\n      goto LABEL_7;\n    v25 = &v19[v46];\n    for ( i = v19[v46]; (_BYTE)i == 48; ++v21 )\n      i = *++v25;\n    if ( (*v12)[i] & 0x800 )\n    {\n      *v9 = 0;\n      v38 = v25;\n      endptr = 0LL;\n      v39 = __strtoul_internal(v25, &endptr, 0, 0);\n      v19 = endptr;\n      v49 = v39;\n      v20 = *v9;\n      if ( endptr == v38 )\n        goto LABEL_33;\n      if ( v20 )\n      {\n        if ( v39 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n          goto LABEL_13;\n        goto LABEL_62;\n      }\n      if ( v39 )\n      {\nLABEL_62:\n        if ( !endptr || !*endptr )\n          goto LABEL_7;\n      }\n    }\n    else\n    {\n      endptr = v25;\n      v19 = v25;\n    }\n  }\n  v27 = 1000;\nLABEL_38:\n  v28 = *v19;\n  v29 = strchr(\"KMGTPEZY\", v28);\n  if ( v29 )\n  {\n    v30 = (unsigned __int64)(v29 - \"KMGTPEZY\") + 1;\n    goto LABEL_40;\n  }\n  v45 = strchr(\"kmgtpezy\", v28);\n  if ( !v45 )\n    goto LABEL_7;\n  v30 = (unsigned __int64)(v45 - \"kmgtpezy\") + 1;\nLABEL_40:\n  if ( v30 )\n  {\n    if ( is_mul_ok(v27, v48) )\n    {\n      v31 = 0;\n      while ( 1 )\n      {\n        v48 *= v27;\n        if ( v30 - 1 == v31 )\n          break;\n        ++v31;\n        if ( !is_mul_ok(v27, v48) )\n          goto LABEL_77;\n      }\n      v16 = 0;\n    }\n    else\n    {\nLABEL_77:\n      v16 = -34;\n    }\n    if ( v49 )\n    {\n      v32 = v30 - 1;\n      v33 = 0;\n      v34 = 1LL;\n      do\n      {\n        v34 *= v27;\n        if ( v33 == v32 )\n          break;\n        ++v33;\n      }\n      while ( is_mul_ok(v27, v34) );\n      if ( v49 <= 0xA )\n      {\n        v36 = v49;\n        v35 = 10LL;\n      }\n      else\n      {\n        v35 = 10LL;\n        while ( 1 )\n        {\n          v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v49 >> 64) >> 3;\n          if ( v35 > 0x1999999999999999LL )\n            break;\n          v35 *= 10LL;\n          if ( v35 >= v49 )\n          {\n            v36 = v49;\n            break;\n          }\n        }\n      }\n      if ( v21 )\n      {\n        v37 = 0;\n        do\n        {\n          if ( v35 <= 0x1999999999999999LL )\n            v35 *= 10LL;\n          else\n            v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n          ++v37;\n        }\n        while ( v21 != v37 );\n      }\n      v40 = 1LL;\n      do\n      {\n        v41 = 10 * v40;\n        v42 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        v43 = v36 - 10 * v42;\n        v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        if ( v43 )\n        {\n          v44 = v35 / v40 / v43;\n          if ( v44 )\n            v48 += v34 / v44;\n        }\n        v40 = v41;\n      }\n      while ( v42 );\n    }\n    *v8 = v48;\nLABEL_14:\n    if ( (v16 & 0x80000000) != 0 )\n    {\n      v15 = -v16;\nLABEL_8:\n      *v9 = v15;\n    }\n  }\n  else\n  {\n    v16 = 0;\n    *a4 = v48;\n  }\n  return v16;\n}\n\n// write access to const memory has been detected, the output may be wrong!\n__int64 __usercall sub_8D30@<rax>(char *nptr@<rdi>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned __int64 *a4@<rsi>, __int64 a5@<r12>, __int64 a6@<r13>, __int64 a7@<r14>, __int64 a8@<r15>)\n{\n  unsigned __int64 *v8; // rbp\n  int *v9; // rbx\n  unsigned __int8 v10; // r14\n  const unsigned __int16 **v11; // rax\n  const unsigned __int16 **v12; // r13\n  const unsigned __int16 *v13; // rcx\n  char *v14; // rax\n  int v15; // eax\n  unsigned int v16; // ecx\n  unsigned __int64 v18; // rax\n  char *v19; // r14\n  int v20; // ecx\n  int v21; // er15\n  char v22; // al\n  struct lconv *v23; // rax\n  size_t v24; // rax\n  char *v25; // r8\n  __int64 i; // rax\n  signed int v27; // er13\n  int v28; // er14\n  char *v29; // rax\n  int v30; // edi\n  int v31; // ecx\n  int v32; // edi\n  int v33; // er8\n  unsigned __int64 v34; // r10\n  unsigned __int64 v35; // rdi\n  unsigned __int64 v36; // r8\n  int v37; // esi\n  char *v38; // ST08_8\n  unsigned __int64 v39; // rax\n  unsigned __int64 v40; // r9\n  signed __int64 v41; // r11\n  unsigned __int64 v42; // rsi\n  unsigned __int64 v43; // r13\n  unsigned __int64 v44; // r9\n  char *v45; // rax\n  size_t v46; // [rsp+0h] [rbp-70h]\n  char *s1; // [rsp+8h] [rbp-68h]\n  unsigned __int64 v48; // [rsp+10h] [rbp-60h]\n  unsigned __int64 v49; // [rsp+18h] [rbp-58h]\n  char *endptr; // [rsp+28h] [rbp-48h]\n  unsigned __int64 v51; // [rsp+30h] [rbp-40h]\n  __int64 v52; // [rsp+40h] [rbp-30h]\n  __int64 v53; // [rsp+48h] [rbp-28h]\n  __int64 v54; // [rsp+50h] [rbp-20h]\n  __int64 v55; // [rsp+58h] [rbp-18h]\n  __int64 v56; // [rsp+60h] [rbp-10h]\n  __int64 v57; // [rsp+68h] [rbp-8h]\n\n  v57 = a8;\n  v56 = a7;\n  v55 = a6;\n  v54 = a5;\n  v53 = a3;\n  v52 = a2;\n  v8 = a4;\n  *a4 = 0LL;\n  v51 = __readfsqword(0x28u);\n  v9 = __errno_location();\n  if ( !nptr )\n    goto LABEL_7;\n  v10 = *nptr;\n  if ( !*nptr )\n    goto LABEL_7;\n  v11 = __ctype_b_loc();\n  v12 = v11;\n  v13 = *v11;\n  v14 = nptr;\n  while ( v13[v10] & 0x2000 )\n    v10 = *++v14;\n  if ( v10 == 45 )\n    goto LABEL_7;\n  *v9 = 0;\n  endptr = 0LL;\n  v18 = __strtoul_internal(nptr, &endptr, 0, 0);\n  v19 = endptr;\n  v48 = v18;\n  v20 = *v9;\n  if ( endptr == nptr )\n  {\nLABEL_33:\n    if ( !v20 )\n    {\nLABEL_7:\n      v15 = 22;\n      v16 = -22;\n      goto LABEL_8;\n    }\nLABEL_13:\n    v16 = -v20;\n    goto LABEL_14;\n  }\n  if ( v20 && v18 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n    goto LABEL_13;\n  if ( !endptr || !*endptr )\n  {\n    v16 = 0;\n    *a4 = v18;\n    return v16;\n  }\n  v21 = 0;\n  v49 = 0LL;\n  while ( 1 )\n  {\n    v22 = v19[1];\n    if ( v22 == 105 )\n    {\n      if ( (v19[2] & 0xDF) == 66 && !v19[3] )\n      {\nLABEL_37:\n        v27 = 1024;\n        goto LABEL_38;\n      }\n      goto LABEL_23;\n    }\n    if ( (v22 & 0xDF) == 66 && !v19[2] )\n      break;\n    if ( !v22 )\n      goto LABEL_37;\nLABEL_23:\n    v23 = localeconv();\n    if ( !v23 )\n      goto LABEL_7;\n    if ( !v23->decimal_point )\n      goto LABEL_7;\n    s1 = v23->decimal_point;\n    v24 = strlen(v23->decimal_point);\n    if ( v49 )\n      goto LABEL_7;\n    if ( !*v19 )\n      goto LABEL_7;\n    v46 = v24;\n    if ( strncmp(s1, v19, v24) )\n      goto LABEL_7;\n    v25 = &v19[v46];\n    for ( i = v19[v46]; (_BYTE)i == 48; ++v21 )\n      i = *++v25;\n    if ( (*v12)[i] & 0x800 )\n    {\n      *v9 = 0;\n      v38 = v25;\n      endptr = 0LL;\n      v39 = __strtoul_internal(v25, &endptr, 0, 0);\n      v19 = endptr;\n      v49 = v39;\n      v20 = *v9;\n      if ( endptr == v38 )\n        goto LABEL_33;\n      if ( v20 )\n      {\n        if ( v39 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n          goto LABEL_13;\n        goto LABEL_62;\n      }\n      if ( v39 )\n      {\nLABEL_62:\n        if ( !endptr || !*endptr )\n          goto LABEL_7;\n      }\n    }\n    else\n    {\n      endptr = v25;\n      v19 = v25;\n    }\n  }\n  v27 = 1000;\nLABEL_38:\n  v28 = *v19;\n  v29 = strchr(\"KMGTPEZY\", v28);\n  if ( v29 )\n  {\n    v30 = (unsigned __int64)(v29 - \"KMGTPEZY\") + 1;\n    goto LABEL_40;\n  }\n  v45 = strchr(\"kmgtpezy\", v28);\n  if ( !v45 )\n    goto LABEL_7;\n  v30 = (unsigned __int64)(v45 - \"kmgtpezy\") + 1;\nLABEL_40:\n  if ( v30 )\n  {\n    if ( is_mul_ok(v27, v48) )\n    {\n      v31 = 0;\n      while ( 1 )\n      {\n        v48 *= v27;\n        if ( v30 - 1 == v31 )\n          break;\n        ++v31;\n        if ( !is_mul_ok(v27, v48) )\n          goto LABEL_77;\n      }\n      v16 = 0;\n    }\n    else\n    {\nLABEL_77:\n      v16 = -34;\n    }\n    if ( v49 )\n    {\n      v32 = v30 - 1;\n      v33 = 0;\n      v34 = 1LL;\n      do\n      {\n        v34 *= v27;\n        if ( v33 == v32 )\n          break;\n        ++v33;\n      }\n      while ( is_mul_ok(v27, v34) );\n      if ( v49 <= 0xA )\n      {\n        v36 = v49;\n        v35 = 10LL;\n      }\n      else\n      {\n        v35 = 10LL;\n        while ( 1 )\n        {\n          v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v49 >> 64) >> 3;\n          if ( v35 > 0x1999999999999999LL )\n            break;\n          v35 *= 10LL;\n          if ( v35 >= v49 )\n          {\n            v36 = v49;\n            break;\n          }\n        }\n      }\n      if ( v21 )\n      {\n        v37 = 0;\n        do\n        {\n          if ( v35 <= 0x1999999999999999LL )\n            v35 *= 10LL;\n          else\n            v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n          ++v37;\n        }\n        while ( v21 != v37 );\n      }\n      v40 = 1LL;\n      do\n      {\n        v41 = 10 * v40;\n        v42 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        v43 = v36 - 10 * v42;\n        v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        if ( v43 )\n        {\n          v44 = v35 / v40 / v43;\n          if ( v44 )\n            v48 += v34 / v44;\n        }\n        v40 = v41;\n      }\n      while ( v42 );\n    }\n    *v8 = v48;\nLABEL_14:\n    if ( (v16 & 0x80000000) != 0 )\n    {\n      v15 = -v16;\nLABEL_8:\n      *v9 = v15;\n    }\n  }\n  else\n  {\n    v16 = 0;\n    *a4 = v48;\n  }\n  return v16;\n}\n\n// write access to const memory has been detected, the output may be wrong!\n__int64 __usercall sub_8D30@<rax>(char *nptr@<rdi>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned __int64 *a4@<rsi>, __int64 a5@<r12>, __int64 a6@<r13>, __int64 a7@<r14>, __int64 a8@<r15>)\n{\n  unsigned __int64 *v8; // rbp\n  int *v9; // rbx\n  unsigned __int8 v10; // r14\n  const unsigned __int16 **v11; // rax\n  const unsigned __int16 **v12; // r13\n  const unsigned __int16 *v13; // rcx\n  char *v14; // rax\n  int v15; // eax\n  unsigned int v16; // ecx\n  unsigned __int64 v18; // rax\n  char *v19; // r14\n  int v20; // ecx\n  int v21; // er15\n  char v22; // al\n  struct lconv *v23; // rax\n  size_t v24; // rax\n  char *v25; // r8\n  __int64 i; // rax\n  signed int v27; // er13\n  int v28; // er14\n  char *v29; // rax\n  int v30; // edi\n  int v31; // ecx\n  int v32; // edi\n  int v33; // er8\n  unsigned __int64 v34; // r10\n  unsigned __int64 v35; // rdi\n  unsigned __int64 v36; // r8\n  int v37; // esi\n  char *v38; // ST08_8\n  unsigned __int64 v39; // rax\n  unsigned __int64 v40; // r9\n  signed __int64 v41; // r11\n  unsigned __int64 v42; // rsi\n  unsigned __int64 v43; // r13\n  unsigned __int64 v44; // r9\n  char *v45; // rax\n  size_t v46; // [rsp+0h] [rbp-70h]\n  char *s1; // [rsp+8h] [rbp-68h]\n  unsigned __int64 v48; // [rsp+10h] [rbp-60h]\n  unsigned __int64 v49; // [rsp+18h] [rbp-58h]\n  char *endptr; // [rsp+28h] [rbp-48h]\n  unsigned __int64 v51; // [rsp+30h] [rbp-40h]\n  __int64 v52; // [rsp+40h] [rbp-30h]\n  __int64 v53; // [rsp+48h] [rbp-28h]\n  __int64 v54; // [rsp+50h] [rbp-20h]\n  __int64 v55; // [rsp+58h] [rbp-18h]\n  __int64 v56; // [rsp+60h] [rbp-10h]\n  __int64 v57; // [rsp+68h] [rbp-8h]\n\n  v57 = a8;\n  v56 = a7;\n  v55 = a6;\n  v54 = a5;\n  v53 = a3;\n  v52 = a2;\n  v8 = a4;\n  *a4 = 0LL;\n  v51 = __readfsqword(0x28u);\n  v9 = __errno_location();\n  if ( !nptr )\n    goto LABEL_7;\n  v10 = *nptr;\n  if ( !*nptr )\n    goto LABEL_7;\n  v11 = __ctype_b_loc();\n  v12 = v11;\n  v13 = *v11;\n  v14 = nptr;\n  while ( v13[v10] & 0x2000 )\n    v10 = *++v14;\n  if ( v10 == 45 )\n    goto LABEL_7;\n  *v9 = 0;\n  endptr = 0LL;\n  v18 = __strtoul_internal(nptr, &endptr, 0, 0);\n  v19 = endptr;\n  v48 = v18;\n  v20 = *v9;\n  if ( endptr == nptr )\n  {\nLABEL_33:\n    if ( !v20 )\n    {\nLABEL_7:\n      v15 = 22;\n      v16 = -22;\n      goto LABEL_8;\n    }\nLABEL_13:\n    v16 = -v20;\n    goto LABEL_14;\n  }\n  if ( v20 && v18 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n    goto LABEL_13;\n  if ( !endptr || !*endptr )\n  {\n    v16 = 0;\n    *a4 = v18;\n    return v16;\n  }\n  v21 = 0;\n  v49 = 0LL;\n  while ( 1 )\n  {\n    v22 = v19[1];\n    if ( v22 == 105 )\n    {\n      if ( (v19[2] & 0xDF) == 66 && !v19[3] )\n      {\nLABEL_37:\n        v27 = 1024;\n        goto LABEL_38;\n      }\n      goto LABEL_23;\n    }\n    if ( (v22 & 0xDF) == 66 && !v19[2] )\n      break;\n    if ( !v22 )\n      goto LABEL_37;\nLABEL_23:\n    v23 = localeconv();\n    if ( !v23 )\n      goto LABEL_7;\n    if ( !v23->decimal_point )\n      goto LABEL_7;\n    s1 = v23->decimal_point;\n    v24 = strlen(v23->decimal_point);\n    if ( v49 )\n      goto LABEL_7;\n    if ( !*v19 )\n      goto LABEL_7;\n    v46 = v24;\n    if ( strncmp(s1, v19, v24) )\n      goto LABEL_7;\n    v25 = &v19[v46];\n    for ( i = v19[v46]; (_BYTE)i == 48; ++v21 )\n      i = *++v25;\n    if ( (*v12)[i] & 0x800 )\n    {\n      *v9 = 0;\n      v38 = v25;\n      endptr = 0LL;\n      v39 = __strtoul_internal(v25, &endptr, 0, 0);\n      v19 = endptr;\n      v49 = v39;\n      v20 = *v9;\n      if ( endptr == v38 )\n        goto LABEL_33;\n      if ( v20 )\n      {\n        if ( v39 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n          goto LABEL_13;\n        goto LABEL_62;\n      }\n      if ( v39 )\n      {\nLABEL_62:\n        if ( !endptr || !*endptr )\n          goto LABEL_7;\n      }\n    }\n    else\n    {\n      endptr = v25;\n      v19 = v25;\n    }\n  }\n  v27 = 1000;\nLABEL_38:\n  v28 = *v19;\n  v29 = strchr(\"KMGTPEZY\", v28);\n  if ( v29 )\n  {\n    v30 = (unsigned __int64)(v29 - \"KMGTPEZY\") + 1;\n    goto LABEL_40;\n  }\n  v45 = strchr(\"kmgtpezy\", v28);\n  if ( !v45 )\n    goto LABEL_7;\n  v30 = (unsigned __int64)(v45 - \"kmgtpezy\") + 1;\nLABEL_40:\n  if ( v30 )\n  {\n    if ( is_mul_ok(v27, v48) )\n    {\n      v31 = 0;\n      while ( 1 )\n      {\n        v48 *= v27;\n        if ( v30 - 1 == v31 )\n          break;\n        ++v31;\n        if ( !is_mul_ok(v27, v48) )\n          goto LABEL_77;\n      }\n      v16 = 0;\n    }\n    else\n    {\nLABEL_77:\n      v16 = -34;\n    }\n    if ( v49 )\n    {\n      v32 = v30 - 1;\n      v33 = 0;\n      v34 = 1LL;\n      do\n      {\n        v34 *= v27;\n        if ( v33 == v32 )\n          break;\n        ++v33;\n      }\n      while ( is_mul_ok(v27, v34) );\n      if ( v49 <= 0xA )\n      {\n        v36 = v49;\n        v35 = 10LL;\n      }\n      else\n      {\n        v35 = 10LL;\n        while ( 1 )\n        {\n          v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v49 >> 64) >> 3;\n          if ( v35 > 0x1999999999999999LL )\n            break;\n          v35 *= 10LL;\n          if ( v35 >= v49 )\n          {\n            v36 = v49;\n            break;\n          }\n        }\n      }\n      if ( v21 )\n      {\n        v37 = 0;\n        do\n        {\n          if ( v35 <= 0x1999999999999999LL )\n            v35 *= 10LL;\n          else\n            v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n          ++v37;\n        }\n        while ( v21 != v37 );\n      }\n      v40 = 1LL;\n      do\n      {\n        v41 = 10 * v40;\n        v42 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        v43 = v36 - 10 * v42;\n        v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        if ( v43 )\n        {\n          v44 = v35 / v40 / v43;\n          if ( v44 )\n            v48 += v34 / v44;\n        }\n        v40 = v41;\n      }\n      while ( v42 );\n    }\n    *v8 = v48;\nLABEL_14:\n    if ( (v16 & 0x80000000) != 0 )\n    {\n      v15 = -v16;\nLABEL_8:\n      *v9 = v15;\n    }\n  }\n  else\n  {\n    v16 = 0;\n    *a4 = v48;\n  }\n  return v16;\n}\n\n// write access to const memory has been detected, the output may be wrong!\n__int64 __usercall sub_8D30@<rax>(char *nptr@<rdi>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned __int64 *a4@<rsi>, __int64 a5@<r12>, __int64 a6@<r13>, __int64 a7@<r14>, __int64 a8@<r15>)\n{\n  unsigned __int64 *v8; // rbp\n  int *v9; // rbx\n  unsigned __int8 v10; // r14\n  const unsigned __int16 **v11; // rax\n  const unsigned __int16 **v12; // r13\n  const unsigned __int16 *v13; // rcx\n  char *v14; // rax\n  int v15; // eax\n  unsigned int v16; // ecx\n  unsigned __int64 v18; // rax\n  char *v19; // r14\n  int v20; // ecx\n  int v21; // er15\n  char v22; // al\n  struct lconv *v23; // rax\n  size_t v24; // rax\n  char *v25; // r8\n  __int64 i; // rax\n  signed int v27; // er13\n  int v28; // er14\n  char *v29; // rax\n  int v30; // edi\n  int v31; // ecx\n  int v32; // edi\n  int v33; // er8\n  unsigned __int64 v34; // r10\n  unsigned __int64 v35; // rdi\n  unsigned __int64 v36; // r8\n  int v37; // esi\n  char *v38; // ST08_8\n  unsigned __int64 v39; // rax\n  unsigned __int64 v40; // r9\n  signed __int64 v41; // r11\n  unsigned __int64 v42; // rsi\n  unsigned __int64 v43; // r13\n  unsigned __int64 v44; // r9\n  char *v45; // rax\n  size_t v46; // [rsp+0h] [rbp-70h]\n  char *s1; // [rsp+8h] [rbp-68h]\n  unsigned __int64 v48; // [rsp+10h] [rbp-60h]\n  unsigned __int64 v49; // [rsp+18h] [rbp-58h]\n  char *endptr; // [rsp+28h] [rbp-48h]\n  unsigned __int64 v51; // [rsp+30h] [rbp-40h]\n  __int64 v52; // [rsp+40h] [rbp-30h]\n  __int64 v53; // [rsp+48h] [rbp-28h]\n  __int64 v54; // [rsp+50h] [rbp-20h]\n  __int64 v55; // [rsp+58h] [rbp-18h]\n  __int64 v56; // [rsp+60h] [rbp-10h]\n  __int64 v57; // [rsp+68h] [rbp-8h]\n\n  v57 = a8;\n  v56 = a7;\n  v55 = a6;\n  v54 = a5;\n  v53 = a3;\n  v52 = a2;\n  v8 = a4;\n  *a4 = 0LL;\n  v51 = __readfsqword(0x28u);\n  v9 = __errno_location();\n  if ( !nptr )\n    goto LABEL_7;\n  v10 = *nptr;\n  if ( !*nptr )\n    goto LABEL_7;\n  v11 = __ctype_b_loc();\n  v12 = v11;\n  v13 = *v11;\n  v14 = nptr;\n  while ( v13[v10] & 0x2000 )\n    v10 = *++v14;\n  if ( v10 == 45 )\n    goto LABEL_7;\n  *v9 = 0;\n  endptr = 0LL;\n  v18 = __strtoul_internal(nptr, &endptr, 0, 0);\n  v19 = endptr;\n  v48 = v18;\n  v20 = *v9;\n  if ( endptr == nptr )\n  {\nLABEL_33:\n    if ( !v20 )\n    {\nLABEL_7:\n      v15 = 22;\n      v16 = -22;\n      goto LABEL_8;\n    }\nLABEL_13:\n    v16 = -v20;\n    goto LABEL_14;\n  }\n  if ( v20 && v18 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n    goto LABEL_13;\n  if ( !endptr || !*endptr )\n  {\n    v16 = 0;\n    *a4 = v18;\n    return v16;\n  }\n  v21 = 0;\n  v49 = 0LL;\n  while ( 1 )\n  {\n    v22 = v19[1];\n    if ( v22 == 105 )\n    {\n      if ( (v19[2] & 0xDF) == 66 && !v19[3] )\n      {\nLABEL_37:\n        v27 = 1024;\n        goto LABEL_38;\n      }\n      goto LABEL_23;\n    }\n    if ( (v22 & 0xDF) == 66 && !v19[2] )\n      break;\n    if ( !v22 )\n      goto LABEL_37;\nLABEL_23:\n    v23 = localeconv();\n    if ( !v23 )\n      goto LABEL_7;\n    if ( !v23->decimal_point )\n      goto LABEL_7;\n    s1 = v23->decimal_point;\n    v24 = strlen(v23->decimal_point);\n    if ( v49 )\n      goto LABEL_7;\n    if ( !*v19 )\n      goto LABEL_7;\n    v46 = v24;\n    if ( strncmp(s1, v19, v24) )\n      goto LABEL_7;\n    v25 = &v19[v46];\n    for ( i = v19[v46]; (_BYTE)i == 48; ++v21 )\n      i = *++v25;\n    if ( (*v12)[i] & 0x800 )\n    {\n      *v9 = 0;\n      v38 = v25;\n      endptr = 0LL;\n      v39 = __strtoul_internal(v25, &endptr, 0, 0);\n      v19 = endptr;\n      v49 = v39;\n      v20 = *v9;\n      if ( endptr == v38 )\n        goto LABEL_33;\n      if ( v20 )\n      {\n        if ( v39 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n          goto LABEL_13;\n        goto LABEL_62;\n      }\n      if ( v39 )\n      {\nLABEL_62:\n        if ( !endptr || !*endptr )\n          goto LABEL_7;\n      }\n    }\n    else\n    {\n      endptr = v25;\n      v19 = v25;\n    }\n  }\n  v27 = 1000;\nLABEL_38:\n  v28 = *v19;\n  v29 = strchr(\"KMGTPEZY\", v28);\n  if ( v29 )\n  {\n    v30 = (unsigned __int64)(v29 - \"KMGTPEZY\") + 1;\n    goto LABEL_40;\n  }\n  v45 = strchr(\"kmgtpezy\", v28);\n  if ( !v45 )\n    goto LABEL_7;\n  v30 = (unsigned __int64)(v45 - \"kmgtpezy\") + 1;\nLABEL_40:\n  if ( v30 )\n  {\n    if ( is_mul_ok(v27, v48) )\n    {\n      v31 = 0;\n      while ( 1 )\n      {\n        v48 *= v27;\n        if ( v30 - 1 == v31 )\n          break;\n        ++v31;\n        if ( !is_mul_ok(v27, v48) )\n          goto LABEL_77;\n      }\n      v16 = 0;\n    }\n    else\n    {\nLABEL_77:\n      v16 = -34;\n    }\n    if ( v49 )\n    {\n      v32 = v30 - 1;\n      v33 = 0;\n      v34 = 1LL;\n      do\n      {\n        v34 *= v27;\n        if ( v33 == v32 )\n          break;\n        ++v33;\n      }\n      while ( is_mul_ok(v27, v34) );\n      if ( v49 <= 0xA )\n      {\n        v36 = v49;\n        v35 = 10LL;\n      }\n      else\n      {\n        v35 = 10LL;\n        while ( 1 )\n        {\n          v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v49 >> 64) >> 3;\n          if ( v35 > 0x1999999999999999LL )\n            break;\n          v35 *= 10LL;\n          if ( v35 >= v49 )\n          {\n            v36 = v49;\n            break;\n          }\n        }\n      }\n      if ( v21 )\n      {\n        v37 = 0;\n        do\n        {\n          if ( v35 <= 0x1999999999999999LL )\n            v35 *= 10LL;\n          else\n            v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n          ++v37;\n        }\n        while ( v21 != v37 );\n      }\n      v40 = 1LL;\n      do\n      {\n        v41 = 10 * v40;\n        v42 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        v43 = v36 - 10 * v42;\n        v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        if ( v43 )\n        {\n          v44 = v35 / v40 / v43;\n          if ( v44 )\n            v48 += v34 / v44;\n        }\n        v40 = v41;\n      }\n      while ( v42 );\n    }\n    *v8 = v48;\nLABEL_14:\n    if ( (v16 & 0x80000000) != 0 )\n    {\n      v15 = -v16;\nLABEL_8:\n      *v9 = v15;\n    }\n  }\n  else\n  {\n    v16 = 0;\n    *a4 = v48;\n  }\n  return v16;\n}\n\n// write access to const memory has been detected, the output may be wrong!\n__int64 __usercall sub_8D30@<rax>(char *nptr@<rdi>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned __int64 *a4@<rsi>, __int64 a5@<r12>, __int64 a6@<r13>, __int64 a7@<r14>, __int64 a8@<r15>)\n{\n  unsigned __int64 *v8; // rbp\n  int *v9; // rbx\n  unsigned __int8 v10; // r14\n  const unsigned __int16 **v11; // rax\n  const unsigned __int16 **v12; // r13\n  const unsigned __int16 *v13; // rcx\n  char *v14; // rax\n  int v15; // eax\n  unsigned int v16; // ecx\n  unsigned __int64 v18; // rax\n  char *v19; // r14\n  int v20; // ecx\n  int v21; // er15\n  char v22; // al\n  struct lconv *v23; // rax\n  size_t v24; // rax\n  char *v25; // r8\n  __int64 i; // rax\n  signed int v27; // er13\n  int v28; // er14\n  char *v29; // rax\n  int v30; // edi\n  int v31; // ecx\n  int v32; // edi\n  int v33; // er8\n  unsigned __int64 v34; // r10\n  unsigned __int64 v35; // rdi\n  unsigned __int64 v36; // r8\n  int v37; // esi\n  char *v38; // ST08_8\n  unsigned __int64 v39; // rax\n  unsigned __int64 v40; // r9\n  signed __int64 v41; // r11\n  unsigned __int64 v42; // rsi\n  unsigned __int64 v43; // r13\n  unsigned __int64 v44; // r9\n  char *v45; // rax\n  size_t v46; // [rsp+0h] [rbp-70h]\n  char *s1; // [rsp+8h] [rbp-68h]\n  unsigned __int64 v48; // [rsp+10h] [rbp-60h]\n  unsigned __int64 v49; // [rsp+18h] [rbp-58h]\n  char *endptr; // [rsp+28h] [rbp-48h]\n  unsigned __int64 v51; // [rsp+30h] [rbp-40h]\n  __int64 v52; // [rsp+40h] [rbp-30h]\n  __int64 v53; // [rsp+48h] [rbp-28h]\n  __int64 v54; // [rsp+50h] [rbp-20h]\n  __int64 v55; // [rsp+58h] [rbp-18h]\n  __int64 v56; // [rsp+60h] [rbp-10h]\n  __int64 v57; // [rsp+68h] [rbp-8h]\n\n  v57 = a8;\n  v56 = a7;\n  v55 = a6;\n  v54 = a5;\n  v53 = a3;\n  v52 = a2;\n  v8 = a4;\n  *a4 = 0LL;\n  v51 = __readfsqword(0x28u);\n  v9 = __errno_location();\n  if ( !nptr )\n    goto LABEL_7;\n  v10 = *nptr;\n  if ( !*nptr )\n    goto LABEL_7;\n  v11 = __ctype_b_loc();\n  v12 = v11;\n  v13 = *v11;\n  v14 = nptr;\n  while ( v13[v10] & 0x2000 )\n    v10 = *++v14;\n  if ( v10 == 45 )\n    goto LABEL_7;\n  *v9 = 0;\n  endptr = 0LL;\n  v18 = __strtoul_internal(nptr, &endptr, 0, 0);\n  v19 = endptr;\n  v48 = v18;\n  v20 = *v9;\n  if ( endptr == nptr )\n  {\nLABEL_33:\n    if ( !v20 )\n    {\nLABEL_7:\n      v15 = 22;\n      v16 = -22;\n      goto LABEL_8;\n    }\nLABEL_13:\n    v16 = -v20;\n    goto LABEL_14;\n  }\n  if ( v20 && v18 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n    goto LABEL_13;\n  if ( !endptr || !*endptr )\n  {\n    v16 = 0;\n    *a4 = v18;\n    return v16;\n  }\n  v21 = 0;\n  v49 = 0LL;\n  while ( 1 )\n  {\n    v22 = v19[1];\n    if ( v22 == 105 )\n    {\n      if ( (v19[2] & 0xDF) == 66 && !v19[3] )\n      {\nLABEL_37:\n        v27 = 1024;\n        goto LABEL_38;\n      }\n      goto LABEL_23;\n    }\n    if ( (v22 & 0xDF) == 66 && !v19[2] )\n      break;\n    if ( !v22 )\n      goto LABEL_37;\nLABEL_23:\n    v23 = localeconv();\n    if ( !v23 )\n      goto LABEL_7;\n    if ( !v23->decimal_point )\n      goto LABEL_7;\n    s1 = v23->decimal_point;\n    v24 = strlen(v23->decimal_point);\n    if ( v49 )\n      goto LABEL_7;\n    if ( !*v19 )\n      goto LABEL_7;\n    v46 = v24;\n    if ( strncmp(s1, v19, v24) )\n      goto LABEL_7;\n    v25 = &v19[v46];\n    for ( i = v19[v46]; (_BYTE)i == 48; ++v21 )\n      i = *++v25;\n    if ( (*v12)[i] & 0x800 )\n    {\n      *v9 = 0;\n      v38 = v25;\n      endptr = 0LL;\n      v39 = __strtoul_internal(v25, &endptr, 0, 0);\n      v19 = endptr;\n      v49 = v39;\n      v20 = *v9;\n      if ( endptr == v38 )\n        goto LABEL_33;\n      if ( v20 )\n      {\n        if ( v39 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n          goto LABEL_13;\n        goto LABEL_62;\n      }\n      if ( v39 )\n      {\nLABEL_62:\n        if ( !endptr || !*endptr )\n          goto LABEL_7;\n      }\n    }\n    else\n    {\n      endptr = v25;\n      v19 = v25;\n    }\n  }\n  v27 = 1000;\nLABEL_38:\n  v28 = *v19;\n  v29 = strchr(\"KMGTPEZY\", v28);\n  if ( v29 )\n  {\n    v30 = (unsigned __int64)(v29 - \"KMGTPEZY\") + 1;\n    goto LABEL_40;\n  }\n  v45 = strchr(\"kmgtpezy\", v28);\n  if ( !v45 )\n    goto LABEL_7;\n  v30 = (unsigned __int64)(v45 - \"kmgtpezy\") + 1;\nLABEL_40:\n  if ( v30 )\n  {\n    if ( is_mul_ok(v27, v48) )\n    {\n      v31 = 0;\n      while ( 1 )\n      {\n        v48 *= v27;\n        if ( v30 - 1 == v31 )\n          break;\n        ++v31;\n        if ( !is_mul_ok(v27, v48) )\n          goto LABEL_77;\n      }\n      v16 = 0;\n    }\n    else\n    {\nLABEL_77:\n      v16 = -34;\n    }\n    if ( v49 )\n    {\n      v32 = v30 - 1;\n      v33 = 0;\n      v34 = 1LL;\n      do\n      {\n        v34 *= v27;\n        if ( v33 == v32 )\n          break;\n        ++v33;\n      }\n      while ( is_mul_ok(v27, v34) );\n      if ( v49 <= 0xA )\n      {\n        v36 = v49;\n        v35 = 10LL;\n      }\n      else\n      {\n        v35 = 10LL;\n        while ( 1 )\n        {\n          v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v49 >> 64) >> 3;\n          if ( v35 > 0x1999999999999999LL )\n            break;\n          v35 *= 10LL;\n          if ( v35 >= v49 )\n          {\n            v36 = v49;\n            break;\n          }\n        }\n      }\n      if ( v21 )\n      {\n        v37 = 0;\n        do\n        {\n          if ( v35 <= 0x1999999999999999LL )\n            v35 *= 10LL;\n          else\n            v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n          ++v37;\n        }\n        while ( v21 != v37 );\n      }\n      v40 = 1LL;\n      do\n      {\n        v41 = 10 * v40;\n        v42 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        v43 = v36 - 10 * v42;\n        v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        if ( v43 )\n        {\n          v44 = v35 / v40 / v43;\n          if ( v44 )\n            v48 += v34 / v44;\n        }\n        v40 = v41;\n      }\n      while ( v42 );\n    }\n    *v8 = v48;\nLABEL_14:\n    if ( (v16 & 0x80000000) != 0 )\n    {\n      v15 = -v16;\nLABEL_8:\n      *v9 = v15;\n    }\n  }\n  else\n  {\n    v16 = 0;\n    *a4 = v48;\n  }\n  return v16;\n}\n\n// write access to const memory has been detected, the output may be wrong!\n__int64 __usercall sub_8D30@<rax>(char *nptr@<rdi>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned __int64 *a4@<rsi>, __int64 a5@<r12>, __int64 a6@<r13>, __int64 a7@<r14>, __int64 a8@<r15>)\n{\n  unsigned __int64 *v8; // rbp\n  int *v9; // rbx\n  unsigned __int8 v10; // r14\n  const unsigned __int16 **v11; // rax\n  const unsigned __int16 **v12; // r13\n  const unsigned __int16 *v13; // rcx\n  char *v14; // rax\n  int v15; // eax\n  unsigned int v16; // ecx\n  unsigned __int64 v18; // rax\n  char *v19; // r14\n  int v20; // ecx\n  int v21; // er15\n  char v22; // al\n  struct lconv *v23; // rax\n  size_t v24; // rax\n  char *v25; // r8\n  __int64 i; // rax\n  signed int v27; // er13\n  int v28; // er14\n  char *v29; // rax\n  int v30; // edi\n  int v31; // ecx\n  int v32; // edi\n  int v33; // er8\n  unsigned __int64 v34; // r10\n  unsigned __int64 v35; // rdi\n  unsigned __int64 v36; // r8\n  int v37; // esi\n  char *v38; // ST08_8\n  unsigned __int64 v39; // rax\n  unsigned __int64 v40; // r9\n  signed __int64 v41; // r11\n  unsigned __int64 v42; // rsi\n  unsigned __int64 v43; // r13\n  unsigned __int64 v44; // r9\n  char *v45; // rax\n  size_t v46; // [rsp+0h] [rbp-70h]\n  char *s1; // [rsp+8h] [rbp-68h]\n  unsigned __int64 v48; // [rsp+10h] [rbp-60h]\n  unsigned __int64 v49; // [rsp+18h] [rbp-58h]\n  char *endptr; // [rsp+28h] [rbp-48h]\n  unsigned __int64 v51; // [rsp+30h] [rbp-40h]\n  __int64 v52; // [rsp+40h] [rbp-30h]\n  __int64 v53; // [rsp+48h] [rbp-28h]\n  __int64 v54; // [rsp+50h] [rbp-20h]\n  __int64 v55; // [rsp+58h] [rbp-18h]\n  __int64 v56; // [rsp+60h] [rbp-10h]\n  __int64 v57; // [rsp+68h] [rbp-8h]\n\n  v57 = a8;\n  v56 = a7;\n  v55 = a6;\n  v54 = a5;\n  v53 = a3;\n  v52 = a2;\n  v8 = a4;\n  *a4 = 0LL;\n  v51 = __readfsqword(0x28u);\n  v9 = __errno_location();\n  if ( !nptr )\n    goto LABEL_7;\n  v10 = *nptr;\n  if ( !*nptr )\n    goto LABEL_7;\n  v11 = __ctype_b_loc();\n  v12 = v11;\n  v13 = *v11;\n  v14 = nptr;\n  while ( v13[v10] & 0x2000 )\n    v10 = *++v14;\n  if ( v10 == 45 )\n    goto LABEL_7;\n  *v9 = 0;\n  endptr = 0LL;\n  v18 = __strtoul_internal(nptr, &endptr, 0, 0);\n  v19 = endptr;\n  v48 = v18;\n  v20 = *v9;\n  if ( endptr == nptr )\n  {\nLABEL_33:\n    if ( !v20 )\n    {\nLABEL_7:\n      v15 = 22;\n      v16 = -22;\n      goto LABEL_8;\n    }\nLABEL_13:\n    v16 = -v20;\n    goto LABEL_14;\n  }\n  if ( v20 && v18 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n    goto LABEL_13;\n  if ( !endptr || !*endptr )\n  {\n    v16 = 0;\n    *a4 = v18;\n    return v16;\n  }\n  v21 = 0;\n  v49 = 0LL;\n  while ( 1 )\n  {\n    v22 = v19[1];\n    if ( v22 == 105 )\n    {\n      if ( (v19[2] & 0xDF) == 66 && !v19[3] )\n      {\nLABEL_37:\n        v27 = 1024;\n        goto LABEL_38;\n      }\n      goto LABEL_23;\n    }\n    if ( (v22 & 0xDF) == 66 && !v19[2] )\n      break;\n    if ( !v22 )\n      goto LABEL_37;\nLABEL_23:\n    v23 = localeconv();\n    if ( !v23 )\n      goto LABEL_7;\n    if ( !v23->decimal_point )\n      goto LABEL_7;\n    s1 = v23->decimal_point;\n    v24 = strlen(v23->decimal_point);\n    if ( v49 )\n      goto LABEL_7;\n    if ( !*v19 )\n      goto LABEL_7;\n    v46 = v24;\n    if ( strncmp(s1, v19, v24) )\n      goto LABEL_7;\n    v25 = &v19[v46];\n    for ( i = v19[v46]; (_BYTE)i == 48; ++v21 )\n      i = *++v25;\n    if ( (*v12)[i] & 0x800 )\n    {\n      *v9 = 0;\n      v38 = v25;\n      endptr = 0LL;\n      v39 = __strtoul_internal(v25, &endptr, 0, 0);\n      v19 = endptr;\n      v49 = v39;\n      v20 = *v9;\n      if ( endptr == v38 )\n        goto LABEL_33;\n      if ( v20 )\n      {\n        if ( v39 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n          goto LABEL_13;\n        goto LABEL_62;\n      }\n      if ( v39 )\n      {\nLABEL_62:\n        if ( !endptr || !*endptr )\n          goto LABEL_7;\n      }\n    }\n    else\n    {\n      endptr = v25;\n      v19 = v25;\n    }\n  }\n  v27 = 1000;\nLABEL_38:\n  v28 = *v19;\n  v29 = strchr(\"KMGTPEZY\", v28);\n  if ( v29 )\n  {\n    v30 = (unsigned __int64)(v29 - \"KMGTPEZY\") + 1;\n    goto LABEL_40;\n  }\n  v45 = strchr(\"kmgtpezy\", v28);\n  if ( !v45 )\n    goto LABEL_7;\n  v30 = (unsigned __int64)(v45 - \"kmgtpezy\") + 1;\nLABEL_40:\n  if ( v30 )\n  {\n    if ( is_mul_ok(v27, v48) )\n    {\n      v31 = 0;\n      while ( 1 )\n      {\n        v48 *= v27;\n        if ( v30 - 1 == v31 )\n          break;\n        ++v31;\n        if ( !is_mul_ok(v27, v48) )\n          goto LABEL_77;\n      }\n      v16 = 0;\n    }\n    else\n    {\nLABEL_77:\n      v16 = -34;\n    }\n    if ( v49 )\n    {\n      v32 = v30 - 1;\n      v33 = 0;\n      v34 = 1LL;\n      do\n      {\n        v34 *= v27;\n        if ( v33 == v32 )\n          break;\n        ++v33;\n      }\n      while ( is_mul_ok(v27, v34) );\n      if ( v49 <= 0xA )\n      {\n        v36 = v49;\n        v35 = 10LL;\n      }\n      else\n      {\n        v35 = 10LL;\n        while ( 1 )\n        {\n          v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v49 >> 64) >> 3;\n          if ( v35 > 0x1999999999999999LL )\n            break;\n          v35 *= 10LL;\n          if ( v35 >= v49 )\n          {\n            v36 = v49;\n            break;\n          }\n        }\n      }\n      if ( v21 )\n      {\n        v37 = 0;\n        do\n        {\n          if ( v35 <= 0x1999999999999999LL )\n            v35 *= 10LL;\n          else\n            v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n          ++v37;\n        }\n        while ( v21 != v37 );\n      }\n      v40 = 1LL;\n      do\n      {\n        v41 = 10 * v40;\n        v42 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        v43 = v36 - 10 * v42;\n        v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        if ( v43 )\n        {\n          v44 = v35 / v40 / v43;\n          if ( v44 )\n            v48 += v34 / v44;\n        }\n        v40 = v41;\n      }\n      while ( v42 );\n    }\n    *v8 = v48;\nLABEL_14:\n    if ( (v16 & 0x80000000) != 0 )\n    {\n      v15 = -v16;\nLABEL_8:\n      *v9 = v15;\n    }\n  }\n  else\n  {\n    v16 = 0;\n    *a4 = v48;\n  }\n  return v16;\n}\n\n// write access to const memory has been detected, the output may be wrong!\n__int64 __usercall sub_8D30@<rax>(char *nptr@<rdi>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned __int64 *a4@<rsi>, __int64 a5@<r12>, __int64 a6@<r13>, __int64 a7@<r14>, __int64 a8@<r15>)\n{\n  unsigned __int64 *v8; // rbp\n  int *v9; // rbx\n  unsigned __int8 v10; // r14\n  const unsigned __int16 **v11; // rax\n  const unsigned __int16 **v12; // r13\n  const unsigned __int16 *v13; // rcx\n  char *v14; // rax\n  int v15; // eax\n  unsigned int v16; // ecx\n  unsigned __int64 v18; // rax\n  char *v19; // r14\n  int v20; // ecx\n  int v21; // er15\n  char v22; // al\n  struct lconv *v23; // rax\n  size_t v24; // rax\n  char *v25; // r8\n  __int64 i; // rax\n  signed int v27; // er13\n  int v28; // er14\n  char *v29; // rax\n  int v30; // edi\n  int v31; // ecx\n  int v32; // edi\n  int v33; // er8\n  unsigned __int64 v34; // r10\n  unsigned __int64 v35; // rdi\n  unsigned __int64 v36; // r8\n  int v37; // esi\n  char *v38; // ST08_8\n  unsigned __int64 v39; // rax\n  unsigned __int64 v40; // r9\n  signed __int64 v41; // r11\n  unsigned __int64 v42; // rsi\n  unsigned __int64 v43; // r13\n  unsigned __int64 v44; // r9\n  char *v45; // rax\n  size_t v46; // [rsp+0h] [rbp-70h]\n  char *s1; // [rsp+8h] [rbp-68h]\n  unsigned __int64 v48; // [rsp+10h] [rbp-60h]\n  unsigned __int64 v49; // [rsp+18h] [rbp-58h]\n  char *endptr; // [rsp+28h] [rbp-48h]\n  unsigned __int64 v51; // [rsp+30h] [rbp-40h]\n  __int64 v52; // [rsp+40h] [rbp-30h]\n  __int64 v53; // [rsp+48h] [rbp-28h]\n  __int64 v54; // [rsp+50h] [rbp-20h]\n  __int64 v55; // [rsp+58h] [rbp-18h]\n  __int64 v56; // [rsp+60h] [rbp-10h]\n  __int64 v57; // [rsp+68h] [rbp-8h]\n\n  v57 = a8;\n  v56 = a7;\n  v55 = a6;\n  v54 = a5;\n  v53 = a3;\n  v52 = a2;\n  v8 = a4;\n  *a4 = 0LL;\n  v51 = __readfsqword(0x28u);\n  v9 = __errno_location();\n  if ( !nptr )\n    goto LABEL_7;\n  v10 = *nptr;\n  if ( !*nptr )\n    goto LABEL_7;\n  v11 = __ctype_b_loc();\n  v12 = v11;\n  v13 = *v11;\n  v14 = nptr;\n  while ( v13[v10] & 0x2000 )\n    v10 = *++v14;\n  if ( v10 == 45 )\n    goto LABEL_7;\n  *v9 = 0;\n  endptr = 0LL;\n  v18 = __strtoul_internal(nptr, &endptr, 0, 0);\n  v19 = endptr;\n  v48 = v18;\n  v20 = *v9;\n  if ( endptr == nptr )\n  {\nLABEL_33:\n    if ( !v20 )\n    {\nLABEL_7:\n      v15 = 22;\n      v16 = -22;\n      goto LABEL_8;\n    }\nLABEL_13:\n    v16 = -v20;\n    goto LABEL_14;\n  }\n  if ( v20 && v18 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n    goto LABEL_13;\n  if ( !endptr || !*endptr )\n  {\n    v16 = 0;\n    *a4 = v18;\n    return v16;\n  }\n  v21 = 0;\n  v49 = 0LL;\n  while ( 1 )\n  {\n    v22 = v19[1];\n    if ( v22 == 105 )\n    {\n      if ( (v19[2] & 0xDF) == 66 && !v19[3] )\n      {\nLABEL_37:\n        v27 = 1024;\n        goto LABEL_38;\n      }\n      goto LABEL_23;\n    }\n    if ( (v22 & 0xDF) == 66 && !v19[2] )\n      break;\n    if ( !v22 )\n      goto LABEL_37;\nLABEL_23:\n    v23 = localeconv();\n    if ( !v23 )\n      goto LABEL_7;\n    if ( !v23->decimal_point )\n      goto LABEL_7;\n    s1 = v23->decimal_point;\n    v24 = strlen(v23->decimal_point);\n    if ( v49 )\n      goto LABEL_7;\n    if ( !*v19 )\n      goto LABEL_7;\n    v46 = v24;\n    if ( strncmp(s1, v19, v24) )\n      goto LABEL_7;\n    v25 = &v19[v46];\n    for ( i = v19[v46]; (_BYTE)i == 48; ++v21 )\n      i = *++v25;\n    if ( (*v12)[i] & 0x800 )\n    {\n      *v9 = 0;\n      v38 = v25;\n      endptr = 0LL;\n      v39 = __strtoul_internal(v25, &endptr, 0, 0);\n      v19 = endptr;\n      v49 = v39;\n      v20 = *v9;\n      if ( endptr == v38 )\n        goto LABEL_33;\n      if ( v20 )\n      {\n        if ( v39 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n          goto LABEL_13;\n        goto LABEL_62;\n      }\n      if ( v39 )\n      {\nLABEL_62:\n        if ( !endptr || !*endptr )\n          goto LABEL_7;\n      }\n    }\n    else\n    {\n      endptr = v25;\n      v19 = v25;\n    }\n  }\n  v27 = 1000;\nLABEL_38:\n  v28 = *v19;\n  v29 = strchr(\"KMGTPEZY\", v28);\n  if ( v29 )\n  {\n    v30 = (unsigned __int64)(v29 - \"KMGTPEZY\") + 1;\n    goto LABEL_40;\n  }\n  v45 = strchr(\"kmgtpezy\", v28);\n  if ( !v45 )\n    goto LABEL_7;\n  v30 = (unsigned __int64)(v45 - \"kmgtpezy\") + 1;\nLABEL_40:\n  if ( v30 )\n  {\n    if ( is_mul_ok(v27, v48) )\n    {\n      v31 = 0;\n      while ( 1 )\n      {\n        v48 *= v27;\n        if ( v30 - 1 == v31 )\n          break;\n        ++v31;\n        if ( !is_mul_ok(v27, v48) )\n          goto LABEL_77;\n      }\n      v16 = 0;\n    }\n    else\n    {\nLABEL_77:\n      v16 = -34;\n    }\n    if ( v49 )\n    {\n      v32 = v30 - 1;\n      v33 = 0;\n      v34 = 1LL;\n      do\n      {\n        v34 *= v27;\n        if ( v33 == v32 )\n          break;\n        ++v33;\n      }\n      while ( is_mul_ok(v27, v34) );\n      if ( v49 <= 0xA )\n      {\n        v36 = v49;\n        v35 = 10LL;\n      }\n      else\n      {\n        v35 = 10LL;\n        while ( 1 )\n        {\n          v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v49 >> 64) >> 3;\n          if ( v35 > 0x1999999999999999LL )\n            break;\n          v35 *= 10LL;\n          if ( v35 >= v49 )\n          {\n            v36 = v49;\n            break;\n          }\n        }\n      }\n      if ( v21 )\n      {\n        v37 = 0;\n        do\n        {\n          if ( v35 <= 0x1999999999999999LL )\n            v35 *= 10LL;\n          else\n            v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n          ++v37;\n        }\n        while ( v21 != v37 );\n      }\n      v40 = 1LL;\n      do\n      {\n        v41 = 10 * v40;\n        v42 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        v43 = v36 - 10 * v42;\n        v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        if ( v43 )\n        {\n          v44 = v35 / v40 / v43;\n          if ( v44 )\n            v48 += v34 / v44;\n        }\n        v40 = v41;\n      }\n      while ( v42 );\n    }\n    *v8 = v48;\nLABEL_14:\n    if ( (v16 & 0x80000000) != 0 )\n    {\n      v15 = -v16;\nLABEL_8:\n      *v9 = v15;\n    }\n  }\n  else\n  {\n    v16 = 0;\n    *a4 = v48;\n  }\n  return v16;\n}\n", 
            "funcStartAddr": "0x8c38L", 
            "funcEndAddr": "0x8d29L", 
            "funcName": "sub_8D30"
        }, 
        {
            "decompiledFuncCode": "// write access to const memory has been detected, the output may be wrong!\n__int64 __usercall sub_8D30@<rax>(char *nptr@<rdi>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned __int64 *a4@<rsi>, __int64 a5@<r12>, __int64 a6@<r13>, __int64 a7@<r14>, __int64 a8@<r15>)\n{\n  unsigned __int64 *v8; // rbp\n  int *v9; // rbx\n  unsigned __int8 v10; // r14\n  const unsigned __int16 **v11; // rax\n  const unsigned __int16 **v12; // r13\n  const unsigned __int16 *v13; // rcx\n  char *v14; // rax\n  int v15; // eax\n  unsigned int v16; // ecx\n  unsigned __int64 v18; // rax\n  char *v19; // r14\n  int v20; // ecx\n  int v21; // er15\n  char v22; // al\n  struct lconv *v23; // rax\n  size_t v24; // rax\n  char *v25; // r8\n  __int64 i; // rax\n  signed int v27; // er13\n  int v28; // er14\n  char *v29; // rax\n  int v30; // edi\n  int v31; // ecx\n  int v32; // edi\n  int v33; // er8\n  unsigned __int64 v34; // r10\n  unsigned __int64 v35; // rdi\n  unsigned __int64 v36; // r8\n  int v37; // esi\n  char *v38; // ST08_8\n  unsigned __int64 v39; // rax\n  unsigned __int64 v40; // r9\n  signed __int64 v41; // r11\n  unsigned __int64 v42; // rsi\n  unsigned __int64 v43; // r13\n  unsigned __int64 v44; // r9\n  char *v45; // rax\n  size_t v46; // [rsp+0h] [rbp-70h]\n  char *s1; // [rsp+8h] [rbp-68h]\n  unsigned __int64 v48; // [rsp+10h] [rbp-60h]\n  unsigned __int64 v49; // [rsp+18h] [rbp-58h]\n  char *endptr; // [rsp+28h] [rbp-48h]\n  unsigned __int64 v51; // [rsp+30h] [rbp-40h]\n  __int64 v52; // [rsp+40h] [rbp-30h]\n  __int64 v53; // [rsp+48h] [rbp-28h]\n  __int64 v54; // [rsp+50h] [rbp-20h]\n  __int64 v55; // [rsp+58h] [rbp-18h]\n  __int64 v56; // [rsp+60h] [rbp-10h]\n  __int64 v57; // [rsp+68h] [rbp-8h]\n\n  v57 = a8;\n  v56 = a7;\n  v55 = a6;\n  v54 = a5;\n  v53 = a3;\n  v52 = a2;\n  v8 = a4;\n  *a4 = 0LL;\n  v51 = __readfsqword(0x28u);\n  v9 = __errno_location();\n  if ( !nptr )\n    goto LABEL_7;\n  v10 = *nptr;\n  if ( !*nptr )\n    goto LABEL_7;\n  v11 = __ctype_b_loc();\n  v12 = v11;\n  v13 = *v11;\n  v14 = nptr;\n  while ( v13[v10] & 0x2000 )\n    v10 = *++v14;\n  if ( v10 == 45 )\n    goto LABEL_7;\n  *v9 = 0;\n  endptr = 0LL;\n  v18 = __strtoul_internal(nptr, &endptr, 0, 0);\n  v19 = endptr;\n  v48 = v18;\n  v20 = *v9;\n  if ( endptr == nptr )\n  {\nLABEL_33:\n    if ( !v20 )\n    {\nLABEL_7:\n      v15 = 22;\n      v16 = -22;\n      goto LABEL_8;\n    }\nLABEL_13:\n    v16 = -v20;\n    goto LABEL_14;\n  }\n  if ( v20 && v18 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n    goto LABEL_13;\n  if ( !endptr || !*endptr )\n  {\n    v16 = 0;\n    *a4 = v18;\n    return v16;\n  }\n  v21 = 0;\n  v49 = 0LL;\n  while ( 1 )\n  {\n    v22 = v19[1];\n    if ( v22 == 105 )\n    {\n      if ( (v19[2] & 0xDF) == 66 && !v19[3] )\n      {\nLABEL_37:\n        v27 = 1024;\n        goto LABEL_38;\n      }\n      goto LABEL_23;\n    }\n    if ( (v22 & 0xDF) == 66 && !v19[2] )\n      break;\n    if ( !v22 )\n      goto LABEL_37;\nLABEL_23:\n    v23 = localeconv();\n    if ( !v23 )\n      goto LABEL_7;\n    if ( !v23->decimal_point )\n      goto LABEL_7;\n    s1 = v23->decimal_point;\n    v24 = strlen(v23->decimal_point);\n    if ( v49 )\n      goto LABEL_7;\n    if ( !*v19 )\n      goto LABEL_7;\n    v46 = v24;\n    if ( strncmp(s1, v19, v24) )\n      goto LABEL_7;\n    v25 = &v19[v46];\n    for ( i = v19[v46]; (_BYTE)i == 48; ++v21 )\n      i = *++v25;\n    if ( (*v12)[i] & 0x800 )\n    {\n      *v9 = 0;\n      v38 = v25;\n      endptr = 0LL;\n      v39 = __strtoul_internal(v25, &endptr, 0, 0);\n      v19 = endptr;\n      v49 = v39;\n      v20 = *v9;\n      if ( endptr == v38 )\n        goto LABEL_33;\n      if ( v20 )\n      {\n        if ( v39 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n          goto LABEL_13;\n        goto LABEL_62;\n      }\n      if ( v39 )\n      {\nLABEL_62:\n        if ( !endptr || !*endptr )\n          goto LABEL_7;\n      }\n    }\n    else\n    {\n      endptr = v25;\n      v19 = v25;\n    }\n  }\n  v27 = 1000;\nLABEL_38:\n  v28 = *v19;\n  v29 = strchr(\"KMGTPEZY\", v28);\n  if ( v29 )\n  {\n    v30 = (unsigned __int64)(v29 - \"KMGTPEZY\") + 1;\n    goto LABEL_40;\n  }\n  v45 = strchr(\"kmgtpezy\", v28);\n  if ( !v45 )\n    goto LABEL_7;\n  v30 = (unsigned __int64)(v45 - \"kmgtpezy\") + 1;\nLABEL_40:\n  if ( v30 )\n  {\n    if ( is_mul_ok(v27, v48) )\n    {\n      v31 = 0;\n      while ( 1 )\n      {\n        v48 *= v27;\n        if ( v30 - 1 == v31 )\n          break;\n        ++v31;\n        if ( !is_mul_ok(v27, v48) )\n          goto LABEL_77;\n      }\n      v16 = 0;\n    }\n    else\n    {\nLABEL_77:\n      v16 = -34;\n    }\n    if ( v49 )\n    {\n      v32 = v30 - 1;\n      v33 = 0;\n      v34 = 1LL;\n      do\n      {\n        v34 *= v27;\n        if ( v33 == v32 )\n          break;\n        ++v33;\n      }\n      while ( is_mul_ok(v27, v34) );\n      if ( v49 <= 0xA )\n      {\n        v36 = v49;\n        v35 = 10LL;\n      }\n      else\n      {\n        v35 = 10LL;\n        while ( 1 )\n        {\n          v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v49 >> 64) >> 3;\n          if ( v35 > 0x1999999999999999LL )\n            break;\n          v35 *= 10LL;\n          if ( v35 >= v49 )\n          {\n            v36 = v49;\n            break;\n          }\n        }\n      }\n      if ( v21 )\n      {\n        v37 = 0;\n        do\n        {\n          if ( v35 <= 0x1999999999999999LL )\n            v35 *= 10LL;\n          else\n            v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n          ++v37;\n        }\n        while ( v21 != v37 );\n      }\n      v40 = 1LL;\n      do\n      {\n        v41 = 10 * v40;\n        v42 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        v43 = v36 - 10 * v42;\n        v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        if ( v43 )\n        {\n          v44 = v35 / v40 / v43;\n          if ( v44 )\n            v48 += v34 / v44;\n        }\n        v40 = v41;\n      }\n      while ( v42 );\n    }\n    *v8 = v48;\nLABEL_14:\n    if ( (v16 & 0x80000000) != 0 )\n    {\n      v15 = -v16;\nLABEL_8:\n      *v9 = v15;\n    }\n  }\n  else\n  {\n    v16 = 0;\n    *a4 = v48;\n  }\n  return v16;\n}\n\n// write access to const memory has been detected, the output may be wrong!\n__int64 __usercall sub_8D30@<rax>(char *nptr@<rdi>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned __int64 *a4@<rsi>, __int64 a5@<r12>, __int64 a6@<r13>, __int64 a7@<r14>, __int64 a8@<r15>)\n{\n  unsigned __int64 *v8; // rbp\n  int *v9; // rbx\n  unsigned __int8 v10; // r14\n  const unsigned __int16 **v11; // rax\n  const unsigned __int16 **v12; // r13\n  const unsigned __int16 *v13; // rcx\n  char *v14; // rax\n  int v15; // eax\n  unsigned int v16; // ecx\n  unsigned __int64 v18; // rax\n  char *v19; // r14\n  int v20; // ecx\n  int v21; // er15\n  char v22; // al\n  struct lconv *v23; // rax\n  size_t v24; // rax\n  char *v25; // r8\n  __int64 i; // rax\n  signed int v27; // er13\n  int v28; // er14\n  char *v29; // rax\n  int v30; // edi\n  int v31; // ecx\n  int v32; // edi\n  int v33; // er8\n  unsigned __int64 v34; // r10\n  unsigned __int64 v35; // rdi\n  unsigned __int64 v36; // r8\n  int v37; // esi\n  char *v38; // ST08_8\n  unsigned __int64 v39; // rax\n  unsigned __int64 v40; // r9\n  signed __int64 v41; // r11\n  unsigned __int64 v42; // rsi\n  unsigned __int64 v43; // r13\n  unsigned __int64 v44; // r9\n  char *v45; // rax\n  size_t v46; // [rsp+0h] [rbp-70h]\n  char *s1; // [rsp+8h] [rbp-68h]\n  unsigned __int64 v48; // [rsp+10h] [rbp-60h]\n  unsigned __int64 v49; // [rsp+18h] [rbp-58h]\n  char *endptr; // [rsp+28h] [rbp-48h]\n  unsigned __int64 v51; // [rsp+30h] [rbp-40h]\n  __int64 v52; // [rsp+40h] [rbp-30h]\n  __int64 v53; // [rsp+48h] [rbp-28h]\n  __int64 v54; // [rsp+50h] [rbp-20h]\n  __int64 v55; // [rsp+58h] [rbp-18h]\n  __int64 v56; // [rsp+60h] [rbp-10h]\n  __int64 v57; // [rsp+68h] [rbp-8h]\n\n  v57 = a8;\n  v56 = a7;\n  v55 = a6;\n  v54 = a5;\n  v53 = a3;\n  v52 = a2;\n  v8 = a4;\n  *a4 = 0LL;\n  v51 = __readfsqword(0x28u);\n  v9 = __errno_location();\n  if ( !nptr )\n    goto LABEL_7;\n  v10 = *nptr;\n  if ( !*nptr )\n    goto LABEL_7;\n  v11 = __ctype_b_loc();\n  v12 = v11;\n  v13 = *v11;\n  v14 = nptr;\n  while ( v13[v10] & 0x2000 )\n    v10 = *++v14;\n  if ( v10 == 45 )\n    goto LABEL_7;\n  *v9 = 0;\n  endptr = 0LL;\n  v18 = __strtoul_internal(nptr, &endptr, 0, 0);\n  v19 = endptr;\n  v48 = v18;\n  v20 = *v9;\n  if ( endptr == nptr )\n  {\nLABEL_33:\n    if ( !v20 )\n    {\nLABEL_7:\n      v15 = 22;\n      v16 = -22;\n      goto LABEL_8;\n    }\nLABEL_13:\n    v16 = -v20;\n    goto LABEL_14;\n  }\n  if ( v20 && v18 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n    goto LABEL_13;\n  if ( !endptr || !*endptr )\n  {\n    v16 = 0;\n    *a4 = v18;\n    return v16;\n  }\n  v21 = 0;\n  v49 = 0LL;\n  while ( 1 )\n  {\n    v22 = v19[1];\n    if ( v22 == 105 )\n    {\n      if ( (v19[2] & 0xDF) == 66 && !v19[3] )\n      {\nLABEL_37:\n        v27 = 1024;\n        goto LABEL_38;\n      }\n      goto LABEL_23;\n    }\n    if ( (v22 & 0xDF) == 66 && !v19[2] )\n      break;\n    if ( !v22 )\n      goto LABEL_37;\nLABEL_23:\n    v23 = localeconv();\n    if ( !v23 )\n      goto LABEL_7;\n    if ( !v23->decimal_point )\n      goto LABEL_7;\n    s1 = v23->decimal_point;\n    v24 = strlen(v23->decimal_point);\n    if ( v49 )\n      goto LABEL_7;\n    if ( !*v19 )\n      goto LABEL_7;\n    v46 = v24;\n    if ( strncmp(s1, v19, v24) )\n      goto LABEL_7;\n    v25 = &v19[v46];\n    for ( i = v19[v46]; (_BYTE)i == 48; ++v21 )\n      i = *++v25;\n    if ( (*v12)[i] & 0x800 )\n    {\n      *v9 = 0;\n      v38 = v25;\n      endptr = 0LL;\n      v39 = __strtoul_internal(v25, &endptr, 0, 0);\n      v19 = endptr;\n      v49 = v39;\n      v20 = *v9;\n      if ( endptr == v38 )\n        goto LABEL_33;\n      if ( v20 )\n      {\n        if ( v39 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n          goto LABEL_13;\n        goto LABEL_62;\n      }\n      if ( v39 )\n      {\nLABEL_62:\n        if ( !endptr || !*endptr )\n          goto LABEL_7;\n      }\n    }\n    else\n    {\n      endptr = v25;\n      v19 = v25;\n    }\n  }\n  v27 = 1000;\nLABEL_38:\n  v28 = *v19;\n  v29 = strchr(\"KMGTPEZY\", v28);\n  if ( v29 )\n  {\n    v30 = (unsigned __int64)(v29 - \"KMGTPEZY\") + 1;\n    goto LABEL_40;\n  }\n  v45 = strchr(\"kmgtpezy\", v28);\n  if ( !v45 )\n    goto LABEL_7;\n  v30 = (unsigned __int64)(v45 - \"kmgtpezy\") + 1;\nLABEL_40:\n  if ( v30 )\n  {\n    if ( is_mul_ok(v27, v48) )\n    {\n      v31 = 0;\n      while ( 1 )\n      {\n        v48 *= v27;\n        if ( v30 - 1 == v31 )\n          break;\n        ++v31;\n        if ( !is_mul_ok(v27, v48) )\n          goto LABEL_77;\n      }\n      v16 = 0;\n    }\n    else\n    {\nLABEL_77:\n      v16 = -34;\n    }\n    if ( v49 )\n    {\n      v32 = v30 - 1;\n      v33 = 0;\n      v34 = 1LL;\n      do\n      {\n        v34 *= v27;\n        if ( v33 == v32 )\n          break;\n        ++v33;\n      }\n      while ( is_mul_ok(v27, v34) );\n      if ( v49 <= 0xA )\n      {\n        v36 = v49;\n        v35 = 10LL;\n      }\n      else\n      {\n        v35 = 10LL;\n        while ( 1 )\n        {\n          v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v49 >> 64) >> 3;\n          if ( v35 > 0x1999999999999999LL )\n            break;\n          v35 *= 10LL;\n          if ( v35 >= v49 )\n          {\n            v36 = v49;\n            break;\n          }\n        }\n      }\n      if ( v21 )\n      {\n        v37 = 0;\n        do\n        {\n          if ( v35 <= 0x1999999999999999LL )\n            v35 *= 10LL;\n          else\n            v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n          ++v37;\n        }\n        while ( v21 != v37 );\n      }\n      v40 = 1LL;\n      do\n      {\n        v41 = 10 * v40;\n        v42 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        v43 = v36 - 10 * v42;\n        v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        if ( v43 )\n        {\n          v44 = v35 / v40 / v43;\n          if ( v44 )\n            v48 += v34 / v44;\n        }\n        v40 = v41;\n      }\n      while ( v42 );\n    }\n    *v8 = v48;\nLABEL_14:\n    if ( (v16 & 0x80000000) != 0 )\n    {\n      v15 = -v16;\nLABEL_8:\n      *v9 = v15;\n    }\n  }\n  else\n  {\n    v16 = 0;\n    *a4 = v48;\n  }\n  return v16;\n}\n\n// write access to const memory has been detected, the output may be wrong!\n__int64 __usercall sub_8D30@<rax>(char *nptr@<rdi>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned __int64 *a4@<rsi>, __int64 a5@<r12>, __int64 a6@<r13>, __int64 a7@<r14>, __int64 a8@<r15>)\n{\n  unsigned __int64 *v8; // rbp\n  int *v9; // rbx\n  unsigned __int8 v10; // r14\n  const unsigned __int16 **v11; // rax\n  const unsigned __int16 **v12; // r13\n  const unsigned __int16 *v13; // rcx\n  char *v14; // rax\n  int v15; // eax\n  unsigned int v16; // ecx\n  unsigned __int64 v18; // rax\n  char *v19; // r14\n  int v20; // ecx\n  int v21; // er15\n  char v22; // al\n  struct lconv *v23; // rax\n  size_t v24; // rax\n  char *v25; // r8\n  __int64 i; // rax\n  signed int v27; // er13\n  int v28; // er14\n  char *v29; // rax\n  int v30; // edi\n  int v31; // ecx\n  int v32; // edi\n  int v33; // er8\n  unsigned __int64 v34; // r10\n  unsigned __int64 v35; // rdi\n  unsigned __int64 v36; // r8\n  int v37; // esi\n  char *v38; // ST08_8\n  unsigned __int64 v39; // rax\n  unsigned __int64 v40; // r9\n  signed __int64 v41; // r11\n  unsigned __int64 v42; // rsi\n  unsigned __int64 v43; // r13\n  unsigned __int64 v44; // r9\n  char *v45; // rax\n  size_t v46; // [rsp+0h] [rbp-70h]\n  char *s1; // [rsp+8h] [rbp-68h]\n  unsigned __int64 v48; // [rsp+10h] [rbp-60h]\n  unsigned __int64 v49; // [rsp+18h] [rbp-58h]\n  char *endptr; // [rsp+28h] [rbp-48h]\n  unsigned __int64 v51; // [rsp+30h] [rbp-40h]\n  __int64 v52; // [rsp+40h] [rbp-30h]\n  __int64 v53; // [rsp+48h] [rbp-28h]\n  __int64 v54; // [rsp+50h] [rbp-20h]\n  __int64 v55; // [rsp+58h] [rbp-18h]\n  __int64 v56; // [rsp+60h] [rbp-10h]\n  __int64 v57; // [rsp+68h] [rbp-8h]\n\n  v57 = a8;\n  v56 = a7;\n  v55 = a6;\n  v54 = a5;\n  v53 = a3;\n  v52 = a2;\n  v8 = a4;\n  *a4 = 0LL;\n  v51 = __readfsqword(0x28u);\n  v9 = __errno_location();\n  if ( !nptr )\n    goto LABEL_7;\n  v10 = *nptr;\n  if ( !*nptr )\n    goto LABEL_7;\n  v11 = __ctype_b_loc();\n  v12 = v11;\n  v13 = *v11;\n  v14 = nptr;\n  while ( v13[v10] & 0x2000 )\n    v10 = *++v14;\n  if ( v10 == 45 )\n    goto LABEL_7;\n  *v9 = 0;\n  endptr = 0LL;\n  v18 = __strtoul_internal(nptr, &endptr, 0, 0);\n  v19 = endptr;\n  v48 = v18;\n  v20 = *v9;\n  if ( endptr == nptr )\n  {\nLABEL_33:\n    if ( !v20 )\n    {\nLABEL_7:\n      v15 = 22;\n      v16 = -22;\n      goto LABEL_8;\n    }\nLABEL_13:\n    v16 = -v20;\n    goto LABEL_14;\n  }\n  if ( v20 && v18 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n    goto LABEL_13;\n  if ( !endptr || !*endptr )\n  {\n    v16 = 0;\n    *a4 = v18;\n    return v16;\n  }\n  v21 = 0;\n  v49 = 0LL;\n  while ( 1 )\n  {\n    v22 = v19[1];\n    if ( v22 == 105 )\n    {\n      if ( (v19[2] & 0xDF) == 66 && !v19[3] )\n      {\nLABEL_37:\n        v27 = 1024;\n        goto LABEL_38;\n      }\n      goto LABEL_23;\n    }\n    if ( (v22 & 0xDF) == 66 && !v19[2] )\n      break;\n    if ( !v22 )\n      goto LABEL_37;\nLABEL_23:\n    v23 = localeconv();\n    if ( !v23 )\n      goto LABEL_7;\n    if ( !v23->decimal_point )\n      goto LABEL_7;\n    s1 = v23->decimal_point;\n    v24 = strlen(v23->decimal_point);\n    if ( v49 )\n      goto LABEL_7;\n    if ( !*v19 )\n      goto LABEL_7;\n    v46 = v24;\n    if ( strncmp(s1, v19, v24) )\n      goto LABEL_7;\n    v25 = &v19[v46];\n    for ( i = v19[v46]; (_BYTE)i == 48; ++v21 )\n      i = *++v25;\n    if ( (*v12)[i] & 0x800 )\n    {\n      *v9 = 0;\n      v38 = v25;\n      endptr = 0LL;\n      v39 = __strtoul_internal(v25, &endptr, 0, 0);\n      v19 = endptr;\n      v49 = v39;\n      v20 = *v9;\n      if ( endptr == v38 )\n        goto LABEL_33;\n      if ( v20 )\n      {\n        if ( v39 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n          goto LABEL_13;\n        goto LABEL_62;\n      }\n      if ( v39 )\n      {\nLABEL_62:\n        if ( !endptr || !*endptr )\n          goto LABEL_7;\n      }\n    }\n    else\n    {\n      endptr = v25;\n      v19 = v25;\n    }\n  }\n  v27 = 1000;\nLABEL_38:\n  v28 = *v19;\n  v29 = strchr(\"KMGTPEZY\", v28);\n  if ( v29 )\n  {\n    v30 = (unsigned __int64)(v29 - \"KMGTPEZY\") + 1;\n    goto LABEL_40;\n  }\n  v45 = strchr(\"kmgtpezy\", v28);\n  if ( !v45 )\n    goto LABEL_7;\n  v30 = (unsigned __int64)(v45 - \"kmgtpezy\") + 1;\nLABEL_40:\n  if ( v30 )\n  {\n    if ( is_mul_ok(v27, v48) )\n    {\n      v31 = 0;\n      while ( 1 )\n      {\n        v48 *= v27;\n        if ( v30 - 1 == v31 )\n          break;\n        ++v31;\n        if ( !is_mul_ok(v27, v48) )\n          goto LABEL_77;\n      }\n      v16 = 0;\n    }\n    else\n    {\nLABEL_77:\n      v16 = -34;\n    }\n    if ( v49 )\n    {\n      v32 = v30 - 1;\n      v33 = 0;\n      v34 = 1LL;\n      do\n      {\n        v34 *= v27;\n        if ( v33 == v32 )\n          break;\n        ++v33;\n      }\n      while ( is_mul_ok(v27, v34) );\n      if ( v49 <= 0xA )\n      {\n        v36 = v49;\n        v35 = 10LL;\n      }\n      else\n      {\n        v35 = 10LL;\n        while ( 1 )\n        {\n          v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v49 >> 64) >> 3;\n          if ( v35 > 0x1999999999999999LL )\n            break;\n          v35 *= 10LL;\n          if ( v35 >= v49 )\n          {\n            v36 = v49;\n            break;\n          }\n        }\n      }\n      if ( v21 )\n      {\n        v37 = 0;\n        do\n        {\n          if ( v35 <= 0x1999999999999999LL )\n            v35 *= 10LL;\n          else\n            v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n          ++v37;\n        }\n        while ( v21 != v37 );\n      }\n      v40 = 1LL;\n      do\n      {\n        v41 = 10 * v40;\n        v42 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        v43 = v36 - 10 * v42;\n        v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        if ( v43 )\n        {\n          v44 = v35 / v40 / v43;\n          if ( v44 )\n            v48 += v34 / v44;\n        }\n        v40 = v41;\n      }\n      while ( v42 );\n    }\n    *v8 = v48;\nLABEL_14:\n    if ( (v16 & 0x80000000) != 0 )\n    {\n      v15 = -v16;\nLABEL_8:\n      *v9 = v15;\n    }\n  }\n  else\n  {\n    v16 = 0;\n    *a4 = v48;\n  }\n  return v16;\n}\n\n// write access to const memory has been detected, the output may be wrong!\n__int64 __usercall sub_8D30@<rax>(char *nptr@<rdi>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned __int64 *a4@<rsi>, __int64 a5@<r12>, __int64 a6@<r13>, __int64 a7@<r14>, __int64 a8@<r15>)\n{\n  unsigned __int64 *v8; // rbp\n  int *v9; // rbx\n  unsigned __int8 v10; // r14\n  const unsigned __int16 **v11; // rax\n  const unsigned __int16 **v12; // r13\n  const unsigned __int16 *v13; // rcx\n  char *v14; // rax\n  int v15; // eax\n  unsigned int v16; // ecx\n  unsigned __int64 v18; // rax\n  char *v19; // r14\n  int v20; // ecx\n  int v21; // er15\n  char v22; // al\n  struct lconv *v23; // rax\n  size_t v24; // rax\n  char *v25; // r8\n  __int64 i; // rax\n  signed int v27; // er13\n  int v28; // er14\n  char *v29; // rax\n  int v30; // edi\n  int v31; // ecx\n  int v32; // edi\n  int v33; // er8\n  unsigned __int64 v34; // r10\n  unsigned __int64 v35; // rdi\n  unsigned __int64 v36; // r8\n  int v37; // esi\n  char *v38; // ST08_8\n  unsigned __int64 v39; // rax\n  unsigned __int64 v40; // r9\n  signed __int64 v41; // r11\n  unsigned __int64 v42; // rsi\n  unsigned __int64 v43; // r13\n  unsigned __int64 v44; // r9\n  char *v45; // rax\n  size_t v46; // [rsp+0h] [rbp-70h]\n  char *s1; // [rsp+8h] [rbp-68h]\n  unsigned __int64 v48; // [rsp+10h] [rbp-60h]\n  unsigned __int64 v49; // [rsp+18h] [rbp-58h]\n  char *endptr; // [rsp+28h] [rbp-48h]\n  unsigned __int64 v51; // [rsp+30h] [rbp-40h]\n  __int64 v52; // [rsp+40h] [rbp-30h]\n  __int64 v53; // [rsp+48h] [rbp-28h]\n  __int64 v54; // [rsp+50h] [rbp-20h]\n  __int64 v55; // [rsp+58h] [rbp-18h]\n  __int64 v56; // [rsp+60h] [rbp-10h]\n  __int64 v57; // [rsp+68h] [rbp-8h]\n\n  v57 = a8;\n  v56 = a7;\n  v55 = a6;\n  v54 = a5;\n  v53 = a3;\n  v52 = a2;\n  v8 = a4;\n  *a4 = 0LL;\n  v51 = __readfsqword(0x28u);\n  v9 = __errno_location();\n  if ( !nptr )\n    goto LABEL_7;\n  v10 = *nptr;\n  if ( !*nptr )\n    goto LABEL_7;\n  v11 = __ctype_b_loc();\n  v12 = v11;\n  v13 = *v11;\n  v14 = nptr;\n  while ( v13[v10] & 0x2000 )\n    v10 = *++v14;\n  if ( v10 == 45 )\n    goto LABEL_7;\n  *v9 = 0;\n  endptr = 0LL;\n  v18 = __strtoul_internal(nptr, &endptr, 0, 0);\n  v19 = endptr;\n  v48 = v18;\n  v20 = *v9;\n  if ( endptr == nptr )\n  {\nLABEL_33:\n    if ( !v20 )\n    {\nLABEL_7:\n      v15 = 22;\n      v16 = -22;\n      goto LABEL_8;\n    }\nLABEL_13:\n    v16 = -v20;\n    goto LABEL_14;\n  }\n  if ( v20 && v18 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n    goto LABEL_13;\n  if ( !endptr || !*endptr )\n  {\n    v16 = 0;\n    *a4 = v18;\n    return v16;\n  }\n  v21 = 0;\n  v49 = 0LL;\n  while ( 1 )\n  {\n    v22 = v19[1];\n    if ( v22 == 105 )\n    {\n      if ( (v19[2] & 0xDF) == 66 && !v19[3] )\n      {\nLABEL_37:\n        v27 = 1024;\n        goto LABEL_38;\n      }\n      goto LABEL_23;\n    }\n    if ( (v22 & 0xDF) == 66 && !v19[2] )\n      break;\n    if ( !v22 )\n      goto LABEL_37;\nLABEL_23:\n    v23 = localeconv();\n    if ( !v23 )\n      goto LABEL_7;\n    if ( !v23->decimal_point )\n      goto LABEL_7;\n    s1 = v23->decimal_point;\n    v24 = strlen(v23->decimal_point);\n    if ( v49 )\n      goto LABEL_7;\n    if ( !*v19 )\n      goto LABEL_7;\n    v46 = v24;\n    if ( strncmp(s1, v19, v24) )\n      goto LABEL_7;\n    v25 = &v19[v46];\n    for ( i = v19[v46]; (_BYTE)i == 48; ++v21 )\n      i = *++v25;\n    if ( (*v12)[i] & 0x800 )\n    {\n      *v9 = 0;\n      v38 = v25;\n      endptr = 0LL;\n      v39 = __strtoul_internal(v25, &endptr, 0, 0);\n      v19 = endptr;\n      v49 = v39;\n      v20 = *v9;\n      if ( endptr == v38 )\n        goto LABEL_33;\n      if ( v20 )\n      {\n        if ( v39 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n          goto LABEL_13;\n        goto LABEL_62;\n      }\n      if ( v39 )\n      {\nLABEL_62:\n        if ( !endptr || !*endptr )\n          goto LABEL_7;\n      }\n    }\n    else\n    {\n      endptr = v25;\n      v19 = v25;\n    }\n  }\n  v27 = 1000;\nLABEL_38:\n  v28 = *v19;\n  v29 = strchr(\"KMGTPEZY\", v28);\n  if ( v29 )\n  {\n    v30 = (unsigned __int64)(v29 - \"KMGTPEZY\") + 1;\n    goto LABEL_40;\n  }\n  v45 = strchr(\"kmgtpezy\", v28);\n  if ( !v45 )\n    goto LABEL_7;\n  v30 = (unsigned __int64)(v45 - \"kmgtpezy\") + 1;\nLABEL_40:\n  if ( v30 )\n  {\n    if ( is_mul_ok(v27, v48) )\n    {\n      v31 = 0;\n      while ( 1 )\n      {\n        v48 *= v27;\n        if ( v30 - 1 == v31 )\n          break;\n        ++v31;\n        if ( !is_mul_ok(v27, v48) )\n          goto LABEL_77;\n      }\n      v16 = 0;\n    }\n    else\n    {\nLABEL_77:\n      v16 = -34;\n    }\n    if ( v49 )\n    {\n      v32 = v30 - 1;\n      v33 = 0;\n      v34 = 1LL;\n      do\n      {\n        v34 *= v27;\n        if ( v33 == v32 )\n          break;\n        ++v33;\n      }\n      while ( is_mul_ok(v27, v34) );\n      if ( v49 <= 0xA )\n      {\n        v36 = v49;\n        v35 = 10LL;\n      }\n      else\n      {\n        v35 = 10LL;\n        while ( 1 )\n        {\n          v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v49 >> 64) >> 3;\n          if ( v35 > 0x1999999999999999LL )\n            break;\n          v35 *= 10LL;\n          if ( v35 >= v49 )\n          {\n            v36 = v49;\n            break;\n          }\n        }\n      }\n      if ( v21 )\n      {\n        v37 = 0;\n        do\n        {\n          if ( v35 <= 0x1999999999999999LL )\n            v35 *= 10LL;\n          else\n            v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n          ++v37;\n        }\n        while ( v21 != v37 );\n      }\n      v40 = 1LL;\n      do\n      {\n        v41 = 10 * v40;\n        v42 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        v43 = v36 - 10 * v42;\n        v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        if ( v43 )\n        {\n          v44 = v35 / v40 / v43;\n          if ( v44 )\n            v48 += v34 / v44;\n        }\n        v40 = v41;\n      }\n      while ( v42 );\n    }\n    *v8 = v48;\nLABEL_14:\n    if ( (v16 & 0x80000000) != 0 )\n    {\n      v15 = -v16;\nLABEL_8:\n      *v9 = v15;\n    }\n  }\n  else\n  {\n    v16 = 0;\n    *a4 = v48;\n  }\n  return v16;\n}\n\n// write access to const memory has been detected, the output may be wrong!\n__int64 __usercall sub_8D30@<rax>(char *nptr@<rdi>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned __int64 *a4@<rsi>, __int64 a5@<r12>, __int64 a6@<r13>, __int64 a7@<r14>, __int64 a8@<r15>)\n{\n  unsigned __int64 *v8; // rbp\n  int *v9; // rbx\n  unsigned __int8 v10; // r14\n  const unsigned __int16 **v11; // rax\n  const unsigned __int16 **v12; // r13\n  const unsigned __int16 *v13; // rcx\n  char *v14; // rax\n  int v15; // eax\n  unsigned int v16; // ecx\n  unsigned __int64 v18; // rax\n  char *v19; // r14\n  int v20; // ecx\n  int v21; // er15\n  char v22; // al\n  struct lconv *v23; // rax\n  size_t v24; // rax\n  char *v25; // r8\n  __int64 i; // rax\n  signed int v27; // er13\n  int v28; // er14\n  char *v29; // rax\n  int v30; // edi\n  int v31; // ecx\n  int v32; // edi\n  int v33; // er8\n  unsigned __int64 v34; // r10\n  unsigned __int64 v35; // rdi\n  unsigned __int64 v36; // r8\n  int v37; // esi\n  char *v38; // ST08_8\n  unsigned __int64 v39; // rax\n  unsigned __int64 v40; // r9\n  signed __int64 v41; // r11\n  unsigned __int64 v42; // rsi\n  unsigned __int64 v43; // r13\n  unsigned __int64 v44; // r9\n  char *v45; // rax\n  size_t v46; // [rsp+0h] [rbp-70h]\n  char *s1; // [rsp+8h] [rbp-68h]\n  unsigned __int64 v48; // [rsp+10h] [rbp-60h]\n  unsigned __int64 v49; // [rsp+18h] [rbp-58h]\n  char *endptr; // [rsp+28h] [rbp-48h]\n  unsigned __int64 v51; // [rsp+30h] [rbp-40h]\n  __int64 v52; // [rsp+40h] [rbp-30h]\n  __int64 v53; // [rsp+48h] [rbp-28h]\n  __int64 v54; // [rsp+50h] [rbp-20h]\n  __int64 v55; // [rsp+58h] [rbp-18h]\n  __int64 v56; // [rsp+60h] [rbp-10h]\n  __int64 v57; // [rsp+68h] [rbp-8h]\n\n  v57 = a8;\n  v56 = a7;\n  v55 = a6;\n  v54 = a5;\n  v53 = a3;\n  v52 = a2;\n  v8 = a4;\n  *a4 = 0LL;\n  v51 = __readfsqword(0x28u);\n  v9 = __errno_location();\n  if ( !nptr )\n    goto LABEL_7;\n  v10 = *nptr;\n  if ( !*nptr )\n    goto LABEL_7;\n  v11 = __ctype_b_loc();\n  v12 = v11;\n  v13 = *v11;\n  v14 = nptr;\n  while ( v13[v10] & 0x2000 )\n    v10 = *++v14;\n  if ( v10 == 45 )\n    goto LABEL_7;\n  *v9 = 0;\n  endptr = 0LL;\n  v18 = __strtoul_internal(nptr, &endptr, 0, 0);\n  v19 = endptr;\n  v48 = v18;\n  v20 = *v9;\n  if ( endptr == nptr )\n  {\nLABEL_33:\n    if ( !v20 )\n    {\nLABEL_7:\n      v15 = 22;\n      v16 = -22;\n      goto LABEL_8;\n    }\nLABEL_13:\n    v16 = -v20;\n    goto LABEL_14;\n  }\n  if ( v20 && v18 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n    goto LABEL_13;\n  if ( !endptr || !*endptr )\n  {\n    v16 = 0;\n    *a4 = v18;\n    return v16;\n  }\n  v21 = 0;\n  v49 = 0LL;\n  while ( 1 )\n  {\n    v22 = v19[1];\n    if ( v22 == 105 )\n    {\n      if ( (v19[2] & 0xDF) == 66 && !v19[3] )\n      {\nLABEL_37:\n        v27 = 1024;\n        goto LABEL_38;\n      }\n      goto LABEL_23;\n    }\n    if ( (v22 & 0xDF) == 66 && !v19[2] )\n      break;\n    if ( !v22 )\n      goto LABEL_37;\nLABEL_23:\n    v23 = localeconv();\n    if ( !v23 )\n      goto LABEL_7;\n    if ( !v23->decimal_point )\n      goto LABEL_7;\n    s1 = v23->decimal_point;\n    v24 = strlen(v23->decimal_point);\n    if ( v49 )\n      goto LABEL_7;\n    if ( !*v19 )\n      goto LABEL_7;\n    v46 = v24;\n    if ( strncmp(s1, v19, v24) )\n      goto LABEL_7;\n    v25 = &v19[v46];\n    for ( i = v19[v46]; (_BYTE)i == 48; ++v21 )\n      i = *++v25;\n    if ( (*v12)[i] & 0x800 )\n    {\n      *v9 = 0;\n      v38 = v25;\n      endptr = 0LL;\n      v39 = __strtoul_internal(v25, &endptr, 0, 0);\n      v19 = endptr;\n      v49 = v39;\n      v20 = *v9;\n      if ( endptr == v38 )\n        goto LABEL_33;\n      if ( v20 )\n      {\n        if ( v39 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n          goto LABEL_13;\n        goto LABEL_62;\n      }\n      if ( v39 )\n      {\nLABEL_62:\n        if ( !endptr || !*endptr )\n          goto LABEL_7;\n      }\n    }\n    else\n    {\n      endptr = v25;\n      v19 = v25;\n    }\n  }\n  v27 = 1000;\nLABEL_38:\n  v28 = *v19;\n  v29 = strchr(\"KMGTPEZY\", v28);\n  if ( v29 )\n  {\n    v30 = (unsigned __int64)(v29 - \"KMGTPEZY\") + 1;\n    goto LABEL_40;\n  }\n  v45 = strchr(\"kmgtpezy\", v28);\n  if ( !v45 )\n    goto LABEL_7;\n  v30 = (unsigned __int64)(v45 - \"kmgtpezy\") + 1;\nLABEL_40:\n  if ( v30 )\n  {\n    if ( is_mul_ok(v27, v48) )\n    {\n      v31 = 0;\n      while ( 1 )\n      {\n        v48 *= v27;\n        if ( v30 - 1 == v31 )\n          break;\n        ++v31;\n        if ( !is_mul_ok(v27, v48) )\n          goto LABEL_77;\n      }\n      v16 = 0;\n    }\n    else\n    {\nLABEL_77:\n      v16 = -34;\n    }\n    if ( v49 )\n    {\n      v32 = v30 - 1;\n      v33 = 0;\n      v34 = 1LL;\n      do\n      {\n        v34 *= v27;\n        if ( v33 == v32 )\n          break;\n        ++v33;\n      }\n      while ( is_mul_ok(v27, v34) );\n      if ( v49 <= 0xA )\n      {\n        v36 = v49;\n        v35 = 10LL;\n      }\n      else\n      {\n        v35 = 10LL;\n        while ( 1 )\n        {\n          v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v49 >> 64) >> 3;\n          if ( v35 > 0x1999999999999999LL )\n            break;\n          v35 *= 10LL;\n          if ( v35 >= v49 )\n          {\n            v36 = v49;\n            break;\n          }\n        }\n      }\n      if ( v21 )\n      {\n        v37 = 0;\n        do\n        {\n          if ( v35 <= 0x1999999999999999LL )\n            v35 *= 10LL;\n          else\n            v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n          ++v37;\n        }\n        while ( v21 != v37 );\n      }\n      v40 = 1LL;\n      do\n      {\n        v41 = 10 * v40;\n        v42 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        v43 = v36 - 10 * v42;\n        v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        if ( v43 )\n        {\n          v44 = v35 / v40 / v43;\n          if ( v44 )\n            v48 += v34 / v44;\n        }\n        v40 = v41;\n      }\n      while ( v42 );\n    }\n    *v8 = v48;\nLABEL_14:\n    if ( (v16 & 0x80000000) != 0 )\n    {\n      v15 = -v16;\nLABEL_8:\n      *v9 = v15;\n    }\n  }\n  else\n  {\n    v16 = 0;\n    *a4 = v48;\n  }\n  return v16;\n}\n\n// write access to const memory has been detected, the output may be wrong!\n__int64 __usercall sub_8D30@<rax>(char *nptr@<rdi>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned __int64 *a4@<rsi>, __int64 a5@<r12>, __int64 a6@<r13>, __int64 a7@<r14>, __int64 a8@<r15>)\n{\n  unsigned __int64 *v8; // rbp\n  int *v9; // rbx\n  unsigned __int8 v10; // r14\n  const unsigned __int16 **v11; // rax\n  const unsigned __int16 **v12; // r13\n  const unsigned __int16 *v13; // rcx\n  char *v14; // rax\n  int v15; // eax\n  unsigned int v16; // ecx\n  unsigned __int64 v18; // rax\n  char *v19; // r14\n  int v20; // ecx\n  int v21; // er15\n  char v22; // al\n  struct lconv *v23; // rax\n  size_t v24; // rax\n  char *v25; // r8\n  __int64 i; // rax\n  signed int v27; // er13\n  int v28; // er14\n  char *v29; // rax\n  int v30; // edi\n  int v31; // ecx\n  int v32; // edi\n  int v33; // er8\n  unsigned __int64 v34; // r10\n  unsigned __int64 v35; // rdi\n  unsigned __int64 v36; // r8\n  int v37; // esi\n  char *v38; // ST08_8\n  unsigned __int64 v39; // rax\n  unsigned __int64 v40; // r9\n  signed __int64 v41; // r11\n  unsigned __int64 v42; // rsi\n  unsigned __int64 v43; // r13\n  unsigned __int64 v44; // r9\n  char *v45; // rax\n  size_t v46; // [rsp+0h] [rbp-70h]\n  char *s1; // [rsp+8h] [rbp-68h]\n  unsigned __int64 v48; // [rsp+10h] [rbp-60h]\n  unsigned __int64 v49; // [rsp+18h] [rbp-58h]\n  char *endptr; // [rsp+28h] [rbp-48h]\n  unsigned __int64 v51; // [rsp+30h] [rbp-40h]\n  __int64 v52; // [rsp+40h] [rbp-30h]\n  __int64 v53; // [rsp+48h] [rbp-28h]\n  __int64 v54; // [rsp+50h] [rbp-20h]\n  __int64 v55; // [rsp+58h] [rbp-18h]\n  __int64 v56; // [rsp+60h] [rbp-10h]\n  __int64 v57; // [rsp+68h] [rbp-8h]\n\n  v57 = a8;\n  v56 = a7;\n  v55 = a6;\n  v54 = a5;\n  v53 = a3;\n  v52 = a2;\n  v8 = a4;\n  *a4 = 0LL;\n  v51 = __readfsqword(0x28u);\n  v9 = __errno_location();\n  if ( !nptr )\n    goto LABEL_7;\n  v10 = *nptr;\n  if ( !*nptr )\n    goto LABEL_7;\n  v11 = __ctype_b_loc();\n  v12 = v11;\n  v13 = *v11;\n  v14 = nptr;\n  while ( v13[v10] & 0x2000 )\n    v10 = *++v14;\n  if ( v10 == 45 )\n    goto LABEL_7;\n  *v9 = 0;\n  endptr = 0LL;\n  v18 = __strtoul_internal(nptr, &endptr, 0, 0);\n  v19 = endptr;\n  v48 = v18;\n  v20 = *v9;\n  if ( endptr == nptr )\n  {\nLABEL_33:\n    if ( !v20 )\n    {\nLABEL_7:\n      v15 = 22;\n      v16 = -22;\n      goto LABEL_8;\n    }\nLABEL_13:\n    v16 = -v20;\n    goto LABEL_14;\n  }\n  if ( v20 && v18 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n    goto LABEL_13;\n  if ( !endptr || !*endptr )\n  {\n    v16 = 0;\n    *a4 = v18;\n    return v16;\n  }\n  v21 = 0;\n  v49 = 0LL;\n  while ( 1 )\n  {\n    v22 = v19[1];\n    if ( v22 == 105 )\n    {\n      if ( (v19[2] & 0xDF) == 66 && !v19[3] )\n      {\nLABEL_37:\n        v27 = 1024;\n        goto LABEL_38;\n      }\n      goto LABEL_23;\n    }\n    if ( (v22 & 0xDF) == 66 && !v19[2] )\n      break;\n    if ( !v22 )\n      goto LABEL_37;\nLABEL_23:\n    v23 = localeconv();\n    if ( !v23 )\n      goto LABEL_7;\n    if ( !v23->decimal_point )\n      goto LABEL_7;\n    s1 = v23->decimal_point;\n    v24 = strlen(v23->decimal_point);\n    if ( v49 )\n      goto LABEL_7;\n    if ( !*v19 )\n      goto LABEL_7;\n    v46 = v24;\n    if ( strncmp(s1, v19, v24) )\n      goto LABEL_7;\n    v25 = &v19[v46];\n    for ( i = v19[v46]; (_BYTE)i == 48; ++v21 )\n      i = *++v25;\n    if ( (*v12)[i] & 0x800 )\n    {\n      *v9 = 0;\n      v38 = v25;\n      endptr = 0LL;\n      v39 = __strtoul_internal(v25, &endptr, 0, 0);\n      v19 = endptr;\n      v49 = v39;\n      v20 = *v9;\n      if ( endptr == v38 )\n        goto LABEL_33;\n      if ( v20 )\n      {\n        if ( v39 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n          goto LABEL_13;\n        goto LABEL_62;\n      }\n      if ( v39 )\n      {\nLABEL_62:\n        if ( !endptr || !*endptr )\n          goto LABEL_7;\n      }\n    }\n    else\n    {\n      endptr = v25;\n      v19 = v25;\n    }\n  }\n  v27 = 1000;\nLABEL_38:\n  v28 = *v19;\n  v29 = strchr(\"KMGTPEZY\", v28);\n  if ( v29 )\n  {\n    v30 = (unsigned __int64)(v29 - \"KMGTPEZY\") + 1;\n    goto LABEL_40;\n  }\n  v45 = strchr(\"kmgtpezy\", v28);\n  if ( !v45 )\n    goto LABEL_7;\n  v30 = (unsigned __int64)(v45 - \"kmgtpezy\") + 1;\nLABEL_40:\n  if ( v30 )\n  {\n    if ( is_mul_ok(v27, v48) )\n    {\n      v31 = 0;\n      while ( 1 )\n      {\n        v48 *= v27;\n        if ( v30 - 1 == v31 )\n          break;\n        ++v31;\n        if ( !is_mul_ok(v27, v48) )\n          goto LABEL_77;\n      }\n      v16 = 0;\n    }\n    else\n    {\nLABEL_77:\n      v16 = -34;\n    }\n    if ( v49 )\n    {\n      v32 = v30 - 1;\n      v33 = 0;\n      v34 = 1LL;\n      do\n      {\n        v34 *= v27;\n        if ( v33 == v32 )\n          break;\n        ++v33;\n      }\n      while ( is_mul_ok(v27, v34) );\n      if ( v49 <= 0xA )\n      {\n        v36 = v49;\n        v35 = 10LL;\n      }\n      else\n      {\n        v35 = 10LL;\n        while ( 1 )\n        {\n          v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v49 >> 64) >> 3;\n          if ( v35 > 0x1999999999999999LL )\n            break;\n          v35 *= 10LL;\n          if ( v35 >= v49 )\n          {\n            v36 = v49;\n            break;\n          }\n        }\n      }\n      if ( v21 )\n      {\n        v37 = 0;\n        do\n        {\n          if ( v35 <= 0x1999999999999999LL )\n            v35 *= 10LL;\n          else\n            v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n          ++v37;\n        }\n        while ( v21 != v37 );\n      }\n      v40 = 1LL;\n      do\n      {\n        v41 = 10 * v40;\n        v42 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        v43 = v36 - 10 * v42;\n        v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        if ( v43 )\n        {\n          v44 = v35 / v40 / v43;\n          if ( v44 )\n            v48 += v34 / v44;\n        }\n        v40 = v41;\n      }\n      while ( v42 );\n    }\n    *v8 = v48;\nLABEL_14:\n    if ( (v16 & 0x80000000) != 0 )\n    {\n      v15 = -v16;\nLABEL_8:\n      *v9 = v15;\n    }\n  }\n  else\n  {\n    v16 = 0;\n    *a4 = v48;\n  }\n  return v16;\n}\n\n// write access to const memory has been detected, the output may be wrong!\n__int64 __usercall sub_8D30@<rax>(char *nptr@<rdi>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned __int64 *a4@<rsi>, __int64 a5@<r12>, __int64 a6@<r13>, __int64 a7@<r14>, __int64 a8@<r15>)\n{\n  unsigned __int64 *v8; // rbp\n  int *v9; // rbx\n  unsigned __int8 v10; // r14\n  const unsigned __int16 **v11; // rax\n  const unsigned __int16 **v12; // r13\n  const unsigned __int16 *v13; // rcx\n  char *v14; // rax\n  int v15; // eax\n  unsigned int v16; // ecx\n  unsigned __int64 v18; // rax\n  char *v19; // r14\n  int v20; // ecx\n  int v21; // er15\n  char v22; // al\n  struct lconv *v23; // rax\n  size_t v24; // rax\n  char *v25; // r8\n  __int64 i; // rax\n  signed int v27; // er13\n  int v28; // er14\n  char *v29; // rax\n  int v30; // edi\n  int v31; // ecx\n  int v32; // edi\n  int v33; // er8\n  unsigned __int64 v34; // r10\n  unsigned __int64 v35; // rdi\n  unsigned __int64 v36; // r8\n  int v37; // esi\n  char *v38; // ST08_8\n  unsigned __int64 v39; // rax\n  unsigned __int64 v40; // r9\n  signed __int64 v41; // r11\n  unsigned __int64 v42; // rsi\n  unsigned __int64 v43; // r13\n  unsigned __int64 v44; // r9\n  char *v45; // rax\n  size_t v46; // [rsp+0h] [rbp-70h]\n  char *s1; // [rsp+8h] [rbp-68h]\n  unsigned __int64 v48; // [rsp+10h] [rbp-60h]\n  unsigned __int64 v49; // [rsp+18h] [rbp-58h]\n  char *endptr; // [rsp+28h] [rbp-48h]\n  unsigned __int64 v51; // [rsp+30h] [rbp-40h]\n  __int64 v52; // [rsp+40h] [rbp-30h]\n  __int64 v53; // [rsp+48h] [rbp-28h]\n  __int64 v54; // [rsp+50h] [rbp-20h]\n  __int64 v55; // [rsp+58h] [rbp-18h]\n  __int64 v56; // [rsp+60h] [rbp-10h]\n  __int64 v57; // [rsp+68h] [rbp-8h]\n\n  v57 = a8;\n  v56 = a7;\n  v55 = a6;\n  v54 = a5;\n  v53 = a3;\n  v52 = a2;\n  v8 = a4;\n  *a4 = 0LL;\n  v51 = __readfsqword(0x28u);\n  v9 = __errno_location();\n  if ( !nptr )\n    goto LABEL_7;\n  v10 = *nptr;\n  if ( !*nptr )\n    goto LABEL_7;\n  v11 = __ctype_b_loc();\n  v12 = v11;\n  v13 = *v11;\n  v14 = nptr;\n  while ( v13[v10] & 0x2000 )\n    v10 = *++v14;\n  if ( v10 == 45 )\n    goto LABEL_7;\n  *v9 = 0;\n  endptr = 0LL;\n  v18 = __strtoul_internal(nptr, &endptr, 0, 0);\n  v19 = endptr;\n  v48 = v18;\n  v20 = *v9;\n  if ( endptr == nptr )\n  {\nLABEL_33:\n    if ( !v20 )\n    {\nLABEL_7:\n      v15 = 22;\n      v16 = -22;\n      goto LABEL_8;\n    }\nLABEL_13:\n    v16 = -v20;\n    goto LABEL_14;\n  }\n  if ( v20 && v18 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n    goto LABEL_13;\n  if ( !endptr || !*endptr )\n  {\n    v16 = 0;\n    *a4 = v18;\n    return v16;\n  }\n  v21 = 0;\n  v49 = 0LL;\n  while ( 1 )\n  {\n    v22 = v19[1];\n    if ( v22 == 105 )\n    {\n      if ( (v19[2] & 0xDF) == 66 && !v19[3] )\n      {\nLABEL_37:\n        v27 = 1024;\n        goto LABEL_38;\n      }\n      goto LABEL_23;\n    }\n    if ( (v22 & 0xDF) == 66 && !v19[2] )\n      break;\n    if ( !v22 )\n      goto LABEL_37;\nLABEL_23:\n    v23 = localeconv();\n    if ( !v23 )\n      goto LABEL_7;\n    if ( !v23->decimal_point )\n      goto LABEL_7;\n    s1 = v23->decimal_point;\n    v24 = strlen(v23->decimal_point);\n    if ( v49 )\n      goto LABEL_7;\n    if ( !*v19 )\n      goto LABEL_7;\n    v46 = v24;\n    if ( strncmp(s1, v19, v24) )\n      goto LABEL_7;\n    v25 = &v19[v46];\n    for ( i = v19[v46]; (_BYTE)i == 48; ++v21 )\n      i = *++v25;\n    if ( (*v12)[i] & 0x800 )\n    {\n      *v9 = 0;\n      v38 = v25;\n      endptr = 0LL;\n      v39 = __strtoul_internal(v25, &endptr, 0, 0);\n      v19 = endptr;\n      v49 = v39;\n      v20 = *v9;\n      if ( endptr == v38 )\n        goto LABEL_33;\n      if ( v20 )\n      {\n        if ( v39 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n          goto LABEL_13;\n        goto LABEL_62;\n      }\n      if ( v39 )\n      {\nLABEL_62:\n        if ( !endptr || !*endptr )\n          goto LABEL_7;\n      }\n    }\n    else\n    {\n      endptr = v25;\n      v19 = v25;\n    }\n  }\n  v27 = 1000;\nLABEL_38:\n  v28 = *v19;\n  v29 = strchr(\"KMGTPEZY\", v28);\n  if ( v29 )\n  {\n    v30 = (unsigned __int64)(v29 - \"KMGTPEZY\") + 1;\n    goto LABEL_40;\n  }\n  v45 = strchr(\"kmgtpezy\", v28);\n  if ( !v45 )\n    goto LABEL_7;\n  v30 = (unsigned __int64)(v45 - \"kmgtpezy\") + 1;\nLABEL_40:\n  if ( v30 )\n  {\n    if ( is_mul_ok(v27, v48) )\n    {\n      v31 = 0;\n      while ( 1 )\n      {\n        v48 *= v27;\n        if ( v30 - 1 == v31 )\n          break;\n        ++v31;\n        if ( !is_mul_ok(v27, v48) )\n          goto LABEL_77;\n      }\n      v16 = 0;\n    }\n    else\n    {\nLABEL_77:\n      v16 = -34;\n    }\n    if ( v49 )\n    {\n      v32 = v30 - 1;\n      v33 = 0;\n      v34 = 1LL;\n      do\n      {\n        v34 *= v27;\n        if ( v33 == v32 )\n          break;\n        ++v33;\n      }\n      while ( is_mul_ok(v27, v34) );\n      if ( v49 <= 0xA )\n      {\n        v36 = v49;\n        v35 = 10LL;\n      }\n      else\n      {\n        v35 = 10LL;\n        while ( 1 )\n        {\n          v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v49 >> 64) >> 3;\n          if ( v35 > 0x1999999999999999LL )\n            break;\n          v35 *= 10LL;\n          if ( v35 >= v49 )\n          {\n            v36 = v49;\n            break;\n          }\n        }\n      }\n      if ( v21 )\n      {\n        v37 = 0;\n        do\n        {\n          if ( v35 <= 0x1999999999999999LL )\n            v35 *= 10LL;\n          else\n            v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n          ++v37;\n        }\n        while ( v21 != v37 );\n      }\n      v40 = 1LL;\n      do\n      {\n        v41 = 10 * v40;\n        v42 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        v43 = v36 - 10 * v42;\n        v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        if ( v43 )\n        {\n          v44 = v35 / v40 / v43;\n          if ( v44 )\n            v48 += v34 / v44;\n        }\n        v40 = v41;\n      }\n      while ( v42 );\n    }\n    *v8 = v48;\nLABEL_14:\n    if ( (v16 & 0x80000000) != 0 )\n    {\n      v15 = -v16;\nLABEL_8:\n      *v9 = v15;\n    }\n  }\n  else\n  {\n    v16 = 0;\n    *a4 = v48;\n  }\n  return v16;\n}\n\n// write access to const memory has been detected, the output may be wrong!\n__int64 __usercall sub_8D30@<rax>(char *nptr@<rdi>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned __int64 *a4@<rsi>, __int64 a5@<r12>, __int64 a6@<r13>, __int64 a7@<r14>, __int64 a8@<r15>)\n{\n  unsigned __int64 *v8; // rbp\n  int *v9; // rbx\n  unsigned __int8 v10; // r14\n  const unsigned __int16 **v11; // rax\n  const unsigned __int16 **v12; // r13\n  const unsigned __int16 *v13; // rcx\n  char *v14; // rax\n  int v15; // eax\n  unsigned int v16; // ecx\n  unsigned __int64 v18; // rax\n  char *v19; // r14\n  int v20; // ecx\n  int v21; // er15\n  char v22; // al\n  struct lconv *v23; // rax\n  size_t v24; // rax\n  char *v25; // r8\n  __int64 i; // rax\n  signed int v27; // er13\n  int v28; // er14\n  char *v29; // rax\n  int v30; // edi\n  int v31; // ecx\n  int v32; // edi\n  int v33; // er8\n  unsigned __int64 v34; // r10\n  unsigned __int64 v35; // rdi\n  unsigned __int64 v36; // r8\n  int v37; // esi\n  char *v38; // ST08_8\n  unsigned __int64 v39; // rax\n  unsigned __int64 v40; // r9\n  signed __int64 v41; // r11\n  unsigned __int64 v42; // rsi\n  unsigned __int64 v43; // r13\n  unsigned __int64 v44; // r9\n  char *v45; // rax\n  size_t v46; // [rsp+0h] [rbp-70h]\n  char *s1; // [rsp+8h] [rbp-68h]\n  unsigned __int64 v48; // [rsp+10h] [rbp-60h]\n  unsigned __int64 v49; // [rsp+18h] [rbp-58h]\n  char *endptr; // [rsp+28h] [rbp-48h]\n  unsigned __int64 v51; // [rsp+30h] [rbp-40h]\n  __int64 v52; // [rsp+40h] [rbp-30h]\n  __int64 v53; // [rsp+48h] [rbp-28h]\n  __int64 v54; // [rsp+50h] [rbp-20h]\n  __int64 v55; // [rsp+58h] [rbp-18h]\n  __int64 v56; // [rsp+60h] [rbp-10h]\n  __int64 v57; // [rsp+68h] [rbp-8h]\n\n  v57 = a8;\n  v56 = a7;\n  v55 = a6;\n  v54 = a5;\n  v53 = a3;\n  v52 = a2;\n  v8 = a4;\n  *a4 = 0LL;\n  v51 = __readfsqword(0x28u);\n  v9 = __errno_location();\n  if ( !nptr )\n    goto LABEL_7;\n  v10 = *nptr;\n  if ( !*nptr )\n    goto LABEL_7;\n  v11 = __ctype_b_loc();\n  v12 = v11;\n  v13 = *v11;\n  v14 = nptr;\n  while ( v13[v10] & 0x2000 )\n    v10 = *++v14;\n  if ( v10 == 45 )\n    goto LABEL_7;\n  *v9 = 0;\n  endptr = 0LL;\n  v18 = __strtoul_internal(nptr, &endptr, 0, 0);\n  v19 = endptr;\n  v48 = v18;\n  v20 = *v9;\n  if ( endptr == nptr )\n  {\nLABEL_33:\n    if ( !v20 )\n    {\nLABEL_7:\n      v15 = 22;\n      v16 = -22;\n      goto LABEL_8;\n    }\nLABEL_13:\n    v16 = -v20;\n    goto LABEL_14;\n  }\n  if ( v20 && v18 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n    goto LABEL_13;\n  if ( !endptr || !*endptr )\n  {\n    v16 = 0;\n    *a4 = v18;\n    return v16;\n  }\n  v21 = 0;\n  v49 = 0LL;\n  while ( 1 )\n  {\n    v22 = v19[1];\n    if ( v22 == 105 )\n    {\n      if ( (v19[2] & 0xDF) == 66 && !v19[3] )\n      {\nLABEL_37:\n        v27 = 1024;\n        goto LABEL_38;\n      }\n      goto LABEL_23;\n    }\n    if ( (v22 & 0xDF) == 66 && !v19[2] )\n      break;\n    if ( !v22 )\n      goto LABEL_37;\nLABEL_23:\n    v23 = localeconv();\n    if ( !v23 )\n      goto LABEL_7;\n    if ( !v23->decimal_point )\n      goto LABEL_7;\n    s1 = v23->decimal_point;\n    v24 = strlen(v23->decimal_point);\n    if ( v49 )\n      goto LABEL_7;\n    if ( !*v19 )\n      goto LABEL_7;\n    v46 = v24;\n    if ( strncmp(s1, v19, v24) )\n      goto LABEL_7;\n    v25 = &v19[v46];\n    for ( i = v19[v46]; (_BYTE)i == 48; ++v21 )\n      i = *++v25;\n    if ( (*v12)[i] & 0x800 )\n    {\n      *v9 = 0;\n      v38 = v25;\n      endptr = 0LL;\n      v39 = __strtoul_internal(v25, &endptr, 0, 0);\n      v19 = endptr;\n      v49 = v39;\n      v20 = *v9;\n      if ( endptr == v38 )\n        goto LABEL_33;\n      if ( v20 )\n      {\n        if ( v39 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n          goto LABEL_13;\n        goto LABEL_62;\n      }\n      if ( v39 )\n      {\nLABEL_62:\n        if ( !endptr || !*endptr )\n          goto LABEL_7;\n      }\n    }\n    else\n    {\n      endptr = v25;\n      v19 = v25;\n    }\n  }\n  v27 = 1000;\nLABEL_38:\n  v28 = *v19;\n  v29 = strchr(\"KMGTPEZY\", v28);\n  if ( v29 )\n  {\n    v30 = (unsigned __int64)(v29 - \"KMGTPEZY\") + 1;\n    goto LABEL_40;\n  }\n  v45 = strchr(\"kmgtpezy\", v28);\n  if ( !v45 )\n    goto LABEL_7;\n  v30 = (unsigned __int64)(v45 - \"kmgtpezy\") + 1;\nLABEL_40:\n  if ( v30 )\n  {\n    if ( is_mul_ok(v27, v48) )\n    {\n      v31 = 0;\n      while ( 1 )\n      {\n        v48 *= v27;\n        if ( v30 - 1 == v31 )\n          break;\n        ++v31;\n        if ( !is_mul_ok(v27, v48) )\n          goto LABEL_77;\n      }\n      v16 = 0;\n    }\n    else\n    {\nLABEL_77:\n      v16 = -34;\n    }\n    if ( v49 )\n    {\n      v32 = v30 - 1;\n      v33 = 0;\n      v34 = 1LL;\n      do\n      {\n        v34 *= v27;\n        if ( v33 == v32 )\n          break;\n        ++v33;\n      }\n      while ( is_mul_ok(v27, v34) );\n      if ( v49 <= 0xA )\n      {\n        v36 = v49;\n        v35 = 10LL;\n      }\n      else\n      {\n        v35 = 10LL;\n        while ( 1 )\n        {\n          v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v49 >> 64) >> 3;\n          if ( v35 > 0x1999999999999999LL )\n            break;\n          v35 *= 10LL;\n          if ( v35 >= v49 )\n          {\n            v36 = v49;\n            break;\n          }\n        }\n      }\n      if ( v21 )\n      {\n        v37 = 0;\n        do\n        {\n          if ( v35 <= 0x1999999999999999LL )\n            v35 *= 10LL;\n          else\n            v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n          ++v37;\n        }\n        while ( v21 != v37 );\n      }\n      v40 = 1LL;\n      do\n      {\n        v41 = 10 * v40;\n        v42 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        v43 = v36 - 10 * v42;\n        v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        if ( v43 )\n        {\n          v44 = v35 / v40 / v43;\n          if ( v44 )\n            v48 += v34 / v44;\n        }\n        v40 = v41;\n      }\n      while ( v42 );\n    }\n    *v8 = v48;\nLABEL_14:\n    if ( (v16 & 0x80000000) != 0 )\n    {\n      v15 = -v16;\nLABEL_8:\n      *v9 = v15;\n    }\n  }\n  else\n  {\n    v16 = 0;\n    *a4 = v48;\n  }\n  return v16;\n}\n\n// write access to const memory has been detected, the output may be wrong!\n__int64 __usercall sub_8D30@<rax>(char *nptr@<rdi>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned __int64 *a4@<rsi>, __int64 a5@<r12>, __int64 a6@<r13>, __int64 a7@<r14>, __int64 a8@<r15>)\n{\n  unsigned __int64 *v8; // rbp\n  int *v9; // rbx\n  unsigned __int8 v10; // r14\n  const unsigned __int16 **v11; // rax\n  const unsigned __int16 **v12; // r13\n  const unsigned __int16 *v13; // rcx\n  char *v14; // rax\n  int v15; // eax\n  unsigned int v16; // ecx\n  unsigned __int64 v18; // rax\n  char *v19; // r14\n  int v20; // ecx\n  int v21; // er15\n  char v22; // al\n  struct lconv *v23; // rax\n  size_t v24; // rax\n  char *v25; // r8\n  __int64 i; // rax\n  signed int v27; // er13\n  int v28; // er14\n  char *v29; // rax\n  int v30; // edi\n  int v31; // ecx\n  int v32; // edi\n  int v33; // er8\n  unsigned __int64 v34; // r10\n  unsigned __int64 v35; // rdi\n  unsigned __int64 v36; // r8\n  int v37; // esi\n  char *v38; // ST08_8\n  unsigned __int64 v39; // rax\n  unsigned __int64 v40; // r9\n  signed __int64 v41; // r11\n  unsigned __int64 v42; // rsi\n  unsigned __int64 v43; // r13\n  unsigned __int64 v44; // r9\n  char *v45; // rax\n  size_t v46; // [rsp+0h] [rbp-70h]\n  char *s1; // [rsp+8h] [rbp-68h]\n  unsigned __int64 v48; // [rsp+10h] [rbp-60h]\n  unsigned __int64 v49; // [rsp+18h] [rbp-58h]\n  char *endptr; // [rsp+28h] [rbp-48h]\n  unsigned __int64 v51; // [rsp+30h] [rbp-40h]\n  __int64 v52; // [rsp+40h] [rbp-30h]\n  __int64 v53; // [rsp+48h] [rbp-28h]\n  __int64 v54; // [rsp+50h] [rbp-20h]\n  __int64 v55; // [rsp+58h] [rbp-18h]\n  __int64 v56; // [rsp+60h] [rbp-10h]\n  __int64 v57; // [rsp+68h] [rbp-8h]\n\n  v57 = a8;\n  v56 = a7;\n  v55 = a6;\n  v54 = a5;\n  v53 = a3;\n  v52 = a2;\n  v8 = a4;\n  *a4 = 0LL;\n  v51 = __readfsqword(0x28u);\n  v9 = __errno_location();\n  if ( !nptr )\n    goto LABEL_7;\n  v10 = *nptr;\n  if ( !*nptr )\n    goto LABEL_7;\n  v11 = __ctype_b_loc();\n  v12 = v11;\n  v13 = *v11;\n  v14 = nptr;\n  while ( v13[v10] & 0x2000 )\n    v10 = *++v14;\n  if ( v10 == 45 )\n    goto LABEL_7;\n  *v9 = 0;\n  endptr = 0LL;\n  v18 = __strtoul_internal(nptr, &endptr, 0, 0);\n  v19 = endptr;\n  v48 = v18;\n  v20 = *v9;\n  if ( endptr == nptr )\n  {\nLABEL_33:\n    if ( !v20 )\n    {\nLABEL_7:\n      v15 = 22;\n      v16 = -22;\n      goto LABEL_8;\n    }\nLABEL_13:\n    v16 = -v20;\n    goto LABEL_14;\n  }\n  if ( v20 && v18 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n    goto LABEL_13;\n  if ( !endptr || !*endptr )\n  {\n    v16 = 0;\n    *a4 = v18;\n    return v16;\n  }\n  v21 = 0;\n  v49 = 0LL;\n  while ( 1 )\n  {\n    v22 = v19[1];\n    if ( v22 == 105 )\n    {\n      if ( (v19[2] & 0xDF) == 66 && !v19[3] )\n      {\nLABEL_37:\n        v27 = 1024;\n        goto LABEL_38;\n      }\n      goto LABEL_23;\n    }\n    if ( (v22 & 0xDF) == 66 && !v19[2] )\n      break;\n    if ( !v22 )\n      goto LABEL_37;\nLABEL_23:\n    v23 = localeconv();\n    if ( !v23 )\n      goto LABEL_7;\n    if ( !v23->decimal_point )\n      goto LABEL_7;\n    s1 = v23->decimal_point;\n    v24 = strlen(v23->decimal_point);\n    if ( v49 )\n      goto LABEL_7;\n    if ( !*v19 )\n      goto LABEL_7;\n    v46 = v24;\n    if ( strncmp(s1, v19, v24) )\n      goto LABEL_7;\n    v25 = &v19[v46];\n    for ( i = v19[v46]; (_BYTE)i == 48; ++v21 )\n      i = *++v25;\n    if ( (*v12)[i] & 0x800 )\n    {\n      *v9 = 0;\n      v38 = v25;\n      endptr = 0LL;\n      v39 = __strtoul_internal(v25, &endptr, 0, 0);\n      v19 = endptr;\n      v49 = v39;\n      v20 = *v9;\n      if ( endptr == v38 )\n        goto LABEL_33;\n      if ( v20 )\n      {\n        if ( v39 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n          goto LABEL_13;\n        goto LABEL_62;\n      }\n      if ( v39 )\n      {\nLABEL_62:\n        if ( !endptr || !*endptr )\n          goto LABEL_7;\n      }\n    }\n    else\n    {\n      endptr = v25;\n      v19 = v25;\n    }\n  }\n  v27 = 1000;\nLABEL_38:\n  v28 = *v19;\n  v29 = strchr(\"KMGTPEZY\", v28);\n  if ( v29 )\n  {\n    v30 = (unsigned __int64)(v29 - \"KMGTPEZY\") + 1;\n    goto LABEL_40;\n  }\n  v45 = strchr(\"kmgtpezy\", v28);\n  if ( !v45 )\n    goto LABEL_7;\n  v30 = (unsigned __int64)(v45 - \"kmgtpezy\") + 1;\nLABEL_40:\n  if ( v30 )\n  {\n    if ( is_mul_ok(v27, v48) )\n    {\n      v31 = 0;\n      while ( 1 )\n      {\n        v48 *= v27;\n        if ( v30 - 1 == v31 )\n          break;\n        ++v31;\n        if ( !is_mul_ok(v27, v48) )\n          goto LABEL_77;\n      }\n      v16 = 0;\n    }\n    else\n    {\nLABEL_77:\n      v16 = -34;\n    }\n    if ( v49 )\n    {\n      v32 = v30 - 1;\n      v33 = 0;\n      v34 = 1LL;\n      do\n      {\n        v34 *= v27;\n        if ( v33 == v32 )\n          break;\n        ++v33;\n      }\n      while ( is_mul_ok(v27, v34) );\n      if ( v49 <= 0xA )\n      {\n        v36 = v49;\n        v35 = 10LL;\n      }\n      else\n      {\n        v35 = 10LL;\n        while ( 1 )\n        {\n          v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v49 >> 64) >> 3;\n          if ( v35 > 0x1999999999999999LL )\n            break;\n          v35 *= 10LL;\n          if ( v35 >= v49 )\n          {\n            v36 = v49;\n            break;\n          }\n        }\n      }\n      if ( v21 )\n      {\n        v37 = 0;\n        do\n        {\n          if ( v35 <= 0x1999999999999999LL )\n            v35 *= 10LL;\n          else\n            v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n          ++v37;\n        }\n        while ( v21 != v37 );\n      }\n      v40 = 1LL;\n      do\n      {\n        v41 = 10 * v40;\n        v42 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        v43 = v36 - 10 * v42;\n        v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        if ( v43 )\n        {\n          v44 = v35 / v40 / v43;\n          if ( v44 )\n            v48 += v34 / v44;\n        }\n        v40 = v41;\n      }\n      while ( v42 );\n    }\n    *v8 = v48;\nLABEL_14:\n    if ( (v16 & 0x80000000) != 0 )\n    {\n      v15 = -v16;\nLABEL_8:\n      *v9 = v15;\n    }\n  }\n  else\n  {\n    v16 = 0;\n    *a4 = v48;\n  }\n  return v16;\n}\n\n// write access to const memory has been detected, the output may be wrong!\n__int64 __usercall sub_8D30@<rax>(char *nptr@<rdi>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned __int64 *a4@<rsi>, __int64 a5@<r12>, __int64 a6@<r13>, __int64 a7@<r14>, __int64 a8@<r15>)\n{\n  unsigned __int64 *v8; // rbp\n  int *v9; // rbx\n  unsigned __int8 v10; // r14\n  const unsigned __int16 **v11; // rax\n  const unsigned __int16 **v12; // r13\n  const unsigned __int16 *v13; // rcx\n  char *v14; // rax\n  int v15; // eax\n  unsigned int v16; // ecx\n  unsigned __int64 v18; // rax\n  char *v19; // r14\n  int v20; // ecx\n  int v21; // er15\n  char v22; // al\n  struct lconv *v23; // rax\n  size_t v24; // rax\n  char *v25; // r8\n  __int64 i; // rax\n  signed int v27; // er13\n  int v28; // er14\n  char *v29; // rax\n  int v30; // edi\n  int v31; // ecx\n  int v32; // edi\n  int v33; // er8\n  unsigned __int64 v34; // r10\n  unsigned __int64 v35; // rdi\n  unsigned __int64 v36; // r8\n  int v37; // esi\n  char *v38; // ST08_8\n  unsigned __int64 v39; // rax\n  unsigned __int64 v40; // r9\n  signed __int64 v41; // r11\n  unsigned __int64 v42; // rsi\n  unsigned __int64 v43; // r13\n  unsigned __int64 v44; // r9\n  char *v45; // rax\n  size_t v46; // [rsp+0h] [rbp-70h]\n  char *s1; // [rsp+8h] [rbp-68h]\n  unsigned __int64 v48; // [rsp+10h] [rbp-60h]\n  unsigned __int64 v49; // [rsp+18h] [rbp-58h]\n  char *endptr; // [rsp+28h] [rbp-48h]\n  unsigned __int64 v51; // [rsp+30h] [rbp-40h]\n  __int64 v52; // [rsp+40h] [rbp-30h]\n  __int64 v53; // [rsp+48h] [rbp-28h]\n  __int64 v54; // [rsp+50h] [rbp-20h]\n  __int64 v55; // [rsp+58h] [rbp-18h]\n  __int64 v56; // [rsp+60h] [rbp-10h]\n  __int64 v57; // [rsp+68h] [rbp-8h]\n\n  v57 = a8;\n  v56 = a7;\n  v55 = a6;\n  v54 = a5;\n  v53 = a3;\n  v52 = a2;\n  v8 = a4;\n  *a4 = 0LL;\n  v51 = __readfsqword(0x28u);\n  v9 = __errno_location();\n  if ( !nptr )\n    goto LABEL_7;\n  v10 = *nptr;\n  if ( !*nptr )\n    goto LABEL_7;\n  v11 = __ctype_b_loc();\n  v12 = v11;\n  v13 = *v11;\n  v14 = nptr;\n  while ( v13[v10] & 0x2000 )\n    v10 = *++v14;\n  if ( v10 == 45 )\n    goto LABEL_7;\n  *v9 = 0;\n  endptr = 0LL;\n  v18 = __strtoul_internal(nptr, &endptr, 0, 0);\n  v19 = endptr;\n  v48 = v18;\n  v20 = *v9;\n  if ( endptr == nptr )\n  {\nLABEL_33:\n    if ( !v20 )\n    {\nLABEL_7:\n      v15 = 22;\n      v16 = -22;\n      goto LABEL_8;\n    }\nLABEL_13:\n    v16 = -v20;\n    goto LABEL_14;\n  }\n  if ( v20 && v18 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n    goto LABEL_13;\n  if ( !endptr || !*endptr )\n  {\n    v16 = 0;\n    *a4 = v18;\n    return v16;\n  }\n  v21 = 0;\n  v49 = 0LL;\n  while ( 1 )\n  {\n    v22 = v19[1];\n    if ( v22 == 105 )\n    {\n      if ( (v19[2] & 0xDF) == 66 && !v19[3] )\n      {\nLABEL_37:\n        v27 = 1024;\n        goto LABEL_38;\n      }\n      goto LABEL_23;\n    }\n    if ( (v22 & 0xDF) == 66 && !v19[2] )\n      break;\n    if ( !v22 )\n      goto LABEL_37;\nLABEL_23:\n    v23 = localeconv();\n    if ( !v23 )\n      goto LABEL_7;\n    if ( !v23->decimal_point )\n      goto LABEL_7;\n    s1 = v23->decimal_point;\n    v24 = strlen(v23->decimal_point);\n    if ( v49 )\n      goto LABEL_7;\n    if ( !*v19 )\n      goto LABEL_7;\n    v46 = v24;\n    if ( strncmp(s1, v19, v24) )\n      goto LABEL_7;\n    v25 = &v19[v46];\n    for ( i = v19[v46]; (_BYTE)i == 48; ++v21 )\n      i = *++v25;\n    if ( (*v12)[i] & 0x800 )\n    {\n      *v9 = 0;\n      v38 = v25;\n      endptr = 0LL;\n      v39 = __strtoul_internal(v25, &endptr, 0, 0);\n      v19 = endptr;\n      v49 = v39;\n      v20 = *v9;\n      if ( endptr == v38 )\n        goto LABEL_33;\n      if ( v20 )\n      {\n        if ( v39 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n          goto LABEL_13;\n        goto LABEL_62;\n      }\n      if ( v39 )\n      {\nLABEL_62:\n        if ( !endptr || !*endptr )\n          goto LABEL_7;\n      }\n    }\n    else\n    {\n      endptr = v25;\n      v19 = v25;\n    }\n  }\n  v27 = 1000;\nLABEL_38:\n  v28 = *v19;\n  v29 = strchr(\"KMGTPEZY\", v28);\n  if ( v29 )\n  {\n    v30 = (unsigned __int64)(v29 - \"KMGTPEZY\") + 1;\n    goto LABEL_40;\n  }\n  v45 = strchr(\"kmgtpezy\", v28);\n  if ( !v45 )\n    goto LABEL_7;\n  v30 = (unsigned __int64)(v45 - \"kmgtpezy\") + 1;\nLABEL_40:\n  if ( v30 )\n  {\n    if ( is_mul_ok(v27, v48) )\n    {\n      v31 = 0;\n      while ( 1 )\n      {\n        v48 *= v27;\n        if ( v30 - 1 == v31 )\n          break;\n        ++v31;\n        if ( !is_mul_ok(v27, v48) )\n          goto LABEL_77;\n      }\n      v16 = 0;\n    }\n    else\n    {\nLABEL_77:\n      v16 = -34;\n    }\n    if ( v49 )\n    {\n      v32 = v30 - 1;\n      v33 = 0;\n      v34 = 1LL;\n      do\n      {\n        v34 *= v27;\n        if ( v33 == v32 )\n          break;\n        ++v33;\n      }\n      while ( is_mul_ok(v27, v34) );\n      if ( v49 <= 0xA )\n      {\n        v36 = v49;\n        v35 = 10LL;\n      }\n      else\n      {\n        v35 = 10LL;\n        while ( 1 )\n        {\n          v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v49 >> 64) >> 3;\n          if ( v35 > 0x1999999999999999LL )\n            break;\n          v35 *= 10LL;\n          if ( v35 >= v49 )\n          {\n            v36 = v49;\n            break;\n          }\n        }\n      }\n      if ( v21 )\n      {\n        v37 = 0;\n        do\n        {\n          if ( v35 <= 0x1999999999999999LL )\n            v35 *= 10LL;\n          else\n            v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n          ++v37;\n        }\n        while ( v21 != v37 );\n      }\n      v40 = 1LL;\n      do\n      {\n        v41 = 10 * v40;\n        v42 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        v43 = v36 - 10 * v42;\n        v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        if ( v43 )\n        {\n          v44 = v35 / v40 / v43;\n          if ( v44 )\n            v48 += v34 / v44;\n        }\n        v40 = v41;\n      }\n      while ( v42 );\n    }\n    *v8 = v48;\nLABEL_14:\n    if ( (v16 & 0x80000000) != 0 )\n    {\n      v15 = -v16;\nLABEL_8:\n      *v9 = v15;\n    }\n  }\n  else\n  {\n    v16 = 0;\n    *a4 = v48;\n  }\n  return v16;\n}\n\n// write access to const memory has been detected, the output may be wrong!\n__int64 __usercall sub_8D30@<rax>(char *nptr@<rdi>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned __int64 *a4@<rsi>, __int64 a5@<r12>, __int64 a6@<r13>, __int64 a7@<r14>, __int64 a8@<r15>)\n{\n  unsigned __int64 *v8; // rbp\n  int *v9; // rbx\n  unsigned __int8 v10; // r14\n  const unsigned __int16 **v11; // rax\n  const unsigned __int16 **v12; // r13\n  const unsigned __int16 *v13; // rcx\n  char *v14; // rax\n  int v15; // eax\n  unsigned int v16; // ecx\n  unsigned __int64 v18; // rax\n  char *v19; // r14\n  int v20; // ecx\n  int v21; // er15\n  char v22; // al\n  struct lconv *v23; // rax\n  size_t v24; // rax\n  char *v25; // r8\n  __int64 i; // rax\n  signed int v27; // er13\n  int v28; // er14\n  char *v29; // rax\n  int v30; // edi\n  int v31; // ecx\n  int v32; // edi\n  int v33; // er8\n  unsigned __int64 v34; // r10\n  unsigned __int64 v35; // rdi\n  unsigned __int64 v36; // r8\n  int v37; // esi\n  char *v38; // ST08_8\n  unsigned __int64 v39; // rax\n  unsigned __int64 v40; // r9\n  signed __int64 v41; // r11\n  unsigned __int64 v42; // rsi\n  unsigned __int64 v43; // r13\n  unsigned __int64 v44; // r9\n  char *v45; // rax\n  size_t v46; // [rsp+0h] [rbp-70h]\n  char *s1; // [rsp+8h] [rbp-68h]\n  unsigned __int64 v48; // [rsp+10h] [rbp-60h]\n  unsigned __int64 v49; // [rsp+18h] [rbp-58h]\n  char *endptr; // [rsp+28h] [rbp-48h]\n  unsigned __int64 v51; // [rsp+30h] [rbp-40h]\n  __int64 v52; // [rsp+40h] [rbp-30h]\n  __int64 v53; // [rsp+48h] [rbp-28h]\n  __int64 v54; // [rsp+50h] [rbp-20h]\n  __int64 v55; // [rsp+58h] [rbp-18h]\n  __int64 v56; // [rsp+60h] [rbp-10h]\n  __int64 v57; // [rsp+68h] [rbp-8h]\n\n  v57 = a8;\n  v56 = a7;\n  v55 = a6;\n  v54 = a5;\n  v53 = a3;\n  v52 = a2;\n  v8 = a4;\n  *a4 = 0LL;\n  v51 = __readfsqword(0x28u);\n  v9 = __errno_location();\n  if ( !nptr )\n    goto LABEL_7;\n  v10 = *nptr;\n  if ( !*nptr )\n    goto LABEL_7;\n  v11 = __ctype_b_loc();\n  v12 = v11;\n  v13 = *v11;\n  v14 = nptr;\n  while ( v13[v10] & 0x2000 )\n    v10 = *++v14;\n  if ( v10 == 45 )\n    goto LABEL_7;\n  *v9 = 0;\n  endptr = 0LL;\n  v18 = __strtoul_internal(nptr, &endptr, 0, 0);\n  v19 = endptr;\n  v48 = v18;\n  v20 = *v9;\n  if ( endptr == nptr )\n  {\nLABEL_33:\n    if ( !v20 )\n    {\nLABEL_7:\n      v15 = 22;\n      v16 = -22;\n      goto LABEL_8;\n    }\nLABEL_13:\n    v16 = -v20;\n    goto LABEL_14;\n  }\n  if ( v20 && v18 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n    goto LABEL_13;\n  if ( !endptr || !*endptr )\n  {\n    v16 = 0;\n    *a4 = v18;\n    return v16;\n  }\n  v21 = 0;\n  v49 = 0LL;\n  while ( 1 )\n  {\n    v22 = v19[1];\n    if ( v22 == 105 )\n    {\n      if ( (v19[2] & 0xDF) == 66 && !v19[3] )\n      {\nLABEL_37:\n        v27 = 1024;\n        goto LABEL_38;\n      }\n      goto LABEL_23;\n    }\n    if ( (v22 & 0xDF) == 66 && !v19[2] )\n      break;\n    if ( !v22 )\n      goto LABEL_37;\nLABEL_23:\n    v23 = localeconv();\n    if ( !v23 )\n      goto LABEL_7;\n    if ( !v23->decimal_point )\n      goto LABEL_7;\n    s1 = v23->decimal_point;\n    v24 = strlen(v23->decimal_point);\n    if ( v49 )\n      goto LABEL_7;\n    if ( !*v19 )\n      goto LABEL_7;\n    v46 = v24;\n    if ( strncmp(s1, v19, v24) )\n      goto LABEL_7;\n    v25 = &v19[v46];\n    for ( i = v19[v46]; (_BYTE)i == 48; ++v21 )\n      i = *++v25;\n    if ( (*v12)[i] & 0x800 )\n    {\n      *v9 = 0;\n      v38 = v25;\n      endptr = 0LL;\n      v39 = __strtoul_internal(v25, &endptr, 0, 0);\n      v19 = endptr;\n      v49 = v39;\n      v20 = *v9;\n      if ( endptr == v38 )\n        goto LABEL_33;\n      if ( v20 )\n      {\n        if ( v39 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n          goto LABEL_13;\n        goto LABEL_62;\n      }\n      if ( v39 )\n      {\nLABEL_62:\n        if ( !endptr || !*endptr )\n          goto LABEL_7;\n      }\n    }\n    else\n    {\n      endptr = v25;\n      v19 = v25;\n    }\n  }\n  v27 = 1000;\nLABEL_38:\n  v28 = *v19;\n  v29 = strchr(\"KMGTPEZY\", v28);\n  if ( v29 )\n  {\n    v30 = (unsigned __int64)(v29 - \"KMGTPEZY\") + 1;\n    goto LABEL_40;\n  }\n  v45 = strchr(\"kmgtpezy\", v28);\n  if ( !v45 )\n    goto LABEL_7;\n  v30 = (unsigned __int64)(v45 - \"kmgtpezy\") + 1;\nLABEL_40:\n  if ( v30 )\n  {\n    if ( is_mul_ok(v27, v48) )\n    {\n      v31 = 0;\n      while ( 1 )\n      {\n        v48 *= v27;\n        if ( v30 - 1 == v31 )\n          break;\n        ++v31;\n        if ( !is_mul_ok(v27, v48) )\n          goto LABEL_77;\n      }\n      v16 = 0;\n    }\n    else\n    {\nLABEL_77:\n      v16 = -34;\n    }\n    if ( v49 )\n    {\n      v32 = v30 - 1;\n      v33 = 0;\n      v34 = 1LL;\n      do\n      {\n        v34 *= v27;\n        if ( v33 == v32 )\n          break;\n        ++v33;\n      }\n      while ( is_mul_ok(v27, v34) );\n      if ( v49 <= 0xA )\n      {\n        v36 = v49;\n        v35 = 10LL;\n      }\n      else\n      {\n        v35 = 10LL;\n        while ( 1 )\n        {\n          v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v49 >> 64) >> 3;\n          if ( v35 > 0x1999999999999999LL )\n            break;\n          v35 *= 10LL;\n          if ( v35 >= v49 )\n          {\n            v36 = v49;\n            break;\n          }\n        }\n      }\n      if ( v21 )\n      {\n        v37 = 0;\n        do\n        {\n          if ( v35 <= 0x1999999999999999LL )\n            v35 *= 10LL;\n          else\n            v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n          ++v37;\n        }\n        while ( v21 != v37 );\n      }\n      v40 = 1LL;\n      do\n      {\n        v41 = 10 * v40;\n        v42 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        v43 = v36 - 10 * v42;\n        v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        if ( v43 )\n        {\n          v44 = v35 / v40 / v43;\n          if ( v44 )\n            v48 += v34 / v44;\n        }\n        v40 = v41;\n      }\n      while ( v42 );\n    }\n    *v8 = v48;\nLABEL_14:\n    if ( (v16 & 0x80000000) != 0 )\n    {\n      v15 = -v16;\nLABEL_8:\n      *v9 = v15;\n    }\n  }\n  else\n  {\n    v16 = 0;\n    *a4 = v48;\n  }\n  return v16;\n}\n", 
            "funcStartAddr": "0x8c38L", 
            "funcEndAddr": "0x8d29L", 
            "funcName": "sub_8D30"
        }, 
        {
            "decompiledFuncCode": "// write access to const memory has been detected, the output may be wrong!\n__int64 __usercall sub_8D30@<rax>(char *nptr@<rdi>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned __int64 *a4@<rsi>, __int64 a5@<r12>, __int64 a6@<r13>, __int64 a7@<r14>, __int64 a8@<r15>)\n{\n  unsigned __int64 *v8; // rbp\n  int *v9; // rbx\n  unsigned __int8 v10; // r14\n  const unsigned __int16 **v11; // rax\n  const unsigned __int16 **v12; // r13\n  const unsigned __int16 *v13; // rcx\n  char *v14; // rax\n  int v15; // eax\n  unsigned int v16; // ecx\n  unsigned __int64 v18; // rax\n  char *v19; // r14\n  int v20; // ecx\n  int v21; // er15\n  char v22; // al\n  struct lconv *v23; // rax\n  size_t v24; // rax\n  char *v25; // r8\n  __int64 i; // rax\n  signed int v27; // er13\n  int v28; // er14\n  char *v29; // rax\n  int v30; // edi\n  int v31; // ecx\n  int v32; // edi\n  int v33; // er8\n  unsigned __int64 v34; // r10\n  unsigned __int64 v35; // rdi\n  unsigned __int64 v36; // r8\n  int v37; // esi\n  char *v38; // ST08_8\n  unsigned __int64 v39; // rax\n  unsigned __int64 v40; // r9\n  signed __int64 v41; // r11\n  unsigned __int64 v42; // rsi\n  unsigned __int64 v43; // r13\n  unsigned __int64 v44; // r9\n  char *v45; // rax\n  size_t v46; // [rsp+0h] [rbp-70h]\n  char *s1; // [rsp+8h] [rbp-68h]\n  unsigned __int64 v48; // [rsp+10h] [rbp-60h]\n  unsigned __int64 v49; // [rsp+18h] [rbp-58h]\n  char *endptr; // [rsp+28h] [rbp-48h]\n  unsigned __int64 v51; // [rsp+30h] [rbp-40h]\n  __int64 v52; // [rsp+40h] [rbp-30h]\n  __int64 v53; // [rsp+48h] [rbp-28h]\n  __int64 v54; // [rsp+50h] [rbp-20h]\n  __int64 v55; // [rsp+58h] [rbp-18h]\n  __int64 v56; // [rsp+60h] [rbp-10h]\n  __int64 v57; // [rsp+68h] [rbp-8h]\n\n  v57 = a8;\n  v56 = a7;\n  v55 = a6;\n  v54 = a5;\n  v53 = a3;\n  v52 = a2;\n  v8 = a4;\n  *a4 = 0LL;\n  v51 = __readfsqword(0x28u);\n  v9 = __errno_location();\n  if ( !nptr )\n    goto LABEL_7;\n  v10 = *nptr;\n  if ( !*nptr )\n    goto LABEL_7;\n  v11 = __ctype_b_loc();\n  v12 = v11;\n  v13 = *v11;\n  v14 = nptr;\n  while ( v13[v10] & 0x2000 )\n    v10 = *++v14;\n  if ( v10 == 45 )\n    goto LABEL_7;\n  *v9 = 0;\n  endptr = 0LL;\n  v18 = __strtoul_internal(nptr, &endptr, 0, 0);\n  v19 = endptr;\n  v48 = v18;\n  v20 = *v9;\n  if ( endptr == nptr )\n  {\nLABEL_33:\n    if ( !v20 )\n    {\nLABEL_7:\n      v15 = 22;\n      v16 = -22;\n      goto LABEL_8;\n    }\nLABEL_13:\n    v16 = -v20;\n    goto LABEL_14;\n  }\n  if ( v20 && v18 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n    goto LABEL_13;\n  if ( !endptr || !*endptr )\n  {\n    v16 = 0;\n    *a4 = v18;\n    return v16;\n  }\n  v21 = 0;\n  v49 = 0LL;\n  while ( 1 )\n  {\n    v22 = v19[1];\n    if ( v22 == 105 )\n    {\n      if ( (v19[2] & 0xDF) == 66 && !v19[3] )\n      {\nLABEL_37:\n        v27 = 1024;\n        goto LABEL_38;\n      }\n      goto LABEL_23;\n    }\n    if ( (v22 & 0xDF) == 66 && !v19[2] )\n      break;\n    if ( !v22 )\n      goto LABEL_37;\nLABEL_23:\n    v23 = localeconv();\n    if ( !v23 )\n      goto LABEL_7;\n    if ( !v23->decimal_point )\n      goto LABEL_7;\n    s1 = v23->decimal_point;\n    v24 = strlen(v23->decimal_point);\n    if ( v49 )\n      goto LABEL_7;\n    if ( !*v19 )\n      goto LABEL_7;\n    v46 = v24;\n    if ( strncmp(s1, v19, v24) )\n      goto LABEL_7;\n    v25 = &v19[v46];\n    for ( i = v19[v46]; (_BYTE)i == 48; ++v21 )\n      i = *++v25;\n    if ( (*v12)[i] & 0x800 )\n    {\n      *v9 = 0;\n      v38 = v25;\n      endptr = 0LL;\n      v39 = __strtoul_internal(v25, &endptr, 0, 0);\n      v19 = endptr;\n      v49 = v39;\n      v20 = *v9;\n      if ( endptr == v38 )\n        goto LABEL_33;\n      if ( v20 )\n      {\n        if ( v39 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n          goto LABEL_13;\n        goto LABEL_62;\n      }\n      if ( v39 )\n      {\nLABEL_62:\n        if ( !endptr || !*endptr )\n          goto LABEL_7;\n      }\n    }\n    else\n    {\n      endptr = v25;\n      v19 = v25;\n    }\n  }\n  v27 = 1000;\nLABEL_38:\n  v28 = *v19;\n  v29 = strchr(\"KMGTPEZY\", v28);\n  if ( v29 )\n  {\n    v30 = (unsigned __int64)(v29 - \"KMGTPEZY\") + 1;\n    goto LABEL_40;\n  }\n  v45 = strchr(\"kmgtpezy\", v28);\n  if ( !v45 )\n    goto LABEL_7;\n  v30 = (unsigned __int64)(v45 - \"kmgtpezy\") + 1;\nLABEL_40:\n  if ( v30 )\n  {\n    if ( is_mul_ok(v27, v48) )\n    {\n      v31 = 0;\n      while ( 1 )\n      {\n        v48 *= v27;\n        if ( v30 - 1 == v31 )\n          break;\n        ++v31;\n        if ( !is_mul_ok(v27, v48) )\n          goto LABEL_77;\n      }\n      v16 = 0;\n    }\n    else\n    {\nLABEL_77:\n      v16 = -34;\n    }\n    if ( v49 )\n    {\n      v32 = v30 - 1;\n      v33 = 0;\n      v34 = 1LL;\n      do\n      {\n        v34 *= v27;\n        if ( v33 == v32 )\n          break;\n        ++v33;\n      }\n      while ( is_mul_ok(v27, v34) );\n      if ( v49 <= 0xA )\n      {\n        v36 = v49;\n        v35 = 10LL;\n      }\n      else\n      {\n        v35 = 10LL;\n        while ( 1 )\n        {\n          v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v49 >> 64) >> 3;\n          if ( v35 > 0x1999999999999999LL )\n            break;\n          v35 *= 10LL;\n          if ( v35 >= v49 )\n          {\n            v36 = v49;\n            break;\n          }\n        }\n      }\n      if ( v21 )\n      {\n        v37 = 0;\n        do\n        {\n          if ( v35 <= 0x1999999999999999LL )\n            v35 *= 10LL;\n          else\n            v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n          ++v37;\n        }\n        while ( v21 != v37 );\n      }\n      v40 = 1LL;\n      do\n      {\n        v41 = 10 * v40;\n        v42 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        v43 = v36 - 10 * v42;\n        v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        if ( v43 )\n        {\n          v44 = v35 / v40 / v43;\n          if ( v44 )\n            v48 += v34 / v44;\n        }\n        v40 = v41;\n      }\n      while ( v42 );\n    }\n    *v8 = v48;\nLABEL_14:\n    if ( (v16 & 0x80000000) != 0 )\n    {\n      v15 = -v16;\nLABEL_8:\n      *v9 = v15;\n    }\n  }\n  else\n  {\n    v16 = 0;\n    *a4 = v48;\n  }\n  return v16;\n}\n\n// write access to const memory has been detected, the output may be wrong!\n__int64 __usercall sub_8D30@<rax>(char *nptr@<rdi>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned __int64 *a4@<rsi>, __int64 a5@<r12>, __int64 a6@<r13>, __int64 a7@<r14>, __int64 a8@<r15>)\n{\n  unsigned __int64 *v8; // rbp\n  int *v9; // rbx\n  unsigned __int8 v10; // r14\n  const unsigned __int16 **v11; // rax\n  const unsigned __int16 **v12; // r13\n  const unsigned __int16 *v13; // rcx\n  char *v14; // rax\n  int v15; // eax\n  unsigned int v16; // ecx\n  unsigned __int64 v18; // rax\n  char *v19; // r14\n  int v20; // ecx\n  int v21; // er15\n  char v22; // al\n  struct lconv *v23; // rax\n  size_t v24; // rax\n  char *v25; // r8\n  __int64 i; // rax\n  signed int v27; // er13\n  int v28; // er14\n  char *v29; // rax\n  int v30; // edi\n  int v31; // ecx\n  int v32; // edi\n  int v33; // er8\n  unsigned __int64 v34; // r10\n  unsigned __int64 v35; // rdi\n  unsigned __int64 v36; // r8\n  int v37; // esi\n  char *v38; // ST08_8\n  unsigned __int64 v39; // rax\n  unsigned __int64 v40; // r9\n  signed __int64 v41; // r11\n  unsigned __int64 v42; // rsi\n  unsigned __int64 v43; // r13\n  unsigned __int64 v44; // r9\n  char *v45; // rax\n  size_t v46; // [rsp+0h] [rbp-70h]\n  char *s1; // [rsp+8h] [rbp-68h]\n  unsigned __int64 v48; // [rsp+10h] [rbp-60h]\n  unsigned __int64 v49; // [rsp+18h] [rbp-58h]\n  char *endptr; // [rsp+28h] [rbp-48h]\n  unsigned __int64 v51; // [rsp+30h] [rbp-40h]\n  __int64 v52; // [rsp+40h] [rbp-30h]\n  __int64 v53; // [rsp+48h] [rbp-28h]\n  __int64 v54; // [rsp+50h] [rbp-20h]\n  __int64 v55; // [rsp+58h] [rbp-18h]\n  __int64 v56; // [rsp+60h] [rbp-10h]\n  __int64 v57; // [rsp+68h] [rbp-8h]\n\n  v57 = a8;\n  v56 = a7;\n  v55 = a6;\n  v54 = a5;\n  v53 = a3;\n  v52 = a2;\n  v8 = a4;\n  *a4 = 0LL;\n  v51 = __readfsqword(0x28u);\n  v9 = __errno_location();\n  if ( !nptr )\n    goto LABEL_7;\n  v10 = *nptr;\n  if ( !*nptr )\n    goto LABEL_7;\n  v11 = __ctype_b_loc();\n  v12 = v11;\n  v13 = *v11;\n  v14 = nptr;\n  while ( v13[v10] & 0x2000 )\n    v10 = *++v14;\n  if ( v10 == 45 )\n    goto LABEL_7;\n  *v9 = 0;\n  endptr = 0LL;\n  v18 = __strtoul_internal(nptr, &endptr, 0, 0);\n  v19 = endptr;\n  v48 = v18;\n  v20 = *v9;\n  if ( endptr == nptr )\n  {\nLABEL_33:\n    if ( !v20 )\n    {\nLABEL_7:\n      v15 = 22;\n      v16 = -22;\n      goto LABEL_8;\n    }\nLABEL_13:\n    v16 = -v20;\n    goto LABEL_14;\n  }\n  if ( v20 && v18 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n    goto LABEL_13;\n  if ( !endptr || !*endptr )\n  {\n    v16 = 0;\n    *a4 = v18;\n    return v16;\n  }\n  v21 = 0;\n  v49 = 0LL;\n  while ( 1 )\n  {\n    v22 = v19[1];\n    if ( v22 == 105 )\n    {\n      if ( (v19[2] & 0xDF) == 66 && !v19[3] )\n      {\nLABEL_37:\n        v27 = 1024;\n        goto LABEL_38;\n      }\n      goto LABEL_23;\n    }\n    if ( (v22 & 0xDF) == 66 && !v19[2] )\n      break;\n    if ( !v22 )\n      goto LABEL_37;\nLABEL_23:\n    v23 = localeconv();\n    if ( !v23 )\n      goto LABEL_7;\n    if ( !v23->decimal_point )\n      goto LABEL_7;\n    s1 = v23->decimal_point;\n    v24 = strlen(v23->decimal_point);\n    if ( v49 )\n      goto LABEL_7;\n    if ( !*v19 )\n      goto LABEL_7;\n    v46 = v24;\n    if ( strncmp(s1, v19, v24) )\n      goto LABEL_7;\n    v25 = &v19[v46];\n    for ( i = v19[v46]; (_BYTE)i == 48; ++v21 )\n      i = *++v25;\n    if ( (*v12)[i] & 0x800 )\n    {\n      *v9 = 0;\n      v38 = v25;\n      endptr = 0LL;\n      v39 = __strtoul_internal(v25, &endptr, 0, 0);\n      v19 = endptr;\n      v49 = v39;\n      v20 = *v9;\n      if ( endptr == v38 )\n        goto LABEL_33;\n      if ( v20 )\n      {\n        if ( v39 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n          goto LABEL_13;\n        goto LABEL_62;\n      }\n      if ( v39 )\n      {\nLABEL_62:\n        if ( !endptr || !*endptr )\n          goto LABEL_7;\n      }\n    }\n    else\n    {\n      endptr = v25;\n      v19 = v25;\n    }\n  }\n  v27 = 1000;\nLABEL_38:\n  v28 = *v19;\n  v29 = strchr(\"KMGTPEZY\", v28);\n  if ( v29 )\n  {\n    v30 = (unsigned __int64)(v29 - \"KMGTPEZY\") + 1;\n    goto LABEL_40;\n  }\n  v45 = strchr(\"kmgtpezy\", v28);\n  if ( !v45 )\n    goto LABEL_7;\n  v30 = (unsigned __int64)(v45 - \"kmgtpezy\") + 1;\nLABEL_40:\n  if ( v30 )\n  {\n    if ( is_mul_ok(v27, v48) )\n    {\n      v31 = 0;\n      while ( 1 )\n      {\n        v48 *= v27;\n        if ( v30 - 1 == v31 )\n          break;\n        ++v31;\n        if ( !is_mul_ok(v27, v48) )\n          goto LABEL_77;\n      }\n      v16 = 0;\n    }\n    else\n    {\nLABEL_77:\n      v16 = -34;\n    }\n    if ( v49 )\n    {\n      v32 = v30 - 1;\n      v33 = 0;\n      v34 = 1LL;\n      do\n      {\n        v34 *= v27;\n        if ( v33 == v32 )\n          break;\n        ++v33;\n      }\n      while ( is_mul_ok(v27, v34) );\n      if ( v49 <= 0xA )\n      {\n        v36 = v49;\n        v35 = 10LL;\n      }\n      else\n      {\n        v35 = 10LL;\n        while ( 1 )\n        {\n          v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v49 >> 64) >> 3;\n          if ( v35 > 0x1999999999999999LL )\n            break;\n          v35 *= 10LL;\n          if ( v35 >= v49 )\n          {\n            v36 = v49;\n            break;\n          }\n        }\n      }\n      if ( v21 )\n      {\n        v37 = 0;\n        do\n        {\n          if ( v35 <= 0x1999999999999999LL )\n            v35 *= 10LL;\n          else\n            v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n          ++v37;\n        }\n        while ( v21 != v37 );\n      }\n      v40 = 1LL;\n      do\n      {\n        v41 = 10 * v40;\n        v42 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        v43 = v36 - 10 * v42;\n        v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        if ( v43 )\n        {\n          v44 = v35 / v40 / v43;\n          if ( v44 )\n            v48 += v34 / v44;\n        }\n        v40 = v41;\n      }\n      while ( v42 );\n    }\n    *v8 = v48;\nLABEL_14:\n    if ( (v16 & 0x80000000) != 0 )\n    {\n      v15 = -v16;\nLABEL_8:\n      *v9 = v15;\n    }\n  }\n  else\n  {\n    v16 = 0;\n    *a4 = v48;\n  }\n  return v16;\n}\n\n// write access to const memory has been detected, the output may be wrong!\n__int64 __usercall sub_8D30@<rax>(char *nptr@<rdi>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned __int64 *a4@<rsi>, __int64 a5@<r12>, __int64 a6@<r13>, __int64 a7@<r14>, __int64 a8@<r15>)\n{\n  unsigned __int64 *v8; // rbp\n  int *v9; // rbx\n  unsigned __int8 v10; // r14\n  const unsigned __int16 **v11; // rax\n  const unsigned __int16 **v12; // r13\n  const unsigned __int16 *v13; // rcx\n  char *v14; // rax\n  int v15; // eax\n  unsigned int v16; // ecx\n  unsigned __int64 v18; // rax\n  char *v19; // r14\n  int v20; // ecx\n  int v21; // er15\n  char v22; // al\n  struct lconv *v23; // rax\n  size_t v24; // rax\n  char *v25; // r8\n  __int64 i; // rax\n  signed int v27; // er13\n  int v28; // er14\n  char *v29; // rax\n  int v30; // edi\n  int v31; // ecx\n  int v32; // edi\n  int v33; // er8\n  unsigned __int64 v34; // r10\n  unsigned __int64 v35; // rdi\n  unsigned __int64 v36; // r8\n  int v37; // esi\n  char *v38; // ST08_8\n  unsigned __int64 v39; // rax\n  unsigned __int64 v40; // r9\n  signed __int64 v41; // r11\n  unsigned __int64 v42; // rsi\n  unsigned __int64 v43; // r13\n  unsigned __int64 v44; // r9\n  char *v45; // rax\n  size_t v46; // [rsp+0h] [rbp-70h]\n  char *s1; // [rsp+8h] [rbp-68h]\n  unsigned __int64 v48; // [rsp+10h] [rbp-60h]\n  unsigned __int64 v49; // [rsp+18h] [rbp-58h]\n  char *endptr; // [rsp+28h] [rbp-48h]\n  unsigned __int64 v51; // [rsp+30h] [rbp-40h]\n  __int64 v52; // [rsp+40h] [rbp-30h]\n  __int64 v53; // [rsp+48h] [rbp-28h]\n  __int64 v54; // [rsp+50h] [rbp-20h]\n  __int64 v55; // [rsp+58h] [rbp-18h]\n  __int64 v56; // [rsp+60h] [rbp-10h]\n  __int64 v57; // [rsp+68h] [rbp-8h]\n\n  v57 = a8;\n  v56 = a7;\n  v55 = a6;\n  v54 = a5;\n  v53 = a3;\n  v52 = a2;\n  v8 = a4;\n  *a4 = 0LL;\n  v51 = __readfsqword(0x28u);\n  v9 = __errno_location();\n  if ( !nptr )\n    goto LABEL_7;\n  v10 = *nptr;\n  if ( !*nptr )\n    goto LABEL_7;\n  v11 = __ctype_b_loc();\n  v12 = v11;\n  v13 = *v11;\n  v14 = nptr;\n  while ( v13[v10] & 0x2000 )\n    v10 = *++v14;\n  if ( v10 == 45 )\n    goto LABEL_7;\n  *v9 = 0;\n  endptr = 0LL;\n  v18 = __strtoul_internal(nptr, &endptr, 0, 0);\n  v19 = endptr;\n  v48 = v18;\n  v20 = *v9;\n  if ( endptr == nptr )\n  {\nLABEL_33:\n    if ( !v20 )\n    {\nLABEL_7:\n      v15 = 22;\n      v16 = -22;\n      goto LABEL_8;\n    }\nLABEL_13:\n    v16 = -v20;\n    goto LABEL_14;\n  }\n  if ( v20 && v18 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n    goto LABEL_13;\n  if ( !endptr || !*endptr )\n  {\n    v16 = 0;\n    *a4 = v18;\n    return v16;\n  }\n  v21 = 0;\n  v49 = 0LL;\n  while ( 1 )\n  {\n    v22 = v19[1];\n    if ( v22 == 105 )\n    {\n      if ( (v19[2] & 0xDF) == 66 && !v19[3] )\n      {\nLABEL_37:\n        v27 = 1024;\n        goto LABEL_38;\n      }\n      goto LABEL_23;\n    }\n    if ( (v22 & 0xDF) == 66 && !v19[2] )\n      break;\n    if ( !v22 )\n      goto LABEL_37;\nLABEL_23:\n    v23 = localeconv();\n    if ( !v23 )\n      goto LABEL_7;\n    if ( !v23->decimal_point )\n      goto LABEL_7;\n    s1 = v23->decimal_point;\n    v24 = strlen(v23->decimal_point);\n    if ( v49 )\n      goto LABEL_7;\n    if ( !*v19 )\n      goto LABEL_7;\n    v46 = v24;\n    if ( strncmp(s1, v19, v24) )\n      goto LABEL_7;\n    v25 = &v19[v46];\n    for ( i = v19[v46]; (_BYTE)i == 48; ++v21 )\n      i = *++v25;\n    if ( (*v12)[i] & 0x800 )\n    {\n      *v9 = 0;\n      v38 = v25;\n      endptr = 0LL;\n      v39 = __strtoul_internal(v25, &endptr, 0, 0);\n      v19 = endptr;\n      v49 = v39;\n      v20 = *v9;\n      if ( endptr == v38 )\n        goto LABEL_33;\n      if ( v20 )\n      {\n        if ( v39 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n          goto LABEL_13;\n        goto LABEL_62;\n      }\n      if ( v39 )\n      {\nLABEL_62:\n        if ( !endptr || !*endptr )\n          goto LABEL_7;\n      }\n    }\n    else\n    {\n      endptr = v25;\n      v19 = v25;\n    }\n  }\n  v27 = 1000;\nLABEL_38:\n  v28 = *v19;\n  v29 = strchr(\"KMGTPEZY\", v28);\n  if ( v29 )\n  {\n    v30 = (unsigned __int64)(v29 - \"KMGTPEZY\") + 1;\n    goto LABEL_40;\n  }\n  v45 = strchr(\"kmgtpezy\", v28);\n  if ( !v45 )\n    goto LABEL_7;\n  v30 = (unsigned __int64)(v45 - \"kmgtpezy\") + 1;\nLABEL_40:\n  if ( v30 )\n  {\n    if ( is_mul_ok(v27, v48) )\n    {\n      v31 = 0;\n      while ( 1 )\n      {\n        v48 *= v27;\n        if ( v30 - 1 == v31 )\n          break;\n        ++v31;\n        if ( !is_mul_ok(v27, v48) )\n          goto LABEL_77;\n      }\n      v16 = 0;\n    }\n    else\n    {\nLABEL_77:\n      v16 = -34;\n    }\n    if ( v49 )\n    {\n      v32 = v30 - 1;\n      v33 = 0;\n      v34 = 1LL;\n      do\n      {\n        v34 *= v27;\n        if ( v33 == v32 )\n          break;\n        ++v33;\n      }\n      while ( is_mul_ok(v27, v34) );\n      if ( v49 <= 0xA )\n      {\n        v36 = v49;\n        v35 = 10LL;\n      }\n      else\n      {\n        v35 = 10LL;\n        while ( 1 )\n        {\n          v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v49 >> 64) >> 3;\n          if ( v35 > 0x1999999999999999LL )\n            break;\n          v35 *= 10LL;\n          if ( v35 >= v49 )\n          {\n            v36 = v49;\n            break;\n          }\n        }\n      }\n      if ( v21 )\n      {\n        v37 = 0;\n        do\n        {\n          if ( v35 <= 0x1999999999999999LL )\n            v35 *= 10LL;\n          else\n            v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n          ++v37;\n        }\n        while ( v21 != v37 );\n      }\n      v40 = 1LL;\n      do\n      {\n        v41 = 10 * v40;\n        v42 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        v43 = v36 - 10 * v42;\n        v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        if ( v43 )\n        {\n          v44 = v35 / v40 / v43;\n          if ( v44 )\n            v48 += v34 / v44;\n        }\n        v40 = v41;\n      }\n      while ( v42 );\n    }\n    *v8 = v48;\nLABEL_14:\n    if ( (v16 & 0x80000000) != 0 )\n    {\n      v15 = -v16;\nLABEL_8:\n      *v9 = v15;\n    }\n  }\n  else\n  {\n    v16 = 0;\n    *a4 = v48;\n  }\n  return v16;\n}\n\n// write access to const memory has been detected, the output may be wrong!\n__int64 __usercall sub_8D30@<rax>(char *nptr@<rdi>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned __int64 *a4@<rsi>, __int64 a5@<r12>, __int64 a6@<r13>, __int64 a7@<r14>, __int64 a8@<r15>)\n{\n  unsigned __int64 *v8; // rbp\n  int *v9; // rbx\n  unsigned __int8 v10; // r14\n  const unsigned __int16 **v11; // rax\n  const unsigned __int16 **v12; // r13\n  const unsigned __int16 *v13; // rcx\n  char *v14; // rax\n  int v15; // eax\n  unsigned int v16; // ecx\n  unsigned __int64 v18; // rax\n  char *v19; // r14\n  int v20; // ecx\n  int v21; // er15\n  char v22; // al\n  struct lconv *v23; // rax\n  size_t v24; // rax\n  char *v25; // r8\n  __int64 i; // rax\n  signed int v27; // er13\n  int v28; // er14\n  char *v29; // rax\n  int v30; // edi\n  int v31; // ecx\n  int v32; // edi\n  int v33; // er8\n  unsigned __int64 v34; // r10\n  unsigned __int64 v35; // rdi\n  unsigned __int64 v36; // r8\n  int v37; // esi\n  char *v38; // ST08_8\n  unsigned __int64 v39; // rax\n  unsigned __int64 v40; // r9\n  signed __int64 v41; // r11\n  unsigned __int64 v42; // rsi\n  unsigned __int64 v43; // r13\n  unsigned __int64 v44; // r9\n  char *v45; // rax\n  size_t v46; // [rsp+0h] [rbp-70h]\n  char *s1; // [rsp+8h] [rbp-68h]\n  unsigned __int64 v48; // [rsp+10h] [rbp-60h]\n  unsigned __int64 v49; // [rsp+18h] [rbp-58h]\n  char *endptr; // [rsp+28h] [rbp-48h]\n  unsigned __int64 v51; // [rsp+30h] [rbp-40h]\n  __int64 v52; // [rsp+40h] [rbp-30h]\n  __int64 v53; // [rsp+48h] [rbp-28h]\n  __int64 v54; // [rsp+50h] [rbp-20h]\n  __int64 v55; // [rsp+58h] [rbp-18h]\n  __int64 v56; // [rsp+60h] [rbp-10h]\n  __int64 v57; // [rsp+68h] [rbp-8h]\n\n  v57 = a8;\n  v56 = a7;\n  v55 = a6;\n  v54 = a5;\n  v53 = a3;\n  v52 = a2;\n  v8 = a4;\n  *a4 = 0LL;\n  v51 = __readfsqword(0x28u);\n  v9 = __errno_location();\n  if ( !nptr )\n    goto LABEL_7;\n  v10 = *nptr;\n  if ( !*nptr )\n    goto LABEL_7;\n  v11 = __ctype_b_loc();\n  v12 = v11;\n  v13 = *v11;\n  v14 = nptr;\n  while ( v13[v10] & 0x2000 )\n    v10 = *++v14;\n  if ( v10 == 45 )\n    goto LABEL_7;\n  *v9 = 0;\n  endptr = 0LL;\n  v18 = __strtoul_internal(nptr, &endptr, 0, 0);\n  v19 = endptr;\n  v48 = v18;\n  v20 = *v9;\n  if ( endptr == nptr )\n  {\nLABEL_33:\n    if ( !v20 )\n    {\nLABEL_7:\n      v15 = 22;\n      v16 = -22;\n      goto LABEL_8;\n    }\nLABEL_13:\n    v16 = -v20;\n    goto LABEL_14;\n  }\n  if ( v20 && v18 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n    goto LABEL_13;\n  if ( !endptr || !*endptr )\n  {\n    v16 = 0;\n    *a4 = v18;\n    return v16;\n  }\n  v21 = 0;\n  v49 = 0LL;\n  while ( 1 )\n  {\n    v22 = v19[1];\n    if ( v22 == 105 )\n    {\n      if ( (v19[2] & 0xDF) == 66 && !v19[3] )\n      {\nLABEL_37:\n        v27 = 1024;\n        goto LABEL_38;\n      }\n      goto LABEL_23;\n    }\n    if ( (v22 & 0xDF) == 66 && !v19[2] )\n      break;\n    if ( !v22 )\n      goto LABEL_37;\nLABEL_23:\n    v23 = localeconv();\n    if ( !v23 )\n      goto LABEL_7;\n    if ( !v23->decimal_point )\n      goto LABEL_7;\n    s1 = v23->decimal_point;\n    v24 = strlen(v23->decimal_point);\n    if ( v49 )\n      goto LABEL_7;\n    if ( !*v19 )\n      goto LABEL_7;\n    v46 = v24;\n    if ( strncmp(s1, v19, v24) )\n      goto LABEL_7;\n    v25 = &v19[v46];\n    for ( i = v19[v46]; (_BYTE)i == 48; ++v21 )\n      i = *++v25;\n    if ( (*v12)[i] & 0x800 )\n    {\n      *v9 = 0;\n      v38 = v25;\n      endptr = 0LL;\n      v39 = __strtoul_internal(v25, &endptr, 0, 0);\n      v19 = endptr;\n      v49 = v39;\n      v20 = *v9;\n      if ( endptr == v38 )\n        goto LABEL_33;\n      if ( v20 )\n      {\n        if ( v39 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n          goto LABEL_13;\n        goto LABEL_62;\n      }\n      if ( v39 )\n      {\nLABEL_62:\n        if ( !endptr || !*endptr )\n          goto LABEL_7;\n      }\n    }\n    else\n    {\n      endptr = v25;\n      v19 = v25;\n    }\n  }\n  v27 = 1000;\nLABEL_38:\n  v28 = *v19;\n  v29 = strchr(\"KMGTPEZY\", v28);\n  if ( v29 )\n  {\n    v30 = (unsigned __int64)(v29 - \"KMGTPEZY\") + 1;\n    goto LABEL_40;\n  }\n  v45 = strchr(\"kmgtpezy\", v28);\n  if ( !v45 )\n    goto LABEL_7;\n  v30 = (unsigned __int64)(v45 - \"kmgtpezy\") + 1;\nLABEL_40:\n  if ( v30 )\n  {\n    if ( is_mul_ok(v27, v48) )\n    {\n      v31 = 0;\n      while ( 1 )\n      {\n        v48 *= v27;\n        if ( v30 - 1 == v31 )\n          break;\n        ++v31;\n        if ( !is_mul_ok(v27, v48) )\n          goto LABEL_77;\n      }\n      v16 = 0;\n    }\n    else\n    {\nLABEL_77:\n      v16 = -34;\n    }\n    if ( v49 )\n    {\n      v32 = v30 - 1;\n      v33 = 0;\n      v34 = 1LL;\n      do\n      {\n        v34 *= v27;\n        if ( v33 == v32 )\n          break;\n        ++v33;\n      }\n      while ( is_mul_ok(v27, v34) );\n      if ( v49 <= 0xA )\n      {\n        v36 = v49;\n        v35 = 10LL;\n      }\n      else\n      {\n        v35 = 10LL;\n        while ( 1 )\n        {\n          v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v49 >> 64) >> 3;\n          if ( v35 > 0x1999999999999999LL )\n            break;\n          v35 *= 10LL;\n          if ( v35 >= v49 )\n          {\n            v36 = v49;\n            break;\n          }\n        }\n      }\n      if ( v21 )\n      {\n        v37 = 0;\n        do\n        {\n          if ( v35 <= 0x1999999999999999LL )\n            v35 *= 10LL;\n          else\n            v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n          ++v37;\n        }\n        while ( v21 != v37 );\n      }\n      v40 = 1LL;\n      do\n      {\n        v41 = 10 * v40;\n        v42 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        v43 = v36 - 10 * v42;\n        v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        if ( v43 )\n        {\n          v44 = v35 / v40 / v43;\n          if ( v44 )\n            v48 += v34 / v44;\n        }\n        v40 = v41;\n      }\n      while ( v42 );\n    }\n    *v8 = v48;\nLABEL_14:\n    if ( (v16 & 0x80000000) != 0 )\n    {\n      v15 = -v16;\nLABEL_8:\n      *v9 = v15;\n    }\n  }\n  else\n  {\n    v16 = 0;\n    *a4 = v48;\n  }\n  return v16;\n}\n\n// write access to const memory has been detected, the output may be wrong!\n__int64 __usercall sub_8D30@<rax>(char *nptr@<rdi>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned __int64 *a4@<rsi>, __int64 a5@<r12>, __int64 a6@<r13>, __int64 a7@<r14>, __int64 a8@<r15>)\n{\n  unsigned __int64 *v8; // rbp\n  int *v9; // rbx\n  unsigned __int8 v10; // r14\n  const unsigned __int16 **v11; // rax\n  const unsigned __int16 **v12; // r13\n  const unsigned __int16 *v13; // rcx\n  char *v14; // rax\n  int v15; // eax\n  unsigned int v16; // ecx\n  unsigned __int64 v18; // rax\n  char *v19; // r14\n  int v20; // ecx\n  int v21; // er15\n  char v22; // al\n  struct lconv *v23; // rax\n  size_t v24; // rax\n  char *v25; // r8\n  __int64 i; // rax\n  signed int v27; // er13\n  int v28; // er14\n  char *v29; // rax\n  int v30; // edi\n  int v31; // ecx\n  int v32; // edi\n  int v33; // er8\n  unsigned __int64 v34; // r10\n  unsigned __int64 v35; // rdi\n  unsigned __int64 v36; // r8\n  int v37; // esi\n  char *v38; // ST08_8\n  unsigned __int64 v39; // rax\n  unsigned __int64 v40; // r9\n  signed __int64 v41; // r11\n  unsigned __int64 v42; // rsi\n  unsigned __int64 v43; // r13\n  unsigned __int64 v44; // r9\n  char *v45; // rax\n  size_t v46; // [rsp+0h] [rbp-70h]\n  char *s1; // [rsp+8h] [rbp-68h]\n  unsigned __int64 v48; // [rsp+10h] [rbp-60h]\n  unsigned __int64 v49; // [rsp+18h] [rbp-58h]\n  char *endptr; // [rsp+28h] [rbp-48h]\n  unsigned __int64 v51; // [rsp+30h] [rbp-40h]\n  __int64 v52; // [rsp+40h] [rbp-30h]\n  __int64 v53; // [rsp+48h] [rbp-28h]\n  __int64 v54; // [rsp+50h] [rbp-20h]\n  __int64 v55; // [rsp+58h] [rbp-18h]\n  __int64 v56; // [rsp+60h] [rbp-10h]\n  __int64 v57; // [rsp+68h] [rbp-8h]\n\n  v57 = a8;\n  v56 = a7;\n  v55 = a6;\n  v54 = a5;\n  v53 = a3;\n  v52 = a2;\n  v8 = a4;\n  *a4 = 0LL;\n  v51 = __readfsqword(0x28u);\n  v9 = __errno_location();\n  if ( !nptr )\n    goto LABEL_7;\n  v10 = *nptr;\n  if ( !*nptr )\n    goto LABEL_7;\n  v11 = __ctype_b_loc();\n  v12 = v11;\n  v13 = *v11;\n  v14 = nptr;\n  while ( v13[v10] & 0x2000 )\n    v10 = *++v14;\n  if ( v10 == 45 )\n    goto LABEL_7;\n  *v9 = 0;\n  endptr = 0LL;\n  v18 = __strtoul_internal(nptr, &endptr, 0, 0);\n  v19 = endptr;\n  v48 = v18;\n  v20 = *v9;\n  if ( endptr == nptr )\n  {\nLABEL_33:\n    if ( !v20 )\n    {\nLABEL_7:\n      v15 = 22;\n      v16 = -22;\n      goto LABEL_8;\n    }\nLABEL_13:\n    v16 = -v20;\n    goto LABEL_14;\n  }\n  if ( v20 && v18 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n    goto LABEL_13;\n  if ( !endptr || !*endptr )\n  {\n    v16 = 0;\n    *a4 = v18;\n    return v16;\n  }\n  v21 = 0;\n  v49 = 0LL;\n  while ( 1 )\n  {\n    v22 = v19[1];\n    if ( v22 == 105 )\n    {\n      if ( (v19[2] & 0xDF) == 66 && !v19[3] )\n      {\nLABEL_37:\n        v27 = 1024;\n        goto LABEL_38;\n      }\n      goto LABEL_23;\n    }\n    if ( (v22 & 0xDF) == 66 && !v19[2] )\n      break;\n    if ( !v22 )\n      goto LABEL_37;\nLABEL_23:\n    v23 = localeconv();\n    if ( !v23 )\n      goto LABEL_7;\n    if ( !v23->decimal_point )\n      goto LABEL_7;\n    s1 = v23->decimal_point;\n    v24 = strlen(v23->decimal_point);\n    if ( v49 )\n      goto LABEL_7;\n    if ( !*v19 )\n      goto LABEL_7;\n    v46 = v24;\n    if ( strncmp(s1, v19, v24) )\n      goto LABEL_7;\n    v25 = &v19[v46];\n    for ( i = v19[v46]; (_BYTE)i == 48; ++v21 )\n      i = *++v25;\n    if ( (*v12)[i] & 0x800 )\n    {\n      *v9 = 0;\n      v38 = v25;\n      endptr = 0LL;\n      v39 = __strtoul_internal(v25, &endptr, 0, 0);\n      v19 = endptr;\n      v49 = v39;\n      v20 = *v9;\n      if ( endptr == v38 )\n        goto LABEL_33;\n      if ( v20 )\n      {\n        if ( v39 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n          goto LABEL_13;\n        goto LABEL_62;\n      }\n      if ( v39 )\n      {\nLABEL_62:\n        if ( !endptr || !*endptr )\n          goto LABEL_7;\n      }\n    }\n    else\n    {\n      endptr = v25;\n      v19 = v25;\n    }\n  }\n  v27 = 1000;\nLABEL_38:\n  v28 = *v19;\n  v29 = strchr(\"KMGTPEZY\", v28);\n  if ( v29 )\n  {\n    v30 = (unsigned __int64)(v29 - \"KMGTPEZY\") + 1;\n    goto LABEL_40;\n  }\n  v45 = strchr(\"kmgtpezy\", v28);\n  if ( !v45 )\n    goto LABEL_7;\n  v30 = (unsigned __int64)(v45 - \"kmgtpezy\") + 1;\nLABEL_40:\n  if ( v30 )\n  {\n    if ( is_mul_ok(v27, v48) )\n    {\n      v31 = 0;\n      while ( 1 )\n      {\n        v48 *= v27;\n        if ( v30 - 1 == v31 )\n          break;\n        ++v31;\n        if ( !is_mul_ok(v27, v48) )\n          goto LABEL_77;\n      }\n      v16 = 0;\n    }\n    else\n    {\nLABEL_77:\n      v16 = -34;\n    }\n    if ( v49 )\n    {\n      v32 = v30 - 1;\n      v33 = 0;\n      v34 = 1LL;\n      do\n      {\n        v34 *= v27;\n        if ( v33 == v32 )\n          break;\n        ++v33;\n      }\n      while ( is_mul_ok(v27, v34) );\n      if ( v49 <= 0xA )\n      {\n        v36 = v49;\n        v35 = 10LL;\n      }\n      else\n      {\n        v35 = 10LL;\n        while ( 1 )\n        {\n          v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v49 >> 64) >> 3;\n          if ( v35 > 0x1999999999999999LL )\n            break;\n          v35 *= 10LL;\n          if ( v35 >= v49 )\n          {\n            v36 = v49;\n            break;\n          }\n        }\n      }\n      if ( v21 )\n      {\n        v37 = 0;\n        do\n        {\n          if ( v35 <= 0x1999999999999999LL )\n            v35 *= 10LL;\n          else\n            v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n          ++v37;\n        }\n        while ( v21 != v37 );\n      }\n      v40 = 1LL;\n      do\n      {\n        v41 = 10 * v40;\n        v42 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        v43 = v36 - 10 * v42;\n        v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        if ( v43 )\n        {\n          v44 = v35 / v40 / v43;\n          if ( v44 )\n            v48 += v34 / v44;\n        }\n        v40 = v41;\n      }\n      while ( v42 );\n    }\n    *v8 = v48;\nLABEL_14:\n    if ( (v16 & 0x80000000) != 0 )\n    {\n      v15 = -v16;\nLABEL_8:\n      *v9 = v15;\n    }\n  }\n  else\n  {\n    v16 = 0;\n    *a4 = v48;\n  }\n  return v16;\n}\n\n// write access to const memory has been detected, the output may be wrong!\n__int64 __usercall sub_8D30@<rax>(char *nptr@<rdi>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned __int64 *a4@<rsi>, __int64 a5@<r12>, __int64 a6@<r13>, __int64 a7@<r14>, __int64 a8@<r15>)\n{\n  unsigned __int64 *v8; // rbp\n  int *v9; // rbx\n  unsigned __int8 v10; // r14\n  const unsigned __int16 **v11; // rax\n  const unsigned __int16 **v12; // r13\n  const unsigned __int16 *v13; // rcx\n  char *v14; // rax\n  int v15; // eax\n  unsigned int v16; // ecx\n  unsigned __int64 v18; // rax\n  char *v19; // r14\n  int v20; // ecx\n  int v21; // er15\n  char v22; // al\n  struct lconv *v23; // rax\n  size_t v24; // rax\n  char *v25; // r8\n  __int64 i; // rax\n  signed int v27; // er13\n  int v28; // er14\n  char *v29; // rax\n  int v30; // edi\n  int v31; // ecx\n  int v32; // edi\n  int v33; // er8\n  unsigned __int64 v34; // r10\n  unsigned __int64 v35; // rdi\n  unsigned __int64 v36; // r8\n  int v37; // esi\n  char *v38; // ST08_8\n  unsigned __int64 v39; // rax\n  unsigned __int64 v40; // r9\n  signed __int64 v41; // r11\n  unsigned __int64 v42; // rsi\n  unsigned __int64 v43; // r13\n  unsigned __int64 v44; // r9\n  char *v45; // rax\n  size_t v46; // [rsp+0h] [rbp-70h]\n  char *s1; // [rsp+8h] [rbp-68h]\n  unsigned __int64 v48; // [rsp+10h] [rbp-60h]\n  unsigned __int64 v49; // [rsp+18h] [rbp-58h]\n  char *endptr; // [rsp+28h] [rbp-48h]\n  unsigned __int64 v51; // [rsp+30h] [rbp-40h]\n  __int64 v52; // [rsp+40h] [rbp-30h]\n  __int64 v53; // [rsp+48h] [rbp-28h]\n  __int64 v54; // [rsp+50h] [rbp-20h]\n  __int64 v55; // [rsp+58h] [rbp-18h]\n  __int64 v56; // [rsp+60h] [rbp-10h]\n  __int64 v57; // [rsp+68h] [rbp-8h]\n\n  v57 = a8;\n  v56 = a7;\n  v55 = a6;\n  v54 = a5;\n  v53 = a3;\n  v52 = a2;\n  v8 = a4;\n  *a4 = 0LL;\n  v51 = __readfsqword(0x28u);\n  v9 = __errno_location();\n  if ( !nptr )\n    goto LABEL_7;\n  v10 = *nptr;\n  if ( !*nptr )\n    goto LABEL_7;\n  v11 = __ctype_b_loc();\n  v12 = v11;\n  v13 = *v11;\n  v14 = nptr;\n  while ( v13[v10] & 0x2000 )\n    v10 = *++v14;\n  if ( v10 == 45 )\n    goto LABEL_7;\n  *v9 = 0;\n  endptr = 0LL;\n  v18 = __strtoul_internal(nptr, &endptr, 0, 0);\n  v19 = endptr;\n  v48 = v18;\n  v20 = *v9;\n  if ( endptr == nptr )\n  {\nLABEL_33:\n    if ( !v20 )\n    {\nLABEL_7:\n      v15 = 22;\n      v16 = -22;\n      goto LABEL_8;\n    }\nLABEL_13:\n    v16 = -v20;\n    goto LABEL_14;\n  }\n  if ( v20 && v18 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n    goto LABEL_13;\n  if ( !endptr || !*endptr )\n  {\n    v16 = 0;\n    *a4 = v18;\n    return v16;\n  }\n  v21 = 0;\n  v49 = 0LL;\n  while ( 1 )\n  {\n    v22 = v19[1];\n    if ( v22 == 105 )\n    {\n      if ( (v19[2] & 0xDF) == 66 && !v19[3] )\n      {\nLABEL_37:\n        v27 = 1024;\n        goto LABEL_38;\n      }\n      goto LABEL_23;\n    }\n    if ( (v22 & 0xDF) == 66 && !v19[2] )\n      break;\n    if ( !v22 )\n      goto LABEL_37;\nLABEL_23:\n    v23 = localeconv();\n    if ( !v23 )\n      goto LABEL_7;\n    if ( !v23->decimal_point )\n      goto LABEL_7;\n    s1 = v23->decimal_point;\n    v24 = strlen(v23->decimal_point);\n    if ( v49 )\n      goto LABEL_7;\n    if ( !*v19 )\n      goto LABEL_7;\n    v46 = v24;\n    if ( strncmp(s1, v19, v24) )\n      goto LABEL_7;\n    v25 = &v19[v46];\n    for ( i = v19[v46]; (_BYTE)i == 48; ++v21 )\n      i = *++v25;\n    if ( (*v12)[i] & 0x800 )\n    {\n      *v9 = 0;\n      v38 = v25;\n      endptr = 0LL;\n      v39 = __strtoul_internal(v25, &endptr, 0, 0);\n      v19 = endptr;\n      v49 = v39;\n      v20 = *v9;\n      if ( endptr == v38 )\n        goto LABEL_33;\n      if ( v20 )\n      {\n        if ( v39 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n          goto LABEL_13;\n        goto LABEL_62;\n      }\n      if ( v39 )\n      {\nLABEL_62:\n        if ( !endptr || !*endptr )\n          goto LABEL_7;\n      }\n    }\n    else\n    {\n      endptr = v25;\n      v19 = v25;\n    }\n  }\n  v27 = 1000;\nLABEL_38:\n  v28 = *v19;\n  v29 = strchr(\"KMGTPEZY\", v28);\n  if ( v29 )\n  {\n    v30 = (unsigned __int64)(v29 - \"KMGTPEZY\") + 1;\n    goto LABEL_40;\n  }\n  v45 = strchr(\"kmgtpezy\", v28);\n  if ( !v45 )\n    goto LABEL_7;\n  v30 = (unsigned __int64)(v45 - \"kmgtpezy\") + 1;\nLABEL_40:\n  if ( v30 )\n  {\n    if ( is_mul_ok(v27, v48) )\n    {\n      v31 = 0;\n      while ( 1 )\n      {\n        v48 *= v27;\n        if ( v30 - 1 == v31 )\n          break;\n        ++v31;\n        if ( !is_mul_ok(v27, v48) )\n          goto LABEL_77;\n      }\n      v16 = 0;\n    }\n    else\n    {\nLABEL_77:\n      v16 = -34;\n    }\n    if ( v49 )\n    {\n      v32 = v30 - 1;\n      v33 = 0;\n      v34 = 1LL;\n      do\n      {\n        v34 *= v27;\n        if ( v33 == v32 )\n          break;\n        ++v33;\n      }\n      while ( is_mul_ok(v27, v34) );\n      if ( v49 <= 0xA )\n      {\n        v36 = v49;\n        v35 = 10LL;\n      }\n      else\n      {\n        v35 = 10LL;\n        while ( 1 )\n        {\n          v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v49 >> 64) >> 3;\n          if ( v35 > 0x1999999999999999LL )\n            break;\n          v35 *= 10LL;\n          if ( v35 >= v49 )\n          {\n            v36 = v49;\n            break;\n          }\n        }\n      }\n      if ( v21 )\n      {\n        v37 = 0;\n        do\n        {\n          if ( v35 <= 0x1999999999999999LL )\n            v35 *= 10LL;\n          else\n            v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n          ++v37;\n        }\n        while ( v21 != v37 );\n      }\n      v40 = 1LL;\n      do\n      {\n        v41 = 10 * v40;\n        v42 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        v43 = v36 - 10 * v42;\n        v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        if ( v43 )\n        {\n          v44 = v35 / v40 / v43;\n          if ( v44 )\n            v48 += v34 / v44;\n        }\n        v40 = v41;\n      }\n      while ( v42 );\n    }\n    *v8 = v48;\nLABEL_14:\n    if ( (v16 & 0x80000000) != 0 )\n    {\n      v15 = -v16;\nLABEL_8:\n      *v9 = v15;\n    }\n  }\n  else\n  {\n    v16 = 0;\n    *a4 = v48;\n  }\n  return v16;\n}\n\n// write access to const memory has been detected, the output may be wrong!\n__int64 __usercall sub_8D30@<rax>(char *nptr@<rdi>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned __int64 *a4@<rsi>, __int64 a5@<r12>, __int64 a6@<r13>, __int64 a7@<r14>, __int64 a8@<r15>)\n{\n  unsigned __int64 *v8; // rbp\n  int *v9; // rbx\n  unsigned __int8 v10; // r14\n  const unsigned __int16 **v11; // rax\n  const unsigned __int16 **v12; // r13\n  const unsigned __int16 *v13; // rcx\n  char *v14; // rax\n  int v15; // eax\n  unsigned int v16; // ecx\n  unsigned __int64 v18; // rax\n  char *v19; // r14\n  int v20; // ecx\n  int v21; // er15\n  char v22; // al\n  struct lconv *v23; // rax\n  size_t v24; // rax\n  char *v25; // r8\n  __int64 i; // rax\n  signed int v27; // er13\n  int v28; // er14\n  char *v29; // rax\n  int v30; // edi\n  int v31; // ecx\n  int v32; // edi\n  int v33; // er8\n  unsigned __int64 v34; // r10\n  unsigned __int64 v35; // rdi\n  unsigned __int64 v36; // r8\n  int v37; // esi\n  char *v38; // ST08_8\n  unsigned __int64 v39; // rax\n  unsigned __int64 v40; // r9\n  signed __int64 v41; // r11\n  unsigned __int64 v42; // rsi\n  unsigned __int64 v43; // r13\n  unsigned __int64 v44; // r9\n  char *v45; // rax\n  size_t v46; // [rsp+0h] [rbp-70h]\n  char *s1; // [rsp+8h] [rbp-68h]\n  unsigned __int64 v48; // [rsp+10h] [rbp-60h]\n  unsigned __int64 v49; // [rsp+18h] [rbp-58h]\n  char *endptr; // [rsp+28h] [rbp-48h]\n  unsigned __int64 v51; // [rsp+30h] [rbp-40h]\n  __int64 v52; // [rsp+40h] [rbp-30h]\n  __int64 v53; // [rsp+48h] [rbp-28h]\n  __int64 v54; // [rsp+50h] [rbp-20h]\n  __int64 v55; // [rsp+58h] [rbp-18h]\n  __int64 v56; // [rsp+60h] [rbp-10h]\n  __int64 v57; // [rsp+68h] [rbp-8h]\n\n  v57 = a8;\n  v56 = a7;\n  v55 = a6;\n  v54 = a5;\n  v53 = a3;\n  v52 = a2;\n  v8 = a4;\n  *a4 = 0LL;\n  v51 = __readfsqword(0x28u);\n  v9 = __errno_location();\n  if ( !nptr )\n    goto LABEL_7;\n  v10 = *nptr;\n  if ( !*nptr )\n    goto LABEL_7;\n  v11 = __ctype_b_loc();\n  v12 = v11;\n  v13 = *v11;\n  v14 = nptr;\n  while ( v13[v10] & 0x2000 )\n    v10 = *++v14;\n  if ( v10 == 45 )\n    goto LABEL_7;\n  *v9 = 0;\n  endptr = 0LL;\n  v18 = __strtoul_internal(nptr, &endptr, 0, 0);\n  v19 = endptr;\n  v48 = v18;\n  v20 = *v9;\n  if ( endptr == nptr )\n  {\nLABEL_33:\n    if ( !v20 )\n    {\nLABEL_7:\n      v15 = 22;\n      v16 = -22;\n      goto LABEL_8;\n    }\nLABEL_13:\n    v16 = -v20;\n    goto LABEL_14;\n  }\n  if ( v20 && v18 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n    goto LABEL_13;\n  if ( !endptr || !*endptr )\n  {\n    v16 = 0;\n    *a4 = v18;\n    return v16;\n  }\n  v21 = 0;\n  v49 = 0LL;\n  while ( 1 )\n  {\n    v22 = v19[1];\n    if ( v22 == 105 )\n    {\n      if ( (v19[2] & 0xDF) == 66 && !v19[3] )\n      {\nLABEL_37:\n        v27 = 1024;\n        goto LABEL_38;\n      }\n      goto LABEL_23;\n    }\n    if ( (v22 & 0xDF) == 66 && !v19[2] )\n      break;\n    if ( !v22 )\n      goto LABEL_37;\nLABEL_23:\n    v23 = localeconv();\n    if ( !v23 )\n      goto LABEL_7;\n    if ( !v23->decimal_point )\n      goto LABEL_7;\n    s1 = v23->decimal_point;\n    v24 = strlen(v23->decimal_point);\n    if ( v49 )\n      goto LABEL_7;\n    if ( !*v19 )\n      goto LABEL_7;\n    v46 = v24;\n    if ( strncmp(s1, v19, v24) )\n      goto LABEL_7;\n    v25 = &v19[v46];\n    for ( i = v19[v46]; (_BYTE)i == 48; ++v21 )\n      i = *++v25;\n    if ( (*v12)[i] & 0x800 )\n    {\n      *v9 = 0;\n      v38 = v25;\n      endptr = 0LL;\n      v39 = __strtoul_internal(v25, &endptr, 0, 0);\n      v19 = endptr;\n      v49 = v39;\n      v20 = *v9;\n      if ( endptr == v38 )\n        goto LABEL_33;\n      if ( v20 )\n      {\n        if ( v39 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n          goto LABEL_13;\n        goto LABEL_62;\n      }\n      if ( v39 )\n      {\nLABEL_62:\n        if ( !endptr || !*endptr )\n          goto LABEL_7;\n      }\n    }\n    else\n    {\n      endptr = v25;\n      v19 = v25;\n    }\n  }\n  v27 = 1000;\nLABEL_38:\n  v28 = *v19;\n  v29 = strchr(\"KMGTPEZY\", v28);\n  if ( v29 )\n  {\n    v30 = (unsigned __int64)(v29 - \"KMGTPEZY\") + 1;\n    goto LABEL_40;\n  }\n  v45 = strchr(\"kmgtpezy\", v28);\n  if ( !v45 )\n    goto LABEL_7;\n  v30 = (unsigned __int64)(v45 - \"kmgtpezy\") + 1;\nLABEL_40:\n  if ( v30 )\n  {\n    if ( is_mul_ok(v27, v48) )\n    {\n      v31 = 0;\n      while ( 1 )\n      {\n        v48 *= v27;\n        if ( v30 - 1 == v31 )\n          break;\n        ++v31;\n        if ( !is_mul_ok(v27, v48) )\n          goto LABEL_77;\n      }\n      v16 = 0;\n    }\n    else\n    {\nLABEL_77:\n      v16 = -34;\n    }\n    if ( v49 )\n    {\n      v32 = v30 - 1;\n      v33 = 0;\n      v34 = 1LL;\n      do\n      {\n        v34 *= v27;\n        if ( v33 == v32 )\n          break;\n        ++v33;\n      }\n      while ( is_mul_ok(v27, v34) );\n      if ( v49 <= 0xA )\n      {\n        v36 = v49;\n        v35 = 10LL;\n      }\n      else\n      {\n        v35 = 10LL;\n        while ( 1 )\n        {\n          v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v49 >> 64) >> 3;\n          if ( v35 > 0x1999999999999999LL )\n            break;\n          v35 *= 10LL;\n          if ( v35 >= v49 )\n          {\n            v36 = v49;\n            break;\n          }\n        }\n      }\n      if ( v21 )\n      {\n        v37 = 0;\n        do\n        {\n          if ( v35 <= 0x1999999999999999LL )\n            v35 *= 10LL;\n          else\n            v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n          ++v37;\n        }\n        while ( v21 != v37 );\n      }\n      v40 = 1LL;\n      do\n      {\n        v41 = 10 * v40;\n        v42 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        v43 = v36 - 10 * v42;\n        v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        if ( v43 )\n        {\n          v44 = v35 / v40 / v43;\n          if ( v44 )\n            v48 += v34 / v44;\n        }\n        v40 = v41;\n      }\n      while ( v42 );\n    }\n    *v8 = v48;\nLABEL_14:\n    if ( (v16 & 0x80000000) != 0 )\n    {\n      v15 = -v16;\nLABEL_8:\n      *v9 = v15;\n    }\n  }\n  else\n  {\n    v16 = 0;\n    *a4 = v48;\n  }\n  return v16;\n}\n\n// write access to const memory has been detected, the output may be wrong!\n__int64 __usercall sub_8D30@<rax>(char *nptr@<rdi>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned __int64 *a4@<rsi>, __int64 a5@<r12>, __int64 a6@<r13>, __int64 a7@<r14>, __int64 a8@<r15>)\n{\n  unsigned __int64 *v8; // rbp\n  int *v9; // rbx\n  unsigned __int8 v10; // r14\n  const unsigned __int16 **v11; // rax\n  const unsigned __int16 **v12; // r13\n  const unsigned __int16 *v13; // rcx\n  char *v14; // rax\n  int v15; // eax\n  unsigned int v16; // ecx\n  unsigned __int64 v18; // rax\n  char *v19; // r14\n  int v20; // ecx\n  int v21; // er15\n  char v22; // al\n  struct lconv *v23; // rax\n  size_t v24; // rax\n  char *v25; // r8\n  __int64 i; // rax\n  signed int v27; // er13\n  int v28; // er14\n  char *v29; // rax\n  int v30; // edi\n  int v31; // ecx\n  int v32; // edi\n  int v33; // er8\n  unsigned __int64 v34; // r10\n  unsigned __int64 v35; // rdi\n  unsigned __int64 v36; // r8\n  int v37; // esi\n  char *v38; // ST08_8\n  unsigned __int64 v39; // rax\n  unsigned __int64 v40; // r9\n  signed __int64 v41; // r11\n  unsigned __int64 v42; // rsi\n  unsigned __int64 v43; // r13\n  unsigned __int64 v44; // r9\n  char *v45; // rax\n  size_t v46; // [rsp+0h] [rbp-70h]\n  char *s1; // [rsp+8h] [rbp-68h]\n  unsigned __int64 v48; // [rsp+10h] [rbp-60h]\n  unsigned __int64 v49; // [rsp+18h] [rbp-58h]\n  char *endptr; // [rsp+28h] [rbp-48h]\n  unsigned __int64 v51; // [rsp+30h] [rbp-40h]\n  __int64 v52; // [rsp+40h] [rbp-30h]\n  __int64 v53; // [rsp+48h] [rbp-28h]\n  __int64 v54; // [rsp+50h] [rbp-20h]\n  __int64 v55; // [rsp+58h] [rbp-18h]\n  __int64 v56; // [rsp+60h] [rbp-10h]\n  __int64 v57; // [rsp+68h] [rbp-8h]\n\n  v57 = a8;\n  v56 = a7;\n  v55 = a6;\n  v54 = a5;\n  v53 = a3;\n  v52 = a2;\n  v8 = a4;\n  *a4 = 0LL;\n  v51 = __readfsqword(0x28u);\n  v9 = __errno_location();\n  if ( !nptr )\n    goto LABEL_7;\n  v10 = *nptr;\n  if ( !*nptr )\n    goto LABEL_7;\n  v11 = __ctype_b_loc();\n  v12 = v11;\n  v13 = *v11;\n  v14 = nptr;\n  while ( v13[v10] & 0x2000 )\n    v10 = *++v14;\n  if ( v10 == 45 )\n    goto LABEL_7;\n  *v9 = 0;\n  endptr = 0LL;\n  v18 = __strtoul_internal(nptr, &endptr, 0, 0);\n  v19 = endptr;\n  v48 = v18;\n  v20 = *v9;\n  if ( endptr == nptr )\n  {\nLABEL_33:\n    if ( !v20 )\n    {\nLABEL_7:\n      v15 = 22;\n      v16 = -22;\n      goto LABEL_8;\n    }\nLABEL_13:\n    v16 = -v20;\n    goto LABEL_14;\n  }\n  if ( v20 && v18 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n    goto LABEL_13;\n  if ( !endptr || !*endptr )\n  {\n    v16 = 0;\n    *a4 = v18;\n    return v16;\n  }\n  v21 = 0;\n  v49 = 0LL;\n  while ( 1 )\n  {\n    v22 = v19[1];\n    if ( v22 == 105 )\n    {\n      if ( (v19[2] & 0xDF) == 66 && !v19[3] )\n      {\nLABEL_37:\n        v27 = 1024;\n        goto LABEL_38;\n      }\n      goto LABEL_23;\n    }\n    if ( (v22 & 0xDF) == 66 && !v19[2] )\n      break;\n    if ( !v22 )\n      goto LABEL_37;\nLABEL_23:\n    v23 = localeconv();\n    if ( !v23 )\n      goto LABEL_7;\n    if ( !v23->decimal_point )\n      goto LABEL_7;\n    s1 = v23->decimal_point;\n    v24 = strlen(v23->decimal_point);\n    if ( v49 )\n      goto LABEL_7;\n    if ( !*v19 )\n      goto LABEL_7;\n    v46 = v24;\n    if ( strncmp(s1, v19, v24) )\n      goto LABEL_7;\n    v25 = &v19[v46];\n    for ( i = v19[v46]; (_BYTE)i == 48; ++v21 )\n      i = *++v25;\n    if ( (*v12)[i] & 0x800 )\n    {\n      *v9 = 0;\n      v38 = v25;\n      endptr = 0LL;\n      v39 = __strtoul_internal(v25, &endptr, 0, 0);\n      v19 = endptr;\n      v49 = v39;\n      v20 = *v9;\n      if ( endptr == v38 )\n        goto LABEL_33;\n      if ( v20 )\n      {\n        if ( v39 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n          goto LABEL_13;\n        goto LABEL_62;\n      }\n      if ( v39 )\n      {\nLABEL_62:\n        if ( !endptr || !*endptr )\n          goto LABEL_7;\n      }\n    }\n    else\n    {\n      endptr = v25;\n      v19 = v25;\n    }\n  }\n  v27 = 1000;\nLABEL_38:\n  v28 = *v19;\n  v29 = strchr(\"KMGTPEZY\", v28);\n  if ( v29 )\n  {\n    v30 = (unsigned __int64)(v29 - \"KMGTPEZY\") + 1;\n    goto LABEL_40;\n  }\n  v45 = strchr(\"kmgtpezy\", v28);\n  if ( !v45 )\n    goto LABEL_7;\n  v30 = (unsigned __int64)(v45 - \"kmgtpezy\") + 1;\nLABEL_40:\n  if ( v30 )\n  {\n    if ( is_mul_ok(v27, v48) )\n    {\n      v31 = 0;\n      while ( 1 )\n      {\n        v48 *= v27;\n        if ( v30 - 1 == v31 )\n          break;\n        ++v31;\n        if ( !is_mul_ok(v27, v48) )\n          goto LABEL_77;\n      }\n      v16 = 0;\n    }\n    else\n    {\nLABEL_77:\n      v16 = -34;\n    }\n    if ( v49 )\n    {\n      v32 = v30 - 1;\n      v33 = 0;\n      v34 = 1LL;\n      do\n      {\n        v34 *= v27;\n        if ( v33 == v32 )\n          break;\n        ++v33;\n      }\n      while ( is_mul_ok(v27, v34) );\n      if ( v49 <= 0xA )\n      {\n        v36 = v49;\n        v35 = 10LL;\n      }\n      else\n      {\n        v35 = 10LL;\n        while ( 1 )\n        {\n          v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v49 >> 64) >> 3;\n          if ( v35 > 0x1999999999999999LL )\n            break;\n          v35 *= 10LL;\n          if ( v35 >= v49 )\n          {\n            v36 = v49;\n            break;\n          }\n        }\n      }\n      if ( v21 )\n      {\n        v37 = 0;\n        do\n        {\n          if ( v35 <= 0x1999999999999999LL )\n            v35 *= 10LL;\n          else\n            v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n          ++v37;\n        }\n        while ( v21 != v37 );\n      }\n      v40 = 1LL;\n      do\n      {\n        v41 = 10 * v40;\n        v42 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        v43 = v36 - 10 * v42;\n        v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        if ( v43 )\n        {\n          v44 = v35 / v40 / v43;\n          if ( v44 )\n            v48 += v34 / v44;\n        }\n        v40 = v41;\n      }\n      while ( v42 );\n    }\n    *v8 = v48;\nLABEL_14:\n    if ( (v16 & 0x80000000) != 0 )\n    {\n      v15 = -v16;\nLABEL_8:\n      *v9 = v15;\n    }\n  }\n  else\n  {\n    v16 = 0;\n    *a4 = v48;\n  }\n  return v16;\n}\n\n// write access to const memory has been detected, the output may be wrong!\n__int64 __usercall sub_8D30@<rax>(char *nptr@<rdi>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned __int64 *a4@<rsi>, __int64 a5@<r12>, __int64 a6@<r13>, __int64 a7@<r14>, __int64 a8@<r15>)\n{\n  unsigned __int64 *v8; // rbp\n  int *v9; // rbx\n  unsigned __int8 v10; // r14\n  const unsigned __int16 **v11; // rax\n  const unsigned __int16 **v12; // r13\n  const unsigned __int16 *v13; // rcx\n  char *v14; // rax\n  int v15; // eax\n  unsigned int v16; // ecx\n  unsigned __int64 v18; // rax\n  char *v19; // r14\n  int v20; // ecx\n  int v21; // er15\n  char v22; // al\n  struct lconv *v23; // rax\n  size_t v24; // rax\n  char *v25; // r8\n  __int64 i; // rax\n  signed int v27; // er13\n  int v28; // er14\n  char *v29; // rax\n  int v30; // edi\n  int v31; // ecx\n  int v32; // edi\n  int v33; // er8\n  unsigned __int64 v34; // r10\n  unsigned __int64 v35; // rdi\n  unsigned __int64 v36; // r8\n  int v37; // esi\n  char *v38; // ST08_8\n  unsigned __int64 v39; // rax\n  unsigned __int64 v40; // r9\n  signed __int64 v41; // r11\n  unsigned __int64 v42; // rsi\n  unsigned __int64 v43; // r13\n  unsigned __int64 v44; // r9\n  char *v45; // rax\n  size_t v46; // [rsp+0h] [rbp-70h]\n  char *s1; // [rsp+8h] [rbp-68h]\n  unsigned __int64 v48; // [rsp+10h] [rbp-60h]\n  unsigned __int64 v49; // [rsp+18h] [rbp-58h]\n  char *endptr; // [rsp+28h] [rbp-48h]\n  unsigned __int64 v51; // [rsp+30h] [rbp-40h]\n  __int64 v52; // [rsp+40h] [rbp-30h]\n  __int64 v53; // [rsp+48h] [rbp-28h]\n  __int64 v54; // [rsp+50h] [rbp-20h]\n  __int64 v55; // [rsp+58h] [rbp-18h]\n  __int64 v56; // [rsp+60h] [rbp-10h]\n  __int64 v57; // [rsp+68h] [rbp-8h]\n\n  v57 = a8;\n  v56 = a7;\n  v55 = a6;\n  v54 = a5;\n  v53 = a3;\n  v52 = a2;\n  v8 = a4;\n  *a4 = 0LL;\n  v51 = __readfsqword(0x28u);\n  v9 = __errno_location();\n  if ( !nptr )\n    goto LABEL_7;\n  v10 = *nptr;\n  if ( !*nptr )\n    goto LABEL_7;\n  v11 = __ctype_b_loc();\n  v12 = v11;\n  v13 = *v11;\n  v14 = nptr;\n  while ( v13[v10] & 0x2000 )\n    v10 = *++v14;\n  if ( v10 == 45 )\n    goto LABEL_7;\n  *v9 = 0;\n  endptr = 0LL;\n  v18 = __strtoul_internal(nptr, &endptr, 0, 0);\n  v19 = endptr;\n  v48 = v18;\n  v20 = *v9;\n  if ( endptr == nptr )\n  {\nLABEL_33:\n    if ( !v20 )\n    {\nLABEL_7:\n      v15 = 22;\n      v16 = -22;\n      goto LABEL_8;\n    }\nLABEL_13:\n    v16 = -v20;\n    goto LABEL_14;\n  }\n  if ( v20 && v18 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n    goto LABEL_13;\n  if ( !endptr || !*endptr )\n  {\n    v16 = 0;\n    *a4 = v18;\n    return v16;\n  }\n  v21 = 0;\n  v49 = 0LL;\n  while ( 1 )\n  {\n    v22 = v19[1];\n    if ( v22 == 105 )\n    {\n      if ( (v19[2] & 0xDF) == 66 && !v19[3] )\n      {\nLABEL_37:\n        v27 = 1024;\n        goto LABEL_38;\n      }\n      goto LABEL_23;\n    }\n    if ( (v22 & 0xDF) == 66 && !v19[2] )\n      break;\n    if ( !v22 )\n      goto LABEL_37;\nLABEL_23:\n    v23 = localeconv();\n    if ( !v23 )\n      goto LABEL_7;\n    if ( !v23->decimal_point )\n      goto LABEL_7;\n    s1 = v23->decimal_point;\n    v24 = strlen(v23->decimal_point);\n    if ( v49 )\n      goto LABEL_7;\n    if ( !*v19 )\n      goto LABEL_7;\n    v46 = v24;\n    if ( strncmp(s1, v19, v24) )\n      goto LABEL_7;\n    v25 = &v19[v46];\n    for ( i = v19[v46]; (_BYTE)i == 48; ++v21 )\n      i = *++v25;\n    if ( (*v12)[i] & 0x800 )\n    {\n      *v9 = 0;\n      v38 = v25;\n      endptr = 0LL;\n      v39 = __strtoul_internal(v25, &endptr, 0, 0);\n      v19 = endptr;\n      v49 = v39;\n      v20 = *v9;\n      if ( endptr == v38 )\n        goto LABEL_33;\n      if ( v20 )\n      {\n        if ( v39 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n          goto LABEL_13;\n        goto LABEL_62;\n      }\n      if ( v39 )\n      {\nLABEL_62:\n        if ( !endptr || !*endptr )\n          goto LABEL_7;\n      }\n    }\n    else\n    {\n      endptr = v25;\n      v19 = v25;\n    }\n  }\n  v27 = 1000;\nLABEL_38:\n  v28 = *v19;\n  v29 = strchr(\"KMGTPEZY\", v28);\n  if ( v29 )\n  {\n    v30 = (unsigned __int64)(v29 - \"KMGTPEZY\") + 1;\n    goto LABEL_40;\n  }\n  v45 = strchr(\"kmgtpezy\", v28);\n  if ( !v45 )\n    goto LABEL_7;\n  v30 = (unsigned __int64)(v45 - \"kmgtpezy\") + 1;\nLABEL_40:\n  if ( v30 )\n  {\n    if ( is_mul_ok(v27, v48) )\n    {\n      v31 = 0;\n      while ( 1 )\n      {\n        v48 *= v27;\n        if ( v30 - 1 == v31 )\n          break;\n        ++v31;\n        if ( !is_mul_ok(v27, v48) )\n          goto LABEL_77;\n      }\n      v16 = 0;\n    }\n    else\n    {\nLABEL_77:\n      v16 = -34;\n    }\n    if ( v49 )\n    {\n      v32 = v30 - 1;\n      v33 = 0;\n      v34 = 1LL;\n      do\n      {\n        v34 *= v27;\n        if ( v33 == v32 )\n          break;\n        ++v33;\n      }\n      while ( is_mul_ok(v27, v34) );\n      if ( v49 <= 0xA )\n      {\n        v36 = v49;\n        v35 = 10LL;\n      }\n      else\n      {\n        v35 = 10LL;\n        while ( 1 )\n        {\n          v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v49 >> 64) >> 3;\n          if ( v35 > 0x1999999999999999LL )\n            break;\n          v35 *= 10LL;\n          if ( v35 >= v49 )\n          {\n            v36 = v49;\n            break;\n          }\n        }\n      }\n      if ( v21 )\n      {\n        v37 = 0;\n        do\n        {\n          if ( v35 <= 0x1999999999999999LL )\n            v35 *= 10LL;\n          else\n            v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n          ++v37;\n        }\n        while ( v21 != v37 );\n      }\n      v40 = 1LL;\n      do\n      {\n        v41 = 10 * v40;\n        v42 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        v43 = v36 - 10 * v42;\n        v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        if ( v43 )\n        {\n          v44 = v35 / v40 / v43;\n          if ( v44 )\n            v48 += v34 / v44;\n        }\n        v40 = v41;\n      }\n      while ( v42 );\n    }\n    *v8 = v48;\nLABEL_14:\n    if ( (v16 & 0x80000000) != 0 )\n    {\n      v15 = -v16;\nLABEL_8:\n      *v9 = v15;\n    }\n  }\n  else\n  {\n    v16 = 0;\n    *a4 = v48;\n  }\n  return v16;\n}\n\n// write access to const memory has been detected, the output may be wrong!\n__int64 __usercall sub_8D30@<rax>(char *nptr@<rdi>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned __int64 *a4@<rsi>, __int64 a5@<r12>, __int64 a6@<r13>, __int64 a7@<r14>, __int64 a8@<r15>)\n{\n  unsigned __int64 *v8; // rbp\n  int *v9; // rbx\n  unsigned __int8 v10; // r14\n  const unsigned __int16 **v11; // rax\n  const unsigned __int16 **v12; // r13\n  const unsigned __int16 *v13; // rcx\n  char *v14; // rax\n  int v15; // eax\n  unsigned int v16; // ecx\n  unsigned __int64 v18; // rax\n  char *v19; // r14\n  int v20; // ecx\n  int v21; // er15\n  char v22; // al\n  struct lconv *v23; // rax\n  size_t v24; // rax\n  char *v25; // r8\n  __int64 i; // rax\n  signed int v27; // er13\n  int v28; // er14\n  char *v29; // rax\n  int v30; // edi\n  int v31; // ecx\n  int v32; // edi\n  int v33; // er8\n  unsigned __int64 v34; // r10\n  unsigned __int64 v35; // rdi\n  unsigned __int64 v36; // r8\n  int v37; // esi\n  char *v38; // ST08_8\n  unsigned __int64 v39; // rax\n  unsigned __int64 v40; // r9\n  signed __int64 v41; // r11\n  unsigned __int64 v42; // rsi\n  unsigned __int64 v43; // r13\n  unsigned __int64 v44; // r9\n  char *v45; // rax\n  size_t v46; // [rsp+0h] [rbp-70h]\n  char *s1; // [rsp+8h] [rbp-68h]\n  unsigned __int64 v48; // [rsp+10h] [rbp-60h]\n  unsigned __int64 v49; // [rsp+18h] [rbp-58h]\n  char *endptr; // [rsp+28h] [rbp-48h]\n  unsigned __int64 v51; // [rsp+30h] [rbp-40h]\n  __int64 v52; // [rsp+40h] [rbp-30h]\n  __int64 v53; // [rsp+48h] [rbp-28h]\n  __int64 v54; // [rsp+50h] [rbp-20h]\n  __int64 v55; // [rsp+58h] [rbp-18h]\n  __int64 v56; // [rsp+60h] [rbp-10h]\n  __int64 v57; // [rsp+68h] [rbp-8h]\n\n  v57 = a8;\n  v56 = a7;\n  v55 = a6;\n  v54 = a5;\n  v53 = a3;\n  v52 = a2;\n  v8 = a4;\n  *a4 = 0LL;\n  v51 = __readfsqword(0x28u);\n  v9 = __errno_location();\n  if ( !nptr )\n    goto LABEL_7;\n  v10 = *nptr;\n  if ( !*nptr )\n    goto LABEL_7;\n  v11 = __ctype_b_loc();\n  v12 = v11;\n  v13 = *v11;\n  v14 = nptr;\n  while ( v13[v10] & 0x2000 )\n    v10 = *++v14;\n  if ( v10 == 45 )\n    goto LABEL_7;\n  *v9 = 0;\n  endptr = 0LL;\n  v18 = __strtoul_internal(nptr, &endptr, 0, 0);\n  v19 = endptr;\n  v48 = v18;\n  v20 = *v9;\n  if ( endptr == nptr )\n  {\nLABEL_33:\n    if ( !v20 )\n    {\nLABEL_7:\n      v15 = 22;\n      v16 = -22;\n      goto LABEL_8;\n    }\nLABEL_13:\n    v16 = -v20;\n    goto LABEL_14;\n  }\n  if ( v20 && v18 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n    goto LABEL_13;\n  if ( !endptr || !*endptr )\n  {\n    v16 = 0;\n    *a4 = v18;\n    return v16;\n  }\n  v21 = 0;\n  v49 = 0LL;\n  while ( 1 )\n  {\n    v22 = v19[1];\n    if ( v22 == 105 )\n    {\n      if ( (v19[2] & 0xDF) == 66 && !v19[3] )\n      {\nLABEL_37:\n        v27 = 1024;\n        goto LABEL_38;\n      }\n      goto LABEL_23;\n    }\n    if ( (v22 & 0xDF) == 66 && !v19[2] )\n      break;\n    if ( !v22 )\n      goto LABEL_37;\nLABEL_23:\n    v23 = localeconv();\n    if ( !v23 )\n      goto LABEL_7;\n    if ( !v23->decimal_point )\n      goto LABEL_7;\n    s1 = v23->decimal_point;\n    v24 = strlen(v23->decimal_point);\n    if ( v49 )\n      goto LABEL_7;\n    if ( !*v19 )\n      goto LABEL_7;\n    v46 = v24;\n    if ( strncmp(s1, v19, v24) )\n      goto LABEL_7;\n    v25 = &v19[v46];\n    for ( i = v19[v46]; (_BYTE)i == 48; ++v21 )\n      i = *++v25;\n    if ( (*v12)[i] & 0x800 )\n    {\n      *v9 = 0;\n      v38 = v25;\n      endptr = 0LL;\n      v39 = __strtoul_internal(v25, &endptr, 0, 0);\n      v19 = endptr;\n      v49 = v39;\n      v20 = *v9;\n      if ( endptr == v38 )\n        goto LABEL_33;\n      if ( v20 )\n      {\n        if ( v39 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n          goto LABEL_13;\n        goto LABEL_62;\n      }\n      if ( v39 )\n      {\nLABEL_62:\n        if ( !endptr || !*endptr )\n          goto LABEL_7;\n      }\n    }\n    else\n    {\n      endptr = v25;\n      v19 = v25;\n    }\n  }\n  v27 = 1000;\nLABEL_38:\n  v28 = *v19;\n  v29 = strchr(\"KMGTPEZY\", v28);\n  if ( v29 )\n  {\n    v30 = (unsigned __int64)(v29 - \"KMGTPEZY\") + 1;\n    goto LABEL_40;\n  }\n  v45 = strchr(\"kmgtpezy\", v28);\n  if ( !v45 )\n    goto LABEL_7;\n  v30 = (unsigned __int64)(v45 - \"kmgtpezy\") + 1;\nLABEL_40:\n  if ( v30 )\n  {\n    if ( is_mul_ok(v27, v48) )\n    {\n      v31 = 0;\n      while ( 1 )\n      {\n        v48 *= v27;\n        if ( v30 - 1 == v31 )\n          break;\n        ++v31;\n        if ( !is_mul_ok(v27, v48) )\n          goto LABEL_77;\n      }\n      v16 = 0;\n    }\n    else\n    {\nLABEL_77:\n      v16 = -34;\n    }\n    if ( v49 )\n    {\n      v32 = v30 - 1;\n      v33 = 0;\n      v34 = 1LL;\n      do\n      {\n        v34 *= v27;\n        if ( v33 == v32 )\n          break;\n        ++v33;\n      }\n      while ( is_mul_ok(v27, v34) );\n      if ( v49 <= 0xA )\n      {\n        v36 = v49;\n        v35 = 10LL;\n      }\n      else\n      {\n        v35 = 10LL;\n        while ( 1 )\n        {\n          v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v49 >> 64) >> 3;\n          if ( v35 > 0x1999999999999999LL )\n            break;\n          v35 *= 10LL;\n          if ( v35 >= v49 )\n          {\n            v36 = v49;\n            break;\n          }\n        }\n      }\n      if ( v21 )\n      {\n        v37 = 0;\n        do\n        {\n          if ( v35 <= 0x1999999999999999LL )\n            v35 *= 10LL;\n          else\n            v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n          ++v37;\n        }\n        while ( v21 != v37 );\n      }\n      v40 = 1LL;\n      do\n      {\n        v41 = 10 * v40;\n        v42 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        v43 = v36 - 10 * v42;\n        v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        if ( v43 )\n        {\n          v44 = v35 / v40 / v43;\n          if ( v44 )\n            v48 += v34 / v44;\n        }\n        v40 = v41;\n      }\n      while ( v42 );\n    }\n    *v8 = v48;\nLABEL_14:\n    if ( (v16 & 0x80000000) != 0 )\n    {\n      v15 = -v16;\nLABEL_8:\n      *v9 = v15;\n    }\n  }\n  else\n  {\n    v16 = 0;\n    *a4 = v48;\n  }\n  return v16;\n}\n\n// write access to const memory has been detected, the output may be wrong!\n__int64 __usercall sub_8D30@<rax>(char *nptr@<rdi>, __int64 a2@<rbx>, __int64 a3@<rbp>, unsigned __int64 *a4@<rsi>, __int64 a5@<r12>, __int64 a6@<r13>, __int64 a7@<r14>, __int64 a8@<r15>)\n{\n  unsigned __int64 *v8; // rbp\n  int *v9; // rbx\n  unsigned __int8 v10; // r14\n  const unsigned __int16 **v11; // rax\n  const unsigned __int16 **v12; // r13\n  const unsigned __int16 *v13; // rcx\n  char *v14; // rax\n  int v15; // eax\n  unsigned int v16; // ecx\n  unsigned __int64 v18; // rax\n  char *v19; // r14\n  int v20; // ecx\n  int v21; // er15\n  char v22; // al\n  struct lconv *v23; // rax\n  size_t v24; // rax\n  char *v25; // r8\n  __int64 i; // rax\n  signed int v27; // er13\n  int v28; // er14\n  char *v29; // rax\n  int v30; // edi\n  int v31; // ecx\n  int v32; // edi\n  int v33; // er8\n  unsigned __int64 v34; // r10\n  unsigned __int64 v35; // rdi\n  unsigned __int64 v36; // r8\n  int v37; // esi\n  char *v38; // ST08_8\n  unsigned __int64 v39; // rax\n  unsigned __int64 v40; // r9\n  signed __int64 v41; // r11\n  unsigned __int64 v42; // rsi\n  unsigned __int64 v43; // r13\n  unsigned __int64 v44; // r9\n  char *v45; // rax\n  size_t v46; // [rsp+0h] [rbp-70h]\n  char *s1; // [rsp+8h] [rbp-68h]\n  unsigned __int64 v48; // [rsp+10h] [rbp-60h]\n  unsigned __int64 v49; // [rsp+18h] [rbp-58h]\n  char *endptr; // [rsp+28h] [rbp-48h]\n  unsigned __int64 v51; // [rsp+30h] [rbp-40h]\n  __int64 v52; // [rsp+40h] [rbp-30h]\n  __int64 v53; // [rsp+48h] [rbp-28h]\n  __int64 v54; // [rsp+50h] [rbp-20h]\n  __int64 v55; // [rsp+58h] [rbp-18h]\n  __int64 v56; // [rsp+60h] [rbp-10h]\n  __int64 v57; // [rsp+68h] [rbp-8h]\n\n  v57 = a8;\n  v56 = a7;\n  v55 = a6;\n  v54 = a5;\n  v53 = a3;\n  v52 = a2;\n  v8 = a4;\n  *a4 = 0LL;\n  v51 = __readfsqword(0x28u);\n  v9 = __errno_location();\n  if ( !nptr )\n    goto LABEL_7;\n  v10 = *nptr;\n  if ( !*nptr )\n    goto LABEL_7;\n  v11 = __ctype_b_loc();\n  v12 = v11;\n  v13 = *v11;\n  v14 = nptr;\n  while ( v13[v10] & 0x2000 )\n    v10 = *++v14;\n  if ( v10 == 45 )\n    goto LABEL_7;\n  *v9 = 0;\n  endptr = 0LL;\n  v18 = __strtoul_internal(nptr, &endptr, 0, 0);\n  v19 = endptr;\n  v48 = v18;\n  v20 = *v9;\n  if ( endptr == nptr )\n  {\nLABEL_33:\n    if ( !v20 )\n    {\nLABEL_7:\n      v15 = 22;\n      v16 = -22;\n      goto LABEL_8;\n    }\nLABEL_13:\n    v16 = -v20;\n    goto LABEL_14;\n  }\n  if ( v20 && v18 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n    goto LABEL_13;\n  if ( !endptr || !*endptr )\n  {\n    v16 = 0;\n    *a4 = v18;\n    return v16;\n  }\n  v21 = 0;\n  v49 = 0LL;\n  while ( 1 )\n  {\n    v22 = v19[1];\n    if ( v22 == 105 )\n    {\n      if ( (v19[2] & 0xDF) == 66 && !v19[3] )\n      {\nLABEL_37:\n        v27 = 1024;\n        goto LABEL_38;\n      }\n      goto LABEL_23;\n    }\n    if ( (v22 & 0xDF) == 66 && !v19[2] )\n      break;\n    if ( !v22 )\n      goto LABEL_37;\nLABEL_23:\n    v23 = localeconv();\n    if ( !v23 )\n      goto LABEL_7;\n    if ( !v23->decimal_point )\n      goto LABEL_7;\n    s1 = v23->decimal_point;\n    v24 = strlen(v23->decimal_point);\n    if ( v49 )\n      goto LABEL_7;\n    if ( !*v19 )\n      goto LABEL_7;\n    v46 = v24;\n    if ( strncmp(s1, v19, v24) )\n      goto LABEL_7;\n    v25 = &v19[v46];\n    for ( i = v19[v46]; (_BYTE)i == 48; ++v21 )\n      i = *++v25;\n    if ( (*v12)[i] & 0x800 )\n    {\n      *v9 = 0;\n      v38 = v25;\n      endptr = 0LL;\n      v39 = __strtoul_internal(v25, &endptr, 0, 0);\n      v19 = endptr;\n      v49 = v39;\n      v20 = *v9;\n      if ( endptr == v38 )\n        goto LABEL_33;\n      if ( v20 )\n      {\n        if ( v39 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n          goto LABEL_13;\n        goto LABEL_62;\n      }\n      if ( v39 )\n      {\nLABEL_62:\n        if ( !endptr || !*endptr )\n          goto LABEL_7;\n      }\n    }\n    else\n    {\n      endptr = v25;\n      v19 = v25;\n    }\n  }\n  v27 = 1000;\nLABEL_38:\n  v28 = *v19;\n  v29 = strchr(\"KMGTPEZY\", v28);\n  if ( v29 )\n  {\n    v30 = (unsigned __int64)(v29 - \"KMGTPEZY\") + 1;\n    goto LABEL_40;\n  }\n  v45 = strchr(\"kmgtpezy\", v28);\n  if ( !v45 )\n    goto LABEL_7;\n  v30 = (unsigned __int64)(v45 - \"kmgtpezy\") + 1;\nLABEL_40:\n  if ( v30 )\n  {\n    if ( is_mul_ok(v27, v48) )\n    {\n      v31 = 0;\n      while ( 1 )\n      {\n        v48 *= v27;\n        if ( v30 - 1 == v31 )\n          break;\n        ++v31;\n        if ( !is_mul_ok(v27, v48) )\n          goto LABEL_77;\n      }\n      v16 = 0;\n    }\n    else\n    {\nLABEL_77:\n      v16 = -34;\n    }\n    if ( v49 )\n    {\n      v32 = v30 - 1;\n      v33 = 0;\n      v34 = 1LL;\n      do\n      {\n        v34 *= v27;\n        if ( v33 == v32 )\n          break;\n        ++v33;\n      }\n      while ( is_mul_ok(v27, v34) );\n      if ( v49 <= 0xA )\n      {\n        v36 = v49;\n        v35 = 10LL;\n      }\n      else\n      {\n        v35 = 10LL;\n        while ( 1 )\n        {\n          v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v49 >> 64) >> 3;\n          if ( v35 > 0x1999999999999999LL )\n            break;\n          v35 *= 10LL;\n          if ( v35 >= v49 )\n          {\n            v36 = v49;\n            break;\n          }\n        }\n      }\n      if ( v21 )\n      {\n        v37 = 0;\n        do\n        {\n          if ( v35 <= 0x1999999999999999LL )\n            v35 *= 10LL;\n          else\n            v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n          ++v37;\n        }\n        while ( v21 != v37 );\n      }\n      v40 = 1LL;\n      do\n      {\n        v41 = 10 * v40;\n        v42 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        v43 = v36 - 10 * v42;\n        v36 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)v36 >> 64) >> 3;\n        if ( v43 )\n        {\n          v44 = v35 / v40 / v43;\n          if ( v44 )\n            v48 += v34 / v44;\n        }\n        v40 = v41;\n      }\n      while ( v42 );\n    }\n    *v8 = v48;\nLABEL_14:\n    if ( (v16 & 0x80000000) != 0 )\n    {\n      v15 = -v16;\nLABEL_8:\n      *v9 = v15;\n    }\n  }\n  else\n  {\n    v16 = 0;\n    *a4 = v48;\n  }\n  return v16;\n}\n", 
            "funcStartAddr": "0x8c38L", 
            "funcEndAddr": "0x8d29L", 
            "funcName": "sub_8D30"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_8FC0(char *nptr, __int64 *a2, int a3)\n{\n  int v3; // er13\n  int *v4; // rax\n  int *v5; // rbp\n  __int64 result; // rax\n  char *v7; // [rsp+0h] [rbp-38h]\n  unsigned __int64 v8; // [rsp+8h] [rbp-30h]\n\n  v3 = a3;\n  v8 = __readfsqword(0x28u);\n  v7 = 0LL;\n  v4 = __errno_location();\n  v5 = v4;\n  if ( !nptr || !*nptr )\n    goto LABEL_12;\n  *v4 = 0;\n  *a2 = __strtol_internal(nptr, &v7, v3, 0);\n  result = (unsigned int)*v5;\n  if ( (_DWORD)result )\n    return (unsigned int)-(signed int)result;\n  if ( v7 == nptr || v7 && *v7 )\n  {\nLABEL_12:\n    *v5 = 22;\n    result = 4294967274LL;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x8fc0L", 
            "funcEndAddr": "0x906bL", 
            "funcName": "sub_8FC0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_9070(char *nptr, unsigned __int64 *a2, int a3)\n{\n  int v3; // er12\n  int *v4; // rax\n  int *v5; // rbp\n  __int64 result; // rax\n  char *v7; // [rsp+0h] [rbp-38h]\n  unsigned __int64 v8; // [rsp+8h] [rbp-30h]\n\n  v3 = a3;\n  v8 = __readfsqword(0x28u);\n  v7 = 0LL;\n  v4 = __errno_location();\n  v5 = v4;\n  if ( nptr && *nptr )\n  {\n    *v4 = 0;\n    if ( __strtol_internal(nptr, &v7, v3, 0) < 0 )\n    {\n      *v5 = 34;\n      result = 4294967262LL;\n      goto LABEL_5;\n    }\n    *v5 = 0;\n    *a2 = __strtoul_internal(nptr, &v7, v3, 0);\n    result = (unsigned int)*v5;\n    if ( (_DWORD)result )\n      goto LABEL_12;\n    if ( v7 != nptr && (!v7 || !*v7) )\n      goto LABEL_5;\n  }\n  *v5 = 22;\n  result = 4294967274LL;\nLABEL_5:\n  while ( __readfsqword(0x28u) != v8 )\nLABEL_12:\n    result = (unsigned int)-(signed int)result;\n  return result;\n}\n", 
            "funcStartAddr": "0x9070L", 
            "funcEndAddr": "0x914fL", 
            "funcName": "sub_9070"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_9150(char *a1, _DWORD *a2, int a3)\n{\n  __int64 result; // rax\n  __int64 v4; // [rsp+0h] [rbp-18h]\n  unsigned __int64 v5; // [rsp+8h] [rbp-10h]\n\n  v5 = __readfsqword(0x28u);\n  result = sub_8FC0(a1, &v4, a3);\n  if ( !(_DWORD)result )\n  {\n    if ( (unsigned __int64)(v4 + 0x80000000LL) > 0xFFFFFFFF )\n    {\n      *__errno_location() = 34;\n      result = 4294967262LL;\n    }\n    else\n    {\n      *a2 = v4;\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x9150L", 
            "funcEndAddr": "0x91b9L", 
            "funcName": "sub_9150"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_91C0(char *a1, _DWORD *a2, int a3)\n{\n  __int64 result; // rax\n  unsigned __int64 v4; // [rsp+0h] [rbp-18h]\n  unsigned __int64 v5; // [rsp+8h] [rbp-10h]\n\n  v5 = __readfsqword(0x28u);\n  result = sub_9070(a1, &v4, a3);\n  if ( !(_DWORD)result )\n  {\n    if ( v4 > 0xFFFFFFFF )\n    {\n      *__errno_location() = 34;\n      result = 4294967262LL;\n    }\n    else\n    {\n      *a2 = v4;\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x91c0L", 
            "funcEndAddr": "0x9221L", 
            "funcName": "sub_91C0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_9230(char *a1, int a2, __int64 a3, __int64 a4, __int64 a5)\n{\n  __int64 v5; // r12\n  char *v6; // rbx\n  __int64 v7; // rbp\n  __int64 v8; // r13\n  int *v9; // rax\n  int v10; // edi\n  __int64 result; // rax\n  int *v12; // rax\n  __int64 v13; // [rsp+0h] [rbp-38h]\n  unsigned __int64 v14; // [rsp+8h] [rbp-30h]\n\n  v5 = a3;\n  v6 = a1;\n  v7 = a4;\n  v8 = a5;\n  v13 = 0LL;\n  v14 = __readfsqword(0x28u);\n  if ( (unsigned int)sub_8FC0(a1, &v13, a2) )\n  {\n    v9 = __errno_location();\n    v10 = status;\n    if ( *v9 != 34 )\n      errx(status, \"%s: '%s'\", v5, v6);\nLABEL_7:\n    err(v10, \"%s: '%s'\", v5, v6);\n  }\n  result = v13;\n  if ( v7 && v7 > v13 || v8 && v8 < v13 )\n  {\n    v12 = __errno_location();\n    v10 = status;\n    *v12 = 34;\n    goto LABEL_7;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x9230L", 
            "funcEndAddr": "0x92fcL", 
            "funcName": "sub_9230"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_93D0(char *nptr, __int64 a2)\n{\n  char *v2; // rbx\n  int *v3; // rax\n  int v4; // edi\n  double v5; // xmm0_8\n  int *v7; // [rsp+8h] [rbp-30h]\n  char *endptr; // [rsp+10h] [rbp-28h]\n  unsigned __int64 v9; // [rsp+18h] [rbp-20h]\n\n  v2 = nptr;\n  v9 = __readfsqword(0x28u);\n  endptr = 0LL;\n  v3 = __errno_location();\n  *v3 = 0;\n  v4 = status;\n  if ( !v2 || !*v2 )\n    goto LABEL_3;\n  v7 = v3;\n  v5 = strtod(v2, &endptr);\n  if ( *v7 )\n  {\n    v4 = status;\n    if ( *v7 == 34 )\n      err(status, \"%s: '%s'\", a2, v2, v5);\nLABEL_3:\n    errx(v4, \"%s: '%s'\", a2, v2);\n  }\n  if ( endptr == v2 || endptr && *endptr )\n  {\n    v4 = status;\n    goto LABEL_3;\n  }\n  return __readfsqword(0x28u) ^ v9;\n}\n", 
            "funcStartAddr": "0x93d0L", 
            "funcEndAddr": "0x94a0L", 
            "funcName": "sub_93D0"
        }, 
        {
            "decompiledFuncCode": "long double __fastcall sub_94A0(char *nptr, __int64 a2)\n{\n  char *v2; // rbx\n  int *v3; // rax\n  int v4; // edi\n  long double v5; // fst7\n  long double result; // fst7\n  int *v7; // [rsp+0h] [rbp-38h]\n  char *endptr; // [rsp+10h] [rbp-28h]\n  unsigned __int64 v9; // [rsp+18h] [rbp-20h]\n\n  v2 = nptr;\n  v9 = __readfsqword(0x28u);\n  endptr = 0LL;\n  v3 = __errno_location();\n  *v3 = 0;\n  v4 = status;\n  if ( !v2 || !*v2 )\n    goto LABEL_3;\n  v7 = v3;\n  v5 = strtold(v2, &endptr);\n  if ( *v7 )\n  {\n    v4 = status;\n    if ( *v7 == 34 )\n      err(status, \"%s: '%s'\", a2, v2, v7);\nLABEL_3:\n    errx(v4, \"%s: '%s'\", a2, v2, v7);\n  }\n  if ( endptr == v2 || endptr && *endptr )\n  {\n    v4 = status;\n    goto LABEL_3;\n  }\n  result = (double)v5;\n  if ( __readfsqword(0x28u) != v9 )\n    JUMPOUT(*(_QWORD *)algn_9594);\n  return result;\n}\n", 
            "funcStartAddr": "0x94a0L", 
            "funcEndAddr": "0x9594L", 
            "funcName": "sub_94A0"
        }, 
        {
            "decompiledFuncCode": "__int64 __usercall sub_95A0@<rax>(char *a1@<rdi>, __int64 a2@<rsi>, __int64 a3@<r12>, __int64 a4@<r13>, __int64 a5@<r14>, __int64 a6@<r15>)\n{\n  __int64 v7; // [rsp+0h] [rbp-28h]\n  unsigned __int64 v8; // [rsp+8h] [rbp-20h]\n\n  v8 = __readfsqword(0x28u);\n  if ( (unsigned int)sub_8D30(a1, (__int64)a1, a2, (unsigned __int64 *)&v7, a3, a4, a5, a6) )\n  {\n    if ( *__errno_location() )\n      err(status, \"%s: '%s'\", a2, a1);\n    errx(status, \"%s: '%s'\", a2, a1);\n  }\n  return v7;\n}\n", 
            "funcStartAddr": "0x95a0L", 
            "funcEndAddr": "0x961aL", 
            "funcName": "sub_95A0"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_9620(char *a1, _QWORD *a2, __int64 a3)\n{\n  long double v3; // fst7\n  signed __int64 result; // rax\n\n  v3 = sub_94A0(a1, a3);\n  result = (signed __int64)v3;\n  *a2 = (signed __int64)v3;\n  a2[1] = (signed __int64)((v3 - (long double)(signed __int64)v3) * 1000000.0);\n  return result;\n}\n", 
            "funcStartAddr": "0x9620L", 
            "funcEndAddr": "0x9679L", 
            "funcName": "sub_9620"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_96A0(__int16 a1, _BYTE *a2)\n{\n  _BYTE *result; // rax\n  int v3; // edx\n  _BYTE *v4; // r13\n  _BYTE *v5; // r12\n  _BYTE *v6; // rbp\n  _BYTE *v7; // rbx\n  _BYTE *v8; // r11\n  _BYTE *v9; // r10\n  _BYTE *v10; // r8\n  _BYTE *v11; // rsi\n  _BYTE *v12; // rcx\n  _BYTE *v13; // r9\n  int v14; // edx\n  unsigned int v15; // edx\n  int v16; // edx\n  unsigned int v17; // edx\n  int v18; // edx\n  unsigned int v19; // edx\n\n  result = a2;\n  v3 = a1 & 0xF000;\n  v4 = a2 + 1;\n  v5 = a2 + 2;\n  v6 = a2 + 3;\n  v7 = a2 + 4;\n  v8 = a2 + 5;\n  v9 = a2 + 6;\n  v10 = a2 + 7;\n  v11 = a2 + 8;\n  v12 = result + 9;\n  switch ( v3 )\n  {\n    case 16384:\n      *result = 100;\n      v13 = result + 10;\n      break;\n    case 40960:\n      v13 = result + 10;\n      *result = 108;\n      break;\n    case 8192:\n      *result = 99;\n      v13 = result + 10;\n      break;\n    case 24576:\n      *result = 98;\n      v13 = result + 10;\n      break;\n    case 49152:\n      *result = 115;\n      v13 = result + 10;\n      break;\n    case 4096:\n      *result = 112;\n      v13 = result + 10;\n      break;\n    case 32768:\n      *result = 45;\n      v13 = result + 10;\n      break;\n    default:\n      v13 = result + 9;\n      v12 = v11;\n      v11 = v10;\n      v10 = v9;\n      v9 = v8;\n      v8 = v7;\n      v7 = v6;\n      v6 = v5;\n      v5 = v4;\n      v4 = result;\n      break;\n  }\n  *v4 = (a1 & 0x100u) < 1 ? 45 : 114;\n  *v5 = (a1 & 0x80u) < 1 ? 45 : 119;\n  v14 = -((a1 & 0x40u) < 1);\n  if ( a1 & 0x800 )\n    v15 = (v14 & 0xFFFFFFE0) + 115;\n  else\n    v15 = (v14 & 0xFFFFFFB5) + 120;\n  *v6 = v15;\n  *v7 = (a1 & 0x20u) < 1 ? 45 : 114;\n  *v8 = (a1 & 0x10u) < 1 ? 45 : 119;\n  v16 = -((a1 & 8u) < 1);\n  if ( a1 & 0x400 )\n    v17 = (v16 & 0xFFFFFFE0) + 115;\n  else\n    v17 = (v16 & 0xFFFFFFB5) + 120;\n  *v9 = v17;\n  *v10 = (a1 & 4u) < 1 ? 45 : 114;\n  *v11 = (a1 & 2u) < 1 ? 45 : 119;\n  v18 = -((a1 & 1u) < 1);\n  if ( a1 & 0x200 )\n    v19 = (v18 & 0xFFFFFFE0) + 116;\n  else\n    v19 = (v18 & 0xFFFFFFB5) + 120;\n  *v12 = v19;\n  *v13 = 0;\n  return result;\n}\n", 
            "funcStartAddr": "0x96a0L", 
            "funcEndAddr": "0x98c4L", 
            "funcName": "sub_96A0"
        }, 
        {
            "decompiledFuncCode": "char *__fastcall sub_98D0(char a1, unsigned __int64 a2)\n{\n  char *v2; // r8\n  _BYTE *v3; // r11\n  unsigned int v4; // ecx\n  signed int v5; // er10\n  unsigned __int64 v6; // r12\n  __int64 v7; // r9\n  char v8; // dl\n  unsigned __int64 v9; // rsi\n  unsigned __int64 v10; // rsi\n  unsigned __int64 v11; // rbx\n  struct lconv *v12; // rax\n  char *v13; // rdx\n  int v14; // eax\n  __int64 v15; // rbx\n  int v16; // eax\n  size_t v17; // rax\n  char *v18; // rcx\n  unsigned __int64 v20; // rsi\n  unsigned int v21; // edi\n  __int64 v22; // r8\n  char s[5]; // [rsp+Bh] [rbp-5Dh]\n  char v24[5]; // [rsp+Ch] [rbp-5Ch]\n  char v25[40]; // [rsp+10h] [rbp-58h]\n  unsigned __int64 v26; // [rsp+38h] [rbp-30h]\n\n  v26 = __readfsqword(0x28u);\n  if ( a1 & 2 )\n  {\n    s[0] = 32;\n    v2 = v24;\n  }\n  else\n  {\n    v2 = s;\n  }\n  if ( a2 <= 0x3FF )\n  {\n    v7 = (unsigned int)a2;\n    *(_WORD *)v2 = 66;\n    goto LABEL_35;\n  }\n  if ( a2 <= 0xFFFFF )\n  {\n    v5 = 20;\nLABEL_43:\n    v4 = v5 - 10;\n    v3 = v2 + 1;\n    goto LABEL_9;\n  }\n  if ( a2 <= 0x3FFFFFFF )\n  {\n    v5 = 30;\n    goto LABEL_43;\n  }\n  if ( a2 <= 0xFFFFFFFFFFLL )\n  {\n    v5 = 40;\n    goto LABEL_43;\n  }\n  if ( a2 <= 0x3FFFFFFFFFFFFLL )\n  {\n    v5 = 50;\n    goto LABEL_43;\n  }\n  v3 = v2 + 1;\n  v4 = 60;\n  LOBYTE(v5) = 70;\n  if ( a2 <= 0xFFFFFFFFFFFFFFFLL )\n  {\n    v5 = 60;\n    goto LABEL_43;\n  }\nLABEL_9:\n  v6 = a2 >> v4;\n  v7 = (unsigned int)(a2 >> v4);\n  v8 = aBkmgtpe[v4 / 0xA];\n  v9 = ~(-1LL << v4) & a2;\n  *v2 = v8;\n  if ( v8 != 66 && a1 & 1 )\n  {\n    v3 = v2 + 3;\n    *(_WORD *)(v2 + 1) = 17001;\n  }\n  *v3 = 0;\n  if ( !v9 )\n    goto LABEL_35;\n  if ( v9 > 0x4189374BC6A7EELL )\n  {\n    v10 = 1000 * (v9 >> 10) >> ((unsigned __int8)v5 - 20);\n    if ( a1 & 4 )\n      goto LABEL_15;\n  }\n  else\n  {\n    v10 = 1000 * v9 >> v4;\n    if ( a1 & 4 )\n    {\nLABEL_15:\n      v11 = (unsigned __int64)(0xCCCCCCCCCCCCCCCDLL * (unsigned __int128)(v10 + 5) >> 64) >> 3;\n      goto LABEL_16;\n    }\n  }\n  v11 = 10 * ((unsigned __int64)(0x28F5C28F5C28F5C3LL * (unsigned __int128)((v10 + 50) >> 2) >> 64) >> 2);\nLABEL_16:\n  if ( v11 == 100 )\n  {\n    v7 = (unsigned int)(v6 + 1);\n    goto LABEL_35;\n  }\n  if ( !v11 )\n  {\nLABEL_35:\n    __snprintf_chk(v25, 32LL, 1LL, 32LL, \"%d%s\", v7, s);\n    return strdup(v25);\n  }\n  v12 = localeconv();\n  v13 = \".\";\n  if ( v12 )\n  {\n    v13 = v12->decimal_point;\n    if ( v12->decimal_point )\n    {\n      if ( !*v13 )\n        v13 = \".\";\n    }\n    else\n    {\n      v13 = \".\";\n    }\n  }\n  v14 = __snprintf_chk(v25, 32LL, 1LL, 32LL, \"%d%s%02lu\", (unsigned int)v6, v13);\n  v15 = v14;\n  v16 = v14 - 1;\n  if ( (unsigned int)v16 > 0x1E )\n  {\n    v25[0] = 0;\n  }\n  else\n  {\n    if ( v25[v16] == 48 )\n    {\n      v25[v15] = 0;\n      v15 = v16;\n    }\n    v17 = strlen(s);\n    if ( v17 )\n    {\n      v18 = &v25[v15];\n      if ( 31 - v15 <= v17 )\n        v17 = 31 - v15;\n      if ( (unsigned int)v17 >= 8 )\n      {\n        *(_QWORD *)v18 = *(_QWORD *)s;\n        *(_QWORD *)&v18[(unsigned int)v17 - 8] = *(_QWORD *)&s[(unsigned int)v17 - 8];\n        v20 = (unsigned __int64)(v18 + 8) & 0xFFFFFFFFFFFFFFF8LL;\n        if ( (((_DWORD)v17 + (_DWORD)v18 - (_DWORD)v20) & 0xFFFFFFF8) >= 8 )\n        {\n          v21 = 0;\n          do\n          {\n            v22 = v21;\n            v21 += 8;\n            *(_QWORD *)(v20 + v22) = *(_QWORD *)(s - &v18[-v20] + v22);\n          }\n          while ( v21 < (((_DWORD)v17 + (_DWORD)v18 - (_DWORD)v20) & 0xFFFFFFF8) );\n        }\n      }\n      else if ( v17 & 4 )\n      {\n        *(_DWORD *)v18 = *(_DWORD *)s;\n        *(_DWORD *)&v18[(unsigned int)v17 - 4] = *(_DWORD *)&s[(unsigned int)v17 - 4];\n      }\n      else if ( (_DWORD)v17 )\n      {\n        *v18 = s[0];\n        if ( v17 & 2 )\n          *(_WORD *)&v18[(unsigned int)v17 - 2] = *(_WORD *)&s[(unsigned int)v17 - 2];\n      }\n      v18[v17] = 0;\n    }\n  }\n  return strdup(v25);\n}\n", 
            "funcStartAddr": "0x98d0L", 
            "funcEndAddr": "0x9c99L", 
            "funcName": "sub_98D0"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_9CA0(_BYTE *a1, __int64 a2, unsigned __int64 a3, __int64 (__fastcall *a4)(unsigned __int64, _BYTE *))\n{\n  _BYTE *v4; // rbx\n  char v5; // al\n  __int64 (__fastcall *v6)(unsigned __int64, _BYTE *); // r12\n  unsigned __int64 v7; // rbp\n  unsigned __int64 v8; // rdi\n  unsigned __int64 v9; // r14\n  char v10; // dl\n  _BYTE *v11; // rdx\n  _BYTE *v12; // r15\n  int v13; // eax\n\n  if ( a1 )\n  {\n    v4 = a1;\n    v5 = *a1;\n    if ( !*a1 )\n      return 0xFFFFFFFFLL;\n    v6 = a4;\n    v7 = a3;\n    if ( a3 == 0 || a2 == 0 || !a4 )\n      return 0xFFFFFFFFLL;\n    v8 = 0LL;\n    v9 = 0LL;\n    while ( 1 )\n    {\n      if ( v7 <= v9 )\n        return 4294967294LL;\n      v10 = v4[1];\n      if ( !v8 )\n        v8 = (unsigned __int64)v4;\n      if ( v5 == 44 )\n        break;\n      if ( !v10 )\n        goto LABEL_11;\nLABEL_17:\n      v11 = v4 + 1;\nLABEL_18:\n      v4 = v11;\n      if ( v11 )\n      {\n        v5 = *v11;\n        if ( *v11 )\n          continue;\n      }\n      return (unsigned int)v9;\n    }\n    v12 = v4;\n    if ( v10 )\n    {\n      if ( v8 >= (unsigned __int64)v4 )\n        return 0xFFFFFFFFLL;\n    }\n    else\n    {\nLABEL_11:\n      v11 = v4 + 1;\n      v12 = v4 + 1;\n      if ( v4 == (_BYTE *)-1LL )\n        goto LABEL_18;\n      if ( v8 >= (unsigned __int64)v12 )\n        return 0xFFFFFFFFLL;\n    }\n    v13 = v6(v8, &v12[-v8]);\n    if ( v13 == -1 )\n      return 0xFFFFFFFFLL;\n    *(_DWORD *)(a2 + 4 * v9++) = v13;\n    if ( v12 && !*v12 )\n      return (unsigned int)v9;\n    v8 = 0LL;\n    goto LABEL_17;\n  }\n  return 0xFFFFFFFFLL;\n}\n", 
            "funcStartAddr": "0x9ca0L", 
            "funcEndAddr": "0x9daaL", 
            "funcName": "sub_9CA0"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_9DB0(char *a1, __int64 a2, unsigned __int64 a3, unsigned __int64 *a4, __int64 (__fastcall *a5)(unsigned __int64, _BYTE *))\n{\n  char v5; // al\n  unsigned __int64 *v6; // rbx\n  unsigned __int64 v7; // r9\n  signed __int64 result; // rax\n\n  if ( !a1 )\n    return 0xFFFFFFFFLL;\n  v5 = *a1;\n  v6 = a4;\n  if ( !a4 )\n    return 0xFFFFFFFFLL;\n  if ( !v5 )\n    return 0xFFFFFFFFLL;\n  v7 = *a4;\n  if ( *a4 > a3 )\n    return 0xFFFFFFFFLL;\n  if ( v5 == 43 )\n  {\n    ++a1;\n    a3 -= v7;\n    a2 += 4 * v7;\n  }\n  else\n  {\n    *a4 = 0LL;\n  }\n  result = sub_9CA0(a1, a2, a3, a5);\n  if ( (signed int)result > 0 )\n    *v6 += (signed int)result;\n  return result;\n}\n", 
            "funcStartAddr": "0x9db0L", 
            "funcEndAddr": "0x9e0dL", 
            "funcName": "sub_9DB0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_9E10(_BYTE *a1, __int64 a2, __int64 (__fastcall *a3)(unsigned __int64, _BYTE *))\n{\n  __int64 (__fastcall *v3)(unsigned __int64, _BYTE *); // r12\n  _BYTE *v4; // rbx\n  char v5; // al\n  unsigned __int64 v6; // rdi\n  _BYTE *v7; // rbp\n  _BYTE *v8; // r15\n  char v9; // dl\n  __int64 result; // rax\n  char v11; // al\n\n  v3 = a3;\n  if ( a2 == 0 || a3 == 0LL )\n    return 4294967274LL;\n  v4 = a1;\n  if ( !a1 )\n    return 4294967274LL;\n  v5 = *a1;\n  v6 = 0LL;\n  if ( !v5 )\n    return 0LL;\n  while ( 1 )\n  {\n    if ( !v6 )\n      v6 = (unsigned __int64)v4;\n    v7 = ++v4 - 1;\n    v8 = v4;\n    v9 = *v4;\n    if ( v5 == 44 )\n      break;\nLABEL_7:\n    if ( !v9 )\n    {\n      v7 = v4;\n      if ( v6 < (unsigned __int64)v4 )\n        goto LABEL_9;\n      return 0xFFFFFFFFLL;\n    }\n    if ( v4 )\n    {\n      v5 = v9;\n      if ( v9 )\n        continue;\n    }\n    return 0LL;\n  }\n  while ( 1 )\n  {\n    if ( !v9 )\n      v7 = v4;\n    if ( v6 >= (unsigned __int64)v7 )\n      return 0xFFFFFFFFLL;\nLABEL_9:\n    result = v3(v6, &v7[-v6]);\n    if ( (signed int)result < 0 )\n      return result;\n    *(_BYTE *)(a2 + ((signed int)result >> 3)) |= 1 << (result & 7);\n    if ( v7 && !*v7 )\n      return 0LL;\n    v11 = *v4;\n    if ( !*v4 )\n      return 0LL;\n    ++v4;\n    v6 = (unsigned __int64)v8;\n    v7 = v4 - 1;\n    v8 = v4;\n    v9 = *v4;\n    if ( v11 != 44 )\n      goto LABEL_7;\n  }\n}\n", 
            "funcStartAddr": "0x9e10L", 
            "funcEndAddr": "0x9f0fL", 
            "funcName": "sub_9E10"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_9FF0(char *nptr, _DWORD *a2, _DWORD *a3, int a4)\n{\n  _DWORD *v4; // rbp\n  int v5; // er13\n  int *v6; // rax\n  int *v7; // r14\n  int v8; // eax\n  __int64 result; // rax\n  const char *v10; // rbx\n  char *v11; // [rsp+0h] [rbp-48h]\n  unsigned __int64 v12; // [rsp+8h] [rbp-40h]\n\n  v12 = __readfsqword(0x28u);\n  v11 = 0LL;\n  if ( !nptr )\n    return 0LL;\n  v4 = a3;\n  *a2 = a4;\n  *a3 = a4;\n  v5 = a4;\n  v6 = __errno_location();\n  *v6 = 0;\n  v7 = v6;\n  if ( *nptr == 58 )\n  {\n    v10 = nptr + 1;\nLABEL_11:\n    *v4 = strtol(v10, &v11, 10);\n    if ( !*v7 && v11 )\n      return (unsigned int)-(v11 == v10 || *v11 != 0);\n    return 0xFFFFFFFFLL;\n  }\n  v8 = strtol(nptr, &v11, 10);\n  *a2 = v8;\n  *v4 = v8;\n  result = (unsigned int)*v7;\n  if ( !(_DWORD)result && v11 != nptr && v11 )\n  {\n    if ( *v11 == 58 )\n    {\n      if ( !v11[1] )\n      {\n        *v4 = v5;\n        return result;\n      }\n    }\n    else if ( *v11 != 45 )\n    {\n      return 0LL;\n    }\n    v10 = v11 + 1;\n    v11 = 0LL;\n    *v7 = 0;\n    goto LABEL_11;\n  }\n  return 0xFFFFFFFFLL;\n}\n", 
            "funcStartAddr": "0x9ff0L", 
            "funcEndAddr": "0xa12fL", 
            "funcName": "sub_9FF0"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_A130(char *a1, char *a2)\n{\n  char *v2; // rbx\n  const char *v3; // r12\n  const char *v4; // rax\n  size_t v5; // rbp\n  __int64 v6; // r15\n  const char *v7; // rbx\n  size_t n; // [rsp+8h] [rbp-50h]\n  __int64 v10; // [rsp+10h] [rbp-48h]\n  unsigned __int64 v11; // [rsp+18h] [rbp-40h]\n\n  v11 = __readfsqword(0x28u);\n  if ( !a2 || !a1 )\n    return 0LL;\n  v2 = a2;\n  while ( 1 )\n  {\n    v3 = sub_86D0(a1, (signed __int64 *)&n);\n    v4 = sub_86D0(v2, &v10);\n    v5 = n;\n    v6 = v10;\n    v7 = v4;\n    if ( !(v10 + n) )\n      break;\n    if ( v10 + n == 1 )\n    {\n      if ( v3 && *v3 == 47 )\n        break;\n      if ( !v4 )\n        return 0LL;\n      if ( *v4 == 47 )\n        break;\n    }\n    if ( v4 != 0LL && v3 != 0LL && n == v10 && !strncmp(v3, v4, n) )\n    {\n      v2 = (char *)&v7[v6];\n      a1 = (char *)&v3[v5];\n      if ( &v3[v5] )\n      {\n        if ( v2 )\n          continue;\n      }\n    }\n    return 0LL;\n  }\n  return 1LL;\n}\n", 
            "funcStartAddr": "0xa130L", 
            "funcEndAddr": "0xa236L", 
            "funcName": "sub_A130"
        }, 
        {
            "decompiledFuncCode": "char *__fastcall sub_A240(__int128 src, size_t n)\n{\n  size_t v2; // r12\n  size_t v3; // rbp\n  _BYTE *v4; // rax\n  _BYTE *v5; // r15\n\n  if ( src == 0 )\n  {\n    *(_QWORD *)&src = \"\";\n    return strdup((const char *)src);\n  }\n  if ( !(_QWORD)src )\n    return strndup(*((const char **)&src + 1), n);\n  if ( !*((_QWORD *)&src + 1) )\n    return strdup((const char *)src);\n  v2 = n;\n  v3 = strlen((const char *)src);\n  if ( v2 > ~v3 )\n    return 0LL;\n  v4 = malloc(v2 + v3 + 1);\n  v5 = v4;\n  if ( v4 )\n  {\n    memcpy(v4, (const void *)src, v3);\n    memcpy(&v5[v3], *((const void **)&src + 1), v2);\n    v5[v2 + v3] = 0;\n  }\n  return v5;\n}\n", 
            "funcStartAddr": "0xa240L", 
            "funcEndAddr": "0xa311L", 
            "funcName": "sub_A240"
        }, 
        {
            "decompiledFuncCode": "char *__fastcall sub_A320(__int128 src)\n{\n  size_t v1; // rdx\n\n  v1 = 0LL;\n  if ( *((_QWORD *)&src + 1) )\n    v1 = strlen(*((const char **)&src + 1));\n  return sub_A240(src, v1);\n}\n", 
            "funcStartAddr": "0xa320L", 
            "funcEndAddr": "0xa351L", 
            "funcName": "sub_A320"
        }, 
        {
            "decompiledFuncCode": "char *sub_A360(__int128 src, ...)\n{\n  int v1; // eax\n  char *v2; // rbx\n  void *ptr; // [rsp+8h] [rbp-E0h]\n  gcc_va_list va; // [rsp+10h] [rbp-D8h]\n  unsigned __int64 v6; // [rsp+28h] [rbp-C0h]\n\n  va_start(va, src);\n  v6 = __readfsqword(0x28u);\n  v1 = __vasprintf_chk(&ptr, 1LL, *((_QWORD *)&src + 1), va);\n  if ( v1 < 0 )\n    return 0LL;\n  *((_QWORD *)&src + 1) = ptr;\n  v2 = sub_A240(src, v1);\n  free(ptr);\n  return v2;\n}\n", 
            "funcStartAddr": "0xa360L", 
            "funcEndAddr": "0xa459L", 
            "funcName": "sub_A360"
        }, 
        {
            "decompiledFuncCode": "size_t __fastcall sub_A500(const char **a1, _QWORD *a2, const char *a3, int a4)\n{\n  const char *v4; // rbx\n  const char *v5; // r13\n  int v6; // er15\n  size_t v7; // rbx\n  char v8; // r12\n  __int64 v9; // rax\n  char v10; // dl\n  const char *v11; // r12\n  size_t v12; // rax\n  __int64 v14; // rax\n  const char *v15; // r12\n  char v16; // [rsp+6h] [rbp-42h]\n  char v17; // [rsp+7h] [rbp-41h]\n  unsigned __int64 v18; // [rsp+8h] [rbp-40h]\n\n  v4 = *a1;\n  v18 = __readfsqword(0x28u);\n  if ( !*v4 )\n    return 0LL;\n  v5 = a3;\n  v6 = a4;\n  v7 = (size_t)&v4[strspn(v4, a3)];\n  v8 = *(_BYTE *)v7;\n  if ( !*(_BYTE *)v7 )\n    goto LABEL_15;\n  if ( !v6 )\n  {\n    v12 = strcspn((const char *)v7, v5);\n    *a2 = v12;\n    *a1 = (const char *)(v7 + v12);\n    return v7;\n  }\n  if ( !strchr(\"'\\\"\", v8) )\n  {\n    v14 = sub_8760((_BYTE *)v7, v5);\n    v15 = (const char *)(v7 + v14);\n    *a2 = v14;\n    if ( !*(_BYTE *)(v7 + v14) || strchr(v5, *(char *)(v7 + v14)) )\n    {\n      *a1 = v15;\n      return v7;\n    }\nLABEL_15:\n    *a1 = (const char *)v7;\n    return 0LL;\n  }\n  v16 = v8;\n  v17 = 0;\n  v9 = sub_8760((_BYTE *)(v7 + 1), &v16);\n  *a2 = v9;\n  v10 = *(_BYTE *)(v7 + v9 + 1);\n  if ( !v10 )\n    goto LABEL_15;\n  if ( v8 != v10 )\n    goto LABEL_15;\n  v11 = (const char *)(v7 + v9 + 2);\n  if ( *v11 )\n  {\n    if ( !strchr(v5, *v11) )\n      goto LABEL_15;\n  }\n  *a1 = v11;\n  ++v7;\n  return v7;\n}\n", 
            "funcStartAddr": "0xa500L", 
            "funcEndAddr": "0xa659L", 
            "funcName": "sub_A500"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_A660(FILE *stream)\n{\n  int v1; // eax\n\n  do\n  {\n    v1 = fgetc(stream);\n    if ( v1 == -1 )\n      return 1LL;\n  }\n  while ( v1 != 10 );\n  return 0LL;\n}\n", 
            "funcStartAddr": "0xa660L", 
            "funcEndAddr": "0xa694L", 
            "funcName": "sub_A660"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_A770(_BYTE **a1, unsigned __int64 *a2, _QWORD *a3, _QWORD *a4, _QWORD *a5)\n{\n  _BYTE *v5; // r9\n  char v6; // r10\n  signed __int64 result; // rax\n  _BYTE *v8; // r11\n  unsigned __int64 v9; // rbx\n  _BYTE *v10; // r10\n  _BYTE *v11; // rsi\n\n  if ( !a1 )\n    __assert_fail(\"optstr\", \"lib/strutils.c\", 0x450u, \"ul_optstr_next\");\n  v5 = *a1;\n  if ( !*a1 )\n    __assert_fail(\"*optstr\", \"lib/strutils.c\", 0x451u, \"ul_optstr_next\");\n  if ( a2 )\n    *a2 = 0LL;\n  if ( a3 )\n    *a3 = 0LL;\n  if ( a4 )\n    *a4 = 0LL;\n  if ( a5 )\n    *a5 = 0LL;\n  while ( 1 )\n  {\n    v6 = *v5;\n    if ( *v5 != 44 )\n      break;\n    if ( !++v5 )\n      return 1LL;\n  }\n  result = 0LL;\n  v8 = 0LL;\n  v9 = (unsigned __int64)v5;\n  if ( !v6 )\n    return 1LL;\n  while ( 1 )\n  {\n    if ( v6 == 34 )\n      result = (unsigned int)result ^ 1;\n    if ( (_DWORD)result )\n    {\n      v10 = v5 + 1;\n      goto LABEL_39;\n    }\n    if ( v8 || v9 >= (unsigned __int64)v5 || v6 != 61 )\n    {\n      if ( v6 == 44 )\n        goto LABEL_26;\n    }\n    else\n    {\n      v8 = v5;\n    }\n    v10 = v5 + 1;\n    if ( !v5[1] && v5 != (_BYTE *)-1LL )\n      break;\nLABEL_39:\n    v5 = v10;\n    if ( v10 )\n    {\n      v6 = *v10;\n      if ( v6 )\n        continue;\n    }\n    return 1LL;\n  }\n  ++v5;\nLABEL_26:\n  if ( v9 >= (unsigned __int64)v5 )\n    return 4294967274LL;\n  if ( a2 )\n    *a2 = v9;\n  if ( a3 )\n  {\n    v11 = &v5[-v9];\n    if ( v8 )\n      v11 = &v8[-v9];\n    *a3 = v11;\n  }\n  *a1 = &v5[-(*v5 < 1u) + 1];\n  if ( v8 )\n  {\n    if ( a4 )\n      *a4 = v8 + 1;\n    if ( a5 )\n      *a5 = v5 - v8 - 1;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0xa770L", 
            "funcEndAddr": "0xa918L", 
            "funcName": "sub_A770"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_A920(char *s, _QWORD *a2)\n{\n  char *v2; // rcx\n  signed int v3; // ebx\n  const char *v4; // rbp\n  int *v5; // rax\n  int *v6; // r14\n  int v7; // eax\n  char *v8; // rbx\n  __int64 v9; // r14\n  const char *v10; // r15\n  char *v11; // rbx\n  size_t v12; // rax\n  size_t v13; // rbp\n  char *v14; // rsi\n  unsigned __int64 j; // rdx\n  char *v17; // rbp\n  int v18; // [rsp+8h] [rbp-70h]\n  __int64 v19; // [rsp+10h] [rbp-68h]\n  __int64 v20; // [rsp+18h] [rbp-60h]\n  __int64 i; // [rsp+20h] [rbp-58h]\n  _QWORD *v22; // [rsp+28h] [rbp-50h]\n  char *endptr; // [rsp+30h] [rbp-48h]\n  unsigned __int64 v24; // [rsp+38h] [rbp-40h]\n\n  v24 = __readfsqword(0x28u);\n  v22 = a2;\n  if ( !s )\n    __assert_fail(off_12692, \"lib/timeutils.c\", 0x4Eu, \"parse_sec\");\n  v2 = s;\n  v3 = 0;\n  for ( i = 0LL; ; i += (_QWORD)v14 * v19 + j )\n  {\n    v4 = &v2[strspn(v2, \" \\t\\n\\r\")];\n    if ( !*v4 )\n      break;\n    v5 = __errno_location();\n    v6 = v5;\n    *v5 = 0;\n    v19 = strtoll(v4, &endptr, 10);\n    v7 = *v6;\n    if ( *v6 > 0 )\n      return (unsigned int)-v7;\n    if ( v19 < 0 )\n      return 4294967262LL;\n    v8 = endptr;\n    if ( *endptr == 46 )\n    {\n      v17 = endptr + 1;\n      *v6 = 0;\n      v20 = strtoll(v8 + 1, &endptr, 10);\n      v7 = *v6;\n      if ( *v6 > 0 )\n        return (unsigned int)-v7;\n      if ( v20 < 0 )\n        return 4294967262LL;\n      v8 = endptr;\n      if ( endptr == v17 )\n        return 4294967274LL;\n      v18 = (_DWORD)endptr - (_DWORD)v17;\n    }\n    else\n    {\n      if ( endptr == v4 )\n        return 4294967274LL;\n      v18 = 0;\n      v20 = 0LL;\n    }\n    v9 = 0LL;\n    v10 = \"seconds\";\n    v11 = &v8[strspn(v8, \" \\t\\n\\r\")];\n    endptr = v11;\n    while ( 1 )\n    {\n      if ( v10 )\n      {\n        v12 = strlen(v10);\n        v13 = v12;\n        if ( v11 )\n        {\n          if ( v12 )\n          {\n            if ( !strncmp(v11, v10, v12) )\n            {\n              v2 = &v11[v13];\n              if ( &v11[v13] )\n                break;\n            }\n          }\n        }\n      }\n      if ( ++v9 == 28 )\n        return 4294967274LL;\n      v10 = off_2166A0[2 * v9];\n    }\n    v14 = off_2166A0[2 * (unsigned int)v9 + 1];\n    for ( j = (_QWORD)v14 * v20; v18; --v18 )\n      j = (unsigned __int64)(j * (unsigned __int128)0xCCCCCCCCCCCCCCCDLL >> 64) >> 3;\n    v3 = 1;\n  }\n  if ( !v3 )\n    return 4294967274LL;\n  *v22 = i;\n  return 0LL;\n}\n", 
            "funcStartAddr": "0xa920L", 
            "funcEndAddr": "0xab7dL", 
            "funcName": "sub_A920"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_AB80(char *s1, __int64 *a2)\n{\n  __int64 *v2; // rbp\n  char *v3; // r14\n  bool v4; // cf\n  bool v5; // zf\n  const char *v6; // rdi\n  signed __int64 v7; // rcx\n  char *v8; // rsi\n  char v9; // al\n  bool v10; // cf\n  bool v11; // zf\n  const char *v12; // rdi\n  signed __int64 v13; // rcx\n  char *v14; // rsi\n  char v15; // al\n  bool v16; // cf\n  bool v17; // zf\n  time_t v18; // rax\n  unsigned __int64 v19; // rax\n  __int64 v20; // rdx\n  __int64 v21; // rax\n  __int64 result; // rax\n  const char *v23; // rdi\n  signed __int64 v24; // rcx\n  char *v25; // rsi\n  char v26; // al\n  bool v27; // cf\n  bool v28; // zf\n  const char *v29; // rdi\n  signed __int64 v30; // rcx\n  char *v31; // rsi\n  size_t v32; // rax\n  char *v33; // rax\n  char *v34; // r12\n  unsigned int v35; // ST00_4\n  __int64 v36; // r12\n  const char *i; // rbx\n  size_t v38; // rax\n  size_t v39; // r15\n  signed int v40; // er12\n  int v41; // er15\n  int v42; // er13\n  char *v43; // rax\n  char *v44; // rax\n  char *v45; // rax\n  char *v46; // rax\n  char *v47; // rax\n  char *v48; // rax\n  char *v49; // rax\n  char *v50; // rax\n  char *v51; // rax\n  char *v52; // rax\n  int v53; // [rsp+0h] [rbp-C8h]\n  int v54; // [rsp+Ch] [rbp-BCh]\n  int v55; // [rsp+10h] [rbp-B8h]\n  int v56; // [rsp+14h] [rbp-B4h]\n  int v57; // [rsp+18h] [rbp-B0h]\n  int v58; // [rsp+1Ch] [rbp-ACh]\n  __int64 v59; // [rsp+20h] [rbp-A8h]\n  const char *v60; // [rsp+28h] [rbp-A0h]\n  time_t timer; // [rsp+38h] [rbp-90h]\n  __int64 v62; // [rsp+40h] [rbp-88h]\n  unsigned __int64 v63; // [rsp+48h] [rbp-80h]\n  struct tm tp; // [rsp+50h] [rbp-78h]\n  unsigned __int64 v65; // [rsp+88h] [rbp-40h]\n\n  v65 = __readfsqword(0x28u);\n  v62 = 0LL;\n  v63 = 0LL;\n  if ( !s1 )\n    __assert_fail(off_12692, \"lib/timeutils.c\", 0xC5u, \"parse_timestamp\");\n  v2 = a2;\n  if ( !a2 )\nLABEL_76:\n    __assert_fail(\"usec\", \"lib/timeutils.c\", 0xC6u, \"parse_timestamp\");\n  v3 = s1;\n  timer = time(0LL);\n  localtime_r(&timer, &tp);\n  v6 = \"now\";\n  v7 = 4LL;\n  v8 = v3;\n  tp.tm_isdst = -1;\n  do\n  {\n    if ( !v7 )\n      break;\n    v4 = (unsigned __int8)*v8 < *v6;\n    v5 = *v8++ == *v6++;\n    --v7;\n  }\n  while ( v5 );\n  v9 = (!v4 && !v5) - v4;\n  v10 = 0;\n  v11 = v9 == 0;\n  if ( !v9 )\n    goto LABEL_12;\n  v12 = \"today\";\n  v13 = 6LL;\n  v14 = v3;\n  do\n  {\n    if ( !v13 )\n      break;\n    v10 = (unsigned __int8)*v14 < *v12;\n    v11 = *v14++ == *v12++;\n    --v13;\n  }\n  while ( v11 );\n  v15 = (!v10 && !v11) - v10;\n  v16 = 0;\n  v17 = v15 == 0;\n  if ( !v15 )\n    goto LABEL_11;\n  v23 = \"yesterday\";\n  v24 = 10LL;\n  v25 = v3;\n  do\n  {\n    if ( !v24 )\n      break;\n    v16 = (unsigned __int8)*v25 < *v23;\n    v17 = *v25++ == *v23++;\n    --v24;\n  }\n  while ( v17 );\n  v26 = (!v16 && !v17) - v16;\n  v27 = 0;\n  v28 = v26 == 0;\n  if ( !v26 )\n  {\n    --tp.tm_mday;\nLABEL_11:\n    *(_QWORD *)&tp.tm_sec = 0LL;\n    tp.tm_hour = 0;\n    goto LABEL_12;\n  }\n  v29 = \"tomorrow\";\n  v30 = 9LL;\n  v31 = v3;\n  do\n  {\n    if ( !v30 )\n      break;\n    v27 = (unsigned __int8)*v31 < *v29;\n    v28 = *v31++ == *v29++;\n    --v30;\n  }\n  while ( v28 );\n  if ( (!v27 && !v28) == v27 )\n  {\n    ++tp.tm_mday;\n    *(_QWORD *)&tp.tm_sec = 0LL;\n    tp.tm_hour = 0;\n    goto LABEL_12;\n  }\n  if ( *v3 == 43 )\n  {\n    result = sub_A920(v3 + 1, &v62);\n    if ( (signed int)result < 0 )\n      goto LABEL_16;\n    goto LABEL_12;\n  }\n  if ( *v3 == 45 )\n  {\n    result = sub_A920(v3 + 1, &v63);\n    if ( (signed int)result < 0 )\n      goto LABEL_16;\nLABEL_12:\n    v18 = mktime(&tp);\n    timer = v18;\n    if ( v18 != -1 )\n      goto LABEL_13;\n    goto LABEL_58;\n  }\n  v32 = strlen(v3);\n  if ( v32 <= 3 || *(_DWORD *)&v3[v32 - 4] != 1869046048 )\n  {\n    v36 = 0LL;\n    for ( i = \"Sunday\"; ; i = (&off_216860)[2 * v36] )\n    {\n      if ( i )\n      {\n        v38 = strlen(i);\n        v39 = v38;\n        if ( v38 )\n        {\n          if ( !strncasecmp(v3, i, v38) && &v3[v39] && v3[v39] == 32 )\n          {\n            v3 += v39 + 1;\n            v40 = (signed int)(&off_216860)[2 * (unsigned int)v36 + 1];\n            goto LABEL_42;\n          }\n        }\n      }\n      if ( ++v36 == 14 )\n        break;\n    }\n    v40 = -1;\nLABEL_42:\n    v41 = tp.tm_sec;\n    v42 = tp.tm_hour;\n    v53 = tp.tm_min;\n    v54 = tp.tm_mday;\n    v55 = tp.tm_mon;\n    v56 = tp.tm_year;\n    v57 = tp.tm_wday;\n    v58 = tp.tm_yday;\n    v59 = tp.tm_gmtoff;\n    v60 = tp.tm_zone;\n    v43 = strptime(v3, \"%y-%m-%d %H:%M:%S\", &tp);\n    if ( !v43 || *v43 )\n    {\n      tp.tm_sec = v41;\n      tp.tm_hour = v42;\n      tp.tm_isdst = -1;\n      tp.tm_min = v53;\n      tp.tm_mday = v54;\n      tp.tm_mon = v55;\n      tp.tm_year = v56;\n      tp.tm_wday = v57;\n      tp.tm_yday = v58;\n      tp.tm_gmtoff = v59;\n      tp.tm_zone = v60;\n      v44 = strptime(v3, \"%Y-%m-%d %H:%M:%S\", &tp);\n      if ( !v44 || *v44 )\n      {\n        tp.tm_sec = v41;\n        tp.tm_hour = v42;\n        tp.tm_isdst = -1;\n        tp.tm_min = v53;\n        tp.tm_mday = v54;\n        tp.tm_mon = v55;\n        tp.tm_year = v56;\n        tp.tm_wday = v57;\n        tp.tm_yday = v58;\n        tp.tm_gmtoff = v59;\n        tp.tm_zone = v60;\n        v45 = strptime(v3, \"%Y-%m-%dT%H:%M:%S\", &tp);\n        if ( !v45 || *v45 )\n        {\n          tp.tm_sec = v41;\n          tp.tm_hour = v42;\n          tp.tm_isdst = -1;\n          tp.tm_min = v53;\n          tp.tm_mday = v54;\n          tp.tm_mon = v55;\n          tp.tm_year = v56;\n          tp.tm_wday = v57;\n          tp.tm_yday = v58;\n          tp.tm_gmtoff = v59;\n          tp.tm_zone = v60;\n          v46 = strptime(v3, \"%y-%m-%d %H:%M\", &tp);\n          if ( v46 && !*v46 )\n            goto LABEL_74;\n          tp.tm_sec = v41;\n          tp.tm_hour = v42;\n          tp.tm_isdst = -1;\n          tp.tm_min = v53;\n          tp.tm_mday = v54;\n          tp.tm_mon = v55;\n          tp.tm_year = v56;\n          tp.tm_wday = v57;\n          tp.tm_yday = v58;\n          tp.tm_gmtoff = v59;\n          tp.tm_zone = v60;\n          v47 = strptime(v3, \"%Y-%m-%d %H:%M\", &tp);\n          if ( v47 )\n          {\n            if ( !*v47 )\n            {\nLABEL_74:\n              tp.tm_sec = 0;\n              goto LABEL_55;\n            }\n          }\n          tp.tm_sec = v41;\n          tp.tm_hour = v42;\n          tp.tm_isdst = -1;\n          tp.tm_min = v53;\n          tp.tm_mday = v54;\n          tp.tm_mon = v55;\n          tp.tm_year = v56;\n          tp.tm_wday = v57;\n          tp.tm_yday = v58;\n          tp.tm_gmtoff = v59;\n          tp.tm_zone = v60;\n          v48 = strptime(v3, \"%y-%m-%d\", &tp);\n          if ( v48 && !*v48 )\n            goto LABEL_80;\n          tp.tm_sec = v41;\n          tp.tm_hour = v42;\n          tp.tm_isdst = -1;\n          tp.tm_min = v53;\n          tp.tm_mday = v54;\n          tp.tm_mon = v55;\n          tp.tm_year = v56;\n          tp.tm_wday = v57;\n          tp.tm_yday = v58;\n          tp.tm_gmtoff = v59;\n          tp.tm_zone = v60;\n          v49 = strptime(v3, \"%Y-%m-%d\", &tp);\n          if ( !v49 )\n            goto LABEL_81;\n          if ( !*v49 )\n          {\nLABEL_80:\n            *(_QWORD *)&tp.tm_sec = 0LL;\n            tp.tm_hour = 0;\n          }\n          else\n          {\nLABEL_81:\n            tp.tm_sec = v41;\n            tp.tm_hour = v42;\n            tp.tm_isdst = -1;\n            tp.tm_min = v53;\n            tp.tm_mday = v54;\n            tp.tm_mon = v55;\n            tp.tm_year = v56;\n            tp.tm_wday = v57;\n            tp.tm_yday = v58;\n            tp.tm_gmtoff = v59;\n            tp.tm_zone = v60;\n            v50 = strptime(v3, \"%H:%M:%S\", &tp);\n            if ( !v50 || *v50 )\n            {\n              tp.tm_sec = v41;\n              tp.tm_hour = v42;\n              tp.tm_isdst = -1;\n              tp.tm_min = v53;\n              tp.tm_mday = v54;\n              tp.tm_mon = v55;\n              tp.tm_year = v56;\n              tp.tm_wday = v57;\n              tp.tm_yday = v58;\n              tp.tm_gmtoff = v59;\n              tp.tm_zone = v60;\n              v51 = strptime(v3, \"%H:%M\", &tp);\n              if ( !v51 || *v51 )\n              {\n                tp.tm_sec = v41;\n                tp.tm_hour = v42;\n                tp.tm_isdst = -1;\n                tp.tm_min = v53;\n                tp.tm_mday = v54;\n                tp.tm_mon = v55;\n                tp.tm_year = v56;\n                tp.tm_wday = v57;\n                tp.tm_yday = v58;\n                tp.tm_gmtoff = v59;\n                tp.tm_zone = v60;\n                v52 = strptime(v3, \"%Y%m%d%H%M%S\", &tp);\n                if ( !v52 || *v52 )\n                  goto LABEL_58;\n              }\n              goto LABEL_74;\n            }\n          }\n        }\n      }\n    }\nLABEL_55:\n    v18 = mktime(&tp);\n    timer = v18;\n    if ( v18 != -1 && (v40 < 0 || tp.tm_wday == v40) )\n    {\nLABEL_13:\n      v19 = v62 + 1000000 * v18;\n      v20 = v19 - v63;\n      v4 = v63 < v19;\n      v21 = 0LL;\n      if ( v4 )\n        v21 = v20;\n      *v2 = v21;\n      result = 0LL;\n      goto LABEL_16;\n    }\nLABEL_58:\n    result = 4294967274LL;\n    goto LABEL_16;\n  }\n  v33 = strndup(v3, v32 - 4);\n  v34 = v33;\n  if ( !v33 )\n  {\n    result = 4294967284LL;\n    goto LABEL_16;\n  }\n  v35 = sub_A920(v33, &v63);\n  free(v34);\n  result = v35;\n  if ( (v35 & 0x80000000) == 0 )\n    goto LABEL_12;\nLABEL_16:\n  if ( __readfsqword(0x28u) != v65 )\n    goto LABEL_76;\n  return result;\n}\n", 
            "funcStartAddr": "0xab80L", 
            "funcEndAddr": "0xb3b4L", 
            "funcName": "sub_AB80"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_B3C0(__int64 a1)\n{\n  __int64 result; // rax\n\n  result = 0LL;\n  if ( *(_DWORD *)(a1 + 32) >= 0 )\n    result = *(unsigned int *)(a1 + 40);\n  return result;\n}\n", 
            "funcStartAddr": "0xb3c0L", 
            "funcEndAddr": "0xb3ceL", 
            "funcName": "sub_B3C0"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_B3D0(unsigned int *a1, __int64 a2, char a3, __int64 a4, unsigned __int64 a5)\n{\n  char v5; // bp\n  __int64 v6; // r12\n  unsigned __int64 v7; // rbx\n  int v9; // eax\n  char *v10; // rax\n  const char *v11; // r8\n  __int64 v12; // r9\n  __int64 v13; // rax\n  __int64 v14; // ST08_8\n  __int64 v15; // ST00_8\n  __int64 v16; // rax\n  __int64 v17; // ST08_8\n  __int64 v18; // ST00_8\n  __int64 v19; // rax\n\n  v5 = a3;\n  v6 = a4;\n  v7 = a5;\n  if ( a3 & 1 )\n  {\n    v17 = a1[3];\n    v18 = a1[4] + 1;\n    v19 = (signed int)__snprintf_chk(a4, a5, 1LL, -1LL, \"%4ld-%.2d-%.2d\", (signed int)a1[5] + 1900LL);\n    if ( (signed int)v19 > v7 )\n      goto LABEL_10;\n    v7 -= v19;\n    v6 += v19;\n  }\n  if ( (v5 & 3) != 3 )\n  {\n    if ( !(v5 & 2) )\n      goto LABEL_4;\nLABEL_17:\n    v14 = *a1;\n    v15 = a1[1];\n    v16 = (signed int)__snprintf_chk(v6, v7, 1LL, -1LL, \"%02d:%02d:%02d\", a1[2]);\n    if ( (signed int)v16 > v7 )\n      goto LABEL_10;\n    v7 -= v16;\n    v6 += v16;\n    if ( !(v5 & 8) )\n      goto LABEL_5;\nLABEL_19:\n    v12 = a2;\n    v11 = \".%06ld\";\n    goto LABEL_12;\n  }\n  if ( !v7 )\n    goto LABEL_10;\n  --v7;\n  *(_BYTE *)(++v6 - 1) = (v5 & 0x20u) < 1 ? 32 : 84;\n  if ( v5 & 2 )\n    goto LABEL_17;\nLABEL_4:\n  if ( v5 & 8 )\n    goto LABEL_19;\nLABEL_5:\n  if ( !(v5 & 0x10) )\n  {\n    if ( !(v5 & 4) )\n      return 0LL;\n    goto LABEL_9;\n  }\n  v11 = \",%06ld\";\n  v12 = a2;\nLABEL_12:\n  v13 = (signed int)__snprintf_chk(v6, v7, 1LL, -1LL, v11, v12);\n  if ( (signed int)v13 > v7 )\n    goto LABEL_10;\n  v7 -= v13;\n  v6 += v13;\n  if ( !(v5 & 4) )\n    return 0LL;\nLABEL_9:\n  v9 = sub_B3C0((__int64)a1);\n  if ( (signed int)__snprintf_chk(v6, v7, 1LL, -1LL, \"%+03d:%02d\", v9 / 3600) <= v7 )\n    return 0LL;\nLABEL_10:\n  v10 = dcgettext(0LL, \"format_iso_time: buffer overflow.\", 5);\n  warnx(v10, \"format_iso_time: buffer overflow.\");\n  return 0xFFFFFFFFLL;\n}\n", 
            "funcStartAddr": "0xb3d0L", 
            "funcEndAddr": "0xb600L", 
            "funcName": "sub_B3D0"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_B6C0(const time_t *a1, char a2, __int64 a3, unsigned __int64 a4)\n{\n  unsigned __int64 v4; // r14\n  __int64 v5; // r13\n  struct tm *v6; // rax\n  time_t v8; // rbx\n  char *v9; // rax\n  __int64 v10; // [rsp+0h] [rbp-68h]\n  unsigned __int64 v11; // [rsp+38h] [rbp-30h]\n\n  v4 = a4;\n  v5 = a3;\n  v11 = __readfsqword(0x28u);\n  if ( a2 & 0x40 )\n    v6 = gmtime_r(a1, (struct tm *)&v10);\n  else\n    v6 = localtime_r(a1, (struct tm *)&v10);\n  if ( v6 )\n    return sub_B3D0((unsigned int *)&v10, 0LL, a2, v5, v4);\n  v8 = *a1;\n  v9 = dcgettext(0LL, \"time %ld is out of range.\", 5);\n  warnx(v9, v8);\n  return 0xFFFFFFFFLL;\n}\n", 
            "funcStartAddr": "0xb6c0L", 
            "funcEndAddr": "0xb767L", 
            "funcName": "sub_B6C0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_B770(time_t *timer, struct timeval *tv, char a3, char *a4, size_t a5)\n{\n  char v5; // r14\n  char *v6; // r13\n  size_t v7; // r12\n  int v8; // eax\n  __int64 v10; // [rsp+0h] [rbp-B8h]\n  unsigned int v11; // [rsp+8h] [rbp-B0h]\n  int v12; // [rsp+14h] [rbp-A4h]\n  int v13; // [rsp+1Ch] [rbp-9Ch]\n  struct tm tp; // [rsp+40h] [rbp-78h]\n  unsigned __int64 v15; // [rsp+78h] [rbp-40h]\n\n  v5 = a3;\n  v6 = a4;\n  v7 = a5;\n  v15 = __readfsqword(0x28u);\n  if ( !tv->tv_sec )\n    gettimeofday(tv, 0LL);\n  localtime_r(timer, (struct tm *)&v10);\n  localtime_r(&tv->tv_sec, &tp);\n  if ( v13 != tp.tm_yday )\n  {\n    if ( v12 == tp.tm_year )\n    {\n      if ( v5 & 2 )\n        v8 = strftime(v6, v7, \"%b%d/%H:%M\", (const struct tm *)&v10);\n      else\n        v8 = strftime(v6, v7, \"%b%d\", (const struct tm *)&v10);\n      return (unsigned int)-(v8 <= 0);\n    }\nLABEL_10:\n    v8 = strftime(v6, v7, \"%Y-%b%d\", (const struct tm *)&v10);\n    return (unsigned int)-(v8 <= 0);\n  }\n  if ( v12 != tp.tm_year )\n    goto LABEL_10;\n  return (unsigned int)-((signed int)__snprintf_chk(v6, v7, 1LL, -1LL, \"%02d:%02d\", v11) > v7);\n}\n", 
            "funcStartAddr": "0xb770L", 
            "funcEndAddr": "0xb8bfL", 
            "funcName": "sub_B770"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 sub_B8C0(__int64 a1, __int64 a2, ...)\n{\n  gcc_va_list va; // [rsp+0h] [rbp-E8h]\n  unsigned __int64 v4; // [rsp+18h] [rbp-D0h]\n\n  v4 = __readfsqword(0x28u);\n  if ( a1 && !(dword_2171C0 & 0x1000000) )\n    __fprintf_chk(stderr, 1LL, \"[%p]: \", a1);\n  va_start(va, a2);\n  __vfprintf_chk(stderr, 1LL, a2, va);\n  fputc(10, stderr);\n  return __readfsqword(0x28u) ^ v4;\n}\n", 
            "funcStartAddr": "0xb8c0L", 
            "funcEndAddr": "0xb9c0L", 
            "funcName": "sub_B8C0"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 sub_B9C0(__int64 a1, ...)\n{\n  gcc_va_list va; // [rsp+0h] [rbp-D8h]\n  unsigned __int64 v3; // [rsp+18h] [rbp-C0h]\n\n  va_start(va, a1);\n  v3 = __readfsqword(0x28u);\n  __vfprintf_chk(stderr, 1LL, a1, va);\n  fputc(10, stderr);\n  return __readfsqword(0x28u) ^ v3;\n}\n", 
            "funcStartAddr": "0xb9c0L", 
            "funcEndAddr": "0xba97L", 
            "funcName": "sub_B9C0"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_BAA0(__int64 a1, __int64 a2, __int64 a3)\n{\n  __int64 v3; // r13\n  signed __int64 v4; // rbx\n  int *v5; // rax\n  int *v6; // rbp\n  signed int v7; // eax\n\n  v3 = a3;\n  v4 = a1 + 32;\n  v5 = __errno_location();\n  *v5 = 0;\n  v6 = v5;\n  v7 = __vsnprintf_chk(a1 + 32, 4096LL, 1LL, 4096LL, a2, v3);\n  if ( v7 >= 0 )\n  {\n    if ( v7 > 4095 )\n    {\n      *v6 = 36;\n      v4 = 0LL;\n    }\n    return v4;\n  }\n  v4 = 0LL;\n  if ( *v6 )\n    return v4;\n  *v6 = 22;\n  return 0LL;\n}\n", 
            "funcStartAddr": "0xbaa0L", 
            "funcEndAddr": "0xbb2bL", 
            "funcName": "sub_BAA0"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_BB30(__int64 a1)\n{\n  __int64 v1; // r9\n  _BYTE *v2; // rbx\n  _BYTE *v3; // rax\n  signed int v4; // eax\n\n  v1 = *(_QWORD *)(a1 + 24);\n  v2 = *(_BYTE **)(a1 + 8);\n  if ( !v1 )\n    return v2;\n  if ( v2 )\n  {\n    v3 = &v2[*v2 == 47];\n    v2 = (_BYTE *)(a1 + 32);\n    v4 = __snprintf_chk(a1 + 32, 4096LL, 1LL, 4096LL, \"%s/%s\", v1);\n    if ( v4 < 0 )\n      return 0LL;\n    if ( v4 > 4095 )\n    {\n      v2 = 0LL;\n      *__errno_location() = 36;\n    }\n    return v2;\n  }\n  return *(_BYTE **)(a1 + 24);\n}\n", 
            "funcStartAddr": "0xbb30L", 
            "funcEndAddr": "0xbbb4L", 
            "funcName": "sub_BB30"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 sub_BBC0()\n{\n  char *v1; // rax\n  int v2; // edx\n  int v3; // eax\n  _BYTE *v4; // rsi\n  signed int v5; // ebx\n  bool v6; // cf\n  bool v7; // zf\n  char *v8; // rdi\n  signed __int64 v9; // rcx\n  __uid_t v10; // ebp\n  unsigned int v11; // eax\n  __gid_t v12; // ebp\n  _BYTE *v13; // [rsp+0h] [rbp-28h]\n  unsigned __int64 v14; // [rsp+8h] [rbp-20h]\n\n  v14 = __readfsqword(0x28u);\n  if ( !dword_2171C0 )\n  {\n    v1 = getenv(\"ULPATH_DEBUG\");\n    v2 = 2;\n    if ( v1 )\n    {\n      v3 = strtoul(v1, &v13, 0);\n      v4 = v13;\n      v5 = v3;\n      v6 = 0;\n      v7 = v13 == 0LL;\n      if ( v13 )\n      {\n        v8 = \"all\";\n        v9 = 4LL;\n        do\n        {\n          if ( !v9 )\n            break;\n          v6 = *v4 < (unsigned __int8)*v8;\n          v7 = *v4++ == *v8++;\n          --v9;\n        }\n        while ( v7 );\n        if ( (!v6 && !v7) == v6 )\n        {\n          dword_2171C0 = 0xFFFF;\n          v5 = 0xFFFF;\n          goto LABEL_10;\n        }\n      }\n      dword_2171C0 = v3;\n      v2 = 2;\n      if ( v3 )\n      {\nLABEL_10:\n        v10 = getuid();\n        if ( v10 != geteuid() || (v12 = getgid(), v12 != getegid()) )\n        {\n          dword_2171C0 = v5 | 0x1000000;\n          v11 = getpid();\n          __fprintf_chk(stderr, 1LL, \"%d: %s: don't print memory addresses (SUID executable).\\n\", v11);\n          v2 = dword_2171C0 | 2;\n        }\n        else\n        {\n          v2 = v5 | 2;\n        }\n        goto LABEL_12;\n      }\n    }\nLABEL_12:\n    dword_2171C0 = v2;\n  }\n  return __readfsqword(0x28u) ^ v14;\n}\n", 
            "funcStartAddr": "0xbbc0L", 
            "funcEndAddr": "0xbcecL", 
            "funcName": "sub_BBC0"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_BD00(__int64 a1, const char *a2)\n{\n  char *v2; // rbp\n  char v3; // al\n  signed __int64 result; // rax\n  unsigned int v5; // eax\n\n  if ( *(_DWORD *)a1 >= 0 )\n    __assert_fail(\"pc->dir_fd < 0\", \"lib/path.c\", 0x6Du, \"ul_path_set_prefix\");\n  if ( a2 )\n  {\n    v2 = strdup(a2);\n    if ( !v2 )\n      return 4294967284LL;\n  }\n  else\n  {\n    v2 = 0LL;\n  }\n  free(*(void **)(a1 + 24));\n  v3 = dword_2171C0;\n  *(_QWORD *)(a1 + 24) = v2;\n  result = v3 & 4;\n  if ( (_DWORD)result )\n  {\n    v5 = getpid();\n    __fprintf_chk(stderr, 1LL, \"%d: %s: %8s: \", v5);\n    sub_B8C0(a1, (__int64)\"new prefix: '%s'\", v2);\n    result = 0LL;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0xbd00L", 
            "funcEndAddr": "0xbdbaL", 
            "funcName": "sub_BD00"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_BDE0(int *a1, const char *a2)\n{\n  __int64 v2; // rbx\n  char *v3; // rbp\n  int v4; // edi\n  char v5; // al\n  signed __int64 result; // rax\n  unsigned int v7; // eax\n\n  v2 = (__int64)a1;\n  if ( a2 )\n  {\n    v3 = strdup(a2);\n    if ( !v3 )\n      return 4294967284LL;\n  }\n  else\n  {\n    v3 = 0LL;\n  }\n  v4 = *a1;\n  if ( *(_DWORD *)v2 >= 0 )\n  {\n    close(v4);\n    *(_DWORD *)v2 = -1;\n  }\n  free(*(void **)(v2 + 8));\n  v5 = dword_2171C0;\n  *(_QWORD *)(v2 + 8) = v3;\n  result = v5 & 4;\n  if ( (_DWORD)result )\n  {\n    v7 = getpid();\n    __fprintf_chk(stderr, 1LL, \"%d: %s: %8s: \", v7);\n    sub_B8C0(v2, (__int64)\"new dir: '%s'\", v3);\n    result = 0LL;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0xbde0L", 
            "funcEndAddr": "0xbe8bL", 
            "funcName": "sub_BDE0"
        }, 
        {
            "decompiledFuncCode": "__int64 __usercall sub_BEB0@<rax>(__int64 a1@<rdx>, __int64 a2@<rbx>, __int64 a3@<rdi>, __int64 a4@<rsi>)\n{\n  bool v4; // zf\n  unsigned int v6; // eax\n\n  v4 = (dword_2171C0 & 4) == 0;\n  *(_QWORD *)(a3 + 4128) = a4;\n  *(_QWORD *)(a3 + 4136) = a1;\n  if ( !v4 )\n  {\n    v6 = getpid();\n    __fprintf_chk(stderr, 1LL, \"%d: %s: %8s: \", v6);\n    sub_B8C0(a3, (__int64)\"(re)set dialect\", a2);\n  }\n  return 0LL;\n}\n", 
            "funcStartAddr": "0xbeb0L", 
            "funcEndAddr": "0xbf1bL", 
            "funcName": "sub_BEB0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_BF20(__int64 a1)\n{\n  __int64 result; // rax\n\n  if ( a1 )\n    result = *(_QWORD *)(a1 + 4128);\n  else\n    result = 0LL;\n  return result;\n}\n", 
            "funcStartAddr": "0xbf20L", 
            "funcEndAddr": "0xbf33L", 
            "funcName": "sub_BF20"
        }, 
        {
            "decompiledFuncCode": "_BOOL8 __fastcall sub_BF50(_DWORD *a1)\n{\n  _BOOL8 result; // rax\n  const char *v2; // rdi\n\n  if ( !a1 )\n    __assert_fail(\"pc\", \"lib/path.c\", 0xC9u, \"ul_path_is_accessible\");\n  result = 1LL;\n  if ( *a1 < 0 )\n  {\n    v2 = sub_BB30((__int64)a1);\n    result = 0LL;\n    if ( v2 )\n      result = access(v2, 0) == 0;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0xbf50L", 
            "funcEndAddr": "0xbfb2L", 
            "funcName": "sub_BF50"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_BFC0(__int64 a1)\n{\n  int result; // eax\n  const char *v2; // rbp\n  unsigned int v3; // eax\n\n  if ( !a1 )\n    __assert_fail(\"pc\", \"lib/path.c\", 0xD6u, \"ul_path_get_dirfd\");\n  if ( !*(_QWORD *)(a1 + 8) )\n    __assert_fail(\"pc->dir_path\", \"lib/path.c\", 0xD7u, \"ul_path_get_dirfd\");\n  result = *(_DWORD *)a1;\n  if ( *(_DWORD *)a1 < 0 )\n  {\n    v2 = sub_BB30(a1);\n    if ( v2 )\n    {\n      if ( dword_2171C0 & 4 )\n      {\n        v3 = getpid();\n        __fprintf_chk(stderr, 1LL, \"%d: %s: %8s: \", v3);\n        sub_B8C0(a1, (__int64)\"opening dir: '%s'\", v2);\n      }\n      result = open(v2, 0x80000);\n      *(_DWORD *)a1 = result;\n    }\n    else\n    {\n      result = -*__errno_location();\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0xbfc0L", 
            "funcEndAddr": "0xc0b6L", 
            "funcName": "sub_BFC0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_C0C0(int *a1)\n{\n  int *v1; // rbx\n  int v2; // edi\n  unsigned int v3; // eax\n\n  if ( !a1 )\n    __assert_fail(\"pc\", \"lib/path.c\", 0xE8u, \"ul_path_close_dirfd\");\n  v1 = a1;\n  v2 = *a1;\n  if ( v2 >= 0 )\n  {\n    if ( dword_2171C0 & 4 )\n    {\n      v3 = getpid();\n      __fprintf_chk(stderr, 1LL, \"%d: %s: %8s: \", v3);\n      sub_B8C0((__int64)v1, (__int64)\"closing dir\");\n      close(*v1);\n    }\n    else\n    {\n      close(v2);\n    }\n    *v1 = -1;\n  }\n}\n", 
            "funcStartAddr": "0xc0c0L", 
            "funcEndAddr": "0xc159L", 
            "funcName": "sub_C0C0"
        }, 
        {
            "decompiledFuncCode": "void __usercall sub_C160(void *ptr@<rdi>, __int64 a2@<rbx>)\n{\n  int v2; // eax\n  bool v3; // zf\n  unsigned int v4; // eax\n\n  if ( ptr )\n  {\n    v2 = *((_DWORD *)ptr + 4) - 1;\n    v3 = *((_DWORD *)ptr + 4) == 1;\n    *((_DWORD *)ptr + 4) = v2;\n    if ( v2 < 0 || v3 )\n    {\n      if ( dword_2171C0 & 4 )\n      {\n        v4 = getpid();\n        __fprintf_chk(stderr, 1LL, \"%d: %s: %8s: \", v4);\n        sub_B8C0((__int64)ptr, (__int64)&unk_12784, a2);\n      }\n      if ( *((_QWORD *)ptr + 516) )\n        (*((void (__fastcall **)(void *))ptr + 517))(ptr);\n      sub_C0C0((int *)ptr);\n      free(*((void **)ptr + 1));\n      free(*((void **)ptr + 3));\n      free(ptr);\n    }\n  }\n}\n", 
            "funcStartAddr": "0xc160L", 
            "funcEndAddr": "0xc205L", 
            "funcName": "sub_C160"
        }, 
        {
            "decompiledFuncCode": "_DWORD *sub_C210(__int64 a1, ...)\n{\n  _DWORD *v1; // rbx\n  unsigned int v3; // eax\n  void *v4; // rdi\n  gcc_va_list va; // [rsp+0h] [rbp-E8h]\n  unsigned __int64 v6; // [rsp+18h] [rbp-D0h]\n\n  v6 = __readfsqword(0x28u);\n  v1 = calloc(1uLL, 0x1038uLL);\n  if ( v1 )\n  {\n    if ( dword_2171C0 & 4 )\n    {\n      v3 = getpid();\n      __fprintf_chk(stderr, 1LL, \"%d: %s: %8s: \", v3);\n      sub_B8C0((__int64)v1, (__int64)\"alloc\");\n    }\n    v1[4] = 1;\n    *v1 = -1;\n    if ( a1 )\n    {\n      va_start(va, a1);\n      if ( (signed int)__vasprintf_chk(v1 + 2, 1LL, a1, va) < 0 || !*((_QWORD *)v1 + 1) )\n      {\n        v4 = v1;\n        v1 = 0LL;\n        sub_C160(v4, 0LL);\n      }\n    }\n  }\n  return v1;\n}\n", 
            "funcStartAddr": "0xc210L", 
            "funcEndAddr": "0xc371L", 
            "funcName": "sub_C210"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_C5D0(__int64 a1, int a2, const char *a3)\n{\n  const char *v3; // rbp\n  int v4; // eax\n  unsigned int v5; // ebx\n  const char *v6; // rbp\n  unsigned int v8; // eax\n  unsigned int v9; // eax\n  unsigned int (__fastcall *v10)(__int64, const char *, int *); // rax\n  int fd; // [rsp+4h] [rbp-34h]\n  unsigned __int64 v12; // [rsp+8h] [rbp-30h]\n\n  v3 = a3;\n  v12 = __readfsqword(0x28u);\n  if ( a1 )\n  {\n    v4 = sub_BFC0(a1);\n    v5 = v4;\n    fd = v4;\n    if ( v4 >= 0 )\n    {\n      v6 = &v3[*v3 == 47];\n      v5 = faccessat(v4, v6, a2, 0);\n      if ( v5 )\n      {\n        if ( *__errno_location() == 2 )\n        {\n          v10 = *(unsigned int (__fastcall **)(__int64, const char *, int *))(a1 + 4144);\n          if ( v10 )\n          {\n            if ( !v10(a1, v6, &fd) )\n              v5 = faccessat(fd, v6, a2, 0);\n          }\n        }\n      }\n      if ( dword_2171C0 & 4 )\n      {\n        v9 = getpid();\n        __fprintf_chk(stderr, 1LL, \"%d: %s: %8s: \", v9);\n        sub_B8C0(a1, (__int64)\"access: '%s' [rc=%d]\", v6, v5);\n      }\n    }\n  }\n  else\n  {\n    v5 = access(a3, a2);\n    if ( dword_2171C0 & 4 )\n    {\n      v8 = getpid();\n      __fprintf_chk(stderr, 1LL, \"%d: %s: %8s: \", v8);\n      sub_B9C0((__int64)\"access '%s' [no context, rc=%d]\", v3, v5);\n    }\n  }\n  return v5;\n}\n", 
            "funcStartAddr": "0xc5d0L", 
            "funcEndAddr": "0xc75bL", 
            "funcName": "sub_C5D0"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_C760(__int64 a1, int a2, __int64 a3, ...)\n{\n  const char *v3; // rax\n  __int64 result; // rax\n  gcc_va_list va; // [rsp+0h] [rbp-E8h]\n  unsigned __int64 v6; // [rsp+18h] [rbp-D0h]\n\n  va_start(va, a3);\n  v6 = __readfsqword(0x28u);\n  v3 = (const char *)sub_BAA0(a1, a3, (__int64)va);\n  if ( v3 )\n    result = sub_C5D0(a1, a2, v3);\n  else\n    result = (unsigned int)-*__errno_location();\n  return result;\n}\n", 
            "funcStartAddr": "0xc760L", 
            "funcEndAddr": "0xc840L", 
            "funcName": "sub_C760"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_C840(__int64 a1, struct stat *a2, int a3, const char *a4)\n{\n  const char *v4; // rbp\n  int v5; // er14\n  int v6; // eax\n  unsigned int v7; // ebx\n  unsigned int v9; // eax\n  unsigned int v10; // eax\n  unsigned int (__fastcall *v11)(__int64, const char *, int *); // rax\n  int fildes; // [rsp+4h] [rbp-34h]\n  unsigned __int64 v13; // [rsp+8h] [rbp-30h]\n\n  v4 = a4;\n  v13 = __readfsqword(0x28u);\n  if ( a1 )\n  {\n    v5 = a3;\n    v6 = sub_BFC0(a1);\n    v7 = v6;\n    fildes = v6;\n    if ( v6 >= 0 )\n    {\n      if ( v4 )\n      {\n        v4 += *v4 == 47;\n        v7 = __fxstatat(1, v6, v4, a2, v5);\n        if ( v7 )\n        {\n          if ( *__errno_location() == 2 )\n          {\n            if ( v4 )\n            {\n              v11 = *(unsigned int (__fastcall **)(__int64, const char *, int *))(a1 + 4144);\n              if ( v11 )\n              {\n                if ( !v11(a1, v4, &fildes) )\n                  v7 = __fxstatat(1, fildes, v4, a2, 0);\n              }\n            }\n          }\n        }\n      }\n      else\n      {\n        v7 = __fxstat(1, v6, a2);\n      }\n      if ( dword_2171C0 & 4 )\n      {\n        v10 = getpid();\n        __fprintf_chk(stderr, 1LL, \"%d: %s: %8s: \", v10);\n        sub_B8C0(a1, (__int64)\"stat '%s' [rc=%d]\", v4, v7);\n      }\n    }\n  }\n  else\n  {\n    v7 = -22;\n    if ( a4 )\n      v7 = __xstat(1, a4, a2);\n    if ( dword_2171C0 & 4 )\n    {\n      v9 = getpid();\n      __fprintf_chk(stderr, 1LL, \"%d: %s: %8s: \", v9);\n      sub_B9C0((__int64)\"stat '%s' [no context, rc=%d]\", v4, v7);\n    }\n  }\n  return v7;\n}\n", 
            "funcStartAddr": "0xc840L", 
            "funcEndAddr": "0xca29L", 
            "funcName": "sub_C840"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_CA30(__int64 a1, unsigned int a2, _BYTE *a3)\n{\n  _BYTE *v3; // rbp\n  int v4; // eax\n  signed int v5; // ebx\n  _BYTE *v6; // rbp\n  __int64 result; // rax\n  unsigned int v8; // eax\n  unsigned int (__fastcall *v9)(__int64, _BYTE *, unsigned int *); // rax\n  signed int v10; // er13\n  unsigned int v11; // eax\n  char *v12; // rcx\n  unsigned int v13; // eax\n  unsigned int v14; // [rsp+4h] [rbp-34h]\n  unsigned __int64 v15; // [rsp+8h] [rbp-30h]\n\n  v15 = __readfsqword(0x28u);\n  if ( a3 )\n  {\n    v3 = a3;\n    if ( a1 )\n    {\n      v4 = sub_BFC0(a1);\n      v5 = v4;\n      v14 = v4;\n      if ( v4 < 0 )\n        goto LABEL_6;\n      v6 = &v3[*v3 == 47];\n      v5 = __openat_2((unsigned int)v4, v6, a2);\n      if ( v5 >= 0\n        || *__errno_location() != 2\n        || (v9 = *(unsigned int (__fastcall **)(__int64, _BYTE *, unsigned int *))(a1 + 4144)) == 0LL\n        || v9(a1, v6, &v14) )\n      {\n        if ( !(dword_2171C0 & 4) )\n          goto LABEL_6;\n        v13 = getpid();\n        v10 = v5;\n        __fprintf_chk(stderr, 1LL, \"%d: %s: %8s: \", v13);\n        v12 = \"\";\n      }\n      else\n      {\n        LODWORD(result) = __openat_2(v14, v6, a2);\n        v10 = result;\n        if ( !(dword_2171C0 & 4) )\n          goto LABEL_19;\n        v11 = getpid();\n        __fprintf_chk(stderr, 1LL, \"%d: %s: %8s: \", v11);\n        v12 = \" [redirected]\";\n        if ( v5 == v10 )\n          v12 = \"\";\n      }\n      v5 = v10;\n      sub_B8C0(a1, (__int64)\"opening '%s'%s\", v6, v12);\n    }\n    else\n    {\n      v5 = __open_2(a3);\n      if ( dword_2171C0 & 4 )\n      {\n        v8 = getpid();\n        __fprintf_chk(stderr, 1LL, \"%d: %s: %8s: \", v8);\n        sub_B9C0((__int64)\"opening '%s' [no context]\", v3);\n      }\n    }\n  }\n  else\n  {\n    v5 = -22;\n  }\nLABEL_6:\n  while ( 1 )\n  {\n    result = (unsigned int)v5;\n    if ( __readfsqword(0x28u) == v15 )\n      break;\nLABEL_19:\n    v5 = result;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0xca30L", 
            "funcEndAddr": "0xcc34L", 
            "funcName": "sub_CA30"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_CC40(__int64 a1, unsigned int a2, __int64 a3, __int64 a4)\n{\n  _BYTE *v4; // rax\n  __int64 result; // rax\n\n  v4 = (_BYTE *)sub_BAA0(a1, a3, a4);\n  if ( v4 )\n    result = sub_CA30(a1, a2, v4);\n  else\n    result = (unsigned int)-*__errno_location();\n  return result;\n}\n", 
            "funcStartAddr": "0xcc40L", 
            "funcEndAddr": "0xcc80L", 
            "funcName": "sub_CC40"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_CC80(__int64 a1, unsigned int a2, __int64 a3, ...)\n{\n  gcc_va_list va; // [rsp+0h] [rbp-D8h]\n  unsigned __int64 v5; // [rsp+18h] [rbp-C0h]\n\n  va_start(va, a3);\n  v5 = __readfsqword(0x28u);\n  return sub_CC40(a1, a2, a3, (__int64)va);\n}\n", 
            "funcStartAddr": "0xcc80L", 
            "funcEndAddr": "0xcd2cL", 
            "funcName": "sub_CC80"
        }, 
        {
            "decompiledFuncCode": "FILE *__fastcall sub_CD30(__int64 a1, const char *a2, _BYTE *a3)\n{\n  const char *v3; // rbx\n  char v4; // cl\n  char *v5; // rax\n  unsigned int v6; // esi\n  int v7; // eax\n\n  v3 = a2;\n  if ( a2 )\n  {\n    v4 = *a2;\n    if ( *a2 )\n    {\n      v5 = (char *)a2;\n      v6 = 0;\n      while ( v4 == 114 )\n      {\n        if ( v5[1] != 43 )\n          goto LABEL_8;\n        v6 |= 2u;\n        if ( !++v5 )\n        {\nLABEL_13:\n          v7 = sub_CA30(a1, v6, a3);\n          if ( v7 >= 0 )\n            return fdopen(v7, v3);\n          return 0LL;\n        }\nLABEL_9:\n        v4 = *v5;\n        if ( !*v5 )\n          goto LABEL_13;\n      }\n      switch ( v4 )\n      {\n        case 119:\n          if ( v5[1] == 43 )\n            v6 |= 0x202u;\n          else\n            v6 |= 0x201u;\n          break;\n        case 97:\n          if ( v5[1] == 43 )\n            v6 |= 0x402u;\n          else\n            v6 |= 0x401u;\n          break;\n        case 101:\n          v6 |= 0x80000u;\n          break;\n      }\nLABEL_8:\n      if ( !++v5 )\n        goto LABEL_13;\n      goto LABEL_9;\n    }\n  }\n  v7 = sub_CA30(a1, 0, a3);\n  if ( v7 < 0 )\n    return 0LL;\n  return fdopen(v7, v3);\n}\n", 
            "funcStartAddr": "0xcd30L", 
            "funcEndAddr": "0xcdffL", 
            "funcName": "sub_CD30"
        }, 
        {
            "decompiledFuncCode": "FILE *__fastcall sub_CE00(__int64 a1, const char *a2, __int64 a3, __int64 a4)\n{\n  _BYTE *v4; // rax\n  FILE *result; // rax\n\n  v4 = (_BYTE *)sub_BAA0(a1, a3, a4);\n  if ( v4 )\n    result = sub_CD30(a1, a2, v4);\n  else\n    result = 0LL;\n  return result;\n}\n", 
            "funcStartAddr": "0xce00L", 
            "funcEndAddr": "0xce39L", 
            "funcName": "sub_CE00"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_CE40(__int64 a1, cpu_set_t **a2, unsigned int a3, int a4, __int64 a5, __int64 a6)\n{\n  unsigned int v6; // ebx\n  int v7; // er14\n  void *v8; // rsp\n  FILE *v9; // rax\n  FILE *v10; // r13\n  size_t v11; // rax\n  cpu_set_t *v12; // rax\n  unsigned int v13; // er14\n  int v15; // er14\n  __int64 v16; // [rsp+0h] [rbp-50h]\n  int v17; // [rsp+8h] [rbp-48h]\n  int v18; // [rsp+Ch] [rbp-44h]\n  __int64 v19; // [rsp+10h] [rbp-40h]\n  unsigned __int64 v20; // [rsp+18h] [rbp-38h]\n\n  v6 = a3;\n  v7 = 7 * a3;\n  *a2 = 0LL;\n  v20 = __readfsqword(0x28u);\n  v18 = a4;\n  v8 = alloca((signed int)(7 * a3));\n  v9 = sub_CE00(a1, \"re\", a5, a6);\n  if ( !v9 )\n    return (unsigned int)-*__errno_location();\n  v10 = v9;\n  if ( fgets((char *)&v16, v7, v9) )\n  {\n    fclose(v10);\n  }\n  else\n  {\n    v17 = *__errno_location();\n    v15 = v17;\n    fclose(v10);\n    v13 = -v15;\n    if ( v17 )\n      return v13;\n  }\n  v11 = strlen((const char *)&v16);\n  if ( *((_BYTE *)&v16 + v11 - 1) == 10 )\n    *((_BYTE *)&v16 + v11 - 1) = 0;\n  v12 = (cpu_set_t *)sub_104D0(v6, &v19, 0LL);\n  *a2 = v12;\n  if ( !v12 )\n    return (unsigned int)-12;\n  if ( v18 )\n  {\n    if ( !(unsigned int)sub_10B30((char *)&v16, v12) )\n      return 0;\nLABEL_15:\n    v13 = -22;\n    j____sched_cpufree(*a2);\n    return v13;\n  }\n  if ( (unsigned int)sub_109A0(&v16, v12, v19) )\n    goto LABEL_15;\n  return 0;\n}\n", 
            "funcStartAddr": "0xce40L", 
            "funcEndAddr": "0xcfb3L", 
            "funcName": "sub_CE40"
        }, 
        {
            "decompiledFuncCode": "FILE *sub_CFC0(__int64 a1, const char *a2, __int64 a3, ...)\n{\n  gcc_va_list va; // [rsp+0h] [rbp-D8h]\n  unsigned __int64 v5; // [rsp+18h] [rbp-C0h]\n\n  va_start(va, a3);\n  v5 = __readfsqword(0x28u);\n  return sub_CE00(a1, a2, a3, (__int64)va);\n}\n", 
            "funcStartAddr": "0xcfc0L", 
            "funcEndAddr": "0xd06cL", 
            "funcName": "sub_CFC0"
        }, 
        {
            "decompiledFuncCode": "DIR *__fastcall sub_D070(__int64 a1, _BYTE *a2)\n{\n  int v2; // er12\n  DIR *v3; // rax\n  DIR *v4; // rbp\n  int v6; // eax\n  unsigned int v7; // eax\n\n  if ( a2 )\n  {\n    v2 = sub_CA30(a1, 0x80000u, a2);\n  }\n  else\n  {\n    if ( !*(_QWORD *)(a1 + 8) )\n      return 0LL;\n    if ( dword_2171C0 & 4 )\n    {\n      v7 = getpid();\n      __fprintf_chk(stderr, 1LL, \"%d: %s: %8s: \", v7);\n      sub_B8C0(a1, (__int64)\"duplicate dir path\");\n    }\n    v6 = sub_BFC0(a1);\n    if ( v6 < 0 )\n      return 0LL;\n    v2 = sub_FE80(v6);\n  }\n  if ( v2 < 0 )\n    return 0LL;\n  v3 = fdopendir(v2);\n  v4 = v3;\n  if ( !v3 )\n  {\n    close(v2);\n    return v4;\n  }\n  if ( a2 )\n    return v4;\n  rewinddir(v3);\n  return v4;\n}\n", 
            "funcStartAddr": "0xd070L", 
            "funcEndAddr": "0xd16dL", 
            "funcName": "sub_D070"
        }, 
        {
            "decompiledFuncCode": "DIR *__fastcall sub_D170(__int64 a1, __int64 a2, __int64 a3)\n{\n  _BYTE *v3; // rax\n  DIR *result; // rax\n\n  v3 = (_BYTE *)sub_BAA0(a1, a2, a3);\n  if ( v3 )\n    result = sub_D070(a1, v3);\n  else\n    result = 0LL;\n  return result;\n}\n", 
            "funcStartAddr": "0xd170L", 
            "funcEndAddr": "0xd194L", 
            "funcName": "sub_D170"
        }, 
        {
            "decompiledFuncCode": "DIR *sub_D1A0(__int64 a1, __int64 a2, ...)\n{\n  gcc_va_list va; // [rsp+0h] [rbp-D8h]\n  unsigned __int64 v4; // [rsp+18h] [rbp-C0h]\n\n  va_start(va, a2);\n  v4 = __readfsqword(0x28u);\n  return sub_D170(a1, a2, (__int64)va);\n}\n", 
            "funcStartAddr": "0xd1a0L", 
            "funcEndAddr": "0xd251L", 
            "funcName": "sub_D1A0"
        }, 
        {
            "decompiledFuncCode": "ssize_t __fastcall sub_D260(__int64 a1, char *a2, __int64 a3, _BYTE *a4)\n{\n  __int64 v4; // rbp\n  _BYTE *v5; // rbx\n  ssize_t result; // rax\n  const char *v7; // rax\n\n  v4 = a3;\n  if ( a4 )\n  {\n    v5 = a4;\n    LODWORD(result) = sub_BFC0(a1);\n    if ( (signed int)result < 0 )\n      return (signed int)result;\n    result = readlinkat(result, &v5[*v5 == 47], a2, v4 - 1);\n  }\n  else\n  {\n    v7 = sub_BB30(a1);\n    if ( !v7 )\n      return -*__errno_location();\n    result = readlink(v7, a2, v4 - 1);\n  }\n  if ( result >= 0 )\n    a2[result] = 0;\n  return result;\n}\n", 
            "funcStartAddr": "0xd260L", 
            "funcEndAddr": "0xd2edL", 
            "funcName": "sub_D260"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_D3E0(__int64 a1, char *a2, size_t a3, _BYTE *a4)\n{\n  char *v4; // r12\n  size_t v5; // rbx\n  _BYTE *v6; // rbp\n  int v7; // er13\n  int *v8; // rax\n  int *v9; // r14\n  __int64 v10; // rbp\n  signed int v11; // er15\n  ssize_t v12; // rax\n  int v13; // edx\n  int requested_time; // ST08_4\n  unsigned int v16; // eax\n  __int64 v17; // [rsp+10h] [rbp-58h]\n  __int64 v18; // [rsp+18h] [rbp-50h]\n  unsigned __int64 v19; // [rsp+28h] [rbp-40h]\n\n  v4 = a2;\n  v5 = a3;\n  v6 = a4;\n  v19 = __readfsqword(0x28u);\n  v7 = sub_CA30(a1, 0x80000u, a4);\n  v8 = __errno_location();\n  v9 = v8;\n  if ( v7 < 0 )\n  {\n    LODWORD(v10) = -*v8;\n  }\n  else\n  {\n    if ( dword_2171C0 & 4 )\n    {\n      v16 = getpid();\n      __fprintf_chk(stderr, 1LL, \"%d: %s: %8s: \", v16);\n      sub_B9C0((__int64)\" reading '%s'\", v6);\n    }\n    memset(a2, 0, v5);\n    v10 = 0LL;\n    v11 = 0;\n    if ( v5 )\n    {\n      while ( 1 )\n      {\n        while ( 1 )\n        {\n          v12 = read(v7, v4, v5);\n          if ( v12 < 0 )\n            break;\n          if ( !v12 || (v4 += v12, v10 += v12, (v5 -= v12) == 0) )\n          {\n            v13 = *v9;\n            goto LABEL_14;\n          }\n          v11 = 0;\n        }\n        v13 = *v9;\n        if ( *v9 != 11 && v13 != 4 )\n          break;\n        if ( v11 > 4 )\n          break;\n        ++v11;\n        v17 = 0LL;\n        v18 = 250000000LL;\n        nanosleep((const struct timespec *)&v17, 0LL);\n      }\n      if ( !v10 )\n        LODWORD(v10) = -1;\n    }\n    else\n    {\n      v13 = *v9;\n      LODWORD(v10) = 0;\n    }\nLABEL_14:\n    requested_time = v13;\n    close(v7);\n    *v9 = requested_time;\n  }\n  return (unsigned int)v10;\n}\n", 
            "funcStartAddr": "0xd3e0L", 
            "funcEndAddr": "0xd59fL", 
            "funcName": "sub_D3E0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_D5A0(__int64 a1, char *a2, size_t a3, __int64 a4, __int64 a5)\n{\n  size_t v5; // r12\n  _BYTE *v6; // rax\n  __int64 result; // rax\n\n  v5 = a3;\n  v6 = (_BYTE *)sub_BAA0(a1, a4, a5);\n  if ( v6 )\n    result = sub_D3E0(a1, a2, v5, v6);\n  else\n    result = (unsigned int)-*__errno_location();\n  return result;\n}\n", 
            "funcStartAddr": "0xd5a0L", 
            "funcEndAddr": "0xd5e6L", 
            "funcName": "sub_D5A0"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_D5F0(__int64 a1, char *a2, size_t a3, __int64 a4, ...)\n{\n  gcc_va_list va; // [rsp+0h] [rbp-D8h]\n  unsigned __int64 v6; // [rsp+18h] [rbp-C0h]\n\n  va_start(va, a4);\n  v6 = __readfsqword(0x28u);\n  return sub_D5A0(a1, a2, a3, a4, (__int64)va);\n}\n", 
            "funcStartAddr": "0xd5f0L", 
            "funcEndAddr": "0xd697L", 
            "funcName": "sub_D5F0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_D6A0(__int64 a1, char **a2, _BYTE *a3)\n{\n  __int64 v3; // rax\n  unsigned int v4; // ebx\n  char *v5; // rax\n  char v7; // [rsp+1h] [rbp-2029h]\n  char v8[8200]; // [rsp+2h] [rbp-2028h]\n  unsigned __int64 v9; // [rsp+200Ah] [rbp-20h]\n\n  v9 = __readfsqword(0x28u);\n  if ( !a2 )\n    return (unsigned int)-22;\n  *a2 = 0LL;\n  LODWORD(v3) = sub_D3E0(a1, v8, 0x1FFFuLL, a3);\n  v4 = v3;\n  if ( (signed int)v3 >= 0 && (_DWORD)v3 )\n  {\n    v3 = (signed int)v3;\n    if ( *(&v7 + (signed int)v3) == 10 )\n    {\n      v4 = v3 - 1;\n      if ( (_DWORD)v3 == 1 )\n        return v4;\n      v3 = (signed int)v4;\n    }\n    v8[v3] = 0;\n    v5 = strdup(v8);\n    *a2 = v5;\n    if ( !v5 )\n      v4 = -12;\n  }\n  return v4;\n}\n", 
            "funcStartAddr": "0xd6a0L", 
            "funcEndAddr": "0xd74cL", 
            "funcName": "sub_D6A0"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_D750(__int64 a1, char **a2, __int64 a3, ...)\n{\n  _BYTE *v3; // rax\n  __int64 result; // rax\n  gcc_va_list va; // [rsp+0h] [rbp-E8h]\n  unsigned __int64 v6; // [rsp+18h] [rbp-D0h]\n\n  va_start(va, a3);\n  v6 = __readfsqword(0x28u);\n  v3 = (_BYTE *)sub_BAA0(a1, a3, (__int64)va);\n  if ( v3 )\n    result = sub_D6A0(a1, a2, v3);\n  else\n    result = (unsigned int)-*__errno_location();\n  return result;\n}\n", 
            "funcStartAddr": "0xd750L", 
            "funcEndAddr": "0xd830L", 
            "funcName": "sub_D750"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_D830(__int64 a1, char *a2, __int64 a3, _BYTE *a4)\n{\n  __int64 result; // rax\n  char *v5; // rdx\n\n  result = sub_D3E0(a1, a2, a3 - 1, a4);\n  if ( (_DWORD)result )\n  {\n    if ( (signed int)result > 0 )\n    {\n      v5 = &a2[(signed int)result - 1];\n      if ( *v5 == 10 )\n      {\n        result = (unsigned int)(result - 1);\n        a2[(signed int)result] = 0;\n      }\n      else\n      {\n        *v5 = 0;\n      }\n    }\n  }\n  else\n  {\n    *a2 = 0;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0xd830L", 
            "funcEndAddr": "0xd874L", 
            "funcName": "sub_D830"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_D960(__int64 a1, _BYTE *a2, const char *a3, ...)\n{\n  const char *v3; // r12\n  FILE *v4; // rbx\n  unsigned int v5; // ebp\n  unsigned int v7; // eax\n  gcc_va_list va; // [rsp+0h] [rbp-E8h]\n  unsigned __int64 v9; // [rsp+18h] [rbp-D0h]\n\n  v3 = a3;\n  v9 = __readfsqword(0x28u);\n  v4 = sub_CD30(a1, \"re\", a2);\n  if ( v4 )\n  {\n    if ( dword_2171C0 & 4 )\n    {\n      v7 = getpid();\n      __fprintf_chk(stderr, 1LL, \"%d: %s: %8s: \", v7);\n      sub_B9C0((__int64)\" fscanf [%s] '%s'\", v3, a2);\n    }\n    va_start(va, a3);\n    v5 = vfscanf(v4, v3, va);\n    fclose(v4);\n  }\n  else\n  {\n    v5 = -22;\n  }\n  return v5;\n}\n", 
            "funcStartAddr": "0xd960L", 
            "funcEndAddr": "0xdaa7L", 
            "funcName": "sub_D960"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_DAB0(__int64 a1, __int64 a2, __int64 a3, const char *a4, ...)\n{\n  const char *v4; // rbp\n  FILE *v5; // rax\n  FILE *v6; // rbx\n  unsigned int v7; // ebp\n  gcc_va_list va; // [rsp+0h] [rbp-E8h]\n  unsigned __int64 v10; // [rsp+18h] [rbp-D0h]\n\n  v4 = a4;\n  v10 = __readfsqword(0x28u);\n  v5 = sub_CE00(a1, \"re\", a2, a3);\n  v6 = v5;\n  if ( v5 )\n  {\n    va_start(va, a4);\n    v7 = vfscanf(v5, v4, va);\n    fclose(v6);\n  }\n  else\n  {\n    v7 = -22;\n  }\n  return v7;\n}\n", 
            "funcStartAddr": "0xdab0L", 
            "funcEndAddr": "0xdb94L", 
            "funcName": "sub_DAB0"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_DBA0(__int64 a1, _QWORD *a2, _BYTE *a3)\n{\n  signed __int64 result; // rax\n  __int64 v4; // [rsp+0h] [rbp-18h]\n  unsigned __int64 v5; // [rsp+8h] [rbp-10h]\n\n  v5 = __readfsqword(0x28u);\n  v4 = 0LL;\n  if ( (unsigned int)sub_D960(a1, a3, \"%ld\", &v4, 0LL) != 1 )\n    return 0xFFFFFFFFLL;\n  result = 0LL;\n  if ( a2 )\n    *a2 = v4;\n  return result;\n}\n", 
            "funcStartAddr": "0xdba0L", 
            "funcEndAddr": "0xdc0cL", 
            "funcName": "sub_DBA0"
        }, 
        {
            "decompiledFuncCode": "signed __int64 sub_DC10(__int64 a1, _QWORD *a2, __int64 a3, ...)\n{\n  _BYTE *v3; // rax\n  signed __int64 result; // rax\n  gcc_va_list va; // [rsp+0h] [rbp-E8h]\n  unsigned __int64 v6; // [rsp+18h] [rbp-D0h]\n\n  va_start(va, a3);\n  v6 = __readfsqword(0x28u);\n  v3 = (_BYTE *)sub_BAA0(a1, a3, (__int64)va);\n  if ( v3 )\n    result = sub_DBA0(a1, a2, v3);\n  else\n    result = (unsigned int)-*__errno_location();\n  return result;\n}\n", 
            "funcStartAddr": "0xdc10L", 
            "funcEndAddr": "0xdcf0L", 
            "funcName": "sub_DC10"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_DCF0(__int64 a1, _QWORD *a2, _BYTE *a3)\n{\n  signed __int64 result; // rax\n  __int64 v4; // [rsp+0h] [rbp-18h]\n  unsigned __int64 v5; // [rsp+8h] [rbp-10h]\n\n  v5 = __readfsqword(0x28u);\n  v4 = 0LL;\n  if ( (unsigned int)sub_D960(a1, a3, \"%lu\", &v4, 0LL) != 1 )\n    return 0xFFFFFFFFLL;\n  result = 0LL;\n  if ( a2 )\n    *a2 = v4;\n  return result;\n}\n", 
            "funcStartAddr": "0xdcf0L", 
            "funcEndAddr": "0xdd5cL", 
            "funcName": "sub_DCF0"
        }, 
        {
            "decompiledFuncCode": "signed __int64 sub_DD60(__int64 a1, _QWORD *a2, __int64 a3, ...)\n{\n  _BYTE *v3; // rax\n  signed __int64 result; // rax\n  gcc_va_list va; // [rsp+0h] [rbp-E8h]\n  unsigned __int64 v6; // [rsp+18h] [rbp-D0h]\n\n  va_start(va, a3);\n  v6 = __readfsqword(0x28u);\n  v3 = (_BYTE *)sub_BAA0(a1, a3, (__int64)va);\n  if ( v3 )\n    result = sub_DCF0(a1, a2, v3);\n  else\n    result = (unsigned int)-*__errno_location();\n  return result;\n}\n", 
            "funcStartAddr": "0xdd60L", 
            "funcEndAddr": "0xde40L", 
            "funcName": "sub_DD60"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_DE40(__int64 a1, _DWORD *a2, _BYTE *a3)\n{\n  signed __int64 result; // rax\n  int v4; // [rsp+4h] [rbp-14h]\n  unsigned __int64 v5; // [rsp+8h] [rbp-10h]\n\n  v5 = __readfsqword(0x28u);\n  v4 = 0;\n  if ( (unsigned int)sub_D960(a1, a3, \"%d\", &v4) != 1 )\n    return 0xFFFFFFFFLL;\n  result = 0LL;\n  if ( a2 )\n    *a2 = v4;\n  return result;\n}\n", 
            "funcStartAddr": "0xde40L", 
            "funcEndAddr": "0xdeacL", 
            "funcName": "sub_DE40"
        }, 
        {
            "decompiledFuncCode": "signed __int64 sub_DEB0(__int64 a1, _DWORD *a2, __int64 a3, ...)\n{\n  _BYTE *v3; // rax\n  signed __int64 result; // rax\n  gcc_va_list va; // [rsp+0h] [rbp-E8h]\n  unsigned __int64 v6; // [rsp+18h] [rbp-D0h]\n\n  va_start(va, a3);\n  v6 = __readfsqword(0x28u);\n  v3 = (_BYTE *)sub_BAA0(a1, a3, (__int64)va);\n  if ( v3 )\n    result = sub_DE40(a1, a2, v3);\n  else\n    result = (unsigned int)-*__errno_location();\n  return result;\n}\n", 
            "funcStartAddr": "0xdeb0L", 
            "funcEndAddr": "0xdf90L", 
            "funcName": "sub_DEB0"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_DF90(__int64 a1, _DWORD *a2, _BYTE *a3)\n{\n  signed __int64 result; // rax\n  int v4; // [rsp+4h] [rbp-14h]\n  unsigned __int64 v5; // [rsp+8h] [rbp-10h]\n\n  v5 = __readfsqword(0x28u);\n  v4 = 0;\n  if ( (unsigned int)sub_D960(a1, a3, \"%u\", &v4) != 1 )\n    return 0xFFFFFFFFLL;\n  result = 0LL;\n  if ( a2 )\n    *a2 = v4;\n  return result;\n}\n", 
            "funcStartAddr": "0xdf90L", 
            "funcEndAddr": "0xdffcL", 
            "funcName": "sub_DF90"
        }, 
        {
            "decompiledFuncCode": "signed __int64 sub_E000(__int64 a1, _DWORD *a2, __int64 a3, ...)\n{\n  _BYTE *v3; // rax\n  signed __int64 result; // rax\n  gcc_va_list va; // [rsp+0h] [rbp-E8h]\n  unsigned __int64 v6; // [rsp+18h] [rbp-D0h]\n\n  va_start(va, a3);\n  v6 = __readfsqword(0x28u);\n  v3 = (_BYTE *)sub_BAA0(a1, a3, (__int64)va);\n  if ( v3 )\n    result = sub_DF90(a1, a2, v3);\n  else\n    result = (unsigned int)-*__errno_location();\n  return result;\n}\n", 
            "funcStartAddr": "0xe000L", 
            "funcEndAddr": "0xe0e0L", 
            "funcName": "sub_E000"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_E0E0(__int64 a1, unsigned __int64 *a2, _BYTE *a3)\n{\n  signed __int64 result; // rax\n  __int64 v4; // [rsp+0h] [rbp-18h]\n  unsigned __int64 v5; // [rsp+8h] [rbp-10h]\n\n  v5 = __readfsqword(0x28u);\n  v4 = 0LL;\n  if ( (unsigned int)sub_D960(a1, a3, \"%d:%d\", &v4, (char *)&v4 + 4, 0LL) != 2 )\n    return 0xFFFFFFFFLL;\n  result = 0LL;\n  if ( a2 )\n    *a2 = BYTE4(v4) | ((_DWORD)v4 << 8) & 0xFFF00 | ((unsigned __int64)(unsigned int)v4 << 32) & 0xFFFFF00000000000LL | ((unsigned __int64)HIDWORD(v4) << 12) & 0xFFFFFF00000LL;\n  return result;\n}\n", 
            "funcStartAddr": "0xe0e0L", 
            "funcEndAddr": "0xe194L", 
            "funcName": "sub_E0E0"
        }, 
        {
            "decompiledFuncCode": "signed __int64 sub_E1A0(__int64 a1, unsigned __int64 *a2, __int64 a3, ...)\n{\n  _BYTE *v3; // rax\n  signed __int64 result; // rax\n  gcc_va_list va; // [rsp+0h] [rbp-E8h]\n  unsigned __int64 v6; // [rsp+18h] [rbp-D0h]\n\n  va_start(va, a3);\n  v6 = __readfsqword(0x28u);\n  v3 = (_BYTE *)sub_BAA0(a1, a3, (__int64)va);\n  if ( v3 )\n    result = sub_E0E0(a1, a2, v3);\n  else\n    result = (unsigned int)-*__errno_location();\n  return result;\n}\n", 
            "funcStartAddr": "0xe1a0L", 
            "funcEndAddr": "0xe280L", 
            "funcName": "sub_E1A0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_E280(__int64 a1, const char *a2, _BYTE *a3)\n{\n  const char *v3; // r12\n  int v4; // er13\n  int *v5; // rax\n  int *v6; // rbp\n  size_t v7; // rbx\n  ssize_t v8; // rax\n  int v9; // er15\n  __int64 v11; // [rsp+0h] [rbp-58h]\n  __int64 v12; // [rsp+8h] [rbp-50h]\n  unsigned __int64 v13; // [rsp+18h] [rbp-40h]\n\n  v3 = a2;\n  v13 = __readfsqword(0x28u);\n  v4 = sub_CA30(a1, 0x80001u, a3);\n  v5 = __errno_location();\n  v6 = v5;\n  if ( v4 < 0 )\n  {\n    LODWORD(v7) = -*v5;\n  }\n  else\n  {\n    v7 = strlen(a2);\n    if ( v7 )\n    {\n      while ( 1 )\n      {\n        while ( 1 )\n        {\n          *v6 = 0;\n          v8 = write(v4, v3, v7);\n          v9 = *v6;\n          if ( v8 > 0 )\n            break;\n          if ( v9 != 4 && v9 != 11 )\n          {\n            LODWORD(v7) = -1;\n            goto LABEL_10;\n          }\n          if ( v9 == 11 )\n            goto LABEL_6;\n        }\n        v7 -= v8;\n        if ( !v7 )\n        {\n          LODWORD(v7) = 0;\n          if ( v9 != 11 )\n            goto LABEL_10;\n          v11 = 0LL;\n          v12 = 250000000LL;\n          nanosleep((const struct timespec *)&v11, 0LL);\n          break;\n        }\n        v3 += v8;\n        if ( v9 == 11 )\n        {\nLABEL_6:\n          v11 = 0LL;\n          v12 = 250000000LL;\n          nanosleep((const struct timespec *)&v11, 0LL);\n        }\n      }\n    }\n    v9 = *v6;\nLABEL_10:\n    close(v4);\n    *v6 = v9;\n  }\n  return (unsigned int)v7;\n}\n", 
            "funcStartAddr": "0xe280L", 
            "funcEndAddr": "0xe3bcL", 
            "funcName": "sub_E280"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_E3C0(__int64 a1, const char *a2, __int64 a3, ...)\n{\n  _BYTE *v3; // rax\n  __int64 result; // rax\n  gcc_va_list va; // [rsp+0h] [rbp-E8h]\n  unsigned __int64 v6; // [rsp+18h] [rbp-D0h]\n\n  va_start(va, a3);\n  v6 = __readfsqword(0x28u);\n  v3 = (_BYTE *)sub_BAA0(a1, a3, (__int64)va);\n  if ( v3 )\n    result = sub_E280(a1, a2, v3);\n  else\n    result = (unsigned int)-*__errno_location();\n  return result;\n}\n", 
            "funcStartAddr": "0xe3c0L", 
            "funcEndAddr": "0xe4a0L", 
            "funcName": "sub_E3C0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_E600(__int64 a1, __int64 a2, _BYTE *a3)\n{\n  int v3; // er13\n  int *v4; // rax\n  int *v5; // rbp\n  char *v6; // r12\n  size_t v7; // rbx\n  ssize_t v8; // rax\n  int v9; // er15\n  unsigned int v10; // ebx\n  __int64 v12; // [rsp+0h] [rbp-78h]\n  __int64 v13; // [rsp+8h] [rbp-70h]\n  char buf; // [rsp+10h] [rbp-68h]\n  unsigned __int64 v15; // [rsp+38h] [rbp-40h]\n\n  v15 = __readfsqword(0x28u);\n  v3 = sub_CA30(a1, 0x80001u, a3);\n  v4 = __errno_location();\n  v5 = v4;\n  if ( v3 < 0 )\n    return (unsigned int)-*v4;\n  v6 = &buf;\n  v7 = (signed int)__snprintf_chk(&buf, 37LL, 1LL, 37LL, \"%lu\", a2);\n  while ( 1 )\n  {\n    while ( 1 )\n    {\n      *v5 = 0;\n      v8 = write(v3, v6, v7);\n      v9 = *v5;\n      if ( v8 > 0 )\n        break;\n      if ( v9 != 4 && v9 != 11 )\n      {\n        v10 = -1;\n        goto LABEL_7;\n      }\n      if ( v9 == 11 )\n      {\nLABEL_12:\n        v12 = 0LL;\n        v13 = 250000000LL;\n        nanosleep((const struct timespec *)&v12, 0LL);\n      }\n    }\n    v7 -= v8;\n    if ( !v7 )\n      break;\n    v6 += v8;\n    if ( v9 == 11 )\n      goto LABEL_12;\n  }\n  v10 = 0;\n  if ( v9 == 11 )\n  {\n    v12 = 0LL;\n    v13 = 250000000LL;\n    nanosleep((const struct timespec *)&v12, 0LL);\n    v9 = *v5;\n  }\nLABEL_7:\n  close(v3);\n  *v5 = v9;\n  return v10;\n}\n", 
            "funcStartAddr": "0xe600L", 
            "funcEndAddr": "0xe75fL", 
            "funcName": "sub_E600"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_E760(__int64 a1, __int64 a2, __int64 a3, ...)\n{\n  _BYTE *v3; // rax\n  __int64 result; // rax\n  gcc_va_list va; // [rsp+0h] [rbp-E8h]\n  unsigned __int64 v6; // [rsp+18h] [rbp-D0h]\n\n  va_start(va, a3);\n  v6 = __readfsqword(0x28u);\n  v3 = (_BYTE *)sub_BAA0(a1, a3, (__int64)va);\n  if ( v3 )\n    result = sub_E600(a1, a2, v3);\n  else\n    result = (unsigned int)-*__errno_location();\n  return result;\n}\n", 
            "funcStartAddr": "0xe760L", 
            "funcEndAddr": "0xe840L", 
            "funcName": "sub_E760"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_E840(__int64 a1, _BYTE *a2)\n{\n  unsigned int v2; // ebx\n  DIR *v3; // rax\n  DIR *v4; // rbp\n  struct dirent *v5; // rax\n  bool v6; // cf\n  bool v7; // zf\n  signed __int64 v8; // rax\n  signed __int64 v9; // rcx\n  char *v10; // rdi\n  _BYTE *v11; // rsi\n  char v12; // dl\n  bool v13; // cf\n  bool v14; // zf\n  _BYTE *v15; // rsi\n  signed __int64 v16; // rcx\n  const char *v17; // rdi\n\n  v2 = 0;\n  v3 = sub_D070(a1, a2);\n  if ( v3 )\n  {\n    v4 = v3;\n    while ( 1 )\n    {\n      v5 = readdir(v4);\n      if ( !v5 )\n        break;\n      while ( 1 )\n      {\n        v6 = __CFADD__(v5, 19LL);\n        v7 = v5->d_name == 0LL;\n        v8 = (signed __int64)v5->d_name;\n        v9 = 2LL;\n        v10 = \".\";\n        v11 = (_BYTE *)v8;\n        do\n        {\n          if ( !v9 )\n            break;\n          v6 = *v11 < (unsigned __int8)*v10;\n          v7 = *v11++ == *v10++;\n          --v9;\n        }\n        while ( v7 );\n        v12 = (!v6 && !v7) - v6;\n        v13 = 0;\n        v14 = v12 == 0;\n        if ( !v12 )\n          break;\n        v15 = (_BYTE *)v8;\n        v16 = 3LL;\n        v17 = \"..\";\n        do\n        {\n          if ( !v16 )\n            break;\n          v13 = *v15 < (const unsigned __int8)*v17;\n          v14 = *v15++ == *v17++;\n          --v16;\n        }\n        while ( v14 );\n        v2 -= ((unsigned __int8)((!v13 && !v14) - v13) < 1u) - 1;\n        v5 = readdir(v4);\n        if ( !v5 )\n          goto LABEL_12;\n      }\n    }\nLABEL_12:\n    closedir(v4);\n  }\n  return v2;\n}\n", 
            "funcStartAddr": "0xe840L", 
            "funcEndAddr": "0xe8d1L", 
            "funcName": "sub_E840"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_E8E0(__int64 a1, __int64 a2, ...)\n{\n  _BYTE *v2; // rax\n  __int64 result; // rax\n  gcc_va_list va; // [rsp+0h] [rbp-D8h]\n  unsigned __int64 v5; // [rsp+18h] [rbp-C0h]\n\n  va_start(va, a2);\n  v5 = __readfsqword(0x28u);\n  v2 = (_BYTE *)sub_BAA0(a1, a2, (__int64)va);\n  if ( v2 )\n    result = sub_E840(a1, v2);\n  else\n    result = (unsigned int)-*__errno_location();\n  return result;\n}\n", 
            "funcStartAddr": "0xe8e0L", 
            "funcEndAddr": "0xe9b8L", 
            "funcName": "sub_E8E0"
        }, 
        {
            "decompiledFuncCode": "FILE *__fastcall sub_EAB0(__int64 a1, const char *a2, const char *a3)\n{\n  const char *v3; // rbp\n  const char *v4; // ST00_8\n  __int64 v6; // [rsp+0h] [rbp-1028h]\n  unsigned __int64 v7; // [rsp+1008h] [rbp-20h]\n\n  v7 = __readfsqword(0x28u);\n  if ( !a2 )\n    return 0LL;\n  v3 = a3;\n  if ( !a1 )\n    return fopen(a2, a3);\n  v4 = &a2[*a2 == 47];\n  __snprintf_chk(&v6, 4096LL, 1LL, 4096LL, \"%s/%s\", a1);\n  return fopen((const char *)&v6, v3);\n}\n", 
            "funcStartAddr": "0xeab0L", 
            "funcEndAddr": "0xeb59L", 
            "funcName": "sub_EAB0"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_EB60(__int64 a1, cpu_set_t **a2, unsigned int a3, __int64 a4, ...)\n{\n  gcc_va_list va; // [rsp+0h] [rbp-D8h]\n  unsigned __int64 v6; // [rsp+18h] [rbp-C0h]\n\n  va_start(va, a4);\n  v6 = __readfsqword(0x28u);\n  return sub_CE40(a1, a2, a3, 0, a4, (__int64)va);\n}\n", 
            "funcStartAddr": "0xeb60L", 
            "funcEndAddr": "0xec0cL", 
            "funcName": "sub_EB60"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_EC10(__int64 a1, cpu_set_t **a2, unsigned int a3, __int64 a4, ...)\n{\n  gcc_va_list va; // [rsp+0h] [rbp-D8h]\n  unsigned __int64 v6; // [rsp+18h] [rbp-C0h]\n\n  va_start(va, a4);\n  v6 = __readfsqword(0x28u);\n  return sub_CE40(a1, a2, a3, 1, a4, (__int64)va);\n}\n", 
            "funcStartAddr": "0xec10L", 
            "funcEndAddr": "0xecbfL", 
            "funcName": "sub_EC10"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 sub_ECC0(__int64 a1, __int64 a2, ...)\n{\n  gcc_va_list va; // [rsp+0h] [rbp-E8h]\n  unsigned __int64 v4; // [rsp+18h] [rbp-D0h]\n\n  v4 = __readfsqword(0x28u);\n  if ( a1 && !(dword_2171C4 & 0x1000000) )\n    __fprintf_chk(stderr, 1LL, \"[%p]: \", a1);\n  va_start(va, a2);\n  __vfprintf_chk(stderr, 1LL, a2, va);\n  fputc(10, stderr);\n  return __readfsqword(0x28u) ^ v4;\n}\n", 
            "funcStartAddr": "0xecc0L", 
            "funcEndAddr": "0xedc0L", 
            "funcName": "sub_ECC0"
        }, 
        {
            "decompiledFuncCode": "void __usercall sub_EDC0(__int64 a1@<rbx>, __int64 a2@<rdi>)\n{\n  void *v2; // rax\n  unsigned int v3; // eax\n  __int64 v4; // [rsp-8h] [rbp-8h]\n\n  if ( a2 )\n  {\n    v4 = a1;\n    if ( dword_2171C4 & 4 )\n    {\n      v3 = getpid();\n      __fprintf_chk(stderr, 1LL, \"%d: %s: %8s: \", v3);\n      sub_ECC0(a2, (__int64)\"deinit\", a1);\n      v2 = (void *)sub_BF20(a2);\n      if ( v2 )\n        goto LABEL_4;\n    }\n    else\n    {\n      v2 = (void *)sub_BF20(a2);\n      if ( v2 )\n      {\nLABEL_4:\n        free(v2);\n        sub_BEB0(0LL, v4, a2, 0LL);\n        return;\n      }\n    }\n  }\n}\n", 
            "funcStartAddr": "0xedc0L", 
            "funcEndAddr": "0xee62L", 
            "funcName": "sub_EDC0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_EE70(int fd, void *buf, size_t nbytes)\n{\n  size_t v3; // rbx\n  __int64 v4; // rbp\n  signed int v5; // er15\n  char *v6; // r12\n  ssize_t v7; // rax\n  int v8; // eax\n  _BYTE *v9; // rax\n  __int64 v11; // [rsp+10h] [rbp-58h]\n  __int64 v12; // [rsp+18h] [rbp-50h]\n  unsigned __int64 v13; // [rsp+28h] [rbp-40h]\n\n  v13 = __readfsqword(0x28u);\n  if ( fd < 0 )\n    return -22LL;\n  v3 = nbytes;\n  v4 = 0LL;\n  memset(buf, 0, nbytes);\n  v5 = 0;\n  v6 = (char *)buf;\n  if ( !v3 )\n    return 0LL;\n  while ( 1 )\n  {\n    while ( 1 )\n    {\n      v7 = read(fd, v6, v3);\n      if ( v7 < 0 )\n        break;\n      if ( !v7 || (v6 += v7, v4 += v7, (v3 -= v7) == 0) )\n      {\n        if ( !v4 )\n          return 0LL;\n        goto LABEL_11;\n      }\n      v5 = 0;\n    }\n    v8 = *__errno_location();\n    if ( v8 != 11 && v8 != 4 )\n      break;\n    if ( v5 > 4 )\n      break;\n    ++v5;\n    v11 = 0LL;\n    v12 = 250000000LL;\n    nanosleep((const struct timespec *)&v11, 0LL);\n  }\n  if ( !v4 )\n    return -1LL;\nLABEL_11:\n  v9 = buf;\n  do\n  {\n    if ( !*v9 )\n      *v9 = 32;\n    ++v9;\n  }\n  while ( v9 != (char *)buf + v4 );\n  *((char *)buf + v4 - 1) = 0;\n  return v4;\n}\n", 
            "funcStartAddr": "0xee70L", 
            "funcEndAddr": "0xefb4L", 
            "funcName": "sub_EE70"
        }, 
        {
            "decompiledFuncCode": "void sub_F070()\n{\n  JUMPOUT(&loc_F03C);\n}\n", 
            "funcStartAddr": "0xf070L", 
            "funcEndAddr": "0xf075L", 
            "funcName": "sub_F070"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 sub_F0E0()\n{\n  char *v1; // rax\n  int v2; // edx\n  int v3; // eax\n  _BYTE *v4; // rsi\n  signed int v5; // ebx\n  bool v6; // cf\n  bool v7; // zf\n  char *v8; // rdi\n  signed __int64 v9; // rcx\n  __uid_t v10; // ebp\n  unsigned int v11; // eax\n  __gid_t v12; // ebp\n  _BYTE *v13; // [rsp+0h] [rbp-28h]\n  unsigned __int64 v14; // [rsp+8h] [rbp-20h]\n\n  v14 = __readfsqword(0x28u);\n  if ( !dword_2171C4 )\n  {\n    v1 = getenv(\"ULPROCFS_DEBUG\");\n    v2 = 2;\n    if ( v1 )\n    {\n      v3 = strtoul(v1, &v13, 0);\n      v4 = v13;\n      v5 = v3;\n      v6 = 0;\n      v7 = v13 == 0LL;\n      if ( v13 )\n      {\n        v8 = \"all\";\n        v9 = 4LL;\n        do\n        {\n          if ( !v9 )\n            break;\n          v6 = *v4 < (unsigned __int8)*v8;\n          v7 = *v4++ == *v8++;\n          --v9;\n        }\n        while ( v7 );\n        if ( (!v6 && !v7) == v6 )\n        {\n          dword_2171C4 = 0xFFFF;\n          v5 = 0xFFFF;\n          goto LABEL_10;\n        }\n      }\n      dword_2171C4 = v3;\n      v2 = 2;\n      if ( v3 )\n      {\nLABEL_10:\n        v10 = getuid();\n        if ( v10 != geteuid() || (v12 = getgid(), v12 != getegid()) )\n        {\n          dword_2171C4 = v5 | 0x1000000;\n          v11 = getpid();\n          __fprintf_chk(stderr, 1LL, \"%d: %s: don't print memory addresses (SUID executable).\\n\", v11);\n          v2 = dword_2171C4 | 2;\n        }\n        else\n        {\n          v2 = v5 | 2;\n        }\n        goto LABEL_12;\n      }\n    }\nLABEL_12:\n    dword_2171C4 = v2;\n  }\n  return __readfsqword(0x28u) ^ v14;\n}\n", 
            "funcStartAddr": "0xf0e0L", 
            "funcEndAddr": "0xf20cL", 
            "funcName": "sub_F0E0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_F210(int *a1, int a2)\n{\n  unsigned int v2; // eax\n  __int64 v3; // rbx\n  int v5; // eax\n  _DWORD *v6; // r13\n  unsigned int v7; // eax\n  _DWORD *v8; // rax\n  unsigned int v9; // eax\n  __int64 v10; // [rsp+0h] [rbp-48h]\n  unsigned __int64 v11; // [rsp+18h] [rbp-30h]\n\n  v11 = __readfsqword(0x28u);\n  __snprintf_chk(&v10, 22LL, 1LL, 22LL, \"/proc/%zu\", a2);\n  v2 = sub_BDE0(a1, (const char *)&v10);\n  v3 = v2;\n  if ( !v2 )\n  {\n    v5 = sub_BFC0((__int64)a1);\n    if ( v5 < 0 )\n    {\n      LODWORD(v3) = v5;\n    }\n    else\n    {\n      v6 = (_DWORD *)sub_BF20((__int64)a1);\n      if ( !v6 )\n      {\n        if ( dword_2171C4 & 4 )\n        {\n          v9 = getpid();\n          __fprintf_chk(stderr, 1LL, \"%d: %s: %8s: \", v9);\n          sub_ECC0((__int64)a1, (__int64)\"alloc new procfs handler\");\n        }\n        v8 = calloc(1uLL, 4uLL);\n        v6 = v8;\n        if ( !v8 )\n        {\n          LODWORD(v3) = -12;\n          return (unsigned int)v3;\n        }\n        sub_BEB0((__int64)sub_EDC0, v3, (__int64)a1, (__int64)v8);\n      }\n      if ( dword_2171C4 & 4 )\n      {\n        v7 = getpid();\n        __fprintf_chk(stderr, 1LL, \"%d: %s: %8s: \", v7);\n        sub_ECC0((__int64)a1, (__int64)\"init procfs stuff\");\n      }\n      *v6 = a2;\n    }\n  }\n  return (unsigned int)v3;\n}\n", 
            "funcStartAddr": "0xf210L", 
            "funcEndAddr": "0xf3a4L", 
            "funcName": "sub_F210"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_F480(__int64 a1, _DWORD *a2)\n{\n  __int64 result; // rax\n  __int64 v3; // [rsp+0h] [rbp-A8h]\n  int v4; // [rsp+1Ch] [rbp-8Ch]\n  unsigned __int64 v5; // [rsp+98h] [rbp-10h]\n\n  v5 = __readfsqword(0x28u);\n  result = sub_C840(a1, (struct stat *)&v3, 0, 0LL);\n  if ( !(_DWORD)result )\n    *a2 = v4;\n  return result;\n}\n", 
            "funcStartAddr": "0xf480L", 
            "funcEndAddr": "0xf4d5L", 
            "funcName": "sub_F480"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_F4E0(__int64 a1, DIR **a2, _DWORD *a3)\n{\n  _DWORD *v3; // r14\n  DIR *v4; // rbx\n  DIR **v5; // r12\n  struct dirent *v6; // rax\n  bool v7; // cf\n  bool v8; // zf\n  char *v9; // r8\n  signed __int64 v10; // rcx\n  char *v11; // rdi\n  char *v12; // rsi\n  char v13; // dl\n  bool v14; // cf\n  bool v15; // zf\n  signed __int64 v16; // rcx\n  char *v17; // rsi\n  const char *v18; // rdi\n  unsigned __int8 v19; // al\n  __int64 v21; // [rsp+0h] [rbp-48h]\n  unsigned __int64 v22; // [rsp+8h] [rbp-40h]\n\n  v3 = a3;\n  v22 = __readfsqword(0x28u);\n  if ( a3 == 0LL || a2 == 0LL || !a1 )\n    return 4294967274LL;\n  v4 = *a2;\n  v5 = a2;\n  if ( !*a2 )\n  {\n    v4 = sub_D070(a1, \"fd\");\n    *a2 = v4;\n    if ( !v4 )\n      return (unsigned int)-*__errno_location();\n  }\n  while ( 1 )\n  {\n    v6 = readdir(v4);\n    v7 = 0;\n    v8 = v6 == 0LL;\n    if ( !v6 )\n      break;\n    while ( 1 )\n    {\n      v9 = v6->d_name;\n      v10 = 2LL;\n      v11 = \".\";\n      v12 = v6->d_name;\n      do\n      {\n        if ( !v10 )\n          break;\n        v7 = (unsigned __int8)*v12 < (unsigned __int8)*v11;\n        v8 = *v12++ == *v11++;\n        --v10;\n      }\n      while ( v8 );\n      v13 = (!v7 && !v8) - v7;\n      v14 = 0;\n      v15 = v13 == 0;\n      if ( !v13 )\n        break;\n      v16 = 3LL;\n      v17 = v6->d_name;\n      v18 = \"..\";\n      do\n      {\n        if ( !v16 )\n          break;\n        v14 = (unsigned __int8)*v17 < *v18;\n        v15 = *v17++ == *v18++;\n        --v16;\n      }\n      while ( v15 );\n      if ( (!v14 && !v15) == v14 )\n        break;\n      v19 = v6->d_type;\n      if ( (v19 == 10 || !v19) && (signed int)sub_9070(v9, (unsigned __int64 *)&v21, 10) >= 0 )\n      {\n        *v3 = v21;\n        return 0LL;\n      }\n      v4 = *v5;\n      v6 = readdir(*v5);\n      v7 = 0;\n      v8 = v6 == 0LL;\n      if ( !v6 )\n        goto LABEL_16;\n    }\n  }\nLABEL_16:\n  closedir(*v5);\n  *v5 = 0LL;\n  return 1LL;\n}\n", 
            "funcStartAddr": "0xf4e0L", 
            "funcEndAddr": "0xf62bL", 
            "funcName": "sub_F4E0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_F630(__int64 a1)\n{\n  __int64 result; // rax\n\n  if ( *(_BYTE *)(a1 + 18) & 0xFB )\n    result = 0LL;\n  else\n    result = ((*__ctype_b_loc())[*(unsigned __int8 *)(a1 + 19)] >> 11) & 1;\n  return result;\n}\n", 
            "funcStartAddr": "0xf630L", 
            "funcEndAddr": "0xf65bL", 
            "funcName": "sub_F630"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_F660(__int64 a1, _DWORD *a2)\n{\n  __int64 v3; // [rsp+0h] [rbp-28h]\n  unsigned __int64 v4; // [rsp+8h] [rbp-20h]\n\n  v4 = __readfsqword(0x28u);\n  if ( !(unsigned int)sub_F630(a1) || (signed int)sub_9070((char *)(a1 + 19), (unsigned __int64 *)&v3, 10) < 0 )\n    return 4294967274LL;\n  *a2 = v3;\n  return 0LL;\n}\n", 
            "funcStartAddr": "0xf660L", 
            "funcEndAddr": "0xf6ccL", 
            "funcName": "sub_F660"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_F7D0(DIR *dirp, __int64 a2, _DWORD *a3)\n{\n  _DWORD *v3; // r12\n  int v4; // eax\n  int result; // eax\n  __int64 v6; // [rsp+0h] [rbp-B8h]\n  int v7; // [rsp+1Ch] [rbp-9Ch]\n  unsigned __int64 v8; // [rsp+98h] [rbp-20h]\n\n  v3 = a3;\n  v8 = __readfsqword(0x28u);\n  if ( !(unsigned int)sub_F630(a2) )\n    return -22;\n  v4 = dirfd(dirp);\n  result = __fxstatat(1, v4, (const char *)(a2 + 19), (struct stat *)&v6, 0);\n  if ( result )\n    return -22;\n  *v3 = v7;\n  return result;\n}\n", 
            "funcStartAddr": "0xf7d0L", 
            "funcEndAddr": "0xf85cL", 
            "funcName": "sub_F7D0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_F860(DIR *a1, __int64 a2, int a3)\n{\n  int v3; // ebx\n  int v4; // eax\n  _BOOL4 v5; // edx\n  int v7; // [rsp+4h] [rbp-14h]\n  unsigned __int64 v8; // [rsp+8h] [rbp-10h]\n\n  v3 = a3;\n  v8 = __readfsqword(0x28u);\n  v4 = sub_F7D0(a1, a2, &v7);\n  v5 = 0;\n  if ( !v4 )\n    v5 = v7 == v3;\n  return (unsigned int)v5;\n}\n", 
            "funcStartAddr": "0xf860L", 
            "funcEndAddr": "0xf8adL", 
            "funcName": "sub_F860"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_F8B0(DIR *dirp, __int64 a2, void *a3, unsigned __int64 a4)\n{\n  void *v4; // r13\n  unsigned __int64 v5; // r12\n  int v6; // eax\n  int v7; // eax\n  int v8; // ebp\n  FILE *v9; // rax\n  FILE *v10; // r14\n  char *v11; // rbx\n  char v12; // al\n  char *v13; // rdx\n  size_t v14; // rbp\n  __int64 v16; // [rsp+0h] [rbp-438h]\n  unsigned __int64 v17; // [rsp+408h] [rbp-30h]\n\n  v17 = __readfsqword(0x28u);\n  if ( a4 <= 0x1F )\n    return 4294967274LL;\n  v4 = a3;\n  v5 = a4;\n  if ( !(unsigned int)sub_F630(a2) )\n    return 4294967274LL;\n  __snprintf_chk(&v16, 1024LL, 1LL, 1024LL, \"%s/stat\", a2 + 19);\n  v6 = dirfd(dirp);\n  v7 = openat(v6, (const char *)&v16, 0x80000);\n  v8 = v7;\n  if ( v7 < 0 )\n    return (unsigned int)-*__errno_location();\n  v9 = fdopen(v7, \"r\");\n  v10 = v9;\n  if ( !v9 )\n  {\n    close(v8);\n    return (unsigned int)-*__errno_location();\n  }\n  v11 = fgets((char *)&v16, 1024, v9);\n  fclose(v10);\n  if ( !v11 )\n    return (unsigned int)-*__errno_location();\n  v12 = *v11;\n  if ( *v11 != 40 && v12 )\n  {\n    while ( 1 )\n    {\n      v12 = *++v11;\n      if ( !*v11 )\n        break;\n      if ( v12 == 40 )\n        goto LABEL_13;\n    }\n  }\n  else\n  {\nLABEL_13:\n    while ( v12 == 40 )\n      v12 = *++v11;\n  }\n  if ( v12 != 41 && v12 )\n  {\n    v13 = v11;\n    do\n      ++v13;\n    while ( *v13 && *v13 != 41 );\n    v14 = v13 - v11;\n    if ( v5 < v13 - v11 )\n      v14 = v5 - 1;\n  }\n  else\n  {\n    v14 = 0LL;\n  }\n  memcpy(v4, v11, v14);\n  *((_BYTE *)v4 + v14) = 0;\n  return 0LL;\n}\n", 
            "funcStartAddr": "0xf8b0L", 
            "funcEndAddr": "0xfa59L", 
            "funcName": "sub_F8B0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_FA60(DIR *a1, __int64 a2, const char *a3)\n{\n  const char *v3; // rbp\n  int v4; // eax\n  _BOOL4 v5; // edx\n  __int64 v7; // [rsp+0h] [rbp-48h]\n  unsigned __int64 v8; // [rsp+28h] [rbp-20h]\n\n  v3 = a3;\n  v8 = __readfsqword(0x28u);\n  v4 = sub_F8B0(a1, a2, &v7, 0x21uLL);\n  v5 = 0;\n  if ( !v4 )\n    v5 = strcmp(v3, (const char *)&v7) == 0;\n  return (unsigned int)v5;\n}\n", 
            "funcStartAddr": "0xfa60L", 
            "funcEndAddr": "0xfabfL", 
            "funcName": "sub_FA60"
        }, 
        {
            "decompiledFuncCode": "char *__usercall sub_FB90@<rax>(__int64 a1@<rbx>, __int64 a2@<rbp>, unsigned int a3@<edi>, __int64 a4@<r12>)\n{\n  int v4; // eax\n  int v5; // ebp\n  char *v6; // r12\n  char *result; // rax\n  __int64 v8; // [rsp-2008h] [rbp-2028h]\n  unsigned __int64 v9; // [rsp+0h] [rbp-20h]\n  __int64 v10; // [rsp+8h] [rbp-18h]\n  __int64 v11; // [rsp+10h] [rbp-10h]\n  __int64 v12; // [rsp+18h] [rbp-8h]\n\n  v12 = a4;\n  v11 = a2;\n  v10 = a1;\n  v9 = __readfsqword(0x28u);\n  __snprintf_chk(&v8, 0x2000LL, 1LL, 0x2000LL, \"/proc/%d/%s\", a3);\n  v4 = open((const char *)&v8, 0x80000, \"cmdline\");\n  JUMPOUT(v4, 0, sub_F070);\n  v5 = v4;\n  v6 = 0LL;\n  if ( sub_EE70(v4, &v8, 0x2000uLL) > 0 )\n    v6 = strdup((const char *)&v8);\n  close(v5);\n  result = v6;\n  __readfsqword(0x28u);\n  return result;\n}\n\nchar *__usercall sub_FB90@<rax>(__int64 a1@<rbx>, __int64 a2@<rbp>, unsigned int a3@<edi>, __int64 a4@<r12>)\n{\n  int v4; // eax\n  int v5; // ebp\n  char *v6; // r12\n  char *result; // rax\n  __int64 v8; // [rsp-2008h] [rbp-2028h]\n  unsigned __int64 v9; // [rsp+0h] [rbp-20h]\n  __int64 v10; // [rsp+8h] [rbp-18h]\n  __int64 v11; // [rsp+10h] [rbp-10h]\n  __int64 v12; // [rsp+18h] [rbp-8h]\n\n  v12 = a4;\n  v11 = a2;\n  v10 = a1;\n  v9 = __readfsqword(0x28u);\n  __snprintf_chk(&v8, 0x2000LL, 1LL, 0x2000LL, \"/proc/%d/%s\", a3);\n  v4 = open((const char *)&v8, 0x80000, \"cmdline\");\n  JUMPOUT(v4, 0, sub_F070);\n  v5 = v4;\n  v6 = 0LL;\n  if ( sub_EE70(v4, &v8, 0x2000uLL) > 0 )\n    v6 = strdup((const char *)&v8);\n  close(v5);\n  result = v6;\n  __readfsqword(0x28u);\n  return result;\n}\n\nchar *__usercall sub_FB90@<rax>(__int64 a1@<rbx>, __int64 a2@<rbp>, unsigned int a3@<edi>, __int64 a4@<r12>)\n{\n  int v4; // eax\n  int v5; // ebp\n  char *v6; // r12\n  char *result; // rax\n  __int64 v8; // [rsp-2008h] [rbp-2028h]\n  unsigned __int64 v9; // [rsp+0h] [rbp-20h]\n  __int64 v10; // [rsp+8h] [rbp-18h]\n  __int64 v11; // [rsp+10h] [rbp-10h]\n  __int64 v12; // [rsp+18h] [rbp-8h]\n\n  v12 = a4;\n  v11 = a2;\n  v10 = a1;\n  v9 = __readfsqword(0x28u);\n  __snprintf_chk(&v8, 0x2000LL, 1LL, 0x2000LL, \"/proc/%d/%s\", a3);\n  v4 = open((const char *)&v8, 0x80000, \"cmdline\");\n  JUMPOUT(v4, 0, sub_F070);\n  v5 = v4;\n  v6 = 0LL;\n  if ( sub_EE70(v4, &v8, 0x2000uLL) > 0 )\n    v6 = strdup((const char *)&v8);\n  close(v5);\n  result = v6;\n  __readfsqword(0x28u);\n  return result;\n}\n\nchar *__usercall sub_FB90@<rax>(__int64 a1@<rbx>, __int64 a2@<rbp>, unsigned int a3@<edi>, __int64 a4@<r12>)\n{\n  int v4; // eax\n  int v5; // ebp\n  char *v6; // r12\n  char *result; // rax\n  __int64 v8; // [rsp-2008h] [rbp-2028h]\n  unsigned __int64 v9; // [rsp+0h] [rbp-20h]\n  __int64 v10; // [rsp+8h] [rbp-18h]\n  __int64 v11; // [rsp+10h] [rbp-10h]\n  __int64 v12; // [rsp+18h] [rbp-8h]\n\n  v12 = a4;\n  v11 = a2;\n  v10 = a1;\n  v9 = __readfsqword(0x28u);\n  __snprintf_chk(&v8, 0x2000LL, 1LL, 0x2000LL, \"/proc/%d/%s\", a3);\n  v4 = open((const char *)&v8, 0x80000, \"cmdline\");\n  JUMPOUT(v4, 0, sub_F070);\n  v5 = v4;\n  v6 = 0LL;\n  if ( sub_EE70(v4, &v8, 0x2000uLL) > 0 )\n    v6 = strdup((const char *)&v8);\n  close(v5);\n  result = v6;\n  __readfsqword(0x28u);\n  return result;\n}\n", 
            "funcStartAddr": "0xf075L", 
            "funcEndAddr": "0xf07aL", 
            "funcName": "sub_FB90"
        }, 
        {
            "decompiledFuncCode": "char *__usercall sub_FB90@<rax>(__int64 a1@<rbx>, __int64 a2@<rbp>, unsigned int a3@<edi>, __int64 a4@<r12>)\n{\n  int v4; // eax\n  int v5; // ebp\n  char *v6; // r12\n  char *result; // rax\n  __int64 v8; // [rsp-2008h] [rbp-2028h]\n  unsigned __int64 v9; // [rsp+0h] [rbp-20h]\n  __int64 v10; // [rsp+8h] [rbp-18h]\n  __int64 v11; // [rsp+10h] [rbp-10h]\n  __int64 v12; // [rsp+18h] [rbp-8h]\n\n  v12 = a4;\n  v11 = a2;\n  v10 = a1;\n  v9 = __readfsqword(0x28u);\n  __snprintf_chk(&v8, 0x2000LL, 1LL, 0x2000LL, \"/proc/%d/%s\", a3);\n  v4 = open((const char *)&v8, 0x80000, \"cmdline\");\n  JUMPOUT(v4, 0, sub_F070);\n  v5 = v4;\n  v6 = 0LL;\n  if ( sub_EE70(v4, &v8, 0x2000uLL) > 0 )\n    v6 = strdup((const char *)&v8);\n  close(v5);\n  result = v6;\n  __readfsqword(0x28u);\n  return result;\n}\n\nchar *__usercall sub_FB90@<rax>(__int64 a1@<rbx>, __int64 a2@<rbp>, unsigned int a3@<edi>, __int64 a4@<r12>)\n{\n  int v4; // eax\n  int v5; // ebp\n  char *v6; // r12\n  char *result; // rax\n  __int64 v8; // [rsp-2008h] [rbp-2028h]\n  unsigned __int64 v9; // [rsp+0h] [rbp-20h]\n  __int64 v10; // [rsp+8h] [rbp-18h]\n  __int64 v11; // [rsp+10h] [rbp-10h]\n  __int64 v12; // [rsp+18h] [rbp-8h]\n\n  v12 = a4;\n  v11 = a2;\n  v10 = a1;\n  v9 = __readfsqword(0x28u);\n  __snprintf_chk(&v8, 0x2000LL, 1LL, 0x2000LL, \"/proc/%d/%s\", a3);\n  v4 = open((const char *)&v8, 0x80000, \"cmdline\");\n  JUMPOUT(v4, 0, sub_F070);\n  v5 = v4;\n  v6 = 0LL;\n  if ( sub_EE70(v4, &v8, 0x2000uLL) > 0 )\n    v6 = strdup((const char *)&v8);\n  close(v5);\n  result = v6;\n  __readfsqword(0x28u);\n  return result;\n}\n\nchar *__usercall sub_FB90@<rax>(__int64 a1@<rbx>, __int64 a2@<rbp>, unsigned int a3@<edi>, __int64 a4@<r12>)\n{\n  int v4; // eax\n  int v5; // ebp\n  char *v6; // r12\n  char *result; // rax\n  __int64 v8; // [rsp-2008h] [rbp-2028h]\n  unsigned __int64 v9; // [rsp+0h] [rbp-20h]\n  __int64 v10; // [rsp+8h] [rbp-18h]\n  __int64 v11; // [rsp+10h] [rbp-10h]\n  __int64 v12; // [rsp+18h] [rbp-8h]\n\n  v12 = a4;\n  v11 = a2;\n  v10 = a1;\n  v9 = __readfsqword(0x28u);\n  __snprintf_chk(&v8, 0x2000LL, 1LL, 0x2000LL, \"/proc/%d/%s\", a3);\n  v4 = open((const char *)&v8, 0x80000, \"cmdline\");\n  JUMPOUT(v4, 0, sub_F070);\n  v5 = v4;\n  v6 = 0LL;\n  if ( sub_EE70(v4, &v8, 0x2000uLL) > 0 )\n    v6 = strdup((const char *)&v8);\n  close(v5);\n  result = v6;\n  __readfsqword(0x28u);\n  return result;\n}\n\nchar *__usercall sub_FB90@<rax>(__int64 a1@<rbx>, __int64 a2@<rbp>, unsigned int a3@<edi>, __int64 a4@<r12>)\n{\n  int v4; // eax\n  int v5; // ebp\n  char *v6; // r12\n  char *result; // rax\n  __int64 v8; // [rsp-2008h] [rbp-2028h]\n  unsigned __int64 v9; // [rsp+0h] [rbp-20h]\n  __int64 v10; // [rsp+8h] [rbp-18h]\n  __int64 v11; // [rsp+10h] [rbp-10h]\n  __int64 v12; // [rsp+18h] [rbp-8h]\n\n  v12 = a4;\n  v11 = a2;\n  v10 = a1;\n  v9 = __readfsqword(0x28u);\n  __snprintf_chk(&v8, 0x2000LL, 1LL, 0x2000LL, \"/proc/%d/%s\", a3);\n  v4 = open((const char *)&v8, 0x80000, \"cmdline\");\n  JUMPOUT(v4, 0, sub_F070);\n  v5 = v4;\n  v6 = 0LL;\n  if ( sub_EE70(v4, &v8, 0x2000uLL) > 0 )\n    v6 = strdup((const char *)&v8);\n  close(v5);\n  result = v6;\n  __readfsqword(0x28u);\n  return result;\n}\n", 
            "funcStartAddr": "0xf075L", 
            "funcEndAddr": "0xf07aL", 
            "funcName": "sub_FB90"
        }, 
        {
            "decompiledFuncCode": "char *__usercall sub_FB90@<rax>(__int64 a1@<rbx>, __int64 a2@<rbp>, unsigned int a3@<edi>, __int64 a4@<r12>)\n{\n  int v4; // eax\n  int v5; // ebp\n  char *v6; // r12\n  char *result; // rax\n  __int64 v8; // [rsp-2008h] [rbp-2028h]\n  unsigned __int64 v9; // [rsp+0h] [rbp-20h]\n  __int64 v10; // [rsp+8h] [rbp-18h]\n  __int64 v11; // [rsp+10h] [rbp-10h]\n  __int64 v12; // [rsp+18h] [rbp-8h]\n\n  v12 = a4;\n  v11 = a2;\n  v10 = a1;\n  v9 = __readfsqword(0x28u);\n  __snprintf_chk(&v8, 0x2000LL, 1LL, 0x2000LL, \"/proc/%d/%s\", a3);\n  v4 = open((const char *)&v8, 0x80000, \"cmdline\");\n  JUMPOUT(v4, 0, sub_F070);\n  v5 = v4;\n  v6 = 0LL;\n  if ( sub_EE70(v4, &v8, 0x2000uLL) > 0 )\n    v6 = strdup((const char *)&v8);\n  close(v5);\n  result = v6;\n  __readfsqword(0x28u);\n  return result;\n}\n\nchar *__usercall sub_FB90@<rax>(__int64 a1@<rbx>, __int64 a2@<rbp>, unsigned int a3@<edi>, __int64 a4@<r12>)\n{\n  int v4; // eax\n  int v5; // ebp\n  char *v6; // r12\n  char *result; // rax\n  __int64 v8; // [rsp-2008h] [rbp-2028h]\n  unsigned __int64 v9; // [rsp+0h] [rbp-20h]\n  __int64 v10; // [rsp+8h] [rbp-18h]\n  __int64 v11; // [rsp+10h] [rbp-10h]\n  __int64 v12; // [rsp+18h] [rbp-8h]\n\n  v12 = a4;\n  v11 = a2;\n  v10 = a1;\n  v9 = __readfsqword(0x28u);\n  __snprintf_chk(&v8, 0x2000LL, 1LL, 0x2000LL, \"/proc/%d/%s\", a3);\n  v4 = open((const char *)&v8, 0x80000, \"cmdline\");\n  JUMPOUT(v4, 0, sub_F070);\n  v5 = v4;\n  v6 = 0LL;\n  if ( sub_EE70(v4, &v8, 0x2000uLL) > 0 )\n    v6 = strdup((const char *)&v8);\n  close(v5);\n  result = v6;\n  __readfsqword(0x28u);\n  return result;\n}\n\nchar *__usercall sub_FB90@<rax>(__int64 a1@<rbx>, __int64 a2@<rbp>, unsigned int a3@<edi>, __int64 a4@<r12>)\n{\n  int v4; // eax\n  int v5; // ebp\n  char *v6; // r12\n  char *result; // rax\n  __int64 v8; // [rsp-2008h] [rbp-2028h]\n  unsigned __int64 v9; // [rsp+0h] [rbp-20h]\n  __int64 v10; // [rsp+8h] [rbp-18h]\n  __int64 v11; // [rsp+10h] [rbp-10h]\n  __int64 v12; // [rsp+18h] [rbp-8h]\n\n  v12 = a4;\n  v11 = a2;\n  v10 = a1;\n  v9 = __readfsqword(0x28u);\n  __snprintf_chk(&v8, 0x2000LL, 1LL, 0x2000LL, \"/proc/%d/%s\", a3);\n  v4 = open((const char *)&v8, 0x80000, \"cmdline\");\n  JUMPOUT(v4, 0, sub_F070);\n  v5 = v4;\n  v6 = 0LL;\n  if ( sub_EE70(v4, &v8, 0x2000uLL) > 0 )\n    v6 = strdup((const char *)&v8);\n  close(v5);\n  result = v6;\n  __readfsqword(0x28u);\n  return result;\n}\n\nchar *__usercall sub_FB90@<rax>(__int64 a1@<rbx>, __int64 a2@<rbp>, unsigned int a3@<edi>, __int64 a4@<r12>)\n{\n  int v4; // eax\n  int v5; // ebp\n  char *v6; // r12\n  char *result; // rax\n  __int64 v8; // [rsp-2008h] [rbp-2028h]\n  unsigned __int64 v9; // [rsp+0h] [rbp-20h]\n  __int64 v10; // [rsp+8h] [rbp-18h]\n  __int64 v11; // [rsp+10h] [rbp-10h]\n  __int64 v12; // [rsp+18h] [rbp-8h]\n\n  v12 = a4;\n  v11 = a2;\n  v10 = a1;\n  v9 = __readfsqword(0x28u);\n  __snprintf_chk(&v8, 0x2000LL, 1LL, 0x2000LL, \"/proc/%d/%s\", a3);\n  v4 = open((const char *)&v8, 0x80000, \"cmdline\");\n  JUMPOUT(v4, 0, sub_F070);\n  v5 = v4;\n  v6 = 0LL;\n  if ( sub_EE70(v4, &v8, 0x2000uLL) > 0 )\n    v6 = strdup((const char *)&v8);\n  close(v5);\n  result = v6;\n  __readfsqword(0x28u);\n  return result;\n}\n", 
            "funcStartAddr": "0xf075L", 
            "funcEndAddr": "0xf07aL", 
            "funcName": "sub_FB90"
        }, 
        {
            "decompiledFuncCode": "char *__usercall sub_FB90@<rax>(__int64 a1@<rbx>, __int64 a2@<rbp>, unsigned int a3@<edi>, __int64 a4@<r12>)\n{\n  int v4; // eax\n  int v5; // ebp\n  char *v6; // r12\n  char *result; // rax\n  __int64 v8; // [rsp-2008h] [rbp-2028h]\n  unsigned __int64 v9; // [rsp+0h] [rbp-20h]\n  __int64 v10; // [rsp+8h] [rbp-18h]\n  __int64 v11; // [rsp+10h] [rbp-10h]\n  __int64 v12; // [rsp+18h] [rbp-8h]\n\n  v12 = a4;\n  v11 = a2;\n  v10 = a1;\n  v9 = __readfsqword(0x28u);\n  __snprintf_chk(&v8, 0x2000LL, 1LL, 0x2000LL, \"/proc/%d/%s\", a3);\n  v4 = open((const char *)&v8, 0x80000, \"cmdline\");\n  JUMPOUT(v4, 0, sub_F070);\n  v5 = v4;\n  v6 = 0LL;\n  if ( sub_EE70(v4, &v8, 0x2000uLL) > 0 )\n    v6 = strdup((const char *)&v8);\n  close(v5);\n  result = v6;\n  __readfsqword(0x28u);\n  return result;\n}\n\nchar *__usercall sub_FB90@<rax>(__int64 a1@<rbx>, __int64 a2@<rbp>, unsigned int a3@<edi>, __int64 a4@<r12>)\n{\n  int v4; // eax\n  int v5; // ebp\n  char *v6; // r12\n  char *result; // rax\n  __int64 v8; // [rsp-2008h] [rbp-2028h]\n  unsigned __int64 v9; // [rsp+0h] [rbp-20h]\n  __int64 v10; // [rsp+8h] [rbp-18h]\n  __int64 v11; // [rsp+10h] [rbp-10h]\n  __int64 v12; // [rsp+18h] [rbp-8h]\n\n  v12 = a4;\n  v11 = a2;\n  v10 = a1;\n  v9 = __readfsqword(0x28u);\n  __snprintf_chk(&v8, 0x2000LL, 1LL, 0x2000LL, \"/proc/%d/%s\", a3);\n  v4 = open((const char *)&v8, 0x80000, \"cmdline\");\n  JUMPOUT(v4, 0, sub_F070);\n  v5 = v4;\n  v6 = 0LL;\n  if ( sub_EE70(v4, &v8, 0x2000uLL) > 0 )\n    v6 = strdup((const char *)&v8);\n  close(v5);\n  result = v6;\n  __readfsqword(0x28u);\n  return result;\n}\n\nchar *__usercall sub_FB90@<rax>(__int64 a1@<rbx>, __int64 a2@<rbp>, unsigned int a3@<edi>, __int64 a4@<r12>)\n{\n  int v4; // eax\n  int v5; // ebp\n  char *v6; // r12\n  char *result; // rax\n  __int64 v8; // [rsp-2008h] [rbp-2028h]\n  unsigned __int64 v9; // [rsp+0h] [rbp-20h]\n  __int64 v10; // [rsp+8h] [rbp-18h]\n  __int64 v11; // [rsp+10h] [rbp-10h]\n  __int64 v12; // [rsp+18h] [rbp-8h]\n\n  v12 = a4;\n  v11 = a2;\n  v10 = a1;\n  v9 = __readfsqword(0x28u);\n  __snprintf_chk(&v8, 0x2000LL, 1LL, 0x2000LL, \"/proc/%d/%s\", a3);\n  v4 = open((const char *)&v8, 0x80000, \"cmdline\");\n  JUMPOUT(v4, 0, sub_F070);\n  v5 = v4;\n  v6 = 0LL;\n  if ( sub_EE70(v4, &v8, 0x2000uLL) > 0 )\n    v6 = strdup((const char *)&v8);\n  close(v5);\n  result = v6;\n  __readfsqword(0x28u);\n  return result;\n}\n\nchar *__usercall sub_FB90@<rax>(__int64 a1@<rbx>, __int64 a2@<rbp>, unsigned int a3@<edi>, __int64 a4@<r12>)\n{\n  int v4; // eax\n  int v5; // ebp\n  char *v6; // r12\n  char *result; // rax\n  __int64 v8; // [rsp-2008h] [rbp-2028h]\n  unsigned __int64 v9; // [rsp+0h] [rbp-20h]\n  __int64 v10; // [rsp+8h] [rbp-18h]\n  __int64 v11; // [rsp+10h] [rbp-10h]\n  __int64 v12; // [rsp+18h] [rbp-8h]\n\n  v12 = a4;\n  v11 = a2;\n  v10 = a1;\n  v9 = __readfsqword(0x28u);\n  __snprintf_chk(&v8, 0x2000LL, 1LL, 0x2000LL, \"/proc/%d/%s\", a3);\n  v4 = open((const char *)&v8, 0x80000, \"cmdline\");\n  JUMPOUT(v4, 0, sub_F070);\n  v5 = v4;\n  v6 = 0LL;\n  if ( sub_EE70(v4, &v8, 0x2000uLL) > 0 )\n    v6 = strdup((const char *)&v8);\n  close(v5);\n  result = v6;\n  __readfsqword(0x28u);\n  return result;\n}\n", 
            "funcStartAddr": "0xf075L", 
            "funcEndAddr": "0xf07aL", 
            "funcName": "sub_FB90"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_FBA0(int a1, int a2)\n{\n  char *v2; // r13\n  size_t v3; // rbx\n  signed int v4; // er14\n  size_t v5; // rbp\n  ssize_t v6; // rax\n  int *v7; // rax\n  int *v8; // r15\n  int v9; // eax\n  char *v10; // rbp\n  ssize_t v11; // rax\n  int v12; // edx\n  int v13; // eax\n  __int64 v15; // [rsp+20h] [rbp-2058h]\n  __int64 v16; // [rsp+28h] [rbp-2050h]\n  char v17; // [rsp+30h] [rbp-2048h]\n  unsigned __int64 v18; // [rsp+2038h] [rbp-40h]\n\n  v18 = __readfsqword(0x28u);\nLABEL_2:\n  v2 = &v17;\n  v3 = 0LL;\n  v4 = 0;\n  v5 = 0x2000LL;\n  memset(&v17, 0, 0x2000uLL);\n  while ( 1 )\n  {\n    while ( 1 )\n    {\n      v6 = read(a1, v2, v5);\n      if ( v6 < 0 )\n        break;\n      if ( !v6 || (v2 += v6, v3 += v6, (v5 -= v6) == 0) )\n      {\n        if ( !v3 )\n        {\n          __explicit_bzero_chk(&v17, 0x2000LL, 0x2000LL);\n          return 0LL;\n        }\n        v8 = __errno_location();\nLABEL_11:\n        v10 = &v17;\n        while ( 1 )\n        {\n          while ( 1 )\n          {\n            *v8 = 0;\n            v11 = write(a2, v10, v3);\n            if ( v11 > 0 )\n              break;\n            v13 = *v8;\n            if ( *v8 != 4 && v13 != 11 )\n              return 4294967294LL;\n            if ( v13 == 11 )\n              goto LABEL_15;\n          }\n          v3 -= v11;\n          v12 = *v8;\n          if ( !v3 )\n          {\n            if ( v12 == 11 )\n            {\n              v15 = 0LL;\n              v16 = 250000000LL;\n              nanosleep((const struct timespec *)&v15, 0LL);\n            }\n            goto LABEL_2;\n          }\n          v10 += v11;\n          if ( v12 == 11 )\n          {\nLABEL_15:\n            v15 = 0LL;\n            v16 = 250000000LL;\n            nanosleep((const struct timespec *)&v15, 0LL);\n          }\n        }\n      }\n      v4 = 0;\n    }\n    v7 = __errno_location();\n    v8 = v7;\n    v9 = *v7;\n    if ( v9 != 11 && v9 != 4 )\n      break;\n    if ( v4 > 4 )\n      break;\n    ++v4;\n    v15 = 0LL;\n    v16 = 250000000LL;\n    nanosleep((const struct timespec *)&v15, 0LL);\n  }\n  if ( v3 )\n    goto LABEL_11;\n  return 0xFFFFFFFFLL;\n}\n", 
            "funcStartAddr": "0xfba0L", 
            "funcEndAddr": "0xfd89L", 
            "funcName": "sub_FBA0"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_FD90(char *a1)\n{\n  return mkostemp(a1, 524482);\n}\n", 
            "funcStartAddr": "0xfd90L", 
            "funcEndAddr": "0xfd9aL", 
            "funcName": "sub_FD90"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_FE80(int fd, unsigned int a2)\n{\n  signed int v2; // ebx\n  int v4; // eax\n  int v5; // eax\n  int *v6; // rax\n  int v7; // er12\n  int *v8; // rbp\n\n  v2 = fcntl(fd, 1030, a2);\n  if ( v2 < 0 )\n  {\n    v4 = dup(fd);\n    v2 = v4;\n    if ( v4 >= 0 )\n    {\n      v5 = fcntl(v4, 1);\n      if ( v5 < 0 || fcntl(v2, 2, v5 | 1u) < 0 )\n      {\n        v6 = __errno_location();\n        v7 = *v6;\n        v8 = v6;\n        close(v2);\n        v2 = -1;\n        *v8 = v7;\n      }\n    }\n  }\n  return (unsigned int)v2;\n}\n", 
            "funcStartAddr": "0xfe80L", 
            "funcEndAddr": "0xfefbL", 
            "funcName": "sub_FE80"
        }, 
        {
            "decompiledFuncCode": "int j__getdtablesize(void)\n{\n  return getdtablesize();\n}\n", 
            "funcStartAddr": "0xff00L", 
            "funcEndAddr": "0xff05L", 
            "funcName": "j_.getdtablesize"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_FF10(unsigned int a1, unsigned int a2)\n{\n  DIR *v2; // rax\n  DIR *v3; // rbx\n  struct dirent *v4; // rax\n  bool v5; // cf\n  bool v6; // zf\n  const char *v7; // r14\n  signed __int64 v8; // rcx\n  char *v9; // rdi\n  char *v10; // rsi\n  char v11; // al\n  bool v12; // cf\n  bool v13; // zf\n  signed __int64 v14; // rcx\n  const char *v15; // rsi\n  const char *v16; // rdi\n  int *v17; // r15\n  unsigned int v18; // edx\n  int v19; // eax\n  int v21; // ebp\n  unsigned int v22; // ebx\n  unsigned int fd; // [rsp+0h] [rbp-58h]\n  unsigned int v24; // [rsp+8h] [rbp-50h]\n  unsigned int v25; // [rsp+Ch] [rbp-4Ch]\n  char *endptr; // [rsp+10h] [rbp-48h]\n  unsigned __int64 v27; // [rsp+18h] [rbp-40h]\n\n  v24 = a1;\n  v25 = a2;\n  v27 = __readfsqword(0x28u);\n  v2 = opendir(\"/proc/self/fd\");\n  if ( v2 )\n  {\n    v3 = v2;\n    while ( 1 )\n    {\n      v4 = readdir(v3);\n      v5 = 0;\n      v6 = v4 == 0LL;\n      if ( !v4 )\n        break;\n      while ( 1 )\n      {\n        v7 = v4->d_name;\n        v8 = 2LL;\n        v9 = \".\";\n        v10 = v4->d_name;\n        do\n        {\n          if ( !v8 )\n            break;\n          v5 = (unsigned __int8)*v10 < (unsigned __int8)*v9;\n          v6 = *v10++ == *v9++;\n          --v8;\n        }\n        while ( v6 );\n        v11 = (!v5 && !v6) - v5;\n        v12 = 0;\n        v13 = v11 == 0;\n        if ( !v11 )\n          break;\n        v14 = 3LL;\n        v15 = v7;\n        v16 = \"..\";\n        do\n        {\n          if ( !v14 )\n            break;\n          v12 = (const unsigned __int8)*v15 < *v16;\n          v13 = *v15++ == *v16++;\n          --v14;\n        }\n        while ( v13 );\n        if ( (!v12 && !v13) == v12 )\n          break;\n        v17 = __errno_location();\n        *v17 = 0;\n        v18 = strtoul(v7, &endptr, 10);\n        if ( *v17 )\n          break;\n        fd = v18;\n        if ( endptr == v7 )\n          break;\n        if ( !endptr )\n          break;\n        if ( *endptr )\n          break;\n        v19 = dirfd(v3);\n        if ( v19 < 0 || v19 == fd || v24 > fd || v25 < fd )\n          break;\n        close(fd);\n        v4 = readdir(v3);\n        v5 = 0;\n        v6 = v4 == 0LL;\n        if ( !v4 )\n          goto LABEL_21;\n      }\n    }\nLABEL_21:\n    closedir(v3);\n  }\n  else\n  {\n    v21 = j__getdtablesize();\n    if ( v21 )\n    {\n      v22 = 0;\n      do\n      {\n        if ( a1 <= v22 && a2 >= v22 )\n          close(v22);\n        ++v22;\n      }\n      while ( v21 != v22 );\n    }\n  }\n  return __readfsqword(0x28u) ^ v27;\n}\n", 
            "funcStartAddr": "0xff10L", 
            "funcEndAddr": "0x10091L", 
            "funcName": "sub_FF10"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_10440(char *nptr, char **endptr, _DWORD *a3)\n{\n  _DWORD *v3; // r14\n  int *v4; // rax\n  __int64 v5; // rbx\n  int *v6; // r12\n  __int64 result; // rax\n\n  v3 = a3;\n  v4 = __errno_location();\n  *v4 = 0;\n  if ( !nptr )\n    return 4294967274LL;\n  v5 = *nptr;\n  if ( !(_BYTE)v5 )\n    return 4294967274LL;\n  v6 = v4;\n  if ( !((*__ctype_b_loc())[v5] & 0x800) )\n    return 4294967274LL;\n  *v3 = strtoul(nptr, endptr, 10);\n  result = (unsigned int)*v6;\n  if ( (_DWORD)result )\n    return (unsigned int)-(signed int)result;\n  if ( *endptr == nptr )\n    return 4294967274LL;\n  return result;\n}\n", 
            "funcStartAddr": "0x10440L", 
            "funcEndAddr": "0x104c7L", 
            "funcName": "sub_10440"
        }, 
        {
            "decompiledFuncCode": "cpu_set_t *__fastcall sub_104D0(int a1, _QWORD *a2, unsigned __int64 *a3)\n{\n  unsigned __int64 *v3; // rbp\n  cpu_set_t *result; // rax\n\n  v3 = a3;\n  result = __sched_cpualloc(a1);\n  if ( result )\n  {\n    if ( a2 )\n      *a2 = 8 * ((unsigned __int64)(a1 + 63LL) >> 6);\n    if ( v3 )\n      *v3 = (a1 + 63LL) & 0xFFFFFFFFFFFFFFC0LL;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x104d0L", 
            "funcEndAddr": "0x10515L", 
            "funcName": "sub_104D0"
        }, 
        {
            "decompiledFuncCode": "void j____sched_cpufree(cpu_set_t *set)\n{\n  __sched_cpufree(set);\n}\n", 
            "funcStartAddr": "0x10520L", 
            "funcEndAddr": "0x10525L", 
            "funcName": "j_.__sched_cpufree"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_109A0(const char *a1, void *a2, size_t a3)\n{\n  unsigned __int64 v3; // r15\n  size_t v4; // r13\n  signed int v5; // eax\n  const char *v6; // rbx\n  unsigned __int64 v7; // rbp\n  __int64 v8; // r12\n  __int32_t v9; // edx\n  unsigned int v10; // eax\n  char v11; // dl\n  unsigned __int64 v12; // rax\n  unsigned __int64 v13; // rax\n  unsigned __int64 v14; // rax\n\n  v3 = (unsigned __int64)a1;\n  v4 = a3;\n  v5 = strlen(a1);\n  v6 = &a1[v5 - 1];\n  if ( v5 > 1 && *(_WORD *)a1 == 30768 )\n    v3 = (unsigned __int64)(a1 + 2);\n  memset(a2, 0, v4);\n  if ( v3 > (unsigned __int64)v6 )\n    return 0LL;\n  v7 = 0LL;\n  while ( 1 )\n  {\n    v8 = *v6;\n    if ( (_BYTE)v8 == 44 )\n      v8 = *(v6-- - 1);\n    v9 = (char)v8;\n    v10 = (char)v8 - 48;\n    if ( v10 > 9 )\n      break;\nLABEL_13:\n    v11 = v10;\n    if ( (_BYTE)v10 == -1 )\n      return 0xFFFFFFFFLL;\n    if ( v10 & 1 && v7 >> 3 < v4 )\n      *((_QWORD *)a2 + (v7 >> 6)) |= 1LL << v7;\n    if ( v10 & 2 )\n    {\n      v12 = (unsigned int)(v7 + 1);\n      if ( v12 >> 3 < v4 )\n        *((_QWORD *)a2 + (v12 >> 6)) |= 1LL << ((unsigned __int8)v7 + 1);\n    }\n    if ( v11 & 4 )\n    {\n      v13 = (unsigned int)(v7 + 2);\n      if ( v13 >> 3 < v4 )\n        *((_QWORD *)a2 + (v13 >> 6)) |= 1LL << ((unsigned __int8)v7 + 2);\n    }\n    if ( v11 & 8 )\n    {\n      v14 = (unsigned int)(v7 + 3);\n      if ( v14 >> 3 < v4 )\n        *((_QWORD *)a2 + (v14 >> 6)) |= 1LL << ((unsigned __int8)v7 + 3);\n    }\n    --v6;\n    v7 += 4LL;\n    if ( v3 > (unsigned __int64)v6 )\n      return 0LL;\n  }\n  if ( (unsigned int)((char)v8 + 128) <= 0x17F )\n    v9 = (*__ctype_tolower_loc())[v8];\n  if ( (unsigned int)(v9 - 97) <= 5 )\n  {\n    LOBYTE(v10) = v9 - 87;\n    goto LABEL_13;\n  }\n  return 0xFFFFFFFFLL;\n}\n", 
            "funcStartAddr": "0x109a0L", 
            "funcEndAddr": "0x10b24L", 
            "funcName": "sub_109A0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_10B30(char *nptr, void *s, size_t a3, int a4)\n{\n  _QWORD *v4; // r15\n  char *v5; // r13\n  unsigned __int64 v6; // rbx\n  int v7; // er14\n  unsigned __int64 v8; // rbp\n  char *v9; // rax\n  signed __int64 v10; // r12\n  unsigned int v11; // er13\n  char *v12; // rax\n  char *v13; // rax\n  signed __int64 v14; // r11\n  bool v15; // cl\n  unsigned int v16; // esi\n  signed int v17; // edx\n  __int64 result; // rax\n  unsigned int v19; // eax\n  char *v20; // rdi\n  bool v21; // ST10_1\n  int v22; // eax\n  bool v23; // cl\n  char *v24; // rax\n  char *v25; // rax\n  char *nptra; // [rsp+10h] [rbp-78h]\n  char *nptrb; // [rsp+10h] [rbp-78h]\n  const char *v28; // [rsp+18h] [rbp-70h]\n  char *v29; // [rsp+18h] [rbp-70h]\n  bool v30; // [rsp+18h] [rbp-70h]\n  unsigned int v31; // [rsp+34h] [rbp-54h]\n  unsigned int v32; // [rsp+38h] [rbp-50h]\n  int v33; // [rsp+3Ch] [rbp-4Ch]\n  char *sa; // [rsp+40h] [rbp-48h]\n  unsigned __int64 v35; // [rsp+48h] [rbp-40h]\n\n  v4 = s;\n  v5 = nptr;\n  v6 = a3;\n  v7 = a4;\n  v8 = 8 * a3;\n  v35 = __readfsqword(0x28u);\n  sa = 0LL;\n  memset(s, 0, a3);\n  if ( nptr )\n  {\n    while ( 1 )\n    {\n      v9 = strchr(v5, 44);\n      v10 = (signed __int64)v9;\n      if ( v9 )\n        v10 = (signed __int64)(v9 + 1);\n      if ( (unsigned int)sub_10440(v5, &sa, &v31) )\n        return 1LL;\n      v11 = v31;\n      v33 = 1;\n      v32 = v31;\n      if ( !sa )\n        break;\n      v28 = sa;\n      v12 = strchr(sa, 45);\n      if ( !v12 )\n        goto LABEL_33;\n      nptra = v12 + 1;\n      v13 = strchr(v28, 44);\n      v14 = (signed __int64)v13;\n      if ( !v13 )\n      {\n        v15 = 1;\n        if ( !nptra )\n        {\nLABEL_33:\n          v16 = v11;\n          v17 = 1;\n          goto LABEL_11;\n        }\nLABEL_24:\n        v20 = nptra;\n        v29 = (char *)v14;\n        v21 = v15;\n        v22 = sub_10440(v20, &sa, &v32);\n        v23 = v21;\n        if ( v22 )\n          return 1LL;\n        if ( sa )\n        {\n          nptrb = v29;\n          v30 = v23;\n          if ( *sa )\n          {\n            v24 = strchr(sa, 58);\n            if ( v24 )\n            {\n              v25 = v24 + 1;\n              if ( v25 )\n              {\n                if ( (v25 < nptrb || v30) && ((unsigned int)sub_10440(v25, &sa, &v33) || !v33) )\n                  return 1LL;\n              }\n            }\n          }\n        }\n        v19 = v31;\n        v11 = v32;\n        if ( v32 < v31 )\n          return 1LL;\nLABEL_22:\n        v16 = v11;\n        v17 = v33;\n        v11 = v19;\n        goto LABEL_11;\n      }\n      if ( !nptra )\n        goto LABEL_33;\n      v14 = (signed __int64)(v13 + 1);\n      v15 = v13 + 1 == 0LL;\n      if ( v13 + 1 > nptra )\n        goto LABEL_24;\n      v16 = v11;\n      v17 = 1;\n      if ( v15 )\n        goto LABEL_24;\n      do\n      {\nLABEL_11:\n        if ( v7 && v8 <= v11 )\n          return 2LL;\n        if ( (unsigned __int64)v11 >> 3 < v6 )\n          v4[(unsigned __int64)v11 >> 6] |= 1LL << v11;\n        v11 += v17;\n      }\n      while ( v11 <= v16 );\n      v5 = (char *)v10;\n      if ( !v10 )\n        goto LABEL_17;\n    }\n    v19 = v31;\n    goto LABEL_22;\n  }\nLABEL_17:\n  result = (__int64)sa;\n  if ( sa )\n    result = *sa != 0;\n  return result;\n}\n", 
            "funcStartAddr": "0x10b30L", 
            "funcEndAddr": "0x10ddeL", 
            "funcName": "sub_10B30"
        }, 
        {
            "decompiledFuncCode": "void __fastcall init(unsigned int a1, __int64 a2, __int64 a3)\n{\n  __int64 v3; // r15\n  signed __int64 v4; // rbp\n  __int64 v5; // rbx\n\n  v3 = a3;\n  v4 = &off_215E38 - off_215E30;\n  init_proc();\n  if ( v4 )\n  {\n    v5 = 0LL;\n    do\n      ((void (__fastcall *)(_QWORD, __int64, __int64))off_215E30[v5++])(a1, a2, v3);\n    while ( v4 != v5 );\n  }\n}\n", 
            "funcStartAddr": "0x10de0L", 
            "funcEndAddr": "0x10e45L", 
            "funcName": "init"
        }, 
        {
            "decompiledFuncCode": "void fini(void)\n{\n  ;\n}\n", 
            "funcStartAddr": "0x10e50L", 
            "funcEndAddr": "0x10e52L", 
            "funcName": "fini"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_10E60(__int64 a1)\n{\n  return __cxa_atexit(a1, 0LL, off_217008);\n}\n", 
            "funcStartAddr": "0x10e60L", 
            "funcEndAddr": "0x10e6eL", 
            "funcName": "sub_10E60"
        }
    ], 
    "failedCount": 0, 
    "binaryInfo": {
        "binaryName": "lsipc_strip", 
        "isStripped": "True"
    }, 
    "funcCount": "156", 
    "buildInfo": {
        "decompilerName": "IDA Pro", 
        "compilerVersion": "9.4.0", 
        "Optlevel": "-O", 
        "compilerName": "gcc"
    }, 
    "recognizedCount": 0
}