{
    "binaryInfo": {
        "binaryName": "mcf-amd64-clang-O2_strip",
        "isStripped": "True"
    },
    "buildInfo": {
        "decompilerName": "IDA Pro",
        "compilerName": "gcc",
        "compilerVersion": "9.4.0",
        "Optlevel": "-O"
    },
    "funcInfo": [
        {
            "funcName": "start",
            "funcStartAddr": "0x400940",
            "funcEndAddr": "0x40096b",
            "decompiledFuncCode": "// positive sp value has been detected, the output may be wrong!\nvoid __fastcall __noreturn start(__int64 a1, __int64 a2, void (*a3)(void))\n{\n  __int64 v3; // rax\n  int v4; // esi\n  __int64 v5; // [rsp-8h] [rbp-8h] BYREF\n  char *retaddr; // [rsp+0h] [rbp+0h] BYREF\n\n  v4 = v5;\n  v5 = v3;\n  _libc_start_main(main, v4, &retaddr, init, fini, a3, &v5);\n  __halt();\n}\n"
        },
        {
            "funcName": "sub_400970",
            "funcStartAddr": "0x400970",
            "funcEndAddr": "0x400991",
            "decompiledFuncCode": "void *sub_400970()\n{\n  return &unk_405090;\n}\n"
        },
        {
            "funcName": "sub_4009E0",
            "funcStartAddr": "0x4009e0",
            "funcEndAddr": "0x400a01",
            "decompiledFuncCode": "void *sub_4009E0()\n{\n  void *result; // rax\n\n  if ( !byte_4050A0 )\n  {\n    result = sub_400970();\n    byte_4050A0 = 1;\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_400A10",
            "funcStartAddr": "0x4009a0",
            "funcEndAddr": "0x4009d1",
            "decompiledFuncCode": "// attributes: thunk\n__int64 sub_400A10()\n{\n  return 0LL;\n}\n\n// attributes: thunk\n__int64 sub_400A10()\n{\n  return 0LL;\n}\n"
        },
        {
            "funcName": "sub_400A10",
            "funcStartAddr": "0x4009a0",
            "funcEndAddr": "0x4009d1",
            "decompiledFuncCode": "// attributes: thunk\n__int64 sub_400A10()\n{\n  return 0LL;\n}\n\n// attributes: thunk\n__int64 sub_400A10()\n{\n  return 0LL;\n}\n"
        },
        {
            "funcName": "sub_400A20",
            "funcStartAddr": "0x400a20",
            "funcEndAddr": "0x400b0b",
            "decompiledFuncCode": "__int64 __fastcall sub_400A20(double a1)\n{\n  __int64 v1; // r14\n  double v2; // xmm0_8\n  __int64 v3; // rcx\n  __int64 v4; // rbx\n\n  v1 = -6LL;\n  while ( 1 )\n  {\n    printf(\"active arcs                : %ld\\n\", qword_407E58);\n    sub_4027B0(dest);\n    printf(\"simplex iterations         : %ld\\n\", qword_407F08);\n    v2 = sub_400DA0(dest);\n    printf(\"objective value            : %0.0f\\n\", v2);\n    if ( !++v1 )\n      break;\n    if ( qword_407E68 )\n    {\n      v3 = sub_402090(dest, -1LL, 0LL);\n      if ( v3 )\n        printf(\"erased arcs                : %ld\\n\", v3);\n    }\n    v4 = sub_401A80(dest);\n    if ( !v4 )\n      break;\n    printf(\"new implicit arcs          : %ld\\n\", v4);\n    if ( v4 < 0 )\n    {\n      puts(\"not enough memory, exit(-1)\");\n      exit(-1);\n    }\n  }\n  printf(\"checksum                   : %ld\\n\", qword_407F18);\n  return 0LL;\n}\n"
        },
        {
            "funcName": "main",
            "funcStartAddr": "0x400b10",
            "funcEndAddr": "0x400bfb",
            "decompiledFuncCode": "__int64 __fastcall main(int a1, char **a2, char **a3, double a4)\n{\n  unsigned int v4; // ebp\n  __int64 v5; // rbx\n\n  v4 = -1;\n  if ( a1 >= 2 )\n  {\n    puts(\"\\nMCF SPEC CPU2006 version 1.10\");\n    puts(\"Copyright (c) 1998-2000 Zuse Institut Berlin (ZIB)\");\n    puts(\"Copyright (c) 2000-2002 Andreas Loebel & ZIB\");\n    puts(\"Copyright (c) 2003-2005 Andreas Loebel\");\n    putchar(10);\n    memset(dest, 0, 0x270uLL);\n    qword_407EC0 = 10000000LL;\n    strcpy(dest, a2[1]);\n    if ( sub_401310((__int64)dest) )\n    {\n      puts(\"read error, exit\");\n      sub_4012C0(dest);\n    }\n    else\n    {\n      printf(\"nodes                      : %ld\\n\", qword_407E48);\n      sub_402190(dest);\n      sub_400A20(a4);\n      puts(\"done\");\n      v5 = sub_402340(\"mcf.out\", dest);\n      sub_4012C0(dest);\n      return (unsigned int)-(v5 != 0);\n    }\n  }\n  return v4;\n}\n"
        },
        {
            "funcName": "sub_400C00",
            "funcStartAddr": "0x400c00",
            "funcEndAddr": "0x400ce5",
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_400C00(_QWORD *a1)\n{\n  unsigned __int64 result; // rax\n  unsigned __int64 i; // rcx\n  unsigned __int64 v3; // rcx\n  unsigned __int64 v4; // r8\n  unsigned __int64 v5; // rdx\n  __int64 v6; // rsi\n  __int64 v7; // rsi\n  _QWORD *v8; // rcx\n  _QWORD *v9; // rdx\n  __int64 v10; // rdi\n  __int64 v11; // rax\n  __int64 v12; // rax\n  bool v13; // cf\n\n  result = a1[69];\n  for ( i = a1[70]; result < i; result += 104LL )\n    *(_OWORD *)(result + 56) = 0LL;\n  v3 = a1[71];\n  v4 = a1[72];\n  if ( v3 < v4 )\n  {\n    v5 = v4 + ~v3;\n    if ( (v5 & 0x40) == 0 )\n    {\n      v6 = *(_QWORD *)(v3 + 8);\n      *(_QWORD *)(v3 + 32) = *(_QWORD *)(v6 + 56);\n      *(_QWORD *)(v6 + 56) = v3;\n      v7 = *(_QWORD *)(v3 + 16);\n      *(_QWORD *)(v3 + 40) = *(_QWORD *)(v7 + 64);\n      *(_QWORD *)(v7 + 64) = v3;\n      v3 += 64LL;\n    }\n    if ( v5 >= 0x40 )\n    {\n      v8 = (_QWORD *)(v3 + 64);\n      v9 = v8;\n      do\n      {\n        v10 = *(v8 - 7);\n        *(v8 - 4) = *(_QWORD *)(v10 + 56);\n        *(_QWORD *)(v10 + 56) = v8 - 8;\n        v11 = *(v8 - 6);\n        *(v8 - 3) = *(_QWORD *)(v11 + 64);\n        *(_QWORD *)(v11 + 64) = v8 - 8;\n        v12 = v8[1];\n        v8[4] = *(_QWORD *)(v12 + 56);\n        *(_QWORD *)(v12 + 56) = v8;\n        result = v8[2];\n        v8[5] = *(_QWORD *)(result + 64);\n        *(_QWORD *)(result + 64) = v8;\n        v9 += 16;\n        v13 = (unsigned __int64)(v8 + 8) < v4;\n        v8 = v9;\n      }\n      while ( v13 );\n    }\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_400CF0",
            "funcStartAddr": "0x400cf0",
            "funcEndAddr": "0x400d97",
            "decompiledFuncCode": "__int64 __fastcall sub_400CF0(__int64 a1)\n{\n  _QWORD *v1; // r8\n  _QWORD *v2; // rdi\n  __int64 result; // rax\n  _QWORD *v4; // rdx\n  _QWORD *v5; // rcx\n  __int64 v6; // rsi\n  _QWORD *v7; // rsi\n\n  v1 = *(_QWORD **)(a1 + 552);\n  *v1 = -100000000LL;\n  v2 = (_QWORD *)v1[2];\n  result = 0LL;\n  if ( v2 != v1 )\n  {\n    v4 = (_QWORD *)v1[2];\n    do\n    {\n      if ( v2 )\n      {\n        do\n        {\n          v4 = v2;\n          v5 = (_QWORD *)v2[3];\n          if ( *((_DWORD *)v2 + 2) == 1 )\n          {\n            v6 = *(_QWORD *)v2[6] + *v5;\n          }\n          else\n          {\n            v6 = *v5 - *(_QWORD *)v2[6];\n            ++result;\n          }\n          *v2 = v6;\n          v2 = (_QWORD *)v2[2];\n        }\n        while ( v2 );\n      }\n      else\n      {\n        v5 = (_QWORD *)v4[3];\n      }\n      v7 = v4;\n      v2 = v4;\n      if ( v5 )\n      {\n        while ( 1 )\n        {\n          v4 = (_QWORD *)v7[4];\n          v7 = v5;\n          v2 = v4;\n          if ( v4 )\n            break;\n          v5 = (_QWORD *)v5[3];\n          if ( !v5 )\n          {\n            v4 = 0LL;\n            v2 = v7;\n            break;\n          }\n        }\n      }\n    }\n    while ( v2 != v1 );\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_400DA0",
            "funcStartAddr": "0x400da0",
            "funcEndAddr": "0x400f5f",
            "decompiledFuncCode": "double __fastcall sub_400DA0(_QWORD *a1)\n{\n  char *v1; // rax\n  char *v2; // r9\n  __int64 v3; // rdx\n  __int64 v4; // rsi\n  int v5; // ecx\n  __int64 v6; // r8\n  __int64 i; // rdx\n  __int64 v8; // rdx\n  int v9; // r8d\n  int v10; // ecx\n  __int64 v11; // rsi\n\n  v1 = (char *)a1[71];\n  v2 = (char *)a1[72];\n  if ( v1 != v2 )\n  {\n    v3 = a1[71];\n    if ( (((unsigned __int8)((unsigned int)((_DWORD)v2 - 64 - (_DWORD)v1) >> 6) + 1) & 7) != 0 )\n    {\n      v4 = -(__int64)(((unsigned __int8)((unsigned int)((_DWORD)v2 - 64 - (_DWORD)v1) >> 6) + 1) & 7);\n      v3 = a1[71];\n      do\n      {\n        *(_QWORD *)(v3 + 48) = *(_DWORD *)(v3 + 24) == 2;\n        v3 += 64LL;\n        ++v4;\n      }\n      while ( v4 );\n    }\n    if ( (unsigned __int64)(v2 - 64 - v1) >= 0x1C0 )\n    {\n      do\n      {\n        v5 = *(_DWORD *)(v3 + 88);\n        *(_QWORD *)(v3 + 48) = *(_DWORD *)(v3 + 24) == 2;\n        *(_QWORD *)(v3 + 112) = v5 == 2;\n        *(_QWORD *)(v3 + 176) = *(_DWORD *)(v3 + 152) == 2;\n        *(_QWORD *)(v3 + 240) = *(_DWORD *)(v3 + 216) == 2;\n        *(_QWORD *)(v3 + 304) = *(_DWORD *)(v3 + 280) == 2;\n        *(_QWORD *)(v3 + 368) = *(_DWORD *)(v3 + 344) == 2;\n        *(_QWORD *)(v3 + 432) = *(_DWORD *)(v3 + 408) == 2;\n        *(_QWORD *)(v3 + 496) = *(_DWORD *)(v3 + 472) == 2;\n        v3 += 512LL;\n      }\n      while ( v2 != (char *)v3 );\n    }\n  }\n  v6 = a1[70];\n  for ( i = a1[69] + 104LL; v6 != i; i += 104LL )\n    *(_QWORD *)(*(_QWORD *)(i + 48) + 48LL) = *(_QWORD *)(i + 80);\n  if ( v1 != v2 )\n  {\n    v8 = 0LL;\n    v9 = 0;\n    while ( 1 )\n    {\n      if ( *((_QWORD *)v1 + 6) )\n      {\n        v10 = *(_DWORD *)(*((_QWORD *)v1 + 1) + 96LL);\n        if ( v10 < 0 )\n        {\n          if ( *(int *)(*((_QWORD *)v1 + 2) + 96LL) <= 0 )\n          {\n            v11 = *(_QWORD *)v1;\nLABEL_17:\n            v8 += v11;\n          }\n        }\n        else\n        {\n          v11 = *(_QWORD *)v1;\n          if ( v10 )\n            goto LABEL_17;\n          ++v9;\n          v8 = v8 + v11 - a1[66];\n        }\n      }\n      v1 += 64;\n      if ( v2 == v1 )\n        return (double)(int)v8 + (double)(int)a1[66] * (double)v9;\n    }\n  }\n  v9 = 0;\n  LODWORD(v8) = 0;\n  return (double)(int)v8 + (double)(int)a1[66] * (double)v9;\n}\n"
        },
        {
            "funcName": "sub_401120",
            "funcStartAddr": "0x401120",
            "funcEndAddr": "0x40121e",
            "decompiledFuncCode": "__int64 __fastcall sub_401120(_QWORD *a1)\n{\n  unsigned __int64 v1; // rbp\n  unsigned __int64 v2; // rbx\n  unsigned __int64 v3; // r12\n  unsigned __int64 v4; // r14\n  unsigned __int64 v5; // rax\n  __int64 v6; // r13\n  __int64 v7; // rax\n  __int64 v8; // rbx\n  __int64 result; // rax\n\n  v1 = a1[70];\n  v2 = a1[69] + 104LL;\n  if ( v2 < v1 )\n  {\n    v3 = a1[73];\n    v4 = a1[74];\n    while ( 1 )\n    {\n      v5 = *(_QWORD *)(v2 + 48);\n      v6 = *(_QWORD *)(v2 + 80);\n      if ( v5 < v3 || v5 >= v4 )\n      {\n        if ( v6 < -a1[64] || v6 - 1 > a1[64] )\n        {\n          v8 = 0LL;\n          printf(\"PRIMAL NETWORK SIMPLEX: \");\n          printf(\"basis primal infeasible (%ld)\\n\", v6);\n          result = 1LL;\n          goto LABEL_15;\n        }\n      }\n      else\n      {\n        v7 = -v6;\n        if ( -v6 < 1 )\n          v7 = *(_QWORD *)(v2 + 80);\n        if ( v7 > a1[64] )\n        {\n          printf(\"PRIMAL NETWORK SIMPLEX: \");\n          printf(\"artificial arc with nonzero flow, node %d (%ld)\\n\", *(unsigned int *)(v2 + 96), v6);\n        }\n      }\n      v2 += 104LL;\n      if ( v2 >= v1 )\n      {\n        v8 = 1LL;\n        result = 0LL;\n        goto LABEL_15;\n      }\n    }\n  }\n  result = 0LL;\n  v8 = 1LL;\nLABEL_15:\n  a1[61] = v8;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_401220",
            "funcStartAddr": "0x401220",
            "funcEndAddr": "0x4012bb",
            "decompiledFuncCode": "__int64 __fastcall sub_401220(_QWORD *a1)\n{\n  unsigned __int64 v1; // rax\n  unsigned __int64 v2; // rcx\n  __int64 i; // rbx\n  __int64 v4; // rdx\n\n  v1 = a1[71];\n  v2 = a1[72];\n  for ( i = 0LL; v1 < v2; v1 += 64LL )\n  {\n    v4 = **(_QWORD **)(v1 + 16) + *(_QWORD *)v1 - **(_QWORD **)(v1 + 8);\n    if ( *(_DWORD *)(v1 + 24) >= 2u )\n    {\n      if ( *(_DWORD *)(v1 + 24) == 2 && v4 > a1[64] )\n      {\nLABEL_9:\n        i = 1LL;\n        fwrite(\"DUAL NETWORK SIMPLEX: \", 0x16uLL, 1uLL, stderr);\n        fwrite(\"basis dual infeasible\\n\", 0x16uLL, 1uLL, stderr);\n        return i;\n      }\n    }\n    else if ( v4 < -a1[64] )\n    {\n      goto LABEL_9;\n    }\n  }\n  return i;\n}\n"
        },
        {
            "funcName": "sub_4012C0",
            "funcStartAddr": "0x4012c0",
            "funcEndAddr": "0x401310",
            "decompiledFuncCode": "__int64 __fastcall sub_4012C0(_QWORD *a1)\n{\n  void *v2; // rdi\n  void *v3; // rdi\n  void *v4; // rdi\n  _OWORD *v5; // rbx\n\n  v2 = (void *)a1[69];\n  if ( v2 )\n    free(v2);\n  v3 = (void *)a1[71];\n  if ( v3 )\n    free(v3);\n  v4 = (void *)a1[73];\n  v5 = a1 + 69;\n  if ( v4 )\n    free(v4);\n  v5[2] = 0LL;\n  v5[1] = 0LL;\n  *v5 = 0LL;\n  return 0LL;\n}\n"
        },
        {
            "funcName": "sub_401310",
            "funcStartAddr": "0x401310",
            "funcEndAddr": "0x401820",
            "decompiledFuncCode": "__int64 __fastcall sub_401310(__int64 a1)\n{\n  FILE *v1; // rax\n  FILE *v2; // rbx\n  __int64 v3; // r15\n  __int64 v4; // rdx\n  __int64 v5; // rax\n  size_t v6; // r12\n  __int64 v7; // r15\n  size_t v8; // rbx\n  __int64 v9; // rcx\n  char *v10; // r13\n  char *v11; // r14\n  _QWORD *v12; // rbx\n  __int64 v13; // r8\n  char *v14; // r14\n  int v15; // r12d\n  __int64 v16; // r15\n  int v17; // edx\n  int v18; // ecx\n  __int64 v19; // rsi\n  __int64 v20; // rax\n  __int64 v21; // rcx\n  __int64 v22; // rsi\n  _QWORD *v23; // rcx\n  __int64 v24; // rsi\n  __int64 v26; // r15\n  __int64 v27; // rbp\n  FILE *v28; // r12\n  __int64 v29; // rax\n  __int64 v30; // rcx\n  __int64 v31; // rdx\n  unsigned __int64 v33; // rax\n  __int64 v34; // rbx\n  __int64 v35; // rsi\n  __int64 v36; // rax\n  __int64 v37; // rcx\n  __int64 v38; // rcx\n  __int64 v39; // rbp\n  __int64 v40; // rsi\n  __int64 *v41; // rdi\n  __int64 v42; // rdx\n  __int64 v43; // rsi\n  __int64 v44; // [rsp+0h] [rbp-138h] BYREF\n  __int64 v45; // [rsp+8h] [rbp-130h] BYREF\n  FILE *stream; // [rsp+10h] [rbp-128h]\n  __int64 v47; // [rsp+18h] [rbp-120h]\n  __int64 v48; // [rsp+20h] [rbp-118h]\n  __int64 v49; // [rsp+28h] [rbp-110h] BYREF\n  char s[264]; // [rsp+30h] [rbp-108h] BYREF\n\n  v1 = fopen((const char *)a1, \"r\");\n  v2 = v1;\n  v3 = -1LL;\n  if ( v1 )\n  {\n    fgets(s, 200, v1);\n    if ( (unsigned int)__isoc99_sscanf(s, \"%ld %ld\", &v45, &v44) == 2 )\n    {\n      stream = v2;\n      v4 = v45;\n      *(_QWORD *)(a1 + 408) = v45;\n      v5 = v44;\n      *(_QWORD *)(a1 + 432) = v44;\n      v6 = 2 * v4 + 1;\n      *(_QWORD *)(a1 + 400) = v6;\n      v7 = v5 + 3 * v4;\n      *(_QWORD *)(a1 + 424) = v7;\n      v8 = 27328512LL;\n      if ( v4 < 15001 )\n        v8 = v5 + 3 * v4;\n      v9 = 28900000LL;\n      if ( v4 < 15001 )\n        v9 = 3000000LL;\n      *(_QWORD *)(a1 + 416) = v8;\n      *(_QWORD *)(a1 + 456) = v9;\n      *(_QWORD *)(a1 + 448) = v8 - v7;\n      v48 = v4;\n      v10 = (char *)calloc(2 * v4 + 2, 0x68uLL);\n      *(_QWORD *)(a1 + 552) = v10;\n      v11 = (char *)calloc(v6, 0x40uLL);\n      *(_QWORD *)(a1 + 584) = v11;\n      v12 = calloc(v8, 0x40uLL);\n      *(_QWORD *)(a1 + 568) = v12;\n      if ( v12 && v10 && v11 )\n      {\n        *(_QWORD *)(a1 + 560) = &v10[104 * v6 + 104];\n        *(_QWORD *)(a1 + 576) = &v12[8 * v7];\n        *(_QWORD *)(a1 + 592) = &v11[64 * v6];\n        v13 = v48;\n        v47 = a1;\n        if ( v48 > 0 )\n        {\n          v14 = v10 + 104;\n          v15 = -1;\n          v16 = 1LL;\n          while ( 1 )\n          {\n            fgets(s, 200, stream);\n            if ( (unsigned int)__isoc99_sscanf(s, \"%ld %ld\", &v45, &v44) != 2 )\n              return -1LL;\n            v17 = v45;\n            v18 = v44;\n            if ( v45 > v44 )\n              return -1LL;\n            *((_DWORD *)v14 + 24) = v15;\n            *((_QWORD *)v14 + 10) = -1LL;\n            v19 = v47;\n            v13 = *(_QWORD *)(v47 + 408);\n            v20 = 104 * (v16 + v13);\n            *(_DWORD *)&v10[v20 + 96] = v16;\n            *(_QWORD *)&v10[v20 + 80] = 1LL;\n            *((_DWORD *)v14 + 25) = v17;\n            *(_DWORD *)&v10[v20 + 100] = v18;\n            v21 = 104LL * *(_QWORD *)(v19 + 400);\n            v12[1] = &v10[v21];\n            v12[2] = v14;\n            v22 = *(_QWORD *)(v19 + 528);\n            *v12 = v22 + 15;\n            v12[7] = v22 + 15;\n            v12[4] = *(_QWORD *)&v10[v21 + 56];\n            *(_QWORD *)&v10[v21 + 56] = v12;\n            v12[5] = *((_QWORD *)v14 + 8);\n            *((_QWORD *)v14 + 8) = v12;\n            v12[9] = &v10[v20];\n            v12[10] = &v10[v21];\n            v12[8] = 15LL;\n            v12[15] = 15LL;\n            v12[12] = *(_QWORD *)&v10[v20 + 56];\n            *(_QWORD *)&v10[v20 + 56] = v12 + 8;\n            v12[13] = *(_QWORD *)&v10[v21 + 64];\n            *(_QWORD *)&v10[v21 + 64] = v12 + 8;\n            v12[17] = v14;\n            v12[18] = &v10[v20];\n            v23 = v12 + 16;\n            if ( v22 <= 9999999 )\n              v22 = 10000000LL;\n            v24 = 2 * v22;\n            v12[16] = v24;\n            v12[23] = v24;\n            v12[20] = *((_QWORD *)v14 + 7);\n            *((_QWORD *)v14 + 7) = v23;\n            v12[21] = *(_QWORD *)&v10[v20 + 64];\n            *(_QWORD *)&v10[v20 + 64] = v23;\n            v12 += 24;\n            v14 += 104;\n            --v15;\n            if ( v16++ >= v13 )\n              goto LABEL_20;\n          }\n        }\n        v16 = 1LL;\nLABEL_20:\n        if ( v16 != v13 + 1 )\n          return -1LL;\n        v26 = v47;\n        if ( *(__int64 *)(v47 + 432) > 0 )\n        {\n          v27 = 0LL;\n          v28 = stream;\n          while ( 1 )\n          {\n            fgets(s, 200, v28);\n            if ( (unsigned int)__isoc99_sscanf(s, \"%ld %ld %ld\", &v45, &v44, &v49) != 3 )\n              return -1LL;\n            v29 = 104 * (v45 + *(_QWORD *)(v26 + 408));\n            v12[1] = &v10[v29];\n            v30 = 104 * v44;\n            v12[2] = &v10[104 * v44];\n            v31 = v49;\n            v12[7] = v49;\n            *v12 = v31;\n            v12[4] = *(_QWORD *)&v10[v29 + 56];\n            *(_QWORD *)&v10[v29 + 56] = v12;\n            v12[5] = *(_QWORD *)&v10[v30 + 64];\n            *(_QWORD *)&v10[v30 + 64] = v12;\n            ++v27;\n            v12 += 8;\n            if ( v27 >= *(_QWORD *)(v26 + 432) )\n              goto LABEL_29;\n          }\n        }\n        v28 = stream;\nLABEL_29:\n        if ( *(_QWORD **)(v26 + 576) != v12 )\n        {\n          *(_QWORD *)(v26 + 576) = v12;\n          v33 = *(_QWORD *)(v26 + 568);\n          if ( v33 >= (unsigned __int64)v12 )\n            v34 = 0LL;\n          else\n            v34 = (((unsigned __int64)v12 + ~v33) >> 6) + 1;\n          *(_QWORD *)(v26 + 424) = v34;\n          *(_QWORD *)(v26 + 432) = v34;\n        }\n        fclose(v28);\n        *(_BYTE *)(v26 + 200) = 0;\n        v35 = *(_QWORD *)(v26 + 408);\n        if ( v35 > 0 )\n        {\n          v36 = *(_QWORD *)(v26 + 568);\n          v37 = 10000000LL;\n          if ( *(__int64 *)(v26 + 528) > 9999999 )\n            v37 = *(_QWORD *)(v26 + 528);\n          v38 = -2 * v37;\n          v39 = *(_QWORD *)(v26 + 408) & 1LL;\n          if ( v35 == 1 )\n          {\n            v40 = 2LL;\n            if ( !v39 )\n              return 0LL;\n          }\n          else\n          {\n            v41 = (__int64 *)(v36 + 376);\n            v42 = v39 - v35;\n            v40 = 2LL;\n            do\n            {\n              *(v41 - 31) = v38;\n              *(v41 - 24) = v38;\n              *(v41 - 7) = v38;\n              *v41 = v38;\n              v41 += 48;\n              v40 += 6LL;\n              v42 += 2LL;\n            }\n            while ( v42 );\n            if ( !v39 )\n              return 0LL;\n          }\n          v43 = v40 << 6;\n          *(_QWORD *)(v36 + v43) = v38;\n          *(_QWORD *)(v36 + v43 + 56) = v38;\n        }\n        return 0LL;\n      }\n      puts(\"read_min(): not enough memory\");\n      sub_4012C0((_QWORD *)a1);\n      return -1LL;\n    }\n  }\n  return v3;\n}\n"
        },
        {
            "funcName": "sub_401820",
            "funcStartAddr": "0x401820",
            "funcEndAddr": "0x4018e0",
            "decompiledFuncCode": "__int64 __fastcall sub_401820(__int64 a1)\n{\n  __int64 v2; // rax\n  void *v3; // rdi\n  __int64 v4; // rsi\n  char *v5; // rax\n  __int64 v6; // rcx\n  __int64 v7; // rdx\n  unsigned __int64 v8; // rsi\n  unsigned __int64 v9; // rdi\n  char *v10; // rax\n  __int64 v11; // rcx\n\n  v2 = *(_QWORD *)(a1 + 456);\n  v3 = *(void **)(a1 + 568);\n  v4 = v2 + *(_QWORD *)(a1 + 416);\n  *(_QWORD *)(a1 + 416) = v4;\n  *(_QWORD *)(a1 + 448) += v2;\n  v5 = (char *)realloc(v3, v4 << 6);\n  if ( v5 )\n  {\n    v6 = *(_QWORD *)(a1 + 568);\n    *(_QWORD *)(a1 + 568) = v5;\n    v7 = *(_QWORD *)(a1 + 552);\n    *(_QWORD *)(a1 + 576) = &v5[64 * *(_QWORD *)(a1 + 424)];\n    v8 = *(_QWORD *)(a1 + 560);\n    v9 = v7 + 104;\n    if ( v7 + 104 >= v8 )\n    {\n      return 0LL;\n    }\n    else\n    {\n      v10 = &v5[-v6];\n      v11 = 0LL;\n      do\n      {\n        if ( *(_QWORD *)(v9 + 24) != v7 )\n          *(_QWORD *)(v9 + 48) += v10;\n        v9 += 104LL;\n      }\n      while ( v9 < v8 );\n    }\n  }\n  else\n  {\n    printf(\"network %s: not enough memory\\n\", (const char *)a1);\n    fflush(stdout);\n    return -1LL;\n  }\n  return v11;\n}\n"
        },
        {
            "funcName": "sub_401A80",
            "funcStartAddr": "0x401a80",
            "funcEndAddr": "0x402081",
            "decompiledFuncCode": "__int64 __fastcall sub_401A80(_QWORD *a1)\n{\n  __int64 v1; // r8\n  __int64 v2; // rbx\n  signed __int64 v3; // rax\n  __int64 v4; // rcx\n  __int64 v5; // rcx\n  __int64 result; // rax\n  __int64 v7; // rax\n  __int64 v8; // r10\n  __int64 v9; // r11\n  __int64 i; // r14\n  __int64 v11; // rbx\n  __int64 v12; // rsi\n  __int64 v13; // rbp\n  __int64 v14; // r12\n  __int64 v15; // r15\n  __int64 v16; // r13\n  __int64 v17; // rbp\n  __int64 v18; // rcx\n  __int64 v19; // r8\n  __int64 v20; // rbp\n  __int64 v21; // rdi\n  __int64 v22; // rcx\n  __int64 v23; // rax\n  __int64 v24; // r9\n  __int64 v25; // rdi\n  __int64 v26; // rbx\n  __int64 v27; // r12\n  __int64 v28; // r8\n  __int64 v29; // rbp\n  __int64 v30; // rcx\n  __int64 v31; // rdi\n  __int64 v32; // rcx\n  __int64 v33; // rdx\n  __int64 v34; // rdx\n  unsigned __int64 v35; // rsi\n  __int64 v36; // rcx\n  __int64 v37; // rcx\n  __int64 v38; // rcx\n  __int64 v39; // rcx\n  __int64 v40; // rcx\n  __int64 v41; // rsi\n  __int64 v42; // rsi\n  __int64 v43; // [rsp+8h] [rbp-60h]\n  __int64 v44; // [rsp+10h] [rbp-58h]\n  __int64 v45; // [rsp+18h] [rbp-50h]\n  _QWORD *v46; // [rsp+20h] [rbp-48h]\n  _QWORD *v47; // [rsp+28h] [rbp-40h]\n  __int64 v48; // [rsp+30h] [rbp-38h]\n\n  v1 = a1[51];\n  v2 = a1[66];\n  if ( v1 >= 15001 )\n  {\n    v47 = a1 + 72;\n    v8 = a1[71];\n    v9 = a1[72];\n    v7 = 0LL;\n  }\n  else\n  {\n    v3 = a1[52];\n    v4 = a1[53];\n    if ( v4 + a1[57] <= v3 || (__int64)(((unsigned __int64)(v1 * v1) >> 1) + v4) <= v3 )\n    {\n      v7 = 0LL;\n    }\n    else\n    {\n      v5 = sub_401820((__int64)a1);\n      result = -1LL;\n      if ( v5 )\n        return result;\n      sub_400C00(a1);\n      v1 = a1[51];\n      v7 = 1LL;\n    }\n    v8 = a1[71];\n    v9 = a1[72];\n    v47 = a1 + 72;\n    if ( v1 <= 0 )\n      return 0LL;\n  }\n  for ( i = 0LL; i < v1; ++i )\n  {\n    if ( *(_DWORD *)(v8 + 88) != -1 )\n      break;\n    v8 += 192LL;\n  }\n  if ( i >= v1 )\n    return 0LL;\n  v48 = v7;\n  v11 = v2 - 15;\n  v12 = 0LL;\n  result = 0LL;\n  v45 = v11;\n  v44 = v1;\n  v46 = a1;\n  do\n  {\n    if ( *(_DWORD *)(v8 + 88) != -1 )\n    {\n      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 16) + 56LL) + 16LL) + 72LL) = v12;\n      v12 = v8 + 64;\n    }\n    if ( *(_DWORD *)(v8 + 24) != -1 )\n    {\n      v13 = *(_QWORD *)(*(_QWORD *)(v12 + 8) + 72LL);\n      if ( v13 )\n      {\n        v14 = *(_QWORD *)(v8 + 16);\n        v15 = *(int *)(v14 + 100) + v11 - *(_QWORD *)(v8 + 56);\n        do\n        {\n          v33 = *(_QWORD *)(v13 + 8);\n          if ( *(_QWORD *)(v13 + 56) + *(int *)(v33 + 100) <= v15 )\n          {\n            v16 = *(_QWORD *)v14 + 30LL - *(_QWORD *)v33;\n            if ( v16 < 0 )\n            {\n              v17 = a1[56];\n              if ( result >= v17 )\n              {\n                if ( *(_QWORD *)(v9 + 48) > v16 )\n                {\n                  v43 = v12;\n                  *(_QWORD *)(v9 + 8) = v33;\n                  *(_QWORD *)(v9 + 16) = v14;\n                  *(_QWORD *)(v9 + 56) = 30LL;\n                  *(_QWORD *)v9 = 30LL;\n                  *(_QWORD *)(v9 + 48) = v16;\n                  v24 = 3LL - (*(_QWORD *)(v9 + 112) > *(_QWORD *)(v9 + 176));\n                  if ( v24 <= v17 )\n                  {\n                    v25 = 1LL;\n                    while ( 1 )\n                    {\n                      v26 = v14;\n                      v27 = v17;\n                      v28 = v24;\n                      v29 = (v24 - 1) << 6;\n                      v30 = *(_QWORD *)(v9 + v29 + 48);\n                      if ( v30 <= v16 )\n                        break;\n                      v31 = v25 << 6;\n                      *(_QWORD *)(v9 + v31 - 48) = *(_QWORD *)(v9 + v29 + 16);\n                      *(_OWORD *)(v9 + v31 - 64) = *(_OWORD *)(v9 + v29);\n                      *(_QWORD *)(v9 + v31 - 8) = *(_QWORD *)(v9 + v29);\n                      *(_QWORD *)(v9 + v31 - 16) = v30;\n                      *(_QWORD *)(v9 + v29 + 8) = v33;\n                      *(_QWORD *)(v9 + v29 + 16) = v26;\n                      *(_QWORD *)(v9 + v29) = 30LL;\n                      *(_QWORD *)(v9 + v29 + 56) = 30LL;\n                      *(_QWORD *)(v9 + v29 + 48) = v16;\n                      v24 *= 2LL;\n                      v32 = 2 * v28 + 1;\n                      v17 = v27;\n                      if ( v32 <= v27 )\n                      {\n                        if ( *(_QWORD *)(v9 + (v28 << 7) - 16) >= *(_QWORD *)(v9 + (v28 << 7) + 48) )\n                          v32 = 2 * v28;\n                        v24 = v32;\n                      }\n                      v12 = v43;\n                      v14 = v26;\n                      v25 = v28;\n                      if ( v24 > v17 )\n                      {\n                        a1 = v46;\n                        v11 = v45;\n                        v1 = v44;\n                        goto LABEL_40;\n                      }\n                    }\n                    a1 = v46;\n                    v1 = v44;\n                    v14 = v26;\n                    v11 = v45;\n                  }\n                }\n              }\n              else\n              {\n                v18 = result << 6;\n                *(_QWORD *)(v9 + v18 + 8) = v33;\n                *(_QWORD *)(v9 + v18 + 16) = v14;\n                *(_QWORD *)(v9 + v18 + 56) = 30LL;\n                *(_QWORD *)(v9 + v18) = 30LL;\n                *(_QWORD *)(v9 + v18 + 48) = v16;\n                if ( result )\n                {\n                  v19 = result + 1;\n                  v20 = result + 1;\n                  do\n                  {\n                    v20 /= 2LL;\n                    v21 = (v20 - 1) << 6;\n                    v22 = *(_QWORD *)(v9 + v21 + 48);\n                    if ( v22 >= v16 )\n                      break;\n                    v23 = result << 6;\n                    *(_QWORD *)(v9 + v23 + 16) = *(_QWORD *)(v9 + v21 + 16);\n                    *(_OWORD *)(v9 + v23) = *(_OWORD *)(v9 + v21);\n                    *(_QWORD *)(v9 + v23 + 56) = *(_QWORD *)(v9 + v21);\n                    *(_QWORD *)(v9 + v23 + 48) = v22;\n                    *(_QWORD *)(v9 + v21 + 8) = v33;\n                    *(_QWORD *)(v9 + v21 + 16) = v14;\n                    *(_QWORD *)(v9 + v21) = 30LL;\n                    *(_QWORD *)(v9 + v21 + 56) = 30LL;\n                    *(_QWORD *)(v9 + v21 + 48) = v16;\n                    result = v20 - 1;\n                  }\n                  while ( v20 != 1 );\n                  result = v19;\n                  a1 = v46;\n                  v11 = v45;\n                  v1 = v44;\n                }\n                else\n                {\n                  result = 1LL;\n                }\n              }\n            }\n          }\nLABEL_40:\n          v13 = *(_QWORD *)(v33 + 72);\n        }\n        while ( v13 );\n      }\n    }\n    ++i;\n    v8 += 192LL;\n  }\n  while ( i != v1 );\n  if ( !result )\n    return 0LL;\n  v34 = v9 + (result << 6);\n  *v47 = v34;\n  v35 = (result << 6) - 64;\n  if ( v48 )\n  {\n    if ( (((unsigned __int8)((unsigned int)v35 >> 6) + 1) & 7) != 0 )\n    {\n      v36 = -(__int64)(((unsigned __int8)((unsigned int)v35 >> 6) + 1) & 7);\n      do\n      {\n        *(_QWORD *)(v9 + 48) = 0LL;\n        *(_DWORD *)(v9 + 24) = 1;\n        v9 += 64LL;\n        ++v36;\n      }\n      while ( v36 );\n    }\n    if ( v35 >= 0x1C0 )\n    {\n      do\n      {\n        *(_QWORD *)(v9 + 48) = 0LL;\n        *(_DWORD *)(v9 + 24) = 1;\n        *(_QWORD *)(v9 + 112) = 0LL;\n        *(_DWORD *)(v9 + 88) = 1;\n        *(_QWORD *)(v9 + 176) = 0LL;\n        *(_DWORD *)(v9 + 152) = 1;\n        *(_QWORD *)(v9 + 240) = 0LL;\n        *(_DWORD *)(v9 + 216) = 1;\n        *(_QWORD *)(v9 + 304) = 0LL;\n        *(_DWORD *)(v9 + 280) = 1;\n        *(_QWORD *)(v9 + 368) = 0LL;\n        *(_DWORD *)(v9 + 344) = 1;\n        *(_QWORD *)(v9 + 432) = 0LL;\n        *(_DWORD *)(v9 + 408) = 1;\n        *(_QWORD *)(v9 + 496) = 0LL;\n        *(_DWORD *)(v9 + 472) = 1;\n        v9 += 512LL;\n      }\n      while ( v34 != v9 );\n    }\n  }\n  else\n  {\n    if ( (v35 & 0x40) == 0 )\n    {\n      *(_QWORD *)(v9 + 48) = 0LL;\n      *(_DWORD *)(v9 + 24) = 1;\n      v37 = *(_QWORD *)(v9 + 8);\n      *(_QWORD *)(v9 + 32) = *(_QWORD *)(v37 + 56);\n      *(_QWORD *)(v37 + 56) = v9;\n      v38 = *(_QWORD *)(v9 + 16);\n      *(_QWORD *)(v9 + 40) = *(_QWORD *)(v38 + 64);\n      *(_QWORD *)(v38 + 64) = v9;\n      v9 += 64LL;\n    }\n    if ( result << 6 != 64 )\n    {\n      do\n      {\n        *(_QWORD *)(v9 + 48) = 0LL;\n        *(_DWORD *)(v9 + 24) = 1;\n        v39 = *(_QWORD *)(v9 + 8);\n        *(_QWORD *)(v9 + 32) = *(_QWORD *)(v39 + 56);\n        *(_QWORD *)(v39 + 56) = v9;\n        v40 = *(_QWORD *)(v9 + 16);\n        *(_QWORD *)(v9 + 40) = *(_QWORD *)(v40 + 64);\n        *(_QWORD *)(v40 + 64) = v9;\n        *(_QWORD *)(v9 + 112) = 0LL;\n        *(_DWORD *)(v9 + 88) = 1;\n        v41 = *(_QWORD *)(v9 + 72);\n        *(_QWORD *)(v9 + 96) = *(_QWORD *)(v41 + 56);\n        *(_QWORD *)(v41 + 56) = v9 + 64;\n        v42 = *(_QWORD *)(v9 + 80);\n        *(_QWORD *)(v9 + 104) = *(_QWORD *)(v42 + 64);\n        *(_QWORD *)(v42 + 64) = v9 + 64;\n        v9 += 128LL;\n      }\n      while ( v34 != v9 );\n    }\n  }\n  a1[53] += result;\n  a1[55] += result;\n  a1[56] -= result;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_402090",
            "funcStartAddr": "0x402090",
            "funcEndAddr": "0x40218f",
            "decompiledFuncCode": "__int64 __fastcall sub_402090(_QWORD *a1, __int64 a2, __int64 a3)\n{\n  __int64 v3; // r14\n  unsigned __int64 v4; // r8\n  __int128 *v5; // rax\n  _OWORD *v6; // rdx\n  int v7; // ebx\n  __int64 v8; // rcx\n  __int64 v9; // rbx\n  __int128 v10; // xmm0\n  __int128 v11; // xmm1\n  __int128 v12; // xmm2\n\n  if ( a3 )\n  {\n    v3 = a1[55];\n    if ( v3 )\n      goto LABEL_17;\n    return 0LL;\n  }\n  v4 = a1[72];\n  v5 = (__int128 *)(a1[71] + ((a1[53] - a1[55]) << 6));\n  v3 = 0LL;\n  if ( (unsigned __int64)v5 < v4 )\n  {\n    v6 = (_OWORD *)(a1[71] + ((a1[53] - a1[55]) << 6));\n    while ( 1 )\n    {\n      v7 = *((_DWORD *)v5 + 6);\n      v8 = -2LL;\n      if ( v7 )\n      {\n        if ( v7 == 1 )\n          v8 = **((_QWORD **)v5 + 2) + *(_QWORD *)v5 - **((_QWORD **)v5 + 1);\n        if ( v8 <= a2 )\n          goto LABEL_14;\n      }\n      else\n      {\n        v9 = *((_QWORD *)v5 + 1);\n        if ( v5 != *(__int128 **)(v9 + 48) )\n          v9 = *((_QWORD *)v5 + 2);\n        *(_QWORD *)(v9 + 48) = v6;\n        if ( a2 >= -2 )\n        {\nLABEL_14:\n          v10 = *v5;\n          v11 = v5[1];\n          v12 = v5[2];\n          v6[3] = v5[3];\n          v6[2] = v12;\n          v6[1] = v11;\n          *v6 = v10;\n          v6 += 4;\n          goto LABEL_15;\n        }\n      }\n      ++v3;\nLABEL_15:\n      v5 += 4;\n      if ( (unsigned __int64)v5 >= v4 )\n      {\n        if ( v3 )\n        {\nLABEL_17:\n          a1[53] -= v3;\n          a1[55] -= v3;\n          a1[72] -= v3 << 6;\n          a1[56] += v3;\n          sub_400C00(a1);\n          return v3;\n        }\n        return 0LL;\n      }\n    }\n  }\n  return v3;\n}\n"
        },
        {
            "funcName": "sub_402190",
            "funcStartAddr": "0x402190",
            "funcEndAddr": "0x402337",
            "decompiledFuncCode": "__int64 __fastcall sub_402190(_QWORD *a1)\n{\n  __int64 v1; // r10\n  char *v2; // rdx\n  char *v3; // rsi\n  unsigned __int64 v4; // r9\n  __int64 v5; // rcx\n  __int64 v6; // rcx\n  __int64 v7; // rsi\n  __int64 v8; // rcx\n  __m128i v9; // xmm0\n  __int64 v10; // rdx\n  __int64 v11; // rdi\n  _QWORD *v12; // rdx\n\n  v1 = a1[69];\n  *(_QWORD *)(v1 + 48) = 0LL;\n  *(_QWORD *)(v1 + 24) = 0LL;\n  *(_QWORD *)(v1 + 16) = v1 + 104;\n  *(_OWORD *)(v1 + 32) = 0LL;\n  *(_QWORD *)(v1 + 88) = a1[50] + 1LL;\n  *(_DWORD *)(v1 + 8) = 0;\n  *(_QWORD *)v1 = -100000000LL;\n  *(_QWORD *)(v1 + 80) = 0LL;\n  v2 = (char *)a1[71];\n  v3 = (char *)a1[72];\n  if ( v2 != v3 )\n  {\n    v4 = v3 - 64 - v2;\n    if ( (((unsigned __int8)((unsigned int)((_DWORD)v3 - 64 - (_DWORD)v2) >> 6) + 1) & 3) != 0 )\n    {\n      v5 = -(__int64)(((unsigned __int8)((unsigned int)((_DWORD)v3 - 64 - (_DWORD)v2) >> 6) + 1) & 3);\n      do\n      {\n        if ( *((_DWORD *)v2 + 6) != -1 )\n          *((_DWORD *)v2 + 6) = 1;\n        v2 += 64;\n        ++v5;\n      }\n      while ( v5 );\n    }\n    if ( v4 >= 0xC0 )\n    {\n      do\n      {\n        if ( *((_DWORD *)v2 + 6) != -1 )\n          *((_DWORD *)v2 + 6) = 1;\n        if ( *((_DWORD *)v2 + 22) != -1 )\n          *((_DWORD *)v2 + 22) = 1;\n        if ( *((_DWORD *)v2 + 38) != -1 )\n          *((_DWORD *)v2 + 38) = 1;\n        if ( *((_DWORD *)v2 + 54) != -1 )\n          *((_DWORD *)v2 + 54) = 1;\n        v2 += 256;\n      }\n      while ( v3 != v2 );\n    }\n  }\n  v6 = a1[70];\n  if ( v1 + 104 == v6 )\n  {\n    v12 = (_QWORD *)(v1 + 32);\n  }\n  else\n  {\n    v7 = a1[73];\n    v8 = v6 - 104;\n    v9 = _mm_slli_si128((__m128i)1uLL, 8);\n    v10 = v1;\n    do\n    {\n      v11 = v10;\n      v10 += 104LL;\n      *(_QWORD *)(v11 + 152) = v7;\n      *(_QWORD *)(v11 + 128) = v1;\n      *(_QWORD *)(v11 + 120) = 0LL;\n      *(_QWORD *)(v11 + 136) = v11 + 208;\n      *(_QWORD *)(v11 + 144) = v11;\n      *(_QWORD *)v7 = 100000000LL;\n      *(_DWORD *)(v7 + 24) = 0;\n      *(_DWORD *)(v11 + 112) = 1;\n      *(_QWORD *)(v11 + 104) = 0LL;\n      *(_QWORD *)(v7 + 8) = v10;\n      *(_QWORD *)(v7 + 16) = v1;\n      *(__m128i *)(v11 + 184) = v9;\n      v7 += 64LL;\n    }\n    while ( v8 != v10 );\n    v12 = (_QWORD *)(v10 + 32);\n  }\n  *v12 = 0LL;\n  *(_QWORD *)(v1 + 144) = 0LL;\n  return 0LL;\n}\n"
        },
        {
            "funcName": "sub_402340",
            "funcStartAddr": "0x402340",
            "funcEndAddr": "0x402484",
            "decompiledFuncCode": "__int64 __fastcall sub_402340(const char *a1, _QWORD *a2)\n{\n  __int64 v2; // rbp\n  __int64 v3; // r12\n  FILE *v4; // r15\n  __int64 v5; // r14\n  _QWORD *v6; // r13\n  unsigned __int64 v7; // r12\n  _QWORD *v8; // rbp\n  _QWORD *v9; // rax\n\n  v2 = a2[55];\n  v3 = a2[72];\n  v4 = fopen(a1, \"w\");\n  v5 = -1LL;\n  if ( v4 )\n  {\n    sub_400C00(a2);\n    v6 = *(_QWORD **)(a2[69] + 104LL * a2[50] + 56);\n    if ( v6 )\n    {\n      v7 = v3 - (v2 << 6);\n      while ( !v6[6] )\n      {\nLABEL_15:\n        v6 = (_QWORD *)v6[4];\n        if ( !v6 )\n          goto LABEL_16;\n      }\n      fwrite(\"()\\n\", 3uLL, 1uLL, v4);\n      v8 = v6;\n      while ( 1 )\n      {\n        if ( (unsigned __int64)v8 >= v7 )\n          fwrite(\"***\\n\", 4uLL, 1uLL, v4);\n        fprintf(v4, \"%d\\n\", (unsigned int)-*(_DWORD *)(v8[2] + 96LL));\n        v9 = *(_QWORD **)(v8[2] + 104LL * a2[51] + 56);\n        if ( !v9 )\n          break;\n        while ( !v9[6] )\n        {\n          v9 = (_QWORD *)v9[4];\n          if ( !v9 )\n            goto LABEL_17;\n        }\n        v8 = 0LL;\n        if ( *(_DWORD *)(v9[2] + 96LL) )\n          v8 = v9;\n        if ( !v8 )\n          goto LABEL_15;\n      }\nLABEL_17:\n      fclose(v4);\n    }\n    else\n    {\nLABEL_16:\n      fclose(v4);\n      return 0LL;\n    }\n  }\n  return v5;\n}\n"
        },
        {
            "funcName": "sub_402490",
            "funcStartAddr": "0x402490",
            "funcEndAddr": "0x402698",
            "decompiledFuncCode": "__int64 __fastcall sub_402490(\n        __int64 a1,\n        __int32 a2,\n        __int64 a3,\n        __int64 a4,\n        const __m128i *a5,\n        const __m128i *a6,\n        const __m128i *a7,\n        const __m128i *a8,\n        const __m128i *a9,\n        __int64 a10,\n        __int64 a11,\n        __int64 a12)\n{\n  __int64 v12; // r12\n  const __m128i *v13; // rax\n  __int64 v14; // r11\n  __int64 v15; // r11\n  const __m128i *v16; // r13\n  __int64 result; // rax\n  __int64 v18; // rbx\n  __int64 v19; // r11\n  __int64 v20; // rbx\n  const __m128i *v21; // r10\n  __int64 v22; // r14\n  __m128i *v23; // rbp\n  bool v24; // zf\n  __m128i *v25; // rbp\n  __int64 v26; // rbp\n  __int64 v27; // r15\n  __int64 v28; // rbp\n  __int64 v29; // rbp\n  __int64 v30; // r14\n  __int64 v31; // r10\n  __int64 v32; // rcx\n  __m128i v33; // xmm1\n  __int64 v34; // rcx\n\n  v12 = a10;\n  v13 = *(const __m128i **)(a10 + 8);\n  if ( a11 < 0 && v13 == a6 || a11 > 0 && v13 == a5 )\n  {\n    v14 = -a11;\n    if ( -a11 < 1 )\n      v14 = a11;\n  }\n  else\n  {\n    v15 = -a11;\n    if ( -a11 < 1 )\n      v15 = a11;\n    v14 = -v15;\n  }\n  v16 = a8;\n  result = (__int64)a7;\n  do\n  {\nLABEL_12:\n    v18 = result;\n    *(_QWORD *)result += v14;\n    result = *(_QWORD *)(result + 16);\n  }\n  while ( result );\n  while ( (const __m128i *)v18 != a7 )\n  {\n    result = *(_QWORD *)(v18 + 32);\n    if ( result )\n      goto LABEL_12;\n    v18 = *(_QWORD *)(v18 + 24);\n  }\n  v19 = a7[5].m128i_i64[1];\n  if ( a5 != a8 )\n  {\n    v20 = a7[5].m128i_i64[1];\n    v21 = a6;\n    do\n    {\n      result = (__int64)a5;\n      a5 = (const __m128i *)a5[1].m128i_i64[1];\n      v22 = *(_QWORD *)(result + 32);\n      if ( v22 )\n        *(_QWORD *)(v22 + 40) = *(_QWORD *)(result + 40);\n      v23 = *(__m128i **)(result + 40);\n      v24 = v23 == 0LL;\n      v25 = v23 + 2;\n      if ( v24 )\n        v25 = (__m128i *)&a5[1];\n      v25->m128i_i64[0] = v22;\n      *(_QWORD *)(result + 24) = v21;\n      v26 = v21[1].m128i_i64[0];\n      *(_QWORD *)(result + 32) = v26;\n      if ( v26 )\n        *(_QWORD *)(v26 + 40) = result;\n      v21[1].m128i_i64[0] = result;\n      *(_QWORD *)(result + 40) = 0LL;\n      v27 = *(_DWORD *)(result + 8) == 0;\n      v28 = -a3;\n      if ( v27 == a1 )\n        v28 = a3;\n      v29 = *(_QWORD *)(result + 80) + v28;\n      v30 = *(_QWORD *)(result + 48);\n      v31 = *(_QWORD *)(result + 88);\n      *(_DWORD *)(result + 8) = a2;\n      *(_QWORD *)(result + 80) = a4;\n      *(_QWORD *)(result + 48) = v12;\n      *(_QWORD *)(result + 88) = v20;\n      v20 = v19 - v31;\n      a2 = v27;\n      a4 = v29;\n      v21 = (const __m128i *)result;\n      v12 = v30;\n    }\n    while ( a5 != a8 );\n  }\n  if ( a3 <= a12 )\n  {\n    result = (__int64)a9;\n    while ( v16 != a9 )\n    {\n      v16[5].m128i_i64[1] -= v19;\n      v16 = (const __m128i *)v16[1].m128i_i64[1];\n    }\n    while ( a6 != a9 )\n    {\n      a6[5].m128i_i64[1] += v19;\n      a6 = (const __m128i *)a6[1].m128i_i64[1];\n    }\n  }\n  else\n  {\n    if ( a8 != a9 )\n    {\n      result = -a3;\n      do\n      {\n        v16[5].m128i_i64[1] -= v19;\n        v32 = a3;\n        if ( v16->m128i_i32[2] == a1 )\n          v32 = -a3;\n        v16[5].m128i_i64[0] += v32;\n        v16 = (const __m128i *)v16[1].m128i_i64[1];\n      }\n      while ( v16 != a9 );\n    }\n    if ( a6 != a9 )\n    {\n      result = -a3;\n      do\n      {\n        v33 = _mm_loadu_si128(a6 + 5);\n        v34 = a3;\n        if ( a6->m128i_i32[2] != a1 )\n          v34 = -a3;\n        a6[5] = _mm_add_epi64(_mm_unpacklo_epi64((__m128i)(unsigned __int64)v34, (__m128i)(unsigned __int64)v19), v33);\n        a6 = (const __m128i *)a6[1].m128i_i64[1];\n      }\n      while ( a6 != a9 );\n    }\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_4026A0",
            "funcStartAddr": "0x4026a0",
            "funcEndAddr": "0x40275e",
            "decompiledFuncCode": "__int64 __fastcall sub_4026A0(__int64 *a1, _QWORD *a2, __int64 a3, __int64 a4, _QWORD *a5)\n{\n  __int64 result; // rax\n  __int64 v6; // r9\n  __int64 v7; // rcx\n  __int64 v8; // rcx\n\n  result = 0LL;\n  if ( a3 != a4 )\n  {\n    v6 = a3;\n    a3 = a4;\n    do\n    {\n      while ( *(_QWORD *)(v6 + 88) < *(_QWORD *)(a3 + 88) )\n      {\n        if ( *(_DWORD *)(v6 + 8) )\n        {\n          v7 = *(_QWORD *)(v6 + 80);\n          if ( *a1 <= v7 )\n            goto LABEL_16;\n        }\n        else\n        {\n          if ( !*(_QWORD *)(*(_QWORD *)(v6 + 24) + 24LL) )\n            goto LABEL_16;\n          v7 = 1LL - *(_QWORD *)(v6 + 80);\n          if ( *a1 <= v7 )\n            goto LABEL_16;\n        }\n        *a1 = v7;\n        *a2 = 0LL;\n        result = v6;\nLABEL_16:\n        v6 = *(_QWORD *)(v6 + 24);\n        if ( v6 == a3 )\n          goto LABEL_20;\n      }\n      if ( *(_DWORD *)(a3 + 8) )\n      {\n        if ( !*(_QWORD *)(*(_QWORD *)(a3 + 24) + 24LL) )\n          goto LABEL_11;\n        v8 = 1LL - *(_QWORD *)(a3 + 80);\n        if ( *a1 < v8 )\n          goto LABEL_11;\n      }\n      else\n      {\n        v8 = *(_QWORD *)(a3 + 80);\n        if ( *a1 < v8 )\n          goto LABEL_11;\n      }\n      *a1 = v8;\n      *a2 = 1LL;\n      result = a3;\nLABEL_11:\n      a3 = *(_QWORD *)(a3 + 24);\n    }\n    while ( v6 != a3 );\n  }\nLABEL_20:\n  *a5 = a3;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_402760",
            "funcStartAddr": "0x402760",
            "funcEndAddr": "0x4027a7",
            "decompiledFuncCode": "_BOOL8 __fastcall sub_402760(__int64 a1, __int64 a2, __int64 a3)\n{\n  _BOOL8 result; // rax\n\n  while ( a1 != a3 )\n  {\n    result = *(_DWORD *)(a1 + 8) == 0;\n    *(_QWORD *)(a1 + 80) = result;\n    a1 = *(_QWORD *)(a1 + 24);\n  }\n  while ( a2 != a3 )\n  {\n    result = *(_DWORD *)(a2 + 8) != 0;\n    *(_QWORD *)(a2 + 80) = result;\n    a2 = *(_QWORD *)(a2 + 24);\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_4027B0",
            "funcStartAddr": "0x4027b0",
            "funcEndAddr": "0x4029ae",
            "decompiledFuncCode": "__int64 __fastcall sub_4027B0(_QWORD *a1)\n{\n  __int64 v2; // rdi\n  __int64 v3; // rsi\n  unsigned __int64 v4; // r12\n  unsigned __int64 i; // rdx\n  __int64 v6; // r13\n  __int64 *v7; // rcx\n  const __m128i **v8; // rdx\n  __int64 v9; // r14\n  const __m128i *v10; // rbp\n  __int64 v11; // rax\n  __int64 v12; // rdi\n  const __m128i *v13; // r9\n  __int64 v14; // r14\n  int v15; // ebx\n  __int64 v16; // rcx\n  __int64 v17; // rsi\n  __int64 v19; // [rsp+8h] [rbp-60h] BYREF\n  __int64 v20; // [rsp+10h] [rbp-58h] BYREF\n  const __m128i *v21; // [rsp+18h] [rbp-50h] BYREF\n  __int64 v22; // [rsp+20h] [rbp-48h]\n  __int64 v23; // [rsp+28h] [rbp-40h]\n  __int64 v24[7]; // [rsp+30h] [rbp-38h] BYREF\n\n  v2 = a1[53];\n  v3 = a1[71];\n  v4 = a1[72];\n  v23 = v2;\n  v22 = v3;\n  for ( i = v4; ; i = v4 )\n  {\n    v6 = sub_402AD0(v2, v3, i, &v19);\n    if ( !v6 )\n      break;\n    ++a1[75];\n    v7 = (__int64 *)(v6 + 8);\n    v8 = (const __m128i **)(v6 + 16);\n    if ( v19 > 0 )\n      v8 = (const __m128i **)(v6 + 8);\n    if ( v19 > 0 )\n      v7 = (__int64 *)(v6 + 16);\n    v9 = *v7;\n    v10 = *v8;\n    v20 = 1LL;\n    v11 = sub_4026A0(&v20, v24, v9, (__int64)v10, &v21);\n    if ( v11 )\n    {\n      v12 = 0LL;\n      v13 = (const __m128i *)v9;\n      if ( !v24[0] )\n        v13 = v10;\n      if ( !v24[0] )\n        v10 = (const __m128i *)v9;\n      v14 = *(_QWORD *)(v11 + 48);\n      v15 = (v24[0] == *(_DWORD *)(v11 + 8)) + 1;\n      v16 = 1 - v20;\n      if ( v19 <= 0 )\n        v16 = v20;\n      LOBYTE(v12) = v24[0] == 0;\n      sub_402490(\n        v12,\n        *(_QWORD *)(v6 + 8) == (_QWORD)v10,\n        v20,\n        v16,\n        v10,\n        v13,\n        (const __m128i *)v11,\n        *(const __m128i **)(v11 + 24),\n        v21,\n        v6,\n        v19,\n        a1[64]);\n      *(_DWORD *)(v6 + 24) = 0;\n      *(_DWORD *)(v14 + 24) = v15;\n      v17 = a1[75];\n      if ( v17 - 1 == 200\n                    * (((unsigned __int64)(((unsigned __int128)((__int64)0xA3D70A3D70A3D70BLL * (__int128)(v17 - 1)) >> 64)\n                                         + v17\n                                         - 1) >> 63)\n                     + ((__int64)(((unsigned __int128)((__int64)0xA3D70A3D70A3D70BLL * (__int128)(v17 - 1)) >> 64)\n                                + v17\n                                - 1) >> 7)) )\n        a1[77] += sub_400CF0((__int64)a1);\n    }\n    else\n    {\n      ++a1[76];\n      *(_DWORD *)(v6 + 24) = 2 - (*(_DWORD *)(v6 + 24) == 2);\n      if ( v20 )\n        sub_402760(v9, (__int64)v10, (__int64)v21);\n    }\n    v2 = v23;\n    v3 = v22;\n  }\n  a1[77] += sub_400CF0((__int64)a1);\n  sub_401120(a1);\n  sub_401220(a1);\n  return 0LL;\n}\n"
        },
        {
            "funcName": "sub_4029D0",
            "funcStartAddr": "0x4029d0",
            "funcEndAddr": "0x402ac8",
            "decompiledFuncCode": "__int64 __fastcall sub_4029D0(__int64 a1, __int64 a2)\n{\n  __int64 v3; // r9\n  __int64 v4; // r8\n  __int64 result; // rax\n  __int64 v6; // r10\n  __int64 v7; // rax\n  __int64 v8; // rdx\n  __int64 v9; // rsi\n  __int64 v10; // rcx\n  __int64 v11; // rbx\n  _BOOL8 v12; // rax\n  _BOOL8 v13; // r12\n  __int64 v14; // rsi\n  __int64 v15; // r12\n\n  do\n  {\n    v3 = *(_QWORD *)(*(__int64 *)((char *)qword_4050B0\n                                + 4 * ((a1 + a2 + ((unsigned __int64)(a1 + a2) >> 63)) & 0x3FFFFFFFFFFFFFFELL))\n                   + 16);\n    v4 = a2;\n    result = a1;\n    do\n    {\n      v6 = result - 1;\n      do\n      {\n        v7 = v6;\n        v8 = qword_4050B8[v6++];\n      }\n      while ( *(_QWORD *)(v8 + 16) > v3 );\n      v9 = v4 + 1;\n      do\n      {\n        v10 = v9;\n        v11 = qword_4050A8[v9--];\n      }\n      while ( v3 > *(_QWORD *)(v11 + 16) );\n      if ( v6 < v9 )\n      {\n        qword_4050B8[v7] = v11;\n        qword_4050A8[v10] = v8;\n      }\n      v12 = v6 <= v9;\n      v4 = v9 - v12;\n      result = v6 + v12;\n    }\n    while ( result <= v4 );\n    v13 = v6 <= v9;\n    v14 = v9 - v13;\n    v15 = v6 + v13;\n    if ( v14 > a1 )\n      result = sub_4029D0(a1, v14);\n    if ( v15 >= a2 )\n      break;\n    a1 = v15;\n  }\n  while ( v15 < 51 );\n  return result;\n}\n"
        },
        {
            "funcName": "sub_402AD0",
            "funcStartAddr": "0x402ad0",
            "funcEndAddr": "0x402dcf",
            "decompiledFuncCode": "__int64 __fastcall sub_402AD0(__int64 a1, __int64 a2, unsigned __int64 a3, _QWORD *a4)\n{\n  __int64 v6; // rdx\n  __int64 v7; // r15\n  __m128i si128; // xmm5\n  __int64 v9; // rax\n  __m128i v10; // xmm1\n  __m128i v11; // xmm2\n  __m128i v12; // xmm8\n  __m128i v13; // xmm9\n  __m128i v14; // xmm10\n  __m128i v15; // xmm11\n  __m128i v16; // xmm7\n  __m128i v17; // xmm3\n  __m128i v18; // xmm4\n  __int64 v19; // r9\n  __int64 v20; // r10\n  unsigned __int64 v21; // rdi\n  __int64 v22; // rcx\n  __int64 v23; // rbx\n  _QWORD *v24; // rbp\n  __int64 v25; // rcx\n  __int64 v27; // r12\n  unsigned __int64 i; // rbx\n  int v29; // ebp\n  __int64 v30; // rdi\n  unsigned __int64 *v31; // rax\n  __int64 v32; // rcx\n  __int64 v33; // rax\n\n  if ( LOBYTE(xmmword_405BA8[0]) )\n  {\n    v6 = qword_407CA8;\n    if ( qword_407CA8 < 2 )\n    {\n      v7 = 0LL;\nLABEL_19:\n      qword_407CA8 = v7;\n      v20 = qword_407CA0;\n      v19 = qword_407C98;\n      goto LABEL_20;\n    }\n    v21 = 2LL;\n    v7 = 0LL;\n    while ( 1 )\n    {\n      v22 = *(_QWORD *)qword_4050B0[v21];\n      v23 = **(_QWORD **)(v22 + 16) + *(_QWORD *)v22 - **(_QWORD **)(v22 + 8);\n      if ( v23 < 0 )\n      {\n        if ( *(_DWORD *)(v22 + 24) == 1 )\n          goto LABEL_11;\n      }\n      else if ( v23 && *(_DWORD *)(v22 + 24) == 2 )\n      {\nLABEL_11:\n        v24 = (_QWORD *)qword_4050B8[v7];\n        *v24 = v22;\n        ++v7;\n        v24[1] = v23;\n        v25 = -v23;\n        if ( -v23 < 1 )\n          v25 = v23;\n        v24[2] = v25;\n      }\n      if ( v21 <= 0x31 && (__int64)v21++ < v6 )\n        continue;\n      goto LABEL_19;\n    }\n  }\n  si128 = _mm_load_si128((const __m128i *)&xmmword_403160);\n  v9 = 0xFFFFFFFFFFFFF52LL;\n  v10 = _mm_load_si128((const __m128i *)&xmmword_403170);\n  v11 = _mm_shuffle_epi32((__m128i)((unsigned __int64)xmmword_405BA8 + 8), 68);\n  v12 = _mm_load_si128((const __m128i *)&xmmword_403180);\n  v13 = _mm_load_si128((const __m128i *)&xmmword_403190);\n  v14 = _mm_load_si128((const __m128i *)&xmmword_4031A0);\n  v15 = _mm_load_si128((const __m128i *)&xmmword_4031B0);\n  v16 = _mm_load_si128((const __m128i *)&xmmword_4031C0);\n  v17 = _mm_load_si128((const __m128i *)&xmmword_4031D0);\n  do\n  {\n    v18 = _mm_add_epi64(\n            _mm_slli_epi64(_mm_mul_epu32(_mm_srli_epi64(si128, 0x20u), v10), 0x20u),\n            _mm_add_epi64(_mm_mul_epu32(si128, v10), v11));\n    xmmword_405B98[v9] = (__int128)v18;\n    xmmword_405BA8[v9] = (__int128)_mm_add_epi64(v18, v12);\n    xmmword_405BB8[v9] = (__int128)_mm_add_epi64(v18, v13);\n    xmmword_405BC8[v9] = (__int128)_mm_add_epi64(v18, v14);\n    xmmword_405BD8[v9] = (__int128)_mm_add_epi64(v18, v15);\n    xmmword_405BE8[v9] = (__int128)_mm_add_epi64(v18, v16);\n    si128 = _mm_add_epi64(si128, v17);\n    v9 += 6LL;\n  }\n  while ( v9 * 16 );\n  *(_QWORD *)&xmmword_405B98[0] = &unk_407C68;\n  v19 = (a1 - 1) / 300 + 1;\n  qword_407C98 = v19;\n  *((_QWORD *)&xmmword_405B98[0] + 1) = &unk_407C80;\n  LOBYTE(xmmword_405BA8[0]) = 1;\n  qword_407CA0 = 0LL;\n  qword_407CA8 = 0LL;\n  v7 = 0LL;\n  v20 = 0LL;\nLABEL_20:\n  v27 = v20;\n  do\n  {\n    for ( i = a2 + (v27 << 6); i < a3; i += v19 << 6 )\n    {\n      v29 = *(_DWORD *)(i + 24);\n      if ( v29 > 0 )\n      {\n        v30 = **(_QWORD **)(i + 16) + *(_QWORD *)i - **(_QWORD **)(i + 8);\n        if ( v30 < 0 )\n        {\n          if ( v29 == 1 )\n            goto LABEL_30;\n        }\n        else if ( v30 && v29 == 2 )\n        {\nLABEL_30:\n          v31 = (unsigned __int64 *)qword_4050B8[v7++];\n          qword_407CA8 = v7;\n          *v31 = i;\n          v31[1] = v30;\n          v32 = -v30;\n          if ( -v30 < 1 )\n            v32 = v30;\n          v31[2] = v32;\n        }\n      }\n    }\n    if ( ++v27 == v19 )\n      v27 = 0LL;\n  }\n  while ( v7 <= 49 && v27 != v20 );\n  qword_407CA0 = v27;\n  if ( v7 )\n  {\n    sub_4029D0(1LL, v7);\n    v33 = qword_4050B8[0];\n    *a4 = *(_QWORD *)(qword_4050B8[0] + 8);\n    return *(_QWORD *)v33;\n  }\n  else\n  {\n    LOBYTE(xmmword_405BA8[0]) = 0;\n    *a4 = 0LL;\n    return 0LL;\n  }\n}\n"
        },
        {
            "funcName": "init",
            "funcStartAddr": "0x402dd0",
            "funcEndAddr": "0x402e35",
            "decompiledFuncCode": "void __fastcall init(unsigned int a1, __int64 a2, __int64 a3)\n{\n  signed __int64 v4; // rbp\n  __int64 i; // rbx\n\n  v4 = ((char *)&stru_404DF8 - (char *)&off_404DF0) >> 3;\n  init_proc();\n  if ( v4 )\n  {\n    for ( i = 0LL; i != v4; ++i )\n      ((void (__fastcall *)(_QWORD, __int64, __int64))*(&off_404DF0 + i))(a1, a2, a3);\n  }\n}\n"
        },
        {
            "funcName": "fini",
            "funcStartAddr": "0x402e40",
            "funcEndAddr": "0x402e42",
            "decompiledFuncCode": "void fini(void)\n{\n  ;\n}\n"
        }
    ],
    "funcCount": 27
}