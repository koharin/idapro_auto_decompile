FileAST: 
  FuncDef: 
    Decl: main, [], [], [], []
      FuncDecl: 
        ParamList: 
          Decl: argc, [], [], [], []
            TypeDecl: argc, [], None
              IdentifierType: ['int']
          Decl: argv, ['const'], [], [], []
            PtrDecl: []
              PtrDecl: []
                TypeDecl: argv, ['const'], None
                  IdentifierType: ['char']
          Decl: envp, ['const'], [], [], []
            PtrDecl: []
              PtrDecl: []
                TypeDecl: envp, ['const'], None
                  IdentifierType: ['char']
        TypeDecl: main, [], None
          IdentifierType: ['int']
    Compound: 
      Decl: v4, [], [], [], []
        TypeDecl: v4, [], None
          IdentifierType: ['int']
      Decl: v5, [], [], [], []
        TypeDecl: v5, [], None
          IdentifierType: ['unsigned', 'long', 'long']
      Assignment: =
        ID: v5
        FuncCall: 
          ID: __readfsqword
          ExprList: 
            Constant: unsigned int, 0x28u
      FuncCall: 
        ID: __isoc99_scanf
        ExprList: 
          UnaryOp: &
            ID: unk_2004
          UnaryOp: &
            ID: v4
          ID: envp
      If: 
        BinaryOp: !=
          ID: v4
          Constant: int, 1
        Compound: 
          If: 
            BinaryOp: !=
              BinaryOp: &
                ID: v4
                Constant: int, 1
              Constant: int, 0
            Goto: LABEL_7
          While: 
            Constant: int, 1
            Compound: 
              Assignment: /=
                ID: v4
                Constant: int, 2
              If: 
                BinaryOp: ==
                  ID: v4
                  Constant: int, 1
                Break: 
              If: 
                BinaryOp: !=
                  BinaryOp: &
                    ID: v4
                    Constant: int, 1
                  Constant: int, 0
                Label: LABEL_7
                  Assignment: =
                    ID: v4
                    BinaryOp: +
                      BinaryOp: *
                        Constant: int, 3
                        ID: v4
                      Constant: int, 1
      FuncCall: 
        ID: printf
        ExprList: 
          Constant: string, "Always result will be : %d"
          Cast: 
            Typename: None, [], None
              TypeDecl: None, [], None
                IdentifierType: ['unsigned', 'int']
            ID: v4
      Return: 
        Constant: int, 0
