FileAST: 
  FuncDef: 
    Decl: main, [], [], [], []
      FuncDecl: 
        ParamList: 
          Decl: argc, [], [], [], []
            TypeDecl: argc, [], None
              IdentifierType: ['int']
          Decl: argv, ['const'], [], [], []
            PtrDecl: []
              PtrDecl: []
                TypeDecl: argv, ['const'], None
                  IdentifierType: ['char']
          Decl: envp, ['const'], [], [], []
            PtrDecl: []
              PtrDecl: []
                TypeDecl: envp, ['const'], None
                  IdentifierType: ['char']
        TypeDecl: main, [], None
          IdentifierType: ['int']
    Compound: 
      Decl: i, [], [], [], []
        TypeDecl: i, [], None
          IdentifierType: ['int']
      Decl: v5, [], [], [], []
        TypeDecl: v5, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: v6, [], [], [], []
        TypeDecl: v6, [], None
          IdentifierType: ['int']
      Decl: v7, [], [], [], []
        TypeDecl: v7, [], None
          IdentifierType: ['int']
      For: 
        Assignment: =
          ID: i
          Constant: int, 0
        BinaryOp: <=
          ID: i
          Constant: int, 9
        Assignment: =
          ID: i
          BinaryOp: +
            ID: v5
            Constant: int, 1
        Compound: 
          Assignment: =
            ID: v5
            BinaryOp: +
              ID: i
              Constant: int, 1
          FuncCall: 
            ID: printf
            ExprList: 
              Constant: string, "Counting for.. %d\n"
              ID: v5
      While: 
        BinaryOp: <=
          ID: v6
          Constant: int, 9
        FuncCall: 
          ID: printf
          ExprList: 
            Constant: string, "Counting while.. %d\n"
            Cast: 
              Typename: None, [], None
                TypeDecl: None, [], None
                  IdentifierType: ['unsigned', 'int']
              UnaryOp: ++
                ID: v6
      DoWhile: 
        BinaryOp: <=
          ID: v7
          Constant: int, 9
        FuncCall: 
          ID: printf
          ExprList: 
            Constant: string, "Counting while.. %d\n"
            Cast: 
              Typename: None, [], None
                TypeDecl: None, [], None
                  IdentifierType: ['unsigned', 'int']
              UnaryOp: ++
                ID: v7
      Return: 
        Constant: int, 0
